
scbound.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000ffa  0000108e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ffa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f6  00800104  00800104  00001092  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001092  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000167c  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000048c  00000000  00000000  000028c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ec5  00000000  00000000  00002d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000480  00000000  00000000  00003c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059c  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001564  00000000  00000000  00004630  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  00005b94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	e0 c0       	rjmp	.+448    	; 0x1f6 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ef       	ldi	r30, 0xFA	; 250
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 3f       	cpi	r26, 0xFA	; 250
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ad d5       	rcall	.+2906   	; 0xc1e <main>
  c4:	98 c7       	rjmp	.+3888   	; 0xff6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ETIMERTick>:
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	21 f0       	breq	.+8      	; 0xd4 <ETIMERTick+0xc>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	49 f0       	breq	.+18     	; 0xe4 <ETIMERTick+0x1c>
  d2:	05 c0       	rjmp	.+10     	; 0xde <ETIMERTick+0x16>
  d4:	10 92 05 01 	sts	0x0105, r1
  d8:	10 92 04 01 	sts	0x0104, r1
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <ETIMERTick+0x1c>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 05       	cpc	r25, r1
  e2:	f1 f4       	brne	.+60     	; 0x120 <ETIMERTick+0x58>
  e4:	80 91 04 01 	lds	r24, 0x0104
  e8:	90 91 05 01 	lds	r25, 0x0105
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 05 01 	sts	0x0105, r25
  f2:	80 93 04 01 	sts	0x0104, r24
  f6:	80 91 09 01 	lds	r24, 0x0109
  fa:	90 91 0a 01 	lds	r25, 0x010A
  fe:	a0 91 0b 01 	lds	r26, 0x010B
 102:	b0 91 0c 01 	lds	r27, 0x010C
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	a1 1d       	adc	r26, r1
 10a:	b1 1d       	adc	r27, r1
 10c:	80 93 09 01 	sts	0x0109, r24
 110:	90 93 0a 01 	sts	0x010A, r25
 114:	a0 93 0b 01 	sts	0x010B, r26
 118:	b0 93 0c 01 	sts	0x010C, r27
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret

00000122 <initTasks>:
 122:	e1 e1       	ldi	r30, 0x11	; 17
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	11 82       	std	Z+1, r1	; 0x01
 128:	10 82       	st	Z, r1
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	a0 e0       	ldi	r26, 0x00	; 0
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	82 83       	std	Z+2, r24	; 0x02
 134:	93 83       	std	Z+3, r25	; 0x03
 136:	a4 83       	std	Z+4, r26	; 0x04
 138:	b5 83       	std	Z+5, r27	; 0x05
 13a:	86 83       	std	Z+6, r24	; 0x06
 13c:	97 83       	std	Z+7, r25	; 0x07
 13e:	a0 87       	std	Z+8, r26	; 0x08
 140:	b1 87       	std	Z+9, r27	; 0x09
 142:	84 e6       	ldi	r24, 0x64	; 100
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	93 87       	std	Z+11, r25	; 0x0b
 148:	82 87       	std	Z+10, r24	; 0x0a
 14a:	08 95       	ret

0000014c <TimerOn>:
 14c:	8b e0       	ldi	r24, 0x0B	; 11
 14e:	80 93 81 00 	sts	0x0081, r24
 152:	8d e7       	ldi	r24, 0x7D	; 125
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 89 00 	sts	0x0089, r25
 15a:	80 93 88 00 	sts	0x0088, r24
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	80 93 6f 00 	sts	0x006F, r24
 164:	10 92 85 00 	sts	0x0085, r1
 168:	10 92 84 00 	sts	0x0084, r1
 16c:	80 91 00 01 	lds	r24, 0x0100
 170:	90 91 01 01 	lds	r25, 0x0101
 174:	a0 91 02 01 	lds	r26, 0x0102
 178:	b0 91 03 01 	lds	r27, 0x0103
 17c:	80 93 0d 01 	sts	0x010D, r24
 180:	90 93 0e 01 	sts	0x010E, r25
 184:	a0 93 0f 01 	sts	0x010F, r26
 188:	b0 93 10 01 	sts	0x0110, r27
 18c:	8f b7       	in	r24, 0x3f	; 63
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	8f bf       	out	0x3f, r24	; 63
 192:	08 95       	ret

00000194 <TimerISR>:
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	e1 e1       	ldi	r30, 0x11	; 17
 19a:	f1 e0       	ldi	r31, 0x01	; 1
 19c:	86 81       	ldd	r24, Z+6	; 0x06
 19e:	97 81       	ldd	r25, Z+7	; 0x07
 1a0:	a0 85       	ldd	r26, Z+8	; 0x08
 1a2:	b1 85       	ldd	r27, Z+9	; 0x09
 1a4:	42 81       	ldd	r20, Z+2	; 0x02
 1a6:	53 81       	ldd	r21, Z+3	; 0x03
 1a8:	64 81       	ldd	r22, Z+4	; 0x04
 1aa:	75 81       	ldd	r23, Z+5	; 0x05
 1ac:	84 17       	cp	r24, r20
 1ae:	95 07       	cpc	r25, r21
 1b0:	a6 07       	cpc	r26, r22
 1b2:	b7 07       	cpc	r27, r23
 1b4:	90 f0       	brcs	.+36     	; 0x1da <TimerISR+0x46>
 1b6:	ef 01       	movw	r28, r30
 1b8:	02 84       	ldd	r0, Z+10	; 0x0a
 1ba:	f3 85       	ldd	r31, Z+11	; 0x0b
 1bc:	e0 2d       	mov	r30, r0
 1be:	88 81       	ld	r24, Y
 1c0:	99 81       	ldd	r25, Y+1	; 0x01
 1c2:	09 95       	icall
 1c4:	99 83       	std	Y+1, r25	; 0x01
 1c6:	88 83       	st	Y, r24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	a0 e0       	ldi	r26, 0x00	; 0
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	8e 83       	std	Y+6, r24	; 0x06
 1d2:	9f 83       	std	Y+7, r25	; 0x07
 1d4:	a8 87       	std	Y+8, r26	; 0x08
 1d6:	b9 87       	std	Y+9, r27	; 0x09
 1d8:	0b c0       	rjmp	.+22     	; 0x1f0 <TimerISR+0x5c>
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	a1 1d       	adc	r26, r1
 1de:	b1 1d       	adc	r27, r1
 1e0:	80 93 17 01 	sts	0x0117, r24
 1e4:	90 93 18 01 	sts	0x0118, r25
 1e8:	a0 93 19 01 	sts	0x0119, r26
 1ec:	b0 93 1a 01 	sts	0x011A, r27
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <__vector_13>:
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	0b b6       	in	r0, 0x3b	; 59
 202:	0f 92       	push	r0
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
 21c:	80 91 0d 01 	lds	r24, 0x010D
 220:	90 91 0e 01 	lds	r25, 0x010E
 224:	a0 91 0f 01 	lds	r26, 0x010F
 228:	b0 91 10 01 	lds	r27, 0x0110
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	a1 09       	sbc	r26, r1
 230:	b1 09       	sbc	r27, r1
 232:	80 93 0d 01 	sts	0x010D, r24
 236:	90 93 0e 01 	sts	0x010E, r25
 23a:	a0 93 0f 01 	sts	0x010F, r26
 23e:	b0 93 10 01 	sts	0x0110, r27
 242:	89 2b       	or	r24, r25
 244:	8a 2b       	or	r24, r26
 246:	8b 2b       	or	r24, r27
 248:	89 f4       	brne	.+34     	; 0x26c <__vector_13+0x76>
 24a:	a4 df       	rcall	.-184    	; 0x194 <TimerISR>
 24c:	80 91 00 01 	lds	r24, 0x0100
 250:	90 91 01 01 	lds	r25, 0x0101
 254:	a0 91 02 01 	lds	r26, 0x0102
 258:	b0 91 03 01 	lds	r27, 0x0103
 25c:	80 93 0d 01 	sts	0x010D, r24
 260:	90 93 0e 01 	sts	0x010E, r25
 264:	a0 93 0f 01 	sts	0x010F, r26
 268:	b0 93 10 01 	sts	0x0110, r27
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	7f 91       	pop	r23
 27a:	6f 91       	pop	r22
 27c:	5f 91       	pop	r21
 27e:	4f 91       	pop	r20
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0b be       	out	0x3b, r0	; 59
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <clearSingleMatrix>:
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
 29a:	60 97       	sbiw	r28, 0x10	; 16
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	de bf       	out	0x3e, r29	; 62
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	cd bf       	out	0x3d, r28	; 61
 2a6:	29 87       	std	Y+9, r18	; 0x09
 2a8:	3a 87       	std	Y+10, r19	; 0x0a
 2aa:	4b 87       	std	Y+11, r20	; 0x0b
 2ac:	5c 87       	std	Y+12, r21	; 0x0c
 2ae:	6d 87       	std	Y+13, r22	; 0x0d
 2b0:	7e 87       	std	Y+14, r23	; 0x0e
 2b2:	8f 87       	std	Y+15, r24	; 0x0f
 2b4:	98 8b       	std	Y+16, r25	; 0x10
 2b6:	fe 01       	movw	r30, r28
 2b8:	39 96       	adiw	r30, 0x09	; 9
 2ba:	9e 01       	movw	r18, r28
 2bc:	2f 5e       	subi	r18, 0xEF	; 239
 2be:	3f 4f       	sbci	r19, 0xFF	; 255
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	81 93       	st	Z+, r24
 2c4:	e2 17       	cp	r30, r18
 2c6:	f3 07       	cpc	r31, r19
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <clearSingleMatrix+0x30>
 2ca:	88 e0       	ldi	r24, 0x08	; 8
 2cc:	fe 01       	movw	r30, r28
 2ce:	39 96       	adiw	r30, 0x09	; 9
 2d0:	de 01       	movw	r26, r28
 2d2:	11 96       	adiw	r26, 0x01	; 1
 2d4:	01 90       	ld	r0, Z+
 2d6:	0d 92       	st	X+, r0
 2d8:	8a 95       	dec	r24
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <clearSingleMatrix+0x42>
 2dc:	29 81       	ldd	r18, Y+1	; 0x01
 2de:	3a 81       	ldd	r19, Y+2	; 0x02
 2e0:	4b 81       	ldd	r20, Y+3	; 0x03
 2e2:	5c 81       	ldd	r21, Y+4	; 0x04
 2e4:	6d 81       	ldd	r22, Y+5	; 0x05
 2e6:	7e 81       	ldd	r23, Y+6	; 0x06
 2e8:	8f 81       	ldd	r24, Y+7	; 0x07
 2ea:	98 85       	ldd	r25, Y+8	; 0x08
 2ec:	60 96       	adiw	r28, 0x10	; 16
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <initSingleUserMatrix>:
 2fe:	ef 92       	push	r14
 300:	ff 92       	push	r15
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	2a 97       	sbiw	r28, 0x0a	; 10
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	f8 94       	cli
 314:	de bf       	out	0x3e, r29	; 62
 316:	0f be       	out	0x3f, r0	; 63
 318:	cd bf       	out	0x3d, r28	; 61
 31a:	bc 01       	movw	r22, r24
 31c:	e9 82       	std	Y+1, r14	; 0x01
 31e:	fa 82       	std	Y+2, r15	; 0x02
 320:	0b 83       	std	Y+3, r16	; 0x03
 322:	1c 83       	std	Y+4, r17	; 0x04
 324:	2d 83       	std	Y+5, r18	; 0x05
 326:	3e 83       	std	Y+6, r19	; 0x06
 328:	4f 83       	std	Y+7, r20	; 0x07
 32a:	58 87       	std	Y+8, r21	; 0x08
 32c:	fe 01       	movw	r30, r28
 32e:	31 96       	adiw	r30, 0x01	; 1
 330:	9e 01       	movw	r18, r28
 332:	27 5f       	subi	r18, 0xF7	; 247
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	9f ef       	ldi	r25, 0xFF	; 255
 338:	91 93       	st	Z+, r25
 33a:	e2 17       	cp	r30, r18
 33c:	f3 07       	cpc	r31, r19
 33e:	e1 f7       	brne	.-8      	; 0x338 <initSingleUserMatrix+0x3a>
 340:	99 81       	ldd	r25, Y+1	; 0x01
 342:	97 7f       	andi	r25, 0xF7	; 247
 344:	99 83       	std	Y+1, r25	; 0x01
 346:	19 86       	std	Y+9, r1	; 0x09
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	8a 87       	std	Y+10, r24	; 0x0a
 34c:	8a e0       	ldi	r24, 0x0A	; 10
 34e:	fe 01       	movw	r30, r28
 350:	31 96       	adiw	r30, 0x01	; 1
 352:	db 01       	movw	r26, r22
 354:	01 90       	ld	r0, Z+
 356:	0d 92       	st	X+, r0
 358:	8a 95       	dec	r24
 35a:	e1 f7       	brne	.-8      	; 0x354 <initSingleUserMatrix+0x56>
 35c:	cb 01       	movw	r24, r22
 35e:	2a 96       	adiw	r28, 0x0a	; 10
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	08 95       	ret

00000378 <shiftSR>:
 378:	85 b9       	out	0x05, r24	; 5
 37a:	29 9a       	sbi	0x05, 1	; 5
 37c:	15 b8       	out	0x05, r1	; 5
 37e:	08 95       	ret

00000380 <shiftWhole>:
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	e1 e0       	ldi	r30, 0x01	; 1
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	71 e0       	ldi	r23, 0x01	; 1
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	af 01       	movw	r20, r30
 38e:	02 2e       	mov	r0, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <shiftWhole+0x16>
 392:	44 0f       	add	r20, r20
 394:	55 1f       	adc	r21, r21
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <shiftWhole+0x12>
 39a:	48 23       	and	r20, r24
 39c:	97 2f       	mov	r25, r23
 39e:	09 f4       	brne	.+2      	; 0x3a2 <shiftWhole+0x22>
 3a0:	96 2f       	mov	r25, r22
 3a2:	95 b9       	out	0x05, r25	; 5
 3a4:	29 9a       	sbi	0x05, 1	; 5
 3a6:	65 b9       	out	0x05, r22	; 5
 3a8:	2f 5f       	subi	r18, 0xFF	; 255
 3aa:	3f 4f       	sbci	r19, 0xFF	; 255
 3ac:	28 30       	cpi	r18, 0x08	; 8
 3ae:	31 05       	cpc	r19, r1
 3b0:	69 f7       	brne	.-38     	; 0x38c <shiftWhole+0xc>
 3b2:	84 e0       	ldi	r24, 0x04	; 4
 3b4:	85 b9       	out	0x05, r24	; 5
 3b6:	08 95       	ret

000003b8 <clearSR>:
 3b8:	cf 93       	push	r28
 3ba:	c8 e0       	ldi	r28, 0x08	; 8
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	dc df       	rcall	.-72     	; 0x378 <shiftSR>
 3c0:	c1 50       	subi	r28, 0x01	; 1
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <clearSR+0x4>
 3c4:	84 e0       	ldi	r24, 0x04	; 4
 3c6:	85 b9       	out	0x05, r24	; 5
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <d3_clearSR>:
 3cc:	f5 df       	rcall	.-22     	; 0x3b8 <clearSR>
 3ce:	f4 df       	rcall	.-24     	; 0x3b8 <clearSR>
 3d0:	f3 cf       	rjmp	.-26     	; 0x3b8 <clearSR>
 3d2:	08 95       	ret

000003d4 <d3_setRowMatrixColor>:
 3d4:	0f 93       	push	r16
 3d6:	1f 93       	push	r17
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	18 2f       	mov	r17, r24
 3de:	c9 2f       	mov	r28, r25
 3e0:	06 2f       	mov	r16, r22
 3e2:	d4 2f       	mov	r29, r20
 3e4:	f3 df       	rcall	.-26     	; 0x3cc <d3_clearSR>
 3e6:	51 e0       	ldi	r21, 0x01	; 1
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <d3_setRowMatrixColor+0x18>
 3ea:	55 0f       	add	r21, r21
 3ec:	0a 95       	dec	r16
 3ee:	ea f7       	brpl	.-6      	; 0x3ea <d3_setRowMatrixColor+0x16>
 3f0:	e1 2f       	mov	r30, r17
 3f2:	fc 2f       	mov	r31, r28
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	c0 e0       	ldi	r28, 0x00	; 0
 3fa:	a1 e0       	ldi	r26, 0x01	; 1
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	91 91       	ld	r25, Z+
 400:	95 23       	and	r25, r21
 402:	49 f0       	breq	.+18     	; 0x416 <d3_setRowMatrixColor+0x42>
 404:	cd 01       	movw	r24, r26
 406:	02 2e       	mov	r0, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <d3_setRowMatrixColor+0x3a>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	0a 94       	dec	r0
 410:	e2 f7       	brpl	.-8      	; 0x40a <d3_setRowMatrixColor+0x36>
 412:	c8 2b       	or	r28, r24
 414:	09 c0       	rjmp	.+18     	; 0x428 <d3_setRowMatrixColor+0x54>
 416:	bd 01       	movw	r22, r26
 418:	02 2e       	mov	r0, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <d3_setRowMatrixColor+0x4c>
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <d3_setRowMatrixColor+0x48>
 424:	60 95       	com	r22
 426:	c6 23       	and	r28, r22
 428:	2f 5f       	subi	r18, 0xFF	; 255
 42a:	3f 4f       	sbci	r19, 0xFF	; 255
 42c:	28 30       	cpi	r18, 0x08	; 8
 42e:	31 05       	cpc	r19, r1
 430:	31 f7       	brne	.-52     	; 0x3fe <d3_setRowMatrixColor+0x2a>
 432:	d1 30       	cpi	r29, 0x01	; 1
 434:	71 f0       	breq	.+28     	; 0x452 <d3_setRowMatrixColor+0x7e>
 436:	18 f0       	brcs	.+6      	; 0x43e <d3_setRowMatrixColor+0x6a>
 438:	d2 30       	cpi	r29, 0x02	; 2
 43a:	31 f0       	breq	.+12     	; 0x448 <d3_setRowMatrixColor+0x74>
 43c:	0e c0       	rjmp	.+28     	; 0x45a <d3_setRowMatrixColor+0x86>
 43e:	bc df       	rcall	.-136    	; 0x3b8 <clearSR>
 440:	8c 2f       	mov	r24, r28
 442:	9e df       	rcall	.-196    	; 0x380 <shiftWhole>
 444:	b9 df       	rcall	.-142    	; 0x3b8 <clearSR>
 446:	09 c0       	rjmp	.+18     	; 0x45a <d3_setRowMatrixColor+0x86>
 448:	8c 2f       	mov	r24, r28
 44a:	9a df       	rcall	.-204    	; 0x380 <shiftWhole>
 44c:	b5 df       	rcall	.-150    	; 0x3b8 <clearSR>
 44e:	b4 df       	rcall	.-152    	; 0x3b8 <clearSR>
 450:	04 c0       	rjmp	.+8      	; 0x45a <d3_setRowMatrixColor+0x86>
 452:	b2 df       	rcall	.-156    	; 0x3b8 <clearSR>
 454:	b1 df       	rcall	.-158    	; 0x3b8 <clearSR>
 456:	8c 2f       	mov	r24, r28
 458:	93 df       	rcall	.-218    	; 0x380 <shiftWhole>
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	08 95       	ret

00000464 <d3_setMatrixColor>:
 464:	cf 92       	push	r12
 466:	df 92       	push	r13
 468:	ff 92       	push	r15
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	6c 01       	movw	r12, r24
 474:	f6 2e       	mov	r15, r22
 476:	c0 e0       	ldi	r28, 0x00	; 0
 478:	d0 e0       	ldi	r29, 0x00	; 0
 47a:	01 e0       	ldi	r16, 0x01	; 1
 47c:	10 e0       	ldi	r17, 0x00	; 0
 47e:	98 01       	movw	r18, r16
 480:	0c 2e       	mov	r0, r28
 482:	02 c0       	rjmp	.+4      	; 0x488 <d3_setMatrixColor+0x24>
 484:	22 0f       	add	r18, r18
 486:	33 1f       	adc	r19, r19
 488:	0a 94       	dec	r0
 48a:	e2 f7       	brpl	.-8      	; 0x484 <d3_setMatrixColor+0x20>
 48c:	28 b9       	out	0x08, r18	; 8
 48e:	4f 2d       	mov	r20, r15
 490:	6c 2f       	mov	r22, r28
 492:	c6 01       	movw	r24, r12
 494:	9f df       	rcall	.-194    	; 0x3d4 <d3_setRowMatrixColor>
 496:	8f e8       	ldi	r24, 0x8F	; 143
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <d3_setMatrixColor+0x36>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <d3_setMatrixColor+0x3c>
 4a0:	00 00       	nop
 4a2:	94 df       	rcall	.-216    	; 0x3cc <d3_clearSR>
 4a4:	21 96       	adiw	r28, 0x01	; 1
 4a6:	c8 30       	cpi	r28, 0x08	; 8
 4a8:	d1 05       	cpc	r29, r1
 4aa:	49 f7       	brne	.-46     	; 0x47e <d3_setMatrixColor+0x1a>
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	ff 90       	pop	r15
 4b6:	df 90       	pop	r13
 4b8:	cf 90       	pop	r12
 4ba:	08 95       	ret

000004bc <initExplosions>:
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	cd b7       	in	r28, 0x3d	; 61
 4c2:	de b7       	in	r29, 0x3e	; 62
 4c4:	9c 01       	movw	r18, r24
 4c6:	92 e1       	ldi	r25, 0x12	; 18
 4c8:	91 50       	subi	r25, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <initExplosions+0xc>
 4cc:	c7 54       	subi	r28, 0x47	; 71
 4ce:	df 4f       	sbci	r29, 0xFF	; 255
 4d0:	18 82       	st	Y, r1
 4d2:	c9 5b       	subi	r28, 0xB9	; 185
 4d4:	d0 40       	sbci	r29, 0x00	; 0
 4d6:	c6 54       	subi	r28, 0x46	; 70
 4d8:	df 4f       	sbci	r29, 0xFF	; 255
 4da:	18 82       	st	Y, r1
 4dc:	ca 5b       	subi	r28, 0xBA	; 186
 4de:	d0 40       	sbci	r29, 0x00	; 0
 4e0:	86 eb       	ldi	r24, 0xB6	; 182
 4e2:	fe 01       	movw	r30, r28
 4e4:	35 96       	adiw	r30, 0x05	; 5
 4e6:	d9 01       	movw	r26, r18
 4e8:	01 90       	ld	r0, Z+
 4ea:	0d 92       	st	X+, r0
 4ec:	8a 95       	dec	r24
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <initExplosions+0x2c>
 4f0:	c9 01       	movw	r24, r18
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <initUSART>:
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	81 f0       	breq	.+32     	; 0x51c <initUSART+0x24>
 4fc:	e1 ec       	ldi	r30, 0xC1	; 193
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	88 61       	ori	r24, 0x18	; 24
 504:	80 83       	st	Z, r24
 506:	e2 ec       	ldi	r30, 0xC2	; 194
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	86 60       	ori	r24, 0x06	; 6
 50e:	80 83       	st	Z, r24
 510:	83 e3       	ldi	r24, 0x33	; 51
 512:	80 93 c4 00 	sts	0x00C4, r24
 516:	10 92 c5 00 	sts	0x00C5, r1
 51a:	08 95       	ret
 51c:	e9 ec       	ldi	r30, 0xC9	; 201
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	88 61       	ori	r24, 0x18	; 24
 524:	80 83       	st	Z, r24
 526:	ea ec       	ldi	r30, 0xCA	; 202
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	86 60       	ori	r24, 0x06	; 6
 52e:	80 83       	st	Z, r24
 530:	83 e3       	ldi	r24, 0x33	; 51
 532:	80 93 cc 00 	sts	0x00CC, r24
 536:	10 92 cd 00 	sts	0x00CD, r1
 53a:	08 95       	ret

0000053c <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 53c:	61 30       	cpi	r22, 0x01	; 1
 53e:	41 f0       	breq	.+16     	; 0x550 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 540:	e0 ec       	ldi	r30, 0xC0	; 192
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	90 81       	ld	r25, Z
 546:	95 ff       	sbrs	r25, 5
 548:	fd cf       	rjmp	.-6      	; 0x544 <USART_Send+0x8>
		UDR0 = sendMe;
 54a:	80 93 c6 00 	sts	0x00C6, r24
 54e:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 550:	e8 ec       	ldi	r30, 0xC8	; 200
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	90 81       	ld	r25, Z
 556:	95 ff       	sbrs	r25, 5
 558:	fd cf       	rjmp	.-6      	; 0x554 <USART_Send+0x18>
		UDR1 = sendMe;
 55a:	80 93 ce 00 	sts	0x00CE, r24
 55e:	08 95       	ret

00000560 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 560:	81 30       	cpi	r24, 0x01	; 1
 562:	41 f0       	breq	.+16     	; 0x574 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 564:	e0 ec       	ldi	r30, 0xC0	; 192
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	88 23       	and	r24, r24
 56c:	ec f7       	brge	.-6      	; 0x568 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 56e:	80 91 c6 00 	lds	r24, 0x00C6
 572:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 574:	e8 ec       	ldi	r30, 0xC8	; 200
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	88 23       	and	r24, r24
 57c:	ec f7       	brge	.-6      	; 0x578 <USART_Receive+0x18>
		return UDR1;
 57e:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
 582:	08 95       	ret

00000584 <DeathTick>:
			contClock++;
	}
	return state;
}

unsigned char DeathTick() {	
 584:	ef 92       	push	r14
 586:	ff 92       	push	r15
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	cd b7       	in	r28, 0x3d	; 61
 592:	de b7       	in	r29, 0x3e	; 62
 594:	2a 97       	sbiw	r28, 0x0a	; 10
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	f8 94       	cli
 59a:	de bf       	out	0x3e, r29	; 62
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	cd bf       	out	0x3d, r28	; 61
	if ((displayBlank == 0) && GetBit(explosions.matricies[explosions.displayIndex].m[userMatrix.row], userMatrix.column) == 0) {
 5a0:	80 91 08 01 	lds	r24, 0x0108
 5a4:	81 11       	cpse	r24, r1
 5a6:	41 c0       	rjmp	.+130    	; 0x62a <DeathTick+0xa6>
 5a8:	e7 ee       	ldi	r30, 0xE7	; 231
 5aa:	f1 e0       	ldi	r31, 0x01	; 1
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	01 84       	ldd	r0, Z+9	; 0x09
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DeathTick+0x34>
 5b4:	22 0f       	add	r18, r18
 5b6:	33 1f       	adc	r19, r19
 5b8:	0a 94       	dec	r0
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DeathTick+0x30>
 5bc:	90 91 e6 01 	lds	r25, 0x01E6
 5c0:	e0 85       	ldd	r30, Z+8	; 0x08
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	48 e0       	ldi	r20, 0x08	; 8
 5c6:	94 9f       	mul	r25, r20
 5c8:	e0 0d       	add	r30, r0
 5ca:	f1 1d       	adc	r31, r1
 5cc:	11 24       	eor	r1, r1
 5ce:	ef 5c       	subi	r30, 0xCF	; 207
 5d0:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
 5d2:	90 81       	ld	r25, Z
 5d4:	29 23       	and	r18, r25
 5d6:	61 f5       	brne	.+88     	; 0x630 <DeathTick+0xac>
		userMatrix = initSingleUserMatrix(userMatrix);
 5d8:	e0 90 e7 01 	lds	r14, 0x01E7
 5dc:	f0 90 e8 01 	lds	r15, 0x01E8
 5e0:	00 91 e9 01 	lds	r16, 0x01E9
 5e4:	10 91 ea 01 	lds	r17, 0x01EA
 5e8:	20 91 eb 01 	lds	r18, 0x01EB
 5ec:	30 91 ec 01 	lds	r19, 0x01EC
 5f0:	40 91 ed 01 	lds	r20, 0x01ED
 5f4:	50 91 ee 01 	lds	r21, 0x01EE
 5f8:	60 91 ef 01 	lds	r22, 0x01EF
 5fc:	70 91 f0 01 	lds	r23, 0x01F0
 600:	ce 01       	movw	r24, r28
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	7c de       	rcall	.-776    	; 0x2fe <initSingleUserMatrix>
 606:	8a e0       	ldi	r24, 0x0A	; 10
 608:	fe 01       	movw	r30, r28
 60a:	31 96       	adiw	r30, 0x01	; 1
 60c:	a7 ee       	ldi	r26, 0xE7	; 231
 60e:	b1 e0       	ldi	r27, 0x01	; 1
 610:	01 90       	ld	r0, Z+
 612:	0d 92       	st	X+, r0
 614:	8a 95       	dec	r24
 616:	e1 f7       	brne	.-8      	; 0x610 <DeathTick+0x8c>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 618:	80 91 c0 00 	lds	r24, 0x00C0
		if (USART_IsSendReady(0)) {
 61c:	85 ff       	sbrs	r24, 5
 61e:	07 c0       	rjmp	.+14     	; 0x62e <DeathTick+0xaa>
			USART_Send(0x00, 0);
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	8b df       	rcall	.-234    	; 0x53c <USART_Send>
		}
		return 1;
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	03 c0       	rjmp	.+6      	; 0x630 <DeathTick+0xac>
	} else {
		// nothing
		return 0;
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	01 c0       	rjmp	.+2      	; 0x630 <DeathTick+0xac>
	if ((displayBlank == 0) && GetBit(explosions.matricies[explosions.displayIndex].m[userMatrix.row], userMatrix.column) == 0) {
		userMatrix = initSingleUserMatrix(userMatrix);
		if (USART_IsSendReady(0)) {
			USART_Send(0x00, 0);
		}
		return 1;
 62e:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		// nothing
		return 0;
	}
}
 630:	2a 96       	adiw	r28, 0x0a	; 10
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	f8 94       	cli
 636:	de bf       	out	0x3e, r29	; 62
 638:	0f be       	out	0x3f, r0	; 63
 63a:	cd bf       	out	0x3d, r28	; 61
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	1f 91       	pop	r17
 642:	0f 91       	pop	r16
 644:	ff 90       	pop	r15
 646:	ef 90       	pop	r14
 648:	08 95       	ret

0000064a <ExpTick>:
		default:
			break;
	}	
}

Explosions ExpTick(Explosions explosions) {	
 64a:	cf 92       	push	r12
 64c:	df 92       	push	r13
 64e:	ef 92       	push	r14
 650:	ff 92       	push	r15
 652:	0f 93       	push	r16
 654:	1f 93       	push	r17
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	8c 01       	movw	r16, r24
	// Return if empty (Protection code)
	if (explosions.index == 0) {
 660:	c1 54       	subi	r28, 0x41	; 65
 662:	df 4f       	sbci	r29, 0xFF	; 255
 664:	88 81       	ld	r24, Y
 666:	cf 5b       	subi	r28, 0xBF	; 191
 668:	d0 40       	sbci	r29, 0x00	; 0
 66a:	81 11       	cpse	r24, r1
 66c:	09 c0       	rjmp	.+18     	; 0x680 <ExpTick+0x36>
		return explosions;
 66e:	86 eb       	ldi	r24, 0xB6	; 182
 670:	fe 01       	movw	r30, r28
 672:	3b 96       	adiw	r30, 0x0b	; 11
 674:	d8 01       	movw	r26, r16
 676:	01 90       	ld	r0, Z+
 678:	0d 92       	st	X+, r0
 67a:	8a 95       	dec	r24
 67c:	e1 f7       	brne	.-8      	; 0x676 <ExpTick+0x2c>
 67e:	a6 c0       	rjmp	.+332    	; 0x7cc <ExpTick+0x182>
	} 
	
	if (explosions.displayIndex >= explosions.index) {
 680:	c0 54       	subi	r28, 0x40	; 64
 682:	df 4f       	sbci	r29, 0xFF	; 255
 684:	98 81       	ld	r25, Y
 686:	c0 5c       	subi	r28, 0xC0	; 192
 688:	d0 40       	sbci	r29, 0x00	; 0
 68a:	98 17       	cp	r25, r24
 68c:	28 f0       	brcs	.+10     	; 0x698 <ExpTick+0x4e>
		explosions.displayIndex = 0;
 68e:	c0 54       	subi	r28, 0x40	; 64
 690:	df 4f       	sbci	r29, 0xFF	; 255
 692:	18 82       	st	Y, r1
 694:	c0 5c       	subi	r28, 0xC0	; 192
 696:	d0 40       	sbci	r29, 0x00	; 0
	}
	
	if (displayBlank == 0)
 698:	80 91 08 01 	lds	r24, 0x0108
 69c:	81 11       	cpse	r24, r1
 69e:	12 c0       	rjmp	.+36     	; 0x6c4 <ExpTick+0x7a>
		d3_setMatrixColor(explosions.matricies[explosions.displayIndex].m, RED);
 6a0:	c0 54       	subi	r28, 0x40	; 64
 6a2:	df 4f       	sbci	r29, 0xFF	; 255
 6a4:	88 81       	ld	r24, Y
 6a6:	c0 5c       	subi	r28, 0xC0	; 192
 6a8:	d0 40       	sbci	r29, 0x00	; 0
 6aa:	60 e0       	ldi	r22, 0x00	; 0
 6ac:	2b e0       	ldi	r18, 0x0B	; 11
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	2c 0f       	add	r18, r28
 6b2:	3d 1f       	adc	r19, r29
 6b4:	48 e0       	ldi	r20, 0x08	; 8
 6b6:	84 9f       	mul	r24, r20
 6b8:	20 0d       	add	r18, r0
 6ba:	31 1d       	adc	r19, r1
 6bc:	11 24       	eor	r1, r1
 6be:	c9 01       	movw	r24, r18
 6c0:	d1 de       	rcall	.-606    	; 0x464 <d3_setMatrixColor>
 6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <ExpTick+0x88>
	else if (displayBlank == 1)
 6c4:	81 30       	cpi	r24, 0x01	; 1
 6c6:	09 f0       	breq	.+2      	; 0x6ca <ExpTick+0x80>
 6c8:	79 c0       	rjmp	.+242    	; 0x7bc <ExpTick+0x172>
		d3_setMatrixColor(blankMatrix.m, RED);
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	80 e2       	ldi	r24, 0x20	; 32
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	c9 de       	rcall	.-622    	; 0x464 <d3_setMatrixColor>
	
	if (displayBlank == 0 && contClock >= (explosions.timeDuration[explosions.displayIndex] * 10)) {
 6d2:	80 91 08 01 	lds	r24, 0x0108
 6d6:	81 11       	cpse	r24, r1
 6d8:	3c c0       	rjmp	.+120    	; 0x752 <ExpTick+0x108>
 6da:	c0 54       	subi	r28, 0x40	; 64
 6dc:	df 4f       	sbci	r29, 0xFF	; 255
 6de:	88 81       	ld	r24, Y
 6e0:	c0 5c       	subi	r28, 0xC0	; 192
 6e2:	d0 40       	sbci	r29, 0x00	; 0
 6e4:	ed ea       	ldi	r30, 0xAD	; 173
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	ec 0f       	add	r30, r28
 6ea:	fd 1f       	adc	r31, r29
 6ec:	e8 0f       	add	r30, r24
 6ee:	f1 1d       	adc	r31, r1
 6f0:	20 81       	ld	r18, Z
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	a9 01       	movw	r20, r18
 6f6:	44 0f       	add	r20, r20
 6f8:	55 1f       	adc	r21, r21
 6fa:	22 0f       	add	r18, r18
 6fc:	33 1f       	adc	r19, r19
 6fe:	22 0f       	add	r18, r18
 700:	33 1f       	adc	r19, r19
 702:	22 0f       	add	r18, r18
 704:	33 1f       	adc	r19, r19
 706:	42 0f       	add	r20, r18
 708:	53 1f       	adc	r21, r19
 70a:	05 2e       	mov	r0, r21
 70c:	00 0c       	add	r0, r0
 70e:	66 0b       	sbc	r22, r22
 710:	77 0b       	sbc	r23, r23
 712:	c0 90 09 01 	lds	r12, 0x0109
 716:	d0 90 0a 01 	lds	r13, 0x010A
 71a:	e0 90 0b 01 	lds	r14, 0x010B
 71e:	f0 90 0c 01 	lds	r15, 0x010C
 722:	c4 16       	cp	r12, r20
 724:	d5 06       	cpc	r13, r21
 726:	e6 06       	cpc	r14, r22
 728:	f7 06       	cpc	r15, r23
 72a:	08 f4       	brcc	.+2      	; 0x72e <ExpTick+0xe4>
 72c:	47 c0       	rjmp	.+142    	; 0x7bc <ExpTick+0x172>
		displayBlank = 1;
 72e:	91 e0       	ldi	r25, 0x01	; 1
 730:	90 93 08 01 	sts	0x0108, r25
		explosions.displayIndex++;
 734:	8f 5f       	subi	r24, 0xFF	; 255
 736:	c0 54       	subi	r28, 0x40	; 64
 738:	df 4f       	sbci	r29, 0xFF	; 255
 73a:	88 83       	st	Y, r24
 73c:	c0 5c       	subi	r28, 0xC0	; 192
 73e:	d0 40       	sbci	r29, 0x00	; 0
		contClock = 0;
 740:	10 92 09 01 	sts	0x0109, r1
 744:	10 92 0a 01 	sts	0x010A, r1
 748:	10 92 0b 01 	sts	0x010B, r1
 74c:	10 92 0c 01 	sts	0x010C, r1
 750:	35 c0       	rjmp	.+106    	; 0x7bc <ExpTick+0x172>
	} else if (displayBlank == 1 && contClock >= (explosions.timeBetween[explosions.displayIndex] * 10)) {
 752:	81 30       	cpi	r24, 0x01	; 1
 754:	99 f5       	brne	.+102    	; 0x7bc <ExpTick+0x172>
 756:	c0 54       	subi	r28, 0x40	; 64
 758:	df 4f       	sbci	r29, 0xFF	; 255
 75a:	88 81       	ld	r24, Y
 75c:	c0 5c       	subi	r28, 0xC0	; 192
 75e:	d0 40       	sbci	r29, 0x00	; 0
 760:	eb e9       	ldi	r30, 0x9B	; 155
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	ec 0f       	add	r30, r28
 766:	fd 1f       	adc	r31, r29
 768:	e8 0f       	add	r30, r24
 76a:	f1 1d       	adc	r31, r1
 76c:	20 81       	ld	r18, Z
 76e:	30 e0       	ldi	r19, 0x00	; 0
 770:	c9 01       	movw	r24, r18
 772:	88 0f       	add	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	22 0f       	add	r18, r18
 778:	33 1f       	adc	r19, r19
 77a:	22 0f       	add	r18, r18
 77c:	33 1f       	adc	r19, r19
 77e:	22 0f       	add	r18, r18
 780:	33 1f       	adc	r19, r19
 782:	82 0f       	add	r24, r18
 784:	93 1f       	adc	r25, r19
 786:	09 2e       	mov	r0, r25
 788:	00 0c       	add	r0, r0
 78a:	aa 0b       	sbc	r26, r26
 78c:	bb 0b       	sbc	r27, r27
 78e:	40 91 09 01 	lds	r20, 0x0109
 792:	50 91 0a 01 	lds	r21, 0x010A
 796:	60 91 0b 01 	lds	r22, 0x010B
 79a:	70 91 0c 01 	lds	r23, 0x010C
 79e:	48 17       	cp	r20, r24
 7a0:	59 07       	cpc	r21, r25
 7a2:	6a 07       	cpc	r22, r26
 7a4:	7b 07       	cpc	r23, r27
 7a6:	50 f0       	brcs	.+20     	; 0x7bc <ExpTick+0x172>
		displayBlank = 0;
 7a8:	10 92 08 01 	sts	0x0108, r1
		contClock = 0;
 7ac:	10 92 09 01 	sts	0x0109, r1
 7b0:	10 92 0a 01 	sts	0x010A, r1
 7b4:	10 92 0b 01 	sts	0x010B, r1
 7b8:	10 92 0c 01 	sts	0x010C, r1
	}
	
	return explosions;
 7bc:	86 eb       	ldi	r24, 0xB6	; 182
 7be:	fe 01       	movw	r30, r28
 7c0:	3b 96       	adiw	r30, 0x0b	; 11
 7c2:	d8 01       	movw	r26, r16
 7c4:	01 90       	ld	r0, Z+
 7c6:	0d 92       	st	X+, r0
 7c8:	8a 95       	dec	r24
 7ca:	e1 f7       	brne	.-8      	; 0x7c4 <ExpTick+0x17a>
}
 7cc:	c8 01       	movw	r24, r16
 7ce:	df 91       	pop	r29
 7d0:	cf 91       	pop	r28
 7d2:	1f 91       	pop	r17
 7d4:	0f 91       	pop	r16
 7d6:	ff 90       	pop	r15
 7d8:	ef 90       	pop	r14
 7da:	df 90       	pop	r13
 7dc:	cf 90       	pop	r12
 7de:	08 95       	ret

000007e0 <Edit_Tick>:
		// nothing
		return 0;
	}
}

void Edit_Tick() {
 7e0:	cf 93       	push	r28
 7e2:	df 93       	push	r29
 7e4:	cd b7       	in	r28, 0x3d	; 61
 7e6:	de b7       	in	r29, 0x3e	; 62
 7e8:	c6 5b       	subi	r28, 0xB6	; 182
 7ea:	d1 09       	sbc	r29, r1
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	f8 94       	cli
 7f0:	de bf       	out	0x3e, r29	; 62
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	cd bf       	out	0x3d, r28	; 61
	switch (Edit_State) {
 7f6:	80 91 f9 01 	lds	r24, 0x01F9
 7fa:	81 30       	cpi	r24, 0x01	; 1
 7fc:	41 f0       	breq	.+16     	; 0x80e <Edit_Tick+0x2e>
 7fe:	18 f0       	brcs	.+6      	; 0x806 <Edit_Tick+0x26>
 800:	82 30       	cpi	r24, 0x02	; 2
 802:	71 f0       	breq	.+28     	; 0x820 <Edit_Tick+0x40>
 804:	20 c0       	rjmp	.+64     	; 0x846 <Edit_Tick+0x66>
		case Edit_SMStart:
			Edit_State = Edit_Wait;
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	80 93 f9 01 	sts	0x01F9, r24
			break;
 80c:	48 c0       	rjmp	.+144    	; 0x89e <Edit_Tick+0xbe>
			
		case Edit_Wait:
			if (!displayEDIT) {
 80e:	80 91 28 01 	lds	r24, 0x0128
 812:	88 23       	and	r24, r24
 814:	09 f4       	brne	.+2      	; 0x818 <Edit_Tick+0x38>
 816:	43 c0       	rjmp	.+134    	; 0x89e <Edit_Tick+0xbe>
				Edit_State = Edit_Wait;
			} else if (displayEDIT) {
				Edit_State = Edit_Display;
 818:	82 e0       	ldi	r24, 0x02	; 2
 81a:	80 93 f9 01 	sts	0x01F9, r24
 81e:	17 c0       	rjmp	.+46     	; 0x84e <Edit_Tick+0x6e>
			} 
			break;
			
		case Edit_Display:
			if (!displayEDIT) {
 820:	80 91 28 01 	lds	r24, 0x0128
 824:	81 11       	cpse	r24, r1
 826:	13 c0       	rjmp	.+38     	; 0x84e <Edit_Tick+0x6e>
				Edit_State = Edit_Wait;
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	80 93 f9 01 	sts	0x01F9, r24
				d3_setMatrixColor(blankMatrix.m, RED);
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	80 e2       	ldi	r24, 0x20	; 32
 832:	91 e0       	ldi	r25, 0x01	; 1
 834:	17 de       	rcall	.-978    	; 0x464 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, GREEN);
 836:	62 e0       	ldi	r22, 0x02	; 2
 838:	80 e2       	ldi	r24, 0x20	; 32
 83a:	91 e0       	ldi	r25, 0x01	; 1
 83c:	13 de       	rcall	.-986    	; 0x464 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, BLUE);
 83e:	61 e0       	ldi	r22, 0x01	; 1
 840:	80 e2       	ldi	r24, 0x20	; 32
 842:	91 e0       	ldi	r25, 0x01	; 1
 844:	0f de       	rcall	.-994    	; 0x464 <d3_setMatrixColor>
			
		default:
			break;
	}
	
	switch (Edit_State) {
 846:	80 91 f9 01 	lds	r24, 0x01F9
 84a:	82 30       	cpi	r24, 0x02	; 2
 84c:	41 f5       	brne	.+80     	; 0x89e <Edit_Tick+0xbe>
		
		case Edit_Wait:
			break;
		
		case Edit_Display:
			explosions = ExpTick(explosions);
 84e:	8d b7       	in	r24, 0x3d	; 61
 850:	9e b7       	in	r25, 0x3e	; 62
 852:	86 5b       	subi	r24, 0xB6	; 182
 854:	91 09       	sbc	r25, r1
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	f8 94       	cli
 85a:	9e bf       	out	0x3e, r25	; 62
 85c:	0f be       	out	0x3f, r0	; 63
 85e:	8d bf       	out	0x3d, r24	; 61
 860:	ad b7       	in	r26, 0x3d	; 61
 862:	be b7       	in	r27, 0x3e	; 62
 864:	11 96       	adiw	r26, 0x01	; 1
 866:	86 eb       	ldi	r24, 0xB6	; 182
 868:	e1 e3       	ldi	r30, 0x31	; 49
 86a:	f1 e0       	ldi	r31, 0x01	; 1
 86c:	01 90       	ld	r0, Z+
 86e:	0d 92       	st	X+, r0
 870:	8a 95       	dec	r24
 872:	e1 f7       	brne	.-8      	; 0x86c <Edit_Tick+0x8c>
 874:	ce 01       	movw	r24, r28
 876:	01 96       	adiw	r24, 0x01	; 1
 878:	e8 de       	rcall	.-560    	; 0x64a <ExpTick>
 87a:	86 eb       	ldi	r24, 0xB6	; 182
 87c:	fe 01       	movw	r30, r28
 87e:	31 96       	adiw	r30, 0x01	; 1
 880:	a1 e3       	ldi	r26, 0x31	; 49
 882:	b1 e0       	ldi	r27, 0x01	; 1
 884:	01 90       	ld	r0, Z+
 886:	0d 92       	st	X+, r0
 888:	8a 95       	dec	r24
 88a:	e1 f7       	brne	.-8      	; 0x884 <Edit_Tick+0xa4>
			d3_setMatrixColor(wallMatrix.m, BLUE);
 88c:	0f b6       	in	r0, 0x3f	; 63
 88e:	f8 94       	cli
 890:	de bf       	out	0x3e, r29	; 62
 892:	0f be       	out	0x3f, r0	; 63
 894:	cd bf       	out	0x3d, r28	; 61
 896:	61 e0       	ldi	r22, 0x01	; 1
 898:	81 ef       	ldi	r24, 0xF1	; 241
 89a:	91 e0       	ldi	r25, 0x01	; 1
 89c:	e3 dd       	rcall	.-1082   	; 0x464 <d3_setMatrixColor>
			break;
			
		default:
			break;
	}
}
 89e:	ca 54       	subi	r28, 0x4A	; 74
 8a0:	df 4f       	sbci	r29, 0xFF	; 255
 8a2:	0f b6       	in	r0, 0x3f	; 63
 8a4:	f8 94       	cli
 8a6:	de bf       	out	0x3e, r29	; 62
 8a8:	0f be       	out	0x3f, r0	; 63
 8aa:	cd bf       	out	0x3d, r28	; 61
 8ac:	df 91       	pop	r29
 8ae:	cf 91       	pop	r28
 8b0:	08 95       	ret

000008b2 <LED_Tick>:

void LED_Tick() {
 8b2:	ef 92       	push	r14
 8b4:	ff 92       	push	r15
 8b6:	0f 93       	push	r16
 8b8:	1f 93       	push	r17
 8ba:	cf 93       	push	r28
 8bc:	df 93       	push	r29
 8be:	cd b7       	in	r28, 0x3d	; 61
 8c0:	de b7       	in	r29, 0x3e	; 62
 8c2:	c0 5c       	subi	r28, 0xC0	; 192
 8c4:	d1 09       	sbc	r29, r1
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	f8 94       	cli
 8ca:	de bf       	out	0x3e, r29	; 62
 8cc:	0f be       	out	0x3f, r0	; 63
 8ce:	cd bf       	out	0x3d, r28	; 61
	switch (LED_State) {
 8d0:	80 91 1d 01 	lds	r24, 0x011D
 8d4:	81 30       	cpi	r24, 0x01	; 1
 8d6:	51 f0       	breq	.+20     	; 0x8ec <LED_Tick+0x3a>
 8d8:	18 f0       	brcs	.+6      	; 0x8e0 <LED_Tick+0x2e>
 8da:	82 30       	cpi	r24, 0x02	; 2
 8dc:	91 f1       	breq	.+100    	; 0x942 <LED_Tick+0x90>
 8de:	44 c0       	rjmp	.+136    	; 0x968 <LED_Tick+0xb6>
		case LED_SMStart:
			LED_State = LED_Wait;
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	80 93 1d 01 	sts	0x011D, r24
			displayLED = 0;
 8e6:	10 92 1f 01 	sts	0x011F, r1
			break;
 8ea:	3e c0       	rjmp	.+124    	; 0x968 <LED_Tick+0xb6>
		
		case LED_Wait:
			if (displayLED) {
 8ec:	80 91 1f 01 	lds	r24, 0x011F
 8f0:	88 23       	and	r24, r24
 8f2:	09 f4       	brne	.+2      	; 0x8f6 <LED_Tick+0x44>
 8f4:	6a c0       	rjmp	.+212    	; 0x9ca <LED_Tick+0x118>
				LED_State = LED_Display;
 8f6:	82 e0       	ldi	r24, 0x02	; 2
 8f8:	80 93 1d 01 	sts	0x011D, r24
				userMatrix = initSingleUserMatrix(userMatrix);
 8fc:	e0 90 e7 01 	lds	r14, 0x01E7
 900:	f0 90 e8 01 	lds	r15, 0x01E8
 904:	00 91 e9 01 	lds	r16, 0x01E9
 908:	10 91 ea 01 	lds	r17, 0x01EA
 90c:	20 91 eb 01 	lds	r18, 0x01EB
 910:	30 91 ec 01 	lds	r19, 0x01EC
 914:	40 91 ed 01 	lds	r20, 0x01ED
 918:	50 91 ee 01 	lds	r21, 0x01EE
 91c:	60 91 ef 01 	lds	r22, 0x01EF
 920:	70 91 f0 01 	lds	r23, 0x01F0
 924:	ce 01       	movw	r24, r28
 926:	01 96       	adiw	r24, 0x01	; 1
 928:	ea dc       	rcall	.-1580   	; 0x2fe <initSingleUserMatrix>
 92a:	8a e0       	ldi	r24, 0x0A	; 10
 92c:	fe 01       	movw	r30, r28
 92e:	31 96       	adiw	r30, 0x01	; 1
 930:	a7 ee       	ldi	r26, 0xE7	; 231
 932:	b1 e0       	ldi	r27, 0x01	; 1
 934:	01 90       	ld	r0, Z+
 936:	0d 92       	st	X+, r0
 938:	8a 95       	dec	r24
 93a:	e1 f7       	brne	.-8      	; 0x934 <LED_Tick+0x82>
				explosions.displayIndex = 0;
 93c:	10 92 e6 01 	sts	0x01E6, r1
 940:	13 c0       	rjmp	.+38     	; 0x968 <LED_Tick+0xb6>
				LED_State = LED_Wait;
			}
			break;
		
		case LED_Display:
			if (displayLED) {
 942:	80 91 1f 01 	lds	r24, 0x011F
 946:	81 11       	cpse	r24, r1
 948:	13 c0       	rjmp	.+38     	; 0x970 <LED_Tick+0xbe>
				LED_State = LED_Display;
				} else if (!displayLED) {
				LED_State = LED_Wait; 
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	80 93 1d 01 	sts	0x011D, r24
				d3_setMatrixColor(blankMatrix.m, RED);
 950:	60 e0       	ldi	r22, 0x00	; 0
 952:	80 e2       	ldi	r24, 0x20	; 32
 954:	91 e0       	ldi	r25, 0x01	; 1
 956:	86 dd       	rcall	.-1268   	; 0x464 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, GREEN);
 958:	62 e0       	ldi	r22, 0x02	; 2
 95a:	80 e2       	ldi	r24, 0x20	; 32
 95c:	91 e0       	ldi	r25, 0x01	; 1
 95e:	82 dd       	rcall	.-1276   	; 0x464 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, BLUE);
 960:	61 e0       	ldi	r22, 0x01	; 1
 962:	80 e2       	ldi	r24, 0x20	; 32
 964:	91 e0       	ldi	r25, 0x01	; 1
 966:	7e dd       	rcall	.-1284   	; 0x464 <d3_setMatrixColor>
		
		default:
			break;
	}
	
	switch (LED_State) {
 968:	80 91 1d 01 	lds	r24, 0x011D
 96c:	82 30       	cpi	r24, 0x02	; 2
 96e:	69 f5       	brne	.+90     	; 0x9ca <LED_Tick+0x118>
		
		case LED_Wait:
			break;
		
		case LED_Display:
			explosions = ExpTick(explosions);
 970:	8d b7       	in	r24, 0x3d	; 61
 972:	9e b7       	in	r25, 0x3e	; 62
 974:	86 5b       	subi	r24, 0xB6	; 182
 976:	91 09       	sbc	r25, r1
 978:	0f b6       	in	r0, 0x3f	; 63
 97a:	f8 94       	cli
 97c:	9e bf       	out	0x3e, r25	; 62
 97e:	0f be       	out	0x3f, r0	; 63
 980:	8d bf       	out	0x3d, r24	; 61
 982:	ad b7       	in	r26, 0x3d	; 61
 984:	be b7       	in	r27, 0x3e	; 62
 986:	11 96       	adiw	r26, 0x01	; 1
 988:	86 eb       	ldi	r24, 0xB6	; 182
 98a:	e1 e3       	ldi	r30, 0x31	; 49
 98c:	f1 e0       	ldi	r31, 0x01	; 1
 98e:	01 90       	ld	r0, Z+
 990:	0d 92       	st	X+, r0
 992:	8a 95       	dec	r24
 994:	e1 f7       	brne	.-8      	; 0x98e <LED_Tick+0xdc>
 996:	ce 01       	movw	r24, r28
 998:	0b 96       	adiw	r24, 0x0b	; 11
 99a:	57 de       	rcall	.-850    	; 0x64a <ExpTick>
 99c:	86 eb       	ldi	r24, 0xB6	; 182
 99e:	fe 01       	movw	r30, r28
 9a0:	3b 96       	adiw	r30, 0x0b	; 11
 9a2:	a1 e3       	ldi	r26, 0x31	; 49
 9a4:	b1 e0       	ldi	r27, 0x01	; 1
 9a6:	01 90       	ld	r0, Z+
 9a8:	0d 92       	st	X+, r0
 9aa:	8a 95       	dec	r24
 9ac:	e1 f7       	brne	.-8      	; 0x9a6 <LED_Tick+0xf4>
			DeathTick();
 9ae:	0f b6       	in	r0, 0x3f	; 63
 9b0:	f8 94       	cli
 9b2:	de bf       	out	0x3e, r29	; 62
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	cd bf       	out	0x3d, r28	; 61
 9b8:	e5 dd       	rcall	.-1078   	; 0x584 <DeathTick>
			d3_setMatrixColor(userMatrix.m, GREEN);
 9ba:	62 e0       	ldi	r22, 0x02	; 2
 9bc:	87 ee       	ldi	r24, 0xE7	; 231
 9be:	91 e0       	ldi	r25, 0x01	; 1
 9c0:	51 dd       	rcall	.-1374   	; 0x464 <d3_setMatrixColor>
			d3_setMatrixColor(wallMatrix.m, BLUE);
 9c2:	61 e0       	ldi	r22, 0x01	; 1
 9c4:	81 ef       	ldi	r24, 0xF1	; 241
 9c6:	91 e0       	ldi	r25, 0x01	; 1
 9c8:	4d dd       	rcall	.-1382   	; 0x464 <d3_setMatrixColor>
			break;
		
		default:
			break;
	}	
}
 9ca:	c0 54       	subi	r28, 0x40	; 64
 9cc:	df 4f       	sbci	r29, 0xFF	; 255
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	f8 94       	cli
 9d2:	de bf       	out	0x3e, r29	; 62
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	cd bf       	out	0x3d, r28	; 61
 9d8:	df 91       	pop	r29
 9da:	cf 91       	pop	r28
 9dc:	1f 91       	pop	r17
 9de:	0f 91       	pop	r16
 9e0:	ff 90       	pop	r15
 9e2:	ef 90       	pop	r14
 9e4:	08 95       	ret

000009e6 <initNumLevel>:
	}
	
	return explosions;
}

void initNumLevel() {
 9e6:	cf 93       	push	r28
 9e8:	df 93       	push	r29
	unsigned short startingIndex = 1;
 9ea:	c1 e0       	ldi	r28, 0x01	; 1
 9ec:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(eeprom_read_byte((uint8_t*)startingIndex) != 0) {
 9ee:	07 c0       	rjmp	.+14     	; 0x9fe <initNumLevel+0x18>
		numLevels++;
 9f0:	90 91 07 01 	lds	r25, 0x0107
 9f4:	9f 5f       	subi	r25, 0xFF	; 255
 9f6:	90 93 07 01 	sts	0x0107, r25
		startingIndex += 250;
 9fa:	c6 50       	subi	r28, 0x06	; 6
 9fc:	df 4f       	sbci	r29, 0xFF	; 255
}

void initNumLevel() {
	unsigned short startingIndex = 1;
	
	while(eeprom_read_byte((uint8_t*)startingIndex) != 0) {
 9fe:	ce 01       	movw	r24, r28
 a00:	f2 d2       	rcall	.+1508   	; 0xfe6 <eeprom_read_byte>
 a02:	81 11       	cpse	r24, r1
 a04:	f5 cf       	rjmp	.-22     	; 0x9f0 <initNumLevel+0xa>
		numLevels++;
		startingIndex += 250;
	}
}
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	08 95       	ret

00000a0c <setLevel>:

void setLevel() {
 a0c:	2f 92       	push	r2
 a0e:	3f 92       	push	r3
 a10:	4f 92       	push	r4
 a12:	5f 92       	push	r5
 a14:	6f 92       	push	r6
 a16:	7f 92       	push	r7
 a18:	8f 92       	push	r8
 a1a:	9f 92       	push	r9
 a1c:	af 92       	push	r10
 a1e:	bf 92       	push	r11
 a20:	cf 92       	push	r12
 a22:	df 92       	push	r13
 a24:	ef 92       	push	r14
 a26:	ff 92       	push	r15
 a28:	0f 93       	push	r16
 a2a:	1f 93       	push	r17
 a2c:	cf 93       	push	r28
 a2e:	df 93       	push	r29
 a30:	cd b7       	in	r28, 0x3d	; 61
 a32:	de b7       	in	r29, 0x3e	; 62
 a34:	ca 52       	subi	r28, 0x2A	; 42
 a36:	d2 40       	sbci	r29, 0x02	; 2
 a38:	0f b6       	in	r0, 0x3f	; 63
 a3a:	f8 94       	cli
 a3c:	de bf       	out	0x3e, r29	; 62
 a3e:	0f be       	out	0x3f, r0	; 63
 a40:	cd bf       	out	0x3d, r28	; 61
	unsigned short startingIndex = curLevel*250;
 a42:	a0 90 06 01 	lds	r10, 0x0106
 a46:	2a ef       	ldi	r18, 0xFA	; 250
 a48:	a2 9e       	mul	r10, r18
 a4a:	50 01       	movw	r10, r0
 a4c:	11 24       	eor	r1, r1
	unsigned char numPatterns = eeprom_read_byte((uint8_t*)(startingIndex + 1));
 a4e:	c5 01       	movw	r24, r10
 a50:	01 96       	adiw	r24, 0x01	; 1
 a52:	c9 d2       	rcall	.+1426   	; 0xfe6 <eeprom_read_byte>
 a54:	28 2e       	mov	r2, r24
 a56:	75 01       	movw	r14, r10
 a58:	82 e0       	ldi	r24, 0x02	; 2
 a5a:	e8 0e       	add	r14, r24
 a5c:	f1 1c       	adc	r15, r1
 a5e:	01 ef       	ldi	r16, 0xF1	; 241
 a60:	11 e0       	ldi	r17, 0x01	; 1
 a62:	0f 2e       	mov	r0, r31
 a64:	f9 ef       	ldi	r31, 0xF9	; 249
 a66:	cf 2e       	mov	r12, r31
 a68:	f1 e0       	ldi	r31, 0x01	; 1
 a6a:	df 2e       	mov	r13, r31
 a6c:	f0 2d       	mov	r31, r0
	
	for (unsigned char i = 0; i < 8; i++) {
		wallMatrix.m[i] = eeprom_read_byte((uint8_t*)(startingIndex + 2 + i));
 a6e:	c7 01       	movw	r24, r14
 a70:	ba d2       	rcall	.+1396   	; 0xfe6 <eeprom_read_byte>
 a72:	f8 01       	movw	r30, r16
 a74:	81 93       	st	Z+, r24
 a76:	8f 01       	movw	r16, r30
 a78:	ff ef       	ldi	r31, 0xFF	; 255
 a7a:	ef 1a       	sub	r14, r31
 a7c:	ff 0a       	sbc	r15, r31

void setLevel() {
	unsigned short startingIndex = curLevel*250;
	unsigned char numPatterns = eeprom_read_byte((uint8_t*)(startingIndex + 1));
	
	for (unsigned char i = 0; i < 8; i++) {
 a7e:	0c 15       	cp	r16, r12
 a80:	1d 05       	cpc	r17, r13
 a82:	a9 f7       	brne	.-22     	; 0xa6e <setLevel+0x62>
		wallMatrix.m[i] = eeprom_read_byte((uint8_t*)(startingIndex + 2 + i));
	}
	
	explosions = initExplosions(explosions);
 a84:	8d b7       	in	r24, 0x3d	; 61
 a86:	9e b7       	in	r25, 0x3e	; 62
 a88:	86 5b       	subi	r24, 0xB6	; 182
 a8a:	91 09       	sbc	r25, r1
 a8c:	0f b6       	in	r0, 0x3f	; 63
 a8e:	f8 94       	cli
 a90:	9e bf       	out	0x3e, r25	; 62
 a92:	0f be       	out	0x3f, r0	; 63
 a94:	8d bf       	out	0x3d, r24	; 61
 a96:	ad b7       	in	r26, 0x3d	; 61
 a98:	be b7       	in	r27, 0x3e	; 62
 a9a:	11 96       	adiw	r26, 0x01	; 1
 a9c:	86 eb       	ldi	r24, 0xB6	; 182
 a9e:	e1 e3       	ldi	r30, 0x31	; 49
 aa0:	f1 e0       	ldi	r31, 0x01	; 1
 aa2:	01 90       	ld	r0, Z+
 aa4:	0d 92       	st	X+, r0
 aa6:	8a 95       	dec	r24
 aa8:	e1 f7       	brne	.-8      	; 0xaa2 <setLevel+0x96>
 aaa:	ce 01       	movw	r24, r28
 aac:	8b 58       	subi	r24, 0x8B	; 139
 aae:	9e 4f       	sbci	r25, 0xFE	; 254
 ab0:	05 dd       	rcall	.-1526   	; 0x4bc <initExplosions>
 ab2:	86 eb       	ldi	r24, 0xB6	; 182
 ab4:	fe 01       	movw	r30, r28
 ab6:	eb 58       	subi	r30, 0x8B	; 139
 ab8:	fe 4f       	sbci	r31, 0xFE	; 254
 aba:	a1 e3       	ldi	r26, 0x31	; 49
 abc:	b1 e0       	ldi	r27, 0x01	; 1
 abe:	01 90       	ld	r0, Z+
 ac0:	0d 92       	st	X+, r0
 ac2:	8a 95       	dec	r24
 ac4:	e1 f7       	brne	.-8      	; 0xabe <setLevel+0xb2>
	
	unsigned short tempCnt = startingIndex + 11;
 ac6:	9b e0       	ldi	r25, 0x0B	; 11
 ac8:	a9 0e       	add	r10, r25
 aca:	b1 1c       	adc	r11, r1
	unsigned char timeBetween;
	unsigned char timeDuration;
	for (unsigned char i = 0; i < numPatterns; i++) {
 acc:	0f b6       	in	r0, 0x3f	; 63
 ace:	f8 94       	cli
 ad0:	de bf       	out	0x3e, r29	; 62
 ad2:	0f be       	out	0x3f, r0	; 63
 ad4:	cd bf       	out	0x3d, r28	; 61
 ad6:	21 10       	cpse	r2, r1
 ad8:	69 c0       	rjmp	.+210    	; 0xbac <setLevel+0x1a0>
 ada:	87 c0       	rjmp	.+270    	; 0xbea <setLevel+0x1de>
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[j] = eeprom_read_byte((uint8_t*)(j+ tempCnt));
 adc:	c7 01       	movw	r24, r14
 ade:	80 0f       	add	r24, r16
 ae0:	91 1f       	adc	r25, r17
 ae2:	81 d2       	rcall	.+1282   	; 0xfe6 <eeprom_read_byte>
 ae4:	f8 01       	movw	r30, r16
 ae6:	81 93       	st	Z+, r24
 ae8:	8f 01       	movw	r16, r30
	
	unsigned short tempCnt = startingIndex + 11;
	unsigned char timeBetween;
	unsigned char timeDuration;
	for (unsigned char i = 0; i < numPatterns; i++) {
		for (unsigned char j = 0; j < 8; j++) {
 aea:	ec 15       	cp	r30, r12
 aec:	fd 05       	cpc	r31, r13
 aee:	b1 f7       	brne	.-20     	; 0xadc <setLevel+0xd0>
			matrix.m[j] = eeprom_read_byte((uint8_t*)(j+ tempCnt));
		}
		timeBetween = eeprom_read_byte((uint8_t*)(tempCnt + 8));
 af0:	c5 01       	movw	r24, r10
 af2:	08 96       	adiw	r24, 0x08	; 8
 af4:	78 d2       	rcall	.+1264   	; 0xfe6 <eeprom_read_byte>
 af6:	18 2f       	mov	r17, r24
		timeDuration = eeprom_read_byte((uint8_t*)(tempCnt + 9));
 af8:	c5 01       	movw	r24, r10
 afa:	09 96       	adiw	r24, 0x09	; 9
 afc:	74 d2       	rcall	.+1256   	; 0xfe6 <eeprom_read_byte>
 afe:	e1 e3       	ldi	r30, 0x31	; 49
 b00:	f1 e0       	ldi	r31, 0x01	; 1
 b02:	de 01       	movw	r26, r28
 b04:	a9 54       	subi	r26, 0x49	; 73
 b06:	bf 4f       	sbci	r27, 0xFF	; 255
 b08:	95 2d       	mov	r25, r5
 b0a:	01 90       	ld	r0, Z+
 b0c:	0d 92       	st	X+, r0
 b0e:	9a 95       	dec	r25
 b10:	e1 f7       	brne	.-8      	; 0xb0a <setLevel+0xfe>
 b12:	f3 01       	movw	r30, r6
 b14:	90 81       	ld	r25, Z
 b16:	f4 01       	movw	r30, r8
 b18:	de 01       	movw	r26, r28
 b1a:	a3 59       	subi	r26, 0x93	; 147
 b1c:	be 4f       	sbci	r27, 0xFE	; 254
 b1e:	23 2d       	mov	r18, r3
 b20:	01 90       	ld	r0, Z+
 b22:	0d 92       	st	X+, r0
 b24:	2a 95       	dec	r18
 b26:	e1 f7       	brne	.-8      	; 0xb20 <setLevel+0x114>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
 b28:	a7 eb       	ldi	r26, 0xB7	; 183
 b2a:	b0 e0       	ldi	r27, 0x00	; 0
 b2c:	ac 0f       	add	r26, r28
 b2e:	bd 1f       	adc	r27, r29
 b30:	f8 e0       	ldi	r31, 0x08	; 8
 b32:	9f 9f       	mul	r25, r31
 b34:	a0 0d       	add	r26, r0
 b36:	b1 1d       	adc	r27, r1
 b38:	11 24       	eor	r1, r1
 b3a:	fe 01       	movw	r30, r28
 b3c:	e3 59       	subi	r30, 0x93	; 147
 b3e:	fe 4f       	sbci	r31, 0xFE	; 254
 b40:	23 2d       	mov	r18, r3
 b42:	01 90       	ld	r0, Z+
 b44:	0d 92       	st	X+, r0
 b46:	2a 95       	dec	r18
 b48:	e1 f7       	brne	.-8      	; 0xb42 <setLevel+0x136>
	explosions.timeBetween[explosions.index] = a;
 b4a:	27 eb       	ldi	r18, 0xB7	; 183
 b4c:	30 e0       	ldi	r19, 0x00	; 0
 b4e:	2c 0f       	add	r18, r28
 b50:	3d 1f       	adc	r19, r29
 b52:	29 0f       	add	r18, r25
 b54:	31 1d       	adc	r19, r1
 b56:	f9 01       	movw	r30, r18
 b58:	e0 57       	subi	r30, 0x70	; 112
 b5a:	ff 4f       	sbci	r31, 0xFF	; 255
 b5c:	10 83       	st	Z, r17
	explosions.timeDuration[explosions.index] = b;
 b5e:	72 96       	adiw	r30, 0x12	; 18
 b60:	80 83       	st	Z, r24
	explosions.index++;
 b62:	9f 5f       	subi	r25, 0xFF	; 255
	
	return explosions;
 b64:	c5 59       	subi	r28, 0x95	; 149
 b66:	de 4f       	sbci	r29, 0xFE	; 254
 b68:	98 83       	st	Y, r25
 b6a:	cb 56       	subi	r28, 0x6B	; 107
 b6c:	d1 40       	sbci	r29, 0x01	; 1
 b6e:	fe 01       	movw	r30, r28
 b70:	e9 54       	subi	r30, 0x49	; 73
 b72:	ff 4f       	sbci	r31, 0xFF	; 255
 b74:	de 01       	movw	r26, r28
 b76:	11 96       	adiw	r26, 0x01	; 1
 b78:	85 2d       	mov	r24, r5
 b7a:	01 90       	ld	r0, Z+
 b7c:	0d 92       	st	X+, r0
 b7e:	8a 95       	dec	r24
 b80:	e1 f7       	brne	.-8      	; 0xb7a <setLevel+0x16e>
		explosions = pushExplosion(explosions, matrix, timeBetween, timeDuration);
 b82:	cb 54       	subi	r28, 0x4B	; 75
 b84:	df 4f       	sbci	r29, 0xFF	; 255
 b86:	98 83       	st	Y, r25
 b88:	c5 5b       	subi	r28, 0xB5	; 181
 b8a:	d0 40       	sbci	r29, 0x00	; 0
 b8c:	fe 01       	movw	r30, r28
 b8e:	31 96       	adiw	r30, 0x01	; 1
 b90:	a1 e3       	ldi	r26, 0x31	; 49
 b92:	b1 e0       	ldi	r27, 0x01	; 1
 b94:	85 2d       	mov	r24, r5
 b96:	01 90       	ld	r0, Z+
 b98:	0d 92       	st	X+, r0
 b9a:	8a 95       	dec	r24
 b9c:	e1 f7       	brne	.-8      	; 0xb96 <setLevel+0x18a>
		
		tempCnt +=10;
 b9e:	2a e0       	ldi	r18, 0x0A	; 10
 ba0:	a2 0e       	add	r10, r18
 ba2:	b1 1c       	adc	r11, r1
	explosions = initExplosions(explosions);
	
	unsigned short tempCnt = startingIndex + 11;
	unsigned char timeBetween;
	unsigned char timeDuration;
	for (unsigned char i = 0; i < numPatterns; i++) {
 ba4:	43 94       	inc	r4
 ba6:	42 10       	cpse	r4, r2
 ba8:	1b c0       	rjmp	.+54     	; 0xbe0 <setLevel+0x1d4>
 baa:	1f c0       	rjmp	.+62     	; 0xbea <setLevel+0x1de>
 bac:	41 2c       	mov	r4, r1
 bae:	0f 2e       	mov	r0, r31
 bb0:	f9 e2       	ldi	r31, 0x29	; 41
 bb2:	8f 2e       	mov	r8, r31
 bb4:	f1 e0       	ldi	r31, 0x01	; 1
 bb6:	9f 2e       	mov	r9, r31
 bb8:	f0 2d       	mov	r31, r0
 bba:	0f 2e       	mov	r0, r31
 bbc:	f1 e3       	ldi	r31, 0x31	; 49
 bbe:	cf 2e       	mov	r12, r31
 bc0:	f1 e0       	ldi	r31, 0x01	; 1
 bc2:	df 2e       	mov	r13, r31
 bc4:	f0 2d       	mov	r31, r0
 bc6:	0f 2e       	mov	r0, r31
 bc8:	f6 eb       	ldi	r31, 0xB6	; 182
 bca:	5f 2e       	mov	r5, r31
 bcc:	f0 2d       	mov	r31, r0
 bce:	0f 2e       	mov	r0, r31
 bd0:	f5 ee       	ldi	r31, 0xE5	; 229
 bd2:	6f 2e       	mov	r6, r31
 bd4:	f1 e0       	ldi	r31, 0x01	; 1
 bd6:	7f 2e       	mov	r7, r31
 bd8:	f0 2d       	mov	r31, r0
 bda:	68 94       	set
 bdc:	33 24       	eor	r3, r3
 bde:	33 f8       	bld	r3, 3
		numLevels++;
		startingIndex += 250;
	}
}

void setLevel() {
 be0:	84 01       	movw	r16, r8
 be2:	75 01       	movw	r14, r10
 be4:	e8 18       	sub	r14, r8
 be6:	f9 08       	sbc	r15, r9
 be8:	79 cf       	rjmp	.-270    	; 0xadc <setLevel+0xd0>
		timeDuration = eeprom_read_byte((uint8_t*)(tempCnt + 9));
		explosions = pushExplosion(explosions, matrix, timeBetween, timeDuration);
		
		tempCnt +=10;
	}
 bea:	c6 5d       	subi	r28, 0xD6	; 214
 bec:	dd 4f       	sbci	r29, 0xFD	; 253
 bee:	0f b6       	in	r0, 0x3f	; 63
 bf0:	f8 94       	cli
 bf2:	de bf       	out	0x3e, r29	; 62
 bf4:	0f be       	out	0x3f, r0	; 63
 bf6:	cd bf       	out	0x3d, r28	; 61
 bf8:	df 91       	pop	r29
 bfa:	cf 91       	pop	r28
 bfc:	1f 91       	pop	r17
 bfe:	0f 91       	pop	r16
 c00:	ff 90       	pop	r15
 c02:	ef 90       	pop	r14
 c04:	df 90       	pop	r13
 c06:	cf 90       	pop	r12
 c08:	bf 90       	pop	r11
 c0a:	af 90       	pop	r10
 c0c:	9f 90       	pop	r9
 c0e:	8f 90       	pop	r8
 c10:	7f 90       	pop	r7
 c12:	6f 90       	pop	r6
 c14:	5f 90       	pop	r5
 c16:	4f 90       	pop	r4
 c18:	3f 90       	pop	r3
 c1a:	2f 90       	pop	r2
 c1c:	08 95       	ret

00000c1e <main>:

void setLevel();
void initNumLevel();


int main(void) {
 c1e:	cf 93       	push	r28
 c20:	df 93       	push	r29
 c22:	cd b7       	in	r28, 0x3d	; 61
 c24:	de b7       	in	r29, 0x3e	; 62
 c26:	c6 5b       	subi	r28, 0xB6	; 182
 c28:	d1 09       	sbc	r29, r1
 c2a:	0f b6       	in	r0, 0x3f	; 63
 c2c:	f8 94       	cli
 c2e:	de bf       	out	0x3e, r29	; 62
 c30:	0f be       	out	0x3f, r0	; 63
 c32:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00;
 c34:	8f ef       	ldi	r24, 0xFF	; 255
 c36:	84 b9       	out	0x04, r24	; 4
 c38:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 c3a:	8a b9       	out	0x0a, r24	; 10
 c3c:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xFF; PORTC = 0x00;
 c3e:	87 b9       	out	0x07, r24	; 7
 c40:	18 b8       	out	0x08, r1	; 8
	
	initUSART(0);
 c42:	80 e0       	ldi	r24, 0x00	; 0
 c44:	59 dc       	rcall	.-1870   	; 0x4f8 <initUSART>
	
	initNumLevel();
 c46:	cf de       	rcall	.-610    	; 0x9e6 <initNumLevel>
	initTasks();
 c48:	6c da       	rcall	.-2856   	; 0x122 <initTasks>
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 c4a:	81 e0       	ldi	r24, 0x01	; 1
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	a0 e0       	ldi	r26, 0x00	; 0
 c50:	b0 e0       	ldi	r27, 0x00	; 0
 c52:	80 93 00 01 	sts	0x0100, r24
 c56:	90 93 01 01 	sts	0x0101, r25
 c5a:	a0 93 02 01 	sts	0x0102, r26
 c5e:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
 c62:	80 93 0d 01 	sts	0x010D, r24
 c66:	90 93 0e 01 	sts	0x010E, r25
 c6a:	a0 93 0f 01 	sts	0x010F, r26
 c6e:	b0 93 10 01 	sts	0x0110, r27
	
	TimerSet(1);
	TimerOn();
 c72:	6c da       	rcall	.-2856   	; 0x14c <TimerOn>
	
	LED_State = LED_SMStart;
 c74:	10 92 1d 01 	sts	0x011D, r1
	
	blankMatrix = clearSingleMatrix(blankMatrix);
 c78:	20 91 20 01 	lds	r18, 0x0120
 c7c:	30 91 21 01 	lds	r19, 0x0121
 c80:	40 91 22 01 	lds	r20, 0x0122
 c84:	50 91 23 01 	lds	r21, 0x0123
 c88:	60 91 24 01 	lds	r22, 0x0124
 c8c:	70 91 25 01 	lds	r23, 0x0125
 c90:	80 91 26 01 	lds	r24, 0x0126
 c94:	90 91 27 01 	lds	r25, 0x0127
 c98:	fc da       	rcall	.-2568   	; 0x292 <clearSingleMatrix>
 c9a:	e0 e2       	ldi	r30, 0x20	; 32
 c9c:	f1 e0       	ldi	r31, 0x01	; 1
 c9e:	20 83       	st	Z, r18
 ca0:	31 83       	std	Z+1, r19	; 0x01
 ca2:	42 83       	std	Z+2, r20	; 0x02
 ca4:	53 83       	std	Z+3, r21	; 0x03
 ca6:	64 83       	std	Z+4, r22	; 0x04
 ca8:	75 83       	std	Z+5, r23	; 0x05
 caa:	86 83       	std	Z+6, r24	; 0x06
 cac:	97 83       	std	Z+7, r25	; 0x07
	explosions = initExplosions(explosions);
 cae:	8d b7       	in	r24, 0x3d	; 61
 cb0:	9e b7       	in	r25, 0x3e	; 62
 cb2:	86 5b       	subi	r24, 0xB6	; 182
 cb4:	91 09       	sbc	r25, r1
 cb6:	0f b6       	in	r0, 0x3f	; 63
 cb8:	f8 94       	cli
 cba:	9e bf       	out	0x3e, r25	; 62
 cbc:	0f be       	out	0x3f, r0	; 63
 cbe:	8d bf       	out	0x3d, r24	; 61
 cc0:	ad b7       	in	r26, 0x3d	; 61
 cc2:	be b7       	in	r27, 0x3e	; 62
 cc4:	11 96       	adiw	r26, 0x01	; 1
 cc6:	86 eb       	ldi	r24, 0xB6	; 182
 cc8:	e1 e3       	ldi	r30, 0x31	; 49
 cca:	f1 e0       	ldi	r31, 0x01	; 1
 ccc:	01 90       	ld	r0, Z+
 cce:	0d 92       	st	X+, r0
 cd0:	8a 95       	dec	r24
 cd2:	e1 f7       	brne	.-8      	; 0xccc <main+0xae>
 cd4:	ce 01       	movw	r24, r28
 cd6:	01 96       	adiw	r24, 0x01	; 1
 cd8:	f1 db       	rcall	.-2078   	; 0x4bc <initExplosions>
 cda:	86 eb       	ldi	r24, 0xB6	; 182
 cdc:	fe 01       	movw	r30, r28
 cde:	31 96       	adiw	r30, 0x01	; 1
 ce0:	a1 e3       	ldi	r26, 0x31	; 49
 ce2:	b1 e0       	ldi	r27, 0x01	; 1
 ce4:	01 90       	ld	r0, Z+
 ce6:	0d 92       	st	X+, r0
 ce8:	8a 95       	dec	r24
 cea:	e1 f7       	brne	.-8      	; 0xce4 <main+0xc6>
	wallMatrix = clearSingleMatrix(wallMatrix);
 cec:	0f b6       	in	r0, 0x3f	; 63
 cee:	f8 94       	cli
 cf0:	de bf       	out	0x3e, r29	; 62
 cf2:	0f be       	out	0x3f, r0	; 63
 cf4:	cd bf       	out	0x3d, r28	; 61
 cf6:	20 91 f1 01 	lds	r18, 0x01F1
 cfa:	30 91 f2 01 	lds	r19, 0x01F2
 cfe:	40 91 f3 01 	lds	r20, 0x01F3
 d02:	50 91 f4 01 	lds	r21, 0x01F4
 d06:	60 91 f5 01 	lds	r22, 0x01F5
 d0a:	70 91 f6 01 	lds	r23, 0x01F6
 d0e:	80 91 f7 01 	lds	r24, 0x01F7
 d12:	90 91 f8 01 	lds	r25, 0x01F8
 d16:	bd da       	rcall	.-2694   	; 0x292 <clearSingleMatrix>
 d18:	e1 ef       	ldi	r30, 0xF1	; 241
 d1a:	f1 e0       	ldi	r31, 0x01	; 1
 d1c:	20 83       	st	Z, r18
 d1e:	31 83       	std	Z+1, r19	; 0x01
 d20:	42 83       	std	Z+2, r20	; 0x02
 d22:	53 83       	std	Z+3, r21	; 0x03
 d24:	64 83       	std	Z+4, r22	; 0x04
 d26:	75 83       	std	Z+5, r23	; 0x05
 d28:	86 83       	std	Z+6, r24	; 0x06
 d2a:	97 83       	std	Z+7, r25	; 0x07
	
	setLevel();
 d2c:	6f de       	rcall	.-802    	; 0xa0c <setLevel>
	matrix.m[3] = 0x00;
	matrix.m[4] = 0x00;
	explosions = pushExplosion(explosions, matrix, 0, 2);
	*/
	
	userMatrix = initSingleUserMatrix(userMatrix);
 d2e:	e0 90 e7 01 	lds	r14, 0x01E7
 d32:	f0 90 e8 01 	lds	r15, 0x01E8
 d36:	00 91 e9 01 	lds	r16, 0x01E9
 d3a:	10 91 ea 01 	lds	r17, 0x01EA
 d3e:	20 91 eb 01 	lds	r18, 0x01EB
 d42:	30 91 ec 01 	lds	r19, 0x01EC
 d46:	40 91 ed 01 	lds	r20, 0x01ED
 d4a:	50 91 ee 01 	lds	r21, 0x01EE
 d4e:	60 91 ef 01 	lds	r22, 0x01EF
 d52:	70 91 f0 01 	lds	r23, 0x01F0
 d56:	ce 01       	movw	r24, r28
 d58:	01 96       	adiw	r24, 0x01	; 1
 d5a:	d1 da       	rcall	.-2654   	; 0x2fe <initSingleUserMatrix>
 d5c:	8a e0       	ldi	r24, 0x0A	; 10
 d5e:	fe 01       	movw	r30, r28
 d60:	31 96       	adiw	r30, 0x01	; 1
 d62:	a7 ee       	ldi	r26, 0xE7	; 231
 d64:	b1 e0       	ldi	r27, 0x01	; 1
 d66:	01 90       	ld	r0, Z+
 d68:	0d 92       	st	X+, r0
 d6a:	8a 95       	dec	r24
 d6c:	e1 f7       	brne	.-8      	; 0xd66 <main+0x148>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 d6e:	00 ec       	ldi	r16, 0xC0	; 192
 d70:	10 e0       	ldi	r17, 0x00	; 0
					if (USART_IsSendReady(0)) {
						USART_Send(curLevel, 0);
					}
					
					if (USART_IsSendReady(0)) {
						unsigned char numPatterns = eeprom_read_byte((uint8_t*)(curLevel*250 + 1)) | 0x80;
 d72:	0f 2e       	mov	r0, r31
 d74:	fa ef       	ldi	r31, 0xFA	; 250
 d76:	af 2e       	mov	r10, r31
 d78:	f0 2d       	mov	r31, r0
			} else if (USARTReceiver == 0x04) { // Game start
				displayLED = 1;
			} else if (USARTReceiver == 0x05) { // Game end
				displayLED = 0;
			} else if (USARTReceiver == 0x06) { // Edit start
				displayEDIT = 1;
 d7a:	bb 24       	eor	r11, r11
 d7c:	b3 94       	inc	r11
					userMatrix.row--;
					userMatrix.m[userMatrix.row + 1] = SetBit(userMatrix.m[userMatrix.row + 1], userMatrix.column, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
				}
			} else if (USARTReceiver == 0x03) { // game left
				if (userMatrix.column > 0 &&  GetBit(wallMatrix.m[userMatrix.row], userMatrix.column - 1)) {
 d7e:	0f 2e       	mov	r0, r31
 d80:	f7 ee       	ldi	r31, 0xE7	; 231
 d82:	ef 2e       	mov	r14, r31
 d84:	f1 e0       	ldi	r31, 0x01	; 1
 d86:	ff 2e       	mov	r15, r31
 d88:	f0 2d       	mov	r31, r0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
 d8a:	cc 24       	eor	r12, r12
 d8c:	c3 94       	inc	r12
 d8e:	d1 2c       	mov	r13, r1
	*/
	
	userMatrix = initSingleUserMatrix(userMatrix);
	
	while (1) {
		LED_Tick();
 d90:	90 dd       	rcall	.-1248   	; 0x8b2 <LED_Tick>
		Edit_Tick();
 d92:	26 dd       	rcall	.-1460   	; 0x7e0 <Edit_Tick>
 d94:	f8 01       	movw	r30, r16
 d96:	80 81       	ld	r24, Z
		
		if (USART_HasReceived(0)) {
 d98:	88 23       	and	r24, r24
 d9a:	d4 f7       	brge	.-12     	; 0xd90 <main+0x172>
			USARTReceiver = USART_Receive(0);
 d9c:	80 e0       	ldi	r24, 0x00	; 0
 d9e:	e0 db       	rcall	.-2112   	; 0x560 <USART_Receive>
 da0:	80 93 1e 01 	sts	0x011E, r24
			
			if (USARTReceiver == 0x00) { // game up
 da4:	81 11       	cpse	r24, r1
 da6:	28 c0       	rjmp	.+80     	; 0xdf8 <main+0x1da>
				if (userMatrix.row < 7 && GetBit(wallMatrix.m[userMatrix.row + 1], userMatrix.column)) {
 da8:	d7 01       	movw	r26, r14
 daa:	18 96       	adiw	r26, 0x08	; 8
 dac:	ec 91       	ld	r30, X
 dae:	18 97       	sbiw	r26, 0x08	; 8
 db0:	e7 30       	cpi	r30, 0x07	; 7
 db2:	70 f7       	brcc	.-36     	; 0xd90 <main+0x172>
 db4:	c6 01       	movw	r24, r12
 db6:	19 96       	adiw	r26, 0x09	; 9
 db8:	0c 90       	ld	r0, X
 dba:	02 c0       	rjmp	.+4      	; 0xdc0 <main+0x1a2>
 dbc:	88 0f       	add	r24, r24
 dbe:	99 1f       	adc	r25, r25
 dc0:	0a 94       	dec	r0
 dc2:	e2 f7       	brpl	.-8      	; 0xdbc <main+0x19e>
 dc4:	ae 2f       	mov	r26, r30
 dc6:	b0 e0       	ldi	r27, 0x00	; 0
 dc8:	af 50       	subi	r26, 0x0F	; 15
 dca:	be 4f       	sbci	r27, 0xFE	; 254
	return ((bits & mask) != 0);
 dcc:	11 96       	adiw	r26, 0x01	; 1
 dce:	2c 91       	ld	r18, X
 dd0:	28 23       	and	r18, r24
 dd2:	f1 f2       	breq	.-68     	; 0xd90 <main+0x172>
					userMatrix.row++;
 dd4:	ef 5f       	subi	r30, 0xFF	; 255
 dd6:	d7 01       	movw	r26, r14
 dd8:	18 96       	adiw	r26, 0x08	; 8
 dda:	ec 93       	st	X, r30
					userMatrix.m[userMatrix.row - 1] = SetBit(userMatrix.m[userMatrix.row - 1], userMatrix.column, 1);
 ddc:	f0 e0       	ldi	r31, 0x00	; 0
 dde:	df 01       	movw	r26, r30
 de0:	aa 51       	subi	r26, 0x1A	; 26
 de2:	be 4f       	sbci	r27, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
 de4:	9c 91       	ld	r25, X
 de6:	98 2b       	or	r25, r24
 de8:	9c 93       	st	X, r25
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
 dea:	e9 51       	subi	r30, 0x19	; 25
 dec:	fe 4f       	sbci	r31, 0xFE	; 254
 dee:	80 95       	com	r24
 df0:	90 81       	ld	r25, Z
 df2:	89 23       	and	r24, r25
 df4:	80 83       	st	Z, r24
 df6:	cc cf       	rjmp	.-104    	; 0xd90 <main+0x172>
				}
			} else if (USARTReceiver == 0x01) { // game right
 df8:	81 30       	cpi	r24, 0x01	; 1
 dfa:	49 f5       	brne	.+82     	; 0xe4e <main+0x230>
				if (userMatrix.column  < 7 && GetBit(wallMatrix.m[userMatrix.row], userMatrix.column + 1)) {
 dfc:	f7 01       	movw	r30, r14
 dfe:	21 85       	ldd	r18, Z+9	; 0x09
 e00:	27 30       	cpi	r18, 0x07	; 7
 e02:	30 f6       	brcc	.-116    	; 0xd90 <main+0x172>
 e04:	61 e0       	ldi	r22, 0x01	; 1
 e06:	62 0f       	add	r22, r18
 e08:	80 85       	ldd	r24, Z+8	; 0x08
 e0a:	90 e0       	ldi	r25, 0x00	; 0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
 e0c:	a6 01       	movw	r20, r12
 e0e:	06 2e       	mov	r0, r22
 e10:	02 c0       	rjmp	.+4      	; 0xe16 <main+0x1f8>
 e12:	44 0f       	add	r20, r20
 e14:	55 1f       	adc	r21, r21
 e16:	0a 94       	dec	r0
 e18:	e2 f7       	brpl	.-8      	; 0xe12 <main+0x1f4>
 e1a:	fc 01       	movw	r30, r24
 e1c:	ef 50       	subi	r30, 0x0F	; 15
 e1e:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
 e20:	30 81       	ld	r19, Z
 e22:	34 23       	and	r19, r20
 e24:	09 f4       	brne	.+2      	; 0xe28 <main+0x20a>
 e26:	b4 cf       	rjmp	.-152    	; 0xd90 <main+0x172>
					userMatrix.column++;
 e28:	d7 01       	movw	r26, r14
 e2a:	19 96       	adiw	r26, 0x09	; 9
 e2c:	6c 93       	st	X, r22
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column - 1, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
 e2e:	fc 01       	movw	r30, r24
 e30:	e9 51       	subi	r30, 0x19	; 25
 e32:	fe 4f       	sbci	r31, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
 e34:	40 95       	com	r20
 e36:	c6 01       	movw	r24, r12
 e38:	02 c0       	rjmp	.+4      	; 0xe3e <main+0x220>
 e3a:	88 0f       	add	r24, r24
 e3c:	99 1f       	adc	r25, r25
 e3e:	2a 95       	dec	r18
 e40:	e2 f7       	brpl	.-8      	; 0xe3a <main+0x21c>
 e42:	9c 01       	movw	r18, r24
 e44:	80 81       	ld	r24, Z
 e46:	28 2b       	or	r18, r24
 e48:	42 23       	and	r20, r18
 e4a:	40 83       	st	Z, r20
 e4c:	a1 cf       	rjmp	.-190    	; 0xd90 <main+0x172>
				}
			} else if (USARTReceiver == 0x02) { // game down
 e4e:	82 30       	cpi	r24, 0x02	; 2
 e50:	49 f5       	brne	.+82     	; 0xea4 <main+0x286>
				if (userMatrix.row > 0  && GetBit(wallMatrix.m[userMatrix.row - 1], userMatrix.column)) {
 e52:	d7 01       	movw	r26, r14
 e54:	18 96       	adiw	r26, 0x08	; 8
 e56:	ec 91       	ld	r30, X
 e58:	18 97       	sbiw	r26, 0x08	; 8
 e5a:	ee 23       	and	r30, r30
 e5c:	09 f4       	brne	.+2      	; 0xe60 <main+0x242>
 e5e:	98 cf       	rjmp	.-208    	; 0xd90 <main+0x172>
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
 e60:	c6 01       	movw	r24, r12
 e62:	19 96       	adiw	r26, 0x09	; 9
 e64:	0c 90       	ld	r0, X
 e66:	02 c0       	rjmp	.+4      	; 0xe6c <main+0x24e>
 e68:	88 0f       	add	r24, r24
 e6a:	99 1f       	adc	r25, r25
 e6c:	0a 94       	dec	r0
 e6e:	e2 f7       	brpl	.-8      	; 0xe68 <main+0x24a>
 e70:	ae 2f       	mov	r26, r30
 e72:	b0 e0       	ldi	r27, 0x00	; 0
 e74:	a0 51       	subi	r26, 0x10	; 16
 e76:	be 4f       	sbci	r27, 0xFE	; 254
	return ((bits & mask) != 0);
 e78:	2c 91       	ld	r18, X
 e7a:	28 23       	and	r18, r24
 e7c:	09 f4       	brne	.+2      	; 0xe80 <main+0x262>
 e7e:	88 cf       	rjmp	.-240    	; 0xd90 <main+0x172>
					userMatrix.row--;
 e80:	e1 50       	subi	r30, 0x01	; 1
 e82:	d7 01       	movw	r26, r14
 e84:	18 96       	adiw	r26, 0x08	; 8
 e86:	ec 93       	st	X, r30
					userMatrix.m[userMatrix.row + 1] = SetBit(userMatrix.m[userMatrix.row + 1], userMatrix.column, 1);
 e88:	f0 e0       	ldi	r31, 0x00	; 0
 e8a:	df 01       	movw	r26, r30
 e8c:	a8 51       	subi	r26, 0x18	; 24
 e8e:	be 4f       	sbci	r27, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
 e90:	9c 91       	ld	r25, X
 e92:	98 2b       	or	r25, r24
 e94:	9c 93       	st	X, r25
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
 e96:	e9 51       	subi	r30, 0x19	; 25
 e98:	fe 4f       	sbci	r31, 0xFE	; 254
 e9a:	80 95       	com	r24
 e9c:	90 81       	ld	r25, Z
 e9e:	89 23       	and	r24, r25
 ea0:	80 83       	st	Z, r24
 ea2:	76 cf       	rjmp	.-276    	; 0xd90 <main+0x172>
				}
			} else if (USARTReceiver == 0x03) { // game left
 ea4:	83 30       	cpi	r24, 0x03	; 3
 ea6:	51 f5       	brne	.+84     	; 0xefc <main+0x2de>
				if (userMatrix.column > 0 &&  GetBit(wallMatrix.m[userMatrix.row], userMatrix.column - 1)) {
 ea8:	f7 01       	movw	r30, r14
 eaa:	21 85       	ldd	r18, Z+9	; 0x09
 eac:	22 23       	and	r18, r18
 eae:	09 f4       	brne	.+2      	; 0xeb2 <main+0x294>
 eb0:	6f cf       	rjmp	.-290    	; 0xd90 <main+0x172>
 eb2:	6f ef       	ldi	r22, 0xFF	; 255
 eb4:	62 0f       	add	r22, r18
 eb6:	80 85       	ldd	r24, Z+8	; 0x08
 eb8:	90 e0       	ldi	r25, 0x00	; 0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
 eba:	a6 01       	movw	r20, r12
 ebc:	06 2e       	mov	r0, r22
 ebe:	02 c0       	rjmp	.+4      	; 0xec4 <main+0x2a6>
 ec0:	44 0f       	add	r20, r20
 ec2:	55 1f       	adc	r21, r21
 ec4:	0a 94       	dec	r0
 ec6:	e2 f7       	brpl	.-8      	; 0xec0 <main+0x2a2>
 ec8:	fc 01       	movw	r30, r24
 eca:	ef 50       	subi	r30, 0x0F	; 15
 ecc:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
 ece:	30 81       	ld	r19, Z
 ed0:	34 23       	and	r19, r20
 ed2:	09 f4       	brne	.+2      	; 0xed6 <main+0x2b8>
 ed4:	5d cf       	rjmp	.-326    	; 0xd90 <main+0x172>
					userMatrix.column--;
 ed6:	d7 01       	movw	r26, r14
 ed8:	19 96       	adiw	r26, 0x09	; 9
 eda:	6c 93       	st	X, r22
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column + 1, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
 edc:	fc 01       	movw	r30, r24
 ede:	e9 51       	subi	r30, 0x19	; 25
 ee0:	fe 4f       	sbci	r31, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
 ee2:	40 95       	com	r20
 ee4:	c6 01       	movw	r24, r12
 ee6:	02 c0       	rjmp	.+4      	; 0xeec <main+0x2ce>
 ee8:	88 0f       	add	r24, r24
 eea:	99 1f       	adc	r25, r25
 eec:	2a 95       	dec	r18
 eee:	e2 f7       	brpl	.-8      	; 0xee8 <main+0x2ca>
 ef0:	9c 01       	movw	r18, r24
 ef2:	80 81       	ld	r24, Z
 ef4:	28 2b       	or	r18, r24
 ef6:	42 23       	and	r20, r18
 ef8:	40 83       	st	Z, r20
 efa:	4a cf       	rjmp	.-364    	; 0xd90 <main+0x172>
				}
			} else if (USARTReceiver == 0x04) { // Game start
 efc:	84 30       	cpi	r24, 0x04	; 4
 efe:	19 f4       	brne	.+6      	; 0xf06 <main+0x2e8>
				displayLED = 1;
 f00:	b0 92 1f 01 	sts	0x011F, r11
 f04:	45 cf       	rjmp	.-374    	; 0xd90 <main+0x172>
			} else if (USARTReceiver == 0x05) { // Game end
 f06:	85 30       	cpi	r24, 0x05	; 5
 f08:	19 f4       	brne	.+6      	; 0xf10 <main+0x2f2>
				displayLED = 0;
 f0a:	10 92 1f 01 	sts	0x011F, r1
 f0e:	40 cf       	rjmp	.-384    	; 0xd90 <main+0x172>
			} else if (USARTReceiver == 0x06) { // Edit start
 f10:	86 30       	cpi	r24, 0x06	; 6
 f12:	c9 f4       	brne	.+50     	; 0xf46 <main+0x328>
				displayEDIT = 1;
 f14:	b0 92 28 01 	sts	0x0128, r11
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 f18:	d8 01       	movw	r26, r16
 f1a:	8c 91       	ld	r24, X
				if (USART_IsSendReady(0)) {
 f1c:	85 ff       	sbrs	r24, 5
 f1e:	04 c0       	rjmp	.+8      	; 0xf28 <main+0x30a>
					USART_Send(curLevel, 0);
 f20:	60 e0       	ldi	r22, 0x00	; 0
 f22:	80 91 06 01 	lds	r24, 0x0106
 f26:	0a db       	rcall	.-2540   	; 0x53c <USART_Send>
 f28:	f8 01       	movw	r30, r16
 f2a:	80 81       	ld	r24, Z
				}
				if (USART_IsSendReady(0)) {
 f2c:	85 ff       	sbrs	r24, 5
 f2e:	30 cf       	rjmp	.-416    	; 0xd90 <main+0x172>
					unsigned char numPatterns = eeprom_read_byte((uint8_t*)(curLevel*250 + 1)) | 0x80;
 f30:	80 91 06 01 	lds	r24, 0x0106
 f34:	a8 9e       	mul	r10, r24
 f36:	c0 01       	movw	r24, r0
 f38:	11 24       	eor	r1, r1
 f3a:	01 96       	adiw	r24, 0x01	; 1
 f3c:	54 d0       	rcall	.+168    	; 0xfe6 <eeprom_read_byte>
					USART_Send(numPatterns, 0);
 f3e:	60 e0       	ldi	r22, 0x00	; 0
 f40:	80 68       	ori	r24, 0x80	; 128
 f42:	fc da       	rcall	.-2568   	; 0x53c <USART_Send>
 f44:	25 cf       	rjmp	.-438    	; 0xd90 <main+0x172>
				}
			} else if (USARTReceiver == 0x07) { // Edit end
 f46:	87 30       	cpi	r24, 0x07	; 7
 f48:	19 f4       	brne	.+6      	; 0xf50 <main+0x332>
				displayEDIT = 0;
 f4a:	10 92 28 01 	sts	0x0128, r1
 f4e:	20 cf       	rjmp	.-448    	; 0xd90 <main+0x172>
			} else if (USARTReceiver == 0x08) { // Edit right
 f50:	88 30       	cpi	r24, 0x08	; 8
 f52:	31 f5       	brne	.+76     	; 0xfa0 <main+0x382>
				
				if (eeprom_read_byte((uint8_t*)(curLevel * 250 + 251)) != 0) {
 f54:	90 90 06 01 	lds	r9, 0x0106
 f58:	a9 9c       	mul	r10, r9
 f5a:	c0 01       	movw	r24, r0
 f5c:	11 24       	eor	r1, r1
 f5e:	85 50       	subi	r24, 0x05	; 5
 f60:	9f 4f       	sbci	r25, 0xFF	; 255
 f62:	41 d0       	rcall	.+130    	; 0xfe6 <eeprom_read_byte>
 f64:	88 23       	and	r24, r24
 f66:	09 f4       	brne	.+2      	; 0xf6a <main+0x34c>
 f68:	13 cf       	rjmp	.-474    	; 0xd90 <main+0x172>
					curLevel++;
 f6a:	93 94       	inc	r9
 f6c:	90 92 06 01 	sts	0x0106, r9
					setLevel();
 f70:	4d dd       	rcall	.-1382   	; 0xa0c <setLevel>
 f72:	d8 01       	movw	r26, r16
 f74:	8c 91       	ld	r24, X
					
					if (USART_IsSendReady(0)) {
 f76:	85 ff       	sbrs	r24, 5
 f78:	04 c0       	rjmp	.+8      	; 0xf82 <main+0x364>
						USART_Send(curLevel, 0);
 f7a:	60 e0       	ldi	r22, 0x00	; 0
 f7c:	80 91 06 01 	lds	r24, 0x0106
 f80:	dd da       	rcall	.-2630   	; 0x53c <USART_Send>
 f82:	f8 01       	movw	r30, r16
 f84:	80 81       	ld	r24, Z
					}
					if (USART_IsSendReady(0)) {
 f86:	85 ff       	sbrs	r24, 5
 f88:	03 cf       	rjmp	.-506    	; 0xd90 <main+0x172>
						unsigned char numPatterns = eeprom_read_byte((uint8_t*)(curLevel*250 + 1)) | 0x80;
 f8a:	80 91 06 01 	lds	r24, 0x0106
 f8e:	a8 9e       	mul	r10, r24
 f90:	c0 01       	movw	r24, r0
 f92:	11 24       	eor	r1, r1
 f94:	01 96       	adiw	r24, 0x01	; 1
 f96:	27 d0       	rcall	.+78     	; 0xfe6 <eeprom_read_byte>
						USART_Send(numPatterns, 0);
 f98:	60 e0       	ldi	r22, 0x00	; 0
 f9a:	80 68       	ori	r24, 0x80	; 128
 f9c:	cf da       	rcall	.-2658   	; 0x53c <USART_Send>
 f9e:	f8 ce       	rjmp	.-528    	; 0xd90 <main+0x172>
					}
				}
			} else if (USARTReceiver == 0x09) { // Edit left
 fa0:	89 30       	cpi	r24, 0x09	; 9
 fa2:	09 f0       	breq	.+2      	; 0xfa6 <main+0x388>
 fa4:	f5 ce       	rjmp	.-534    	; 0xd90 <main+0x172>
				if (curLevel > 0) {
 fa6:	80 91 06 01 	lds	r24, 0x0106
 faa:	88 23       	and	r24, r24
 fac:	09 f4       	brne	.+2      	; 0xfb0 <main+0x392>
 fae:	f0 ce       	rjmp	.-544    	; 0xd90 <main+0x172>
					curLevel--;
 fb0:	81 50       	subi	r24, 0x01	; 1
 fb2:	80 93 06 01 	sts	0x0106, r24
					setLevel();
 fb6:	2a dd       	rcall	.-1452   	; 0xa0c <setLevel>
 fb8:	d8 01       	movw	r26, r16
 fba:	8c 91       	ld	r24, X
					
					if (USART_IsSendReady(0)) {
 fbc:	85 ff       	sbrs	r24, 5
 fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <main+0x3aa>
						USART_Send(curLevel, 0);
 fc0:	60 e0       	ldi	r22, 0x00	; 0
 fc2:	80 91 06 01 	lds	r24, 0x0106
 fc6:	ba da       	rcall	.-2700   	; 0x53c <USART_Send>
 fc8:	f8 01       	movw	r30, r16
 fca:	80 81       	ld	r24, Z
					}
					
					if (USART_IsSendReady(0)) {
 fcc:	85 ff       	sbrs	r24, 5
 fce:	e0 ce       	rjmp	.-576    	; 0xd90 <main+0x172>
						unsigned char numPatterns = eeprom_read_byte((uint8_t*)(curLevel*250 + 1)) | 0x80;
 fd0:	80 91 06 01 	lds	r24, 0x0106
 fd4:	a8 9e       	mul	r10, r24
 fd6:	c0 01       	movw	r24, r0
 fd8:	11 24       	eor	r1, r1
 fda:	01 96       	adiw	r24, 0x01	; 1
 fdc:	04 d0       	rcall	.+8      	; 0xfe6 <eeprom_read_byte>
						USART_Send(numPatterns, 0);
 fde:	60 e0       	ldi	r22, 0x00	; 0
 fe0:	80 68       	ori	r24, 0x80	; 128
 fe2:	ac da       	rcall	.-2728   	; 0x53c <USART_Send>
 fe4:	d5 ce       	rjmp	.-598    	; 0xd90 <main+0x172>

00000fe6 <eeprom_read_byte>:
 fe6:	f9 99       	sbic	0x1f, 1	; 31
 fe8:	fe cf       	rjmp	.-4      	; 0xfe6 <eeprom_read_byte>
 fea:	92 bd       	out	0x22, r25	; 34
 fec:	81 bd       	out	0x21, r24	; 33
 fee:	f8 9a       	sbi	0x1f, 0	; 31
 ff0:	99 27       	eor	r25, r25
 ff2:	80 b5       	in	r24, 0x20	; 32
 ff4:	08 95       	ret

00000ff6 <_exit>:
 ff6:	f8 94       	cli

00000ff8 <__stop_program>:
 ff8:	ff cf       	rjmp	.-2      	; 0xff8 <__stop_program>
