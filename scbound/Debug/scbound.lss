
scbound.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001d56  00001dea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fc  00800104  00800104  00001dee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001dee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b40  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000040c  00000000  00000000  00003ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d3  00000000  00000000  00003edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  000050b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000548  00000000  00000000  000054b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001211  00000000  00000000  000059f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00006c09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	e1 c0       	rjmp	.+450    	; 0x1f8 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e5       	ldi	r30, 0x56	; 86
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 30       	cpi	r26, 0x04	; 4
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a4 e0       	ldi	r26, 0x04	; 4
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 30       	cpi	r26, 0x00	; 0
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	94 d4       	rcall	.+2344   	; 0x9ec <main>
      c4:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <ETIMERTick>:
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
      ca:	00 97       	sbiw	r24, 0x00	; 0
      cc:	21 f0       	breq	.+8      	; 0xd6 <ETIMERTick+0xc>
      ce:	81 30       	cpi	r24, 0x01	; 1
      d0:	91 05       	cpc	r25, r1
      d2:	49 f0       	breq	.+18     	; 0xe6 <ETIMERTick+0x1c>
      d4:	05 c0       	rjmp	.+10     	; 0xe0 <ETIMERTick+0x16>
      d6:	10 92 05 01 	sts	0x0105, r1
      da:	10 92 04 01 	sts	0x0104, r1
      de:	03 c0       	rjmp	.+6      	; 0xe6 <ETIMERTick+0x1c>
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	91 05       	cpc	r25, r1
      e4:	f1 f4       	brne	.+60     	; 0x122 <ETIMERTick+0x58>
      e6:	80 91 04 01 	lds	r24, 0x0104
      ea:	90 91 05 01 	lds	r25, 0x0105
      ee:	01 96       	adiw	r24, 0x01	; 1
      f0:	90 93 05 01 	sts	0x0105, r25
      f4:	80 93 04 01 	sts	0x0104, r24
      f8:	80 91 07 01 	lds	r24, 0x0107
      fc:	90 91 08 01 	lds	r25, 0x0108
     100:	a0 91 09 01 	lds	r26, 0x0109
     104:	b0 91 0a 01 	lds	r27, 0x010A
     108:	01 96       	adiw	r24, 0x01	; 1
     10a:	a1 1d       	adc	r26, r1
     10c:	b1 1d       	adc	r27, r1
     10e:	80 93 07 01 	sts	0x0107, r24
     112:	90 93 08 01 	sts	0x0108, r25
     116:	a0 93 09 01 	sts	0x0109, r26
     11a:	b0 93 0a 01 	sts	0x010A, r27
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	08 95       	ret

00000124 <initTasks>:
     124:	ef e0       	ldi	r30, 0x0F	; 15
     126:	f1 e0       	ldi	r31, 0x01	; 1
     128:	11 82       	std	Z+1, r1	; 0x01
     12a:	10 82       	st	Z, r1
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	82 83       	std	Z+2, r24	; 0x02
     136:	93 83       	std	Z+3, r25	; 0x03
     138:	a4 83       	std	Z+4, r26	; 0x04
     13a:	b5 83       	std	Z+5, r27	; 0x05
     13c:	86 83       	std	Z+6, r24	; 0x06
     13e:	97 83       	std	Z+7, r25	; 0x07
     140:	a0 87       	std	Z+8, r26	; 0x08
     142:	b1 87       	std	Z+9, r27	; 0x09
     144:	85 e6       	ldi	r24, 0x65	; 101
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	93 87       	std	Z+11, r25	; 0x0b
     14a:	82 87       	std	Z+10, r24	; 0x0a
     14c:	08 95       	ret

0000014e <TimerOn>:
     14e:	8b e0       	ldi	r24, 0x0B	; 11
     150:	80 93 81 00 	sts	0x0081, r24
     154:	8d e7       	ldi	r24, 0x7D	; 125
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	90 93 89 00 	sts	0x0089, r25
     15c:	80 93 88 00 	sts	0x0088, r24
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	80 93 6f 00 	sts	0x006F, r24
     166:	10 92 85 00 	sts	0x0085, r1
     16a:	10 92 84 00 	sts	0x0084, r1
     16e:	80 91 00 01 	lds	r24, 0x0100
     172:	90 91 01 01 	lds	r25, 0x0101
     176:	a0 91 02 01 	lds	r26, 0x0102
     17a:	b0 91 03 01 	lds	r27, 0x0103
     17e:	80 93 0b 01 	sts	0x010B, r24
     182:	90 93 0c 01 	sts	0x010C, r25
     186:	a0 93 0d 01 	sts	0x010D, r26
     18a:	b0 93 0e 01 	sts	0x010E, r27
     18e:	8f b7       	in	r24, 0x3f	; 63
     190:	80 68       	ori	r24, 0x80	; 128
     192:	8f bf       	out	0x3f, r24	; 63
     194:	08 95       	ret

00000196 <TimerISR>:
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	ef e0       	ldi	r30, 0x0F	; 15
     19c:	f1 e0       	ldi	r31, 0x01	; 1
     19e:	86 81       	ldd	r24, Z+6	; 0x06
     1a0:	97 81       	ldd	r25, Z+7	; 0x07
     1a2:	a0 85       	ldd	r26, Z+8	; 0x08
     1a4:	b1 85       	ldd	r27, Z+9	; 0x09
     1a6:	42 81       	ldd	r20, Z+2	; 0x02
     1a8:	53 81       	ldd	r21, Z+3	; 0x03
     1aa:	64 81       	ldd	r22, Z+4	; 0x04
     1ac:	75 81       	ldd	r23, Z+5	; 0x05
     1ae:	84 17       	cp	r24, r20
     1b0:	95 07       	cpc	r25, r21
     1b2:	a6 07       	cpc	r26, r22
     1b4:	b7 07       	cpc	r27, r23
     1b6:	90 f0       	brcs	.+36     	; 0x1dc <TimerISR+0x46>
     1b8:	ef 01       	movw	r28, r30
     1ba:	02 84       	ldd	r0, Z+10	; 0x0a
     1bc:	f3 85       	ldd	r31, Z+11	; 0x0b
     1be:	e0 2d       	mov	r30, r0
     1c0:	88 81       	ld	r24, Y
     1c2:	99 81       	ldd	r25, Y+1	; 0x01
     1c4:	09 95       	icall
     1c6:	99 83       	std	Y+1, r25	; 0x01
     1c8:	88 83       	st	Y, r24
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	a0 e0       	ldi	r26, 0x00	; 0
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	8e 83       	std	Y+6, r24	; 0x06
     1d4:	9f 83       	std	Y+7, r25	; 0x07
     1d6:	a8 87       	std	Y+8, r26	; 0x08
     1d8:	b9 87       	std	Y+9, r27	; 0x09
     1da:	0b c0       	rjmp	.+22     	; 0x1f2 <TimerISR+0x5c>
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	a1 1d       	adc	r26, r1
     1e0:	b1 1d       	adc	r27, r1
     1e2:	80 93 15 01 	sts	0x0115, r24
     1e6:	90 93 16 01 	sts	0x0116, r25
     1ea:	a0 93 17 01 	sts	0x0117, r26
     1ee:	b0 93 18 01 	sts	0x0118, r27
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <__vector_13>:
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	0b b6       	in	r0, 0x3b	; 59
     204:	0f 92       	push	r0
     206:	2f 93       	push	r18
     208:	3f 93       	push	r19
     20a:	4f 93       	push	r20
     20c:	5f 93       	push	r21
     20e:	6f 93       	push	r22
     210:	7f 93       	push	r23
     212:	8f 93       	push	r24
     214:	9f 93       	push	r25
     216:	af 93       	push	r26
     218:	bf 93       	push	r27
     21a:	ef 93       	push	r30
     21c:	ff 93       	push	r31
     21e:	80 91 0b 01 	lds	r24, 0x010B
     222:	90 91 0c 01 	lds	r25, 0x010C
     226:	a0 91 0d 01 	lds	r26, 0x010D
     22a:	b0 91 0e 01 	lds	r27, 0x010E
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	a1 09       	sbc	r26, r1
     232:	b1 09       	sbc	r27, r1
     234:	80 93 0b 01 	sts	0x010B, r24
     238:	90 93 0c 01 	sts	0x010C, r25
     23c:	a0 93 0d 01 	sts	0x010D, r26
     240:	b0 93 0e 01 	sts	0x010E, r27
     244:	89 2b       	or	r24, r25
     246:	8a 2b       	or	r24, r26
     248:	8b 2b       	or	r24, r27
     24a:	89 f4       	brne	.+34     	; 0x26e <__vector_13+0x76>
     24c:	a4 df       	rcall	.-184    	; 0x196 <TimerISR>
     24e:	80 91 00 01 	lds	r24, 0x0100
     252:	90 91 01 01 	lds	r25, 0x0101
     256:	a0 91 02 01 	lds	r26, 0x0102
     25a:	b0 91 03 01 	lds	r27, 0x0103
     25e:	80 93 0b 01 	sts	0x010B, r24
     262:	90 93 0c 01 	sts	0x010C, r25
     266:	a0 93 0d 01 	sts	0x010D, r26
     26a:	b0 93 0e 01 	sts	0x010E, r27
     26e:	ff 91       	pop	r31
     270:	ef 91       	pop	r30
     272:	bf 91       	pop	r27
     274:	af 91       	pop	r26
     276:	9f 91       	pop	r25
     278:	8f 91       	pop	r24
     27a:	7f 91       	pop	r23
     27c:	6f 91       	pop	r22
     27e:	5f 91       	pop	r21
     280:	4f 91       	pop	r20
     282:	3f 91       	pop	r19
     284:	2f 91       	pop	r18
     286:	0f 90       	pop	r0
     288:	0b be       	out	0x3b, r0	; 59
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <clearSingleMatrix>:
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	60 97       	sbiw	r28, 0x10	; 16
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	29 87       	std	Y+9, r18	; 0x09
     2aa:	3a 87       	std	Y+10, r19	; 0x0a
     2ac:	4b 87       	std	Y+11, r20	; 0x0b
     2ae:	5c 87       	std	Y+12, r21	; 0x0c
     2b0:	6d 87       	std	Y+13, r22	; 0x0d
     2b2:	7e 87       	std	Y+14, r23	; 0x0e
     2b4:	8f 87       	std	Y+15, r24	; 0x0f
     2b6:	98 8b       	std	Y+16, r25	; 0x10
     2b8:	fe 01       	movw	r30, r28
     2ba:	39 96       	adiw	r30, 0x09	; 9
     2bc:	9e 01       	movw	r18, r28
     2be:	2f 5e       	subi	r18, 0xEF	; 239
     2c0:	3f 4f       	sbci	r19, 0xFF	; 255
     2c2:	8f ef       	ldi	r24, 0xFF	; 255
     2c4:	81 93       	st	Z+, r24
     2c6:	e2 17       	cp	r30, r18
     2c8:	f3 07       	cpc	r31, r19
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <clearSingleMatrix+0x30>
     2cc:	88 e0       	ldi	r24, 0x08	; 8
     2ce:	fe 01       	movw	r30, r28
     2d0:	39 96       	adiw	r30, 0x09	; 9
     2d2:	de 01       	movw	r26, r28
     2d4:	11 96       	adiw	r26, 0x01	; 1
     2d6:	01 90       	ld	r0, Z+
     2d8:	0d 92       	st	X+, r0
     2da:	8a 95       	dec	r24
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <clearSingleMatrix+0x42>
     2de:	29 81       	ldd	r18, Y+1	; 0x01
     2e0:	3a 81       	ldd	r19, Y+2	; 0x02
     2e2:	4b 81       	ldd	r20, Y+3	; 0x03
     2e4:	5c 81       	ldd	r21, Y+4	; 0x04
     2e6:	6d 81       	ldd	r22, Y+5	; 0x05
     2e8:	7e 81       	ldd	r23, Y+6	; 0x06
     2ea:	8f 81       	ldd	r24, Y+7	; 0x07
     2ec:	98 85       	ldd	r25, Y+8	; 0x08
     2ee:	60 96       	adiw	r28, 0x10	; 16
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <initSingleUserMatrix>:
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	2a 97       	sbiw	r28, 0x0a	; 10
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	bc 01       	movw	r22, r24
     31e:	e9 82       	std	Y+1, r14	; 0x01
     320:	fa 82       	std	Y+2, r15	; 0x02
     322:	0b 83       	std	Y+3, r16	; 0x03
     324:	1c 83       	std	Y+4, r17	; 0x04
     326:	2d 83       	std	Y+5, r18	; 0x05
     328:	3e 83       	std	Y+6, r19	; 0x06
     32a:	4f 83       	std	Y+7, r20	; 0x07
     32c:	58 87       	std	Y+8, r21	; 0x08
     32e:	fe 01       	movw	r30, r28
     330:	31 96       	adiw	r30, 0x01	; 1
     332:	9e 01       	movw	r18, r28
     334:	27 5f       	subi	r18, 0xF7	; 247
     336:	3f 4f       	sbci	r19, 0xFF	; 255
     338:	9f ef       	ldi	r25, 0xFF	; 255
     33a:	91 93       	st	Z+, r25
     33c:	e2 17       	cp	r30, r18
     33e:	f3 07       	cpc	r31, r19
     340:	e1 f7       	brne	.-8      	; 0x33a <initSingleUserMatrix+0x3a>
     342:	99 81       	ldd	r25, Y+1	; 0x01
     344:	97 7f       	andi	r25, 0xF7	; 247
     346:	99 83       	std	Y+1, r25	; 0x01
     348:	19 86       	std	Y+9, r1	; 0x09
     34a:	83 e0       	ldi	r24, 0x03	; 3
     34c:	8a 87       	std	Y+10, r24	; 0x0a
     34e:	8a e0       	ldi	r24, 0x0A	; 10
     350:	fe 01       	movw	r30, r28
     352:	31 96       	adiw	r30, 0x01	; 1
     354:	db 01       	movw	r26, r22
     356:	01 90       	ld	r0, Z+
     358:	0d 92       	st	X+, r0
     35a:	8a 95       	dec	r24
     35c:	e1 f7       	brne	.-8      	; 0x356 <initSingleUserMatrix+0x56>
     35e:	cb 01       	movw	r24, r22
     360:	2a 96       	adiw	r28, 0x0a	; 10
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	de bf       	out	0x3e, r29	; 62
     368:	0f be       	out	0x3f, r0	; 63
     36a:	cd bf       	out	0x3d, r28	; 61
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	ff 90       	pop	r15
     376:	ef 90       	pop	r14
     378:	08 95       	ret

0000037a <shiftSR>:
     37a:	85 b9       	out	0x05, r24	; 5
     37c:	29 9a       	sbi	0x05, 1	; 5
     37e:	15 b8       	out	0x05, r1	; 5
     380:	08 95       	ret

00000382 <shiftWhole>:
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	e1 e0       	ldi	r30, 0x01	; 1
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	71 e0       	ldi	r23, 0x01	; 1
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	af 01       	movw	r20, r30
     390:	02 2e       	mov	r0, r18
     392:	02 c0       	rjmp	.+4      	; 0x398 <shiftWhole+0x16>
     394:	44 0f       	add	r20, r20
     396:	55 1f       	adc	r21, r21
     398:	0a 94       	dec	r0
     39a:	e2 f7       	brpl	.-8      	; 0x394 <shiftWhole+0x12>
     39c:	48 23       	and	r20, r24
     39e:	97 2f       	mov	r25, r23
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <shiftWhole+0x22>
     3a2:	96 2f       	mov	r25, r22
     3a4:	95 b9       	out	0x05, r25	; 5
     3a6:	29 9a       	sbi	0x05, 1	; 5
     3a8:	65 b9       	out	0x05, r22	; 5
     3aa:	2f 5f       	subi	r18, 0xFF	; 255
     3ac:	3f 4f       	sbci	r19, 0xFF	; 255
     3ae:	28 30       	cpi	r18, 0x08	; 8
     3b0:	31 05       	cpc	r19, r1
     3b2:	69 f7       	brne	.-38     	; 0x38e <shiftWhole+0xc>
     3b4:	84 e0       	ldi	r24, 0x04	; 4
     3b6:	85 b9       	out	0x05, r24	; 5
     3b8:	08 95       	ret

000003ba <clearSR>:
     3ba:	cf 93       	push	r28
     3bc:	c8 e0       	ldi	r28, 0x08	; 8
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	dc df       	rcall	.-72     	; 0x37a <shiftSR>
     3c2:	c1 50       	subi	r28, 0x01	; 1
     3c4:	e1 f7       	brne	.-8      	; 0x3be <clearSR+0x4>
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	85 b9       	out	0x05, r24	; 5
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <d3_clearSR>:
     3ce:	f5 df       	rcall	.-22     	; 0x3ba <clearSR>
     3d0:	f4 df       	rcall	.-24     	; 0x3ba <clearSR>
     3d2:	f3 cf       	rjmp	.-26     	; 0x3ba <clearSR>
     3d4:	08 95       	ret

000003d6 <d3_setRowMatrixColor>:
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	18 2f       	mov	r17, r24
     3e0:	c9 2f       	mov	r28, r25
     3e2:	06 2f       	mov	r16, r22
     3e4:	d4 2f       	mov	r29, r20
     3e6:	f3 df       	rcall	.-26     	; 0x3ce <d3_clearSR>
     3e8:	51 e0       	ldi	r21, 0x01	; 1
     3ea:	01 c0       	rjmp	.+2      	; 0x3ee <d3_setRowMatrixColor+0x18>
     3ec:	55 0f       	add	r21, r21
     3ee:	0a 95       	dec	r16
     3f0:	ea f7       	brpl	.-6      	; 0x3ec <d3_setRowMatrixColor+0x16>
     3f2:	e1 2f       	mov	r30, r17
     3f4:	fc 2f       	mov	r31, r28
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	c0 e0       	ldi	r28, 0x00	; 0
     3fc:	a1 e0       	ldi	r26, 0x01	; 1
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	91 91       	ld	r25, Z+
     402:	95 23       	and	r25, r21
     404:	49 f0       	breq	.+18     	; 0x418 <d3_setRowMatrixColor+0x42>
     406:	cd 01       	movw	r24, r26
     408:	02 2e       	mov	r0, r18
     40a:	02 c0       	rjmp	.+4      	; 0x410 <d3_setRowMatrixColor+0x3a>
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	0a 94       	dec	r0
     412:	e2 f7       	brpl	.-8      	; 0x40c <d3_setRowMatrixColor+0x36>
     414:	c8 2b       	or	r28, r24
     416:	09 c0       	rjmp	.+18     	; 0x42a <d3_setRowMatrixColor+0x54>
     418:	bd 01       	movw	r22, r26
     41a:	02 2e       	mov	r0, r18
     41c:	02 c0       	rjmp	.+4      	; 0x422 <d3_setRowMatrixColor+0x4c>
     41e:	66 0f       	add	r22, r22
     420:	77 1f       	adc	r23, r23
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <d3_setRowMatrixColor+0x48>
     426:	60 95       	com	r22
     428:	c6 23       	and	r28, r22
     42a:	2f 5f       	subi	r18, 0xFF	; 255
     42c:	3f 4f       	sbci	r19, 0xFF	; 255
     42e:	28 30       	cpi	r18, 0x08	; 8
     430:	31 05       	cpc	r19, r1
     432:	31 f7       	brne	.-52     	; 0x400 <d3_setRowMatrixColor+0x2a>
     434:	d1 30       	cpi	r29, 0x01	; 1
     436:	71 f0       	breq	.+28     	; 0x454 <d3_setRowMatrixColor+0x7e>
     438:	18 f0       	brcs	.+6      	; 0x440 <d3_setRowMatrixColor+0x6a>
     43a:	d2 30       	cpi	r29, 0x02	; 2
     43c:	31 f0       	breq	.+12     	; 0x44a <d3_setRowMatrixColor+0x74>
     43e:	0e c0       	rjmp	.+28     	; 0x45c <d3_setRowMatrixColor+0x86>
     440:	bc df       	rcall	.-136    	; 0x3ba <clearSR>
     442:	8c 2f       	mov	r24, r28
     444:	9e df       	rcall	.-196    	; 0x382 <shiftWhole>
     446:	b9 df       	rcall	.-142    	; 0x3ba <clearSR>
     448:	09 c0       	rjmp	.+18     	; 0x45c <d3_setRowMatrixColor+0x86>
     44a:	8c 2f       	mov	r24, r28
     44c:	9a df       	rcall	.-204    	; 0x382 <shiftWhole>
     44e:	b5 df       	rcall	.-150    	; 0x3ba <clearSR>
     450:	b4 df       	rcall	.-152    	; 0x3ba <clearSR>
     452:	04 c0       	rjmp	.+8      	; 0x45c <d3_setRowMatrixColor+0x86>
     454:	b2 df       	rcall	.-156    	; 0x3ba <clearSR>
     456:	b1 df       	rcall	.-158    	; 0x3ba <clearSR>
     458:	8c 2f       	mov	r24, r28
     45a:	93 df       	rcall	.-218    	; 0x382 <shiftWhole>
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	08 95       	ret

00000466 <d3_setMatrixColor>:
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	6c 01       	movw	r12, r24
     476:	f6 2e       	mov	r15, r22
     478:	c0 e0       	ldi	r28, 0x00	; 0
     47a:	d0 e0       	ldi	r29, 0x00	; 0
     47c:	01 e0       	ldi	r16, 0x01	; 1
     47e:	10 e0       	ldi	r17, 0x00	; 0
     480:	98 01       	movw	r18, r16
     482:	0c 2e       	mov	r0, r28
     484:	02 c0       	rjmp	.+4      	; 0x48a <d3_setMatrixColor+0x24>
     486:	22 0f       	add	r18, r18
     488:	33 1f       	adc	r19, r19
     48a:	0a 94       	dec	r0
     48c:	e2 f7       	brpl	.-8      	; 0x486 <d3_setMatrixColor+0x20>
     48e:	28 b9       	out	0x08, r18	; 8
     490:	4f 2d       	mov	r20, r15
     492:	6c 2f       	mov	r22, r28
     494:	c6 01       	movw	r24, r12
     496:	9f df       	rcall	.-194    	; 0x3d6 <d3_setRowMatrixColor>
     498:	8f e8       	ldi	r24, 0x8F	; 143
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <d3_setMatrixColor+0x36>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <d3_setMatrixColor+0x3c>
     4a2:	00 00       	nop
     4a4:	94 df       	rcall	.-216    	; 0x3ce <d3_clearSR>
     4a6:	21 96       	adiw	r28, 0x01	; 1
     4a8:	c8 30       	cpi	r28, 0x08	; 8
     4aa:	d1 05       	cpc	r29, r1
     4ac:	49 f7       	brne	.-46     	; 0x480 <d3_setMatrixColor+0x1a>
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	08 95       	ret

000004be <initExplosions>:
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	9c 01       	movw	r18, r24
     4c8:	92 e1       	ldi	r25, 0x12	; 18
     4ca:	91 50       	subi	r25, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <initExplosions+0xc>
     4ce:	c7 54       	subi	r28, 0x47	; 71
     4d0:	df 4f       	sbci	r29, 0xFF	; 255
     4d2:	18 82       	st	Y, r1
     4d4:	c9 5b       	subi	r28, 0xB9	; 185
     4d6:	d0 40       	sbci	r29, 0x00	; 0
     4d8:	c6 54       	subi	r28, 0x46	; 70
     4da:	df 4f       	sbci	r29, 0xFF	; 255
     4dc:	18 82       	st	Y, r1
     4de:	ca 5b       	subi	r28, 0xBA	; 186
     4e0:	d0 40       	sbci	r29, 0x00	; 0
     4e2:	86 eb       	ldi	r24, 0xB6	; 182
     4e4:	fe 01       	movw	r30, r28
     4e6:	35 96       	adiw	r30, 0x05	; 5
     4e8:	d9 01       	movw	r26, r18
     4ea:	01 90       	ld	r0, Z+
     4ec:	0d 92       	st	X+, r0
     4ee:	8a 95       	dec	r24
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <initExplosions+0x2c>
     4f2:	c9 01       	movw	r24, r18
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <initUSART>:
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	81 f0       	breq	.+32     	; 0x51e <initUSART+0x24>
     4fe:	e1 ec       	ldi	r30, 0xC1	; 193
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	88 61       	ori	r24, 0x18	; 24
     506:	80 83       	st	Z, r24
     508:	e2 ec       	ldi	r30, 0xC2	; 194
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	86 60       	ori	r24, 0x06	; 6
     510:	80 83       	st	Z, r24
     512:	83 e3       	ldi	r24, 0x33	; 51
     514:	80 93 c4 00 	sts	0x00C4, r24
     518:	10 92 c5 00 	sts	0x00C5, r1
     51c:	08 95       	ret
     51e:	e9 ec       	ldi	r30, 0xC9	; 201
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	88 61       	ori	r24, 0x18	; 24
     526:	80 83       	st	Z, r24
     528:	ea ec       	ldi	r30, 0xCA	; 202
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	86 60       	ori	r24, 0x06	; 6
     530:	80 83       	st	Z, r24
     532:	83 e3       	ldi	r24, 0x33	; 51
     534:	80 93 cc 00 	sts	0x00CC, r24
     538:	10 92 cd 00 	sts	0x00CD, r1
     53c:	08 95       	ret

0000053e <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
     53e:	61 30       	cpi	r22, 0x01	; 1
     540:	41 f0       	breq	.+16     	; 0x552 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
     542:	e0 ec       	ldi	r30, 0xC0	; 192
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	90 81       	ld	r25, Z
     548:	95 ff       	sbrs	r25, 5
     54a:	fd cf       	rjmp	.-6      	; 0x546 <USART_Send+0x8>
		UDR0 = sendMe;
     54c:	80 93 c6 00 	sts	0x00C6, r24
     550:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
     552:	e8 ec       	ldi	r30, 0xC8	; 200
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	90 81       	ld	r25, Z
     558:	95 ff       	sbrs	r25, 5
     55a:	fd cf       	rjmp	.-6      	; 0x556 <USART_Send+0x18>
		UDR1 = sendMe;
     55c:	80 93 ce 00 	sts	0x00CE, r24
     560:	08 95       	ret

00000562 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	41 f0       	breq	.+16     	; 0x576 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
     566:	e0 ec       	ldi	r30, 0xC0	; 192
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	88 23       	and	r24, r24
     56e:	ec f7       	brge	.-6      	; 0x56a <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
     570:	80 91 c6 00 	lds	r24, 0x00C6
     574:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
     576:	e8 ec       	ldi	r30, 0xC8	; 200
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	88 23       	and	r24, r24
     57e:	ec f7       	brge	.-6      	; 0x57a <USART_Receive+0x18>
		return UDR1;
     580:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
     584:	08 95       	ret

00000586 <DeathTick>:
			contClock++;
	}
	return state;
}

unsigned char DeathTick() {	
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	2a 97       	sbiw	r28, 0x0a	; 10
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
	if ((displayBlank == 0) && GetBit(explosions.matricies[explosions.displayIndex].m[userMatrix.row], userMatrix.column) == 0) {
     5a2:	80 91 06 01 	lds	r24, 0x0106
     5a6:	81 11       	cpse	r24, r1
     5a8:	41 c0       	rjmp	.+130    	; 0x62c <DeathTick+0xa6>
     5aa:	e5 ee       	ldi	r30, 0xE5	; 229
     5ac:	f1 e0       	ldi	r31, 0x01	; 1
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	01 84       	ldd	r0, Z+9	; 0x09
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DeathTick+0x34>
     5b6:	22 0f       	add	r18, r18
     5b8:	33 1f       	adc	r19, r19
     5ba:	0a 94       	dec	r0
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DeathTick+0x30>
     5be:	90 91 e4 01 	lds	r25, 0x01E4
     5c2:	e0 85       	ldd	r30, Z+8	; 0x08
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	48 e0       	ldi	r20, 0x08	; 8
     5c8:	94 9f       	mul	r25, r20
     5ca:	e0 0d       	add	r30, r0
     5cc:	f1 1d       	adc	r31, r1
     5ce:	11 24       	eor	r1, r1
     5d0:	e1 5d       	subi	r30, 0xD1	; 209
     5d2:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
     5d4:	90 81       	ld	r25, Z
     5d6:	29 23       	and	r18, r25
     5d8:	61 f5       	brne	.+88     	; 0x632 <DeathTick+0xac>
		userMatrix = initSingleUserMatrix(userMatrix);
     5da:	e0 90 e5 01 	lds	r14, 0x01E5
     5de:	f0 90 e6 01 	lds	r15, 0x01E6
     5e2:	00 91 e7 01 	lds	r16, 0x01E7
     5e6:	10 91 e8 01 	lds	r17, 0x01E8
     5ea:	20 91 e9 01 	lds	r18, 0x01E9
     5ee:	30 91 ea 01 	lds	r19, 0x01EA
     5f2:	40 91 eb 01 	lds	r20, 0x01EB
     5f6:	50 91 ec 01 	lds	r21, 0x01EC
     5fa:	60 91 ed 01 	lds	r22, 0x01ED
     5fe:	70 91 ee 01 	lds	r23, 0x01EE
     602:	ce 01       	movw	r24, r28
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	7c de       	rcall	.-776    	; 0x300 <initSingleUserMatrix>
     608:	8a e0       	ldi	r24, 0x0A	; 10
     60a:	fe 01       	movw	r30, r28
     60c:	31 96       	adiw	r30, 0x01	; 1
     60e:	a5 ee       	ldi	r26, 0xE5	; 229
     610:	b1 e0       	ldi	r27, 0x01	; 1
     612:	01 90       	ld	r0, Z+
     614:	0d 92       	st	X+, r0
     616:	8a 95       	dec	r24
     618:	e1 f7       	brne	.-8      	; 0x612 <DeathTick+0x8c>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
     61a:	80 91 c0 00 	lds	r24, 0x00C0
		if (USART_IsSendReady(0)) {
     61e:	85 ff       	sbrs	r24, 5
     620:	07 c0       	rjmp	.+14     	; 0x630 <DeathTick+0xaa>
			USART_Send(0x00, 0);
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	8b df       	rcall	.-234    	; 0x53e <USART_Send>
		}
		return 1;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	03 c0       	rjmp	.+6      	; 0x632 <DeathTick+0xac>
	} else {
		// nothing
		return 0;
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	01 c0       	rjmp	.+2      	; 0x632 <DeathTick+0xac>
	if ((displayBlank == 0) && GetBit(explosions.matricies[explosions.displayIndex].m[userMatrix.row], userMatrix.column) == 0) {
		userMatrix = initSingleUserMatrix(userMatrix);
		if (USART_IsSendReady(0)) {
			USART_Send(0x00, 0);
		}
		return 1;
     630:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		// nothing
		return 0;
	}
}
     632:	2a 96       	adiw	r28, 0x0a	; 10
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	08 95       	ret

0000064c <Edit_Tick>:

void Edit_Tick() {
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	2a 97       	sbiw	r28, 0x0a	; 10
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
	switch (Edit_State) {
     668:	80 91 ff 01 	lds	r24, 0x01FF
     66c:	81 30       	cpi	r24, 0x01	; 1
     66e:	41 f0       	breq	.+16     	; 0x680 <Edit_Tick+0x34>
     670:	18 f0       	brcs	.+6      	; 0x678 <Edit_Tick+0x2c>
     672:	82 30       	cpi	r24, 0x02	; 2
     674:	c9 f1       	breq	.+114    	; 0x6e8 <Edit_Tick+0x9c>
     676:	40 c0       	rjmp	.+128    	; 0x6f8 <Edit_Tick+0xac>
		case Edit_SMStart:
			Edit_State = Edit_Wait;
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	80 93 ff 01 	sts	0x01FF, r24
			break;
     67e:	44 c0       	rjmp	.+136    	; 0x708 <Edit_Tick+0xbc>
			
		case Edit_Wait:
			if (!displayEDIT) {
     680:	80 91 26 01 	lds	r24, 0x0126
     684:	88 23       	and	r24, r24
     686:	19 f1       	breq	.+70     	; 0x6ce <Edit_Tick+0x82>
				Edit_State = Edit_Wait;
			} else if (displayEDIT) {
				Edit_State = Edit_Display;
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	80 93 ff 01 	sts	0x01FF, r24
				userMatrix = initSingleUserMatrix(userMatrix);
     68e:	e0 90 e5 01 	lds	r14, 0x01E5
     692:	f0 90 e6 01 	lds	r15, 0x01E6
     696:	00 91 e7 01 	lds	r16, 0x01E7
     69a:	10 91 e8 01 	lds	r17, 0x01E8
     69e:	20 91 e9 01 	lds	r18, 0x01E9
     6a2:	30 91 ea 01 	lds	r19, 0x01EA
     6a6:	40 91 eb 01 	lds	r20, 0x01EB
     6aa:	50 91 ec 01 	lds	r21, 0x01EC
     6ae:	60 91 ed 01 	lds	r22, 0x01ED
     6b2:	70 91 ee 01 	lds	r23, 0x01EE
     6b6:	ce 01       	movw	r24, r28
     6b8:	01 96       	adiw	r24, 0x01	; 1
     6ba:	22 de       	rcall	.-956    	; 0x300 <initSingleUserMatrix>
     6bc:	8a e0       	ldi	r24, 0x0A	; 10
     6be:	fe 01       	movw	r30, r28
     6c0:	31 96       	adiw	r30, 0x01	; 1
     6c2:	a5 ee       	ldi	r26, 0xE5	; 229
     6c4:	b1 e0       	ldi	r27, 0x01	; 1
     6c6:	01 90       	ld	r0, Z+
     6c8:	0d 92       	st	X+, r0
     6ca:	8a 95       	dec	r24
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <Edit_Tick+0x7a>
			} 
			d3_setMatrixColor(blankMatrix.m, RED);
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	8e e1       	ldi	r24, 0x1E	; 30
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	c8 de       	rcall	.-624    	; 0x466 <d3_setMatrixColor>
			d3_setMatrixColor(blankMatrix.m, GREEN);
     6d6:	62 e0       	ldi	r22, 0x02	; 2
     6d8:	8e e1       	ldi	r24, 0x1E	; 30
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	c4 de       	rcall	.-632    	; 0x466 <d3_setMatrixColor>
			d3_setMatrixColor(blankMatrix.m, BLUE);
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	8e e1       	ldi	r24, 0x1E	; 30
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	c0 de       	rcall	.-640    	; 0x466 <d3_setMatrixColor>
			break;
     6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <Edit_Tick+0xac>
			
		case Edit_Display:
			if (!displayEDIT) {
     6e8:	80 91 26 01 	lds	r24, 0x0126
     6ec:	81 11       	cpse	r24, r1
     6ee:	08 c0       	rjmp	.+16     	; 0x700 <Edit_Tick+0xb4>
				Edit_State = Edit_Wait;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	80 93 ff 01 	sts	0x01FF, r24
     6f6:	08 c0       	rjmp	.+16     	; 0x708 <Edit_Tick+0xbc>
			
		default:
			break;
	}
	
	switch (Edit_State) {
     6f8:	80 91 ff 01 	lds	r24, 0x01FF
     6fc:	82 30       	cpi	r24, 0x02	; 2
     6fe:	21 f4       	brne	.+8      	; 0x708 <Edit_Tick+0xbc>
		
		case Edit_Wait:
			break;
		
		case Edit_Display:
			d3_setMatrixColor(userMatrix.m, GREEN);
     700:	62 e0       	ldi	r22, 0x02	; 2
     702:	85 ee       	ldi	r24, 0xE5	; 229
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	af de       	rcall	.-674    	; 0x466 <d3_setMatrixColor>
			break;
			
		default:
			break;
	}
}
     708:	2a 96       	adiw	r28, 0x0a	; 10
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	08 95       	ret

00000722 <ExpTick>:
		default:
			break;
	}	
}

Explosions ExpTick(Explosions explosions) {	
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	8c 01       	movw	r16, r24
	// Return if empty (Protection code)
	if (explosions.index == 0) {
     738:	c1 54       	subi	r28, 0x41	; 65
     73a:	df 4f       	sbci	r29, 0xFF	; 255
     73c:	88 81       	ld	r24, Y
     73e:	cf 5b       	subi	r28, 0xBF	; 191
     740:	d0 40       	sbci	r29, 0x00	; 0
     742:	81 11       	cpse	r24, r1
     744:	09 c0       	rjmp	.+18     	; 0x758 <ExpTick+0x36>
		return explosions;
     746:	86 eb       	ldi	r24, 0xB6	; 182
     748:	fe 01       	movw	r30, r28
     74a:	3b 96       	adiw	r30, 0x0b	; 11
     74c:	d8 01       	movw	r26, r16
     74e:	01 90       	ld	r0, Z+
     750:	0d 92       	st	X+, r0
     752:	8a 95       	dec	r24
     754:	e1 f7       	brne	.-8      	; 0x74e <ExpTick+0x2c>
     756:	a6 c0       	rjmp	.+332    	; 0x8a4 <ExpTick+0x182>
	} 
	
	if (explosions.displayIndex >= explosions.index) {
     758:	c0 54       	subi	r28, 0x40	; 64
     75a:	df 4f       	sbci	r29, 0xFF	; 255
     75c:	98 81       	ld	r25, Y
     75e:	c0 5c       	subi	r28, 0xC0	; 192
     760:	d0 40       	sbci	r29, 0x00	; 0
     762:	98 17       	cp	r25, r24
     764:	28 f0       	brcs	.+10     	; 0x770 <ExpTick+0x4e>
		explosions.displayIndex = 0;
     766:	c0 54       	subi	r28, 0x40	; 64
     768:	df 4f       	sbci	r29, 0xFF	; 255
     76a:	18 82       	st	Y, r1
     76c:	c0 5c       	subi	r28, 0xC0	; 192
     76e:	d0 40       	sbci	r29, 0x00	; 0
	}
	
	if (displayBlank == 0)
     770:	80 91 06 01 	lds	r24, 0x0106
     774:	81 11       	cpse	r24, r1
     776:	12 c0       	rjmp	.+36     	; 0x79c <ExpTick+0x7a>
		d3_setMatrixColor(explosions.matricies[explosions.displayIndex].m, RED);
     778:	c0 54       	subi	r28, 0x40	; 64
     77a:	df 4f       	sbci	r29, 0xFF	; 255
     77c:	88 81       	ld	r24, Y
     77e:	c0 5c       	subi	r28, 0xC0	; 192
     780:	d0 40       	sbci	r29, 0x00	; 0
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	2b e0       	ldi	r18, 0x0B	; 11
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	2c 0f       	add	r18, r28
     78a:	3d 1f       	adc	r19, r29
     78c:	48 e0       	ldi	r20, 0x08	; 8
     78e:	84 9f       	mul	r24, r20
     790:	20 0d       	add	r18, r0
     792:	31 1d       	adc	r19, r1
     794:	11 24       	eor	r1, r1
     796:	c9 01       	movw	r24, r18
     798:	66 de       	rcall	.-820    	; 0x466 <d3_setMatrixColor>
     79a:	07 c0       	rjmp	.+14     	; 0x7aa <ExpTick+0x88>
	else if (displayBlank == 1)
     79c:	81 30       	cpi	r24, 0x01	; 1
     79e:	09 f0       	breq	.+2      	; 0x7a2 <ExpTick+0x80>
     7a0:	79 c0       	rjmp	.+242    	; 0x894 <ExpTick+0x172>
		d3_setMatrixColor(blankMatrix.m, RED);
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	8e e1       	ldi	r24, 0x1E	; 30
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	5e de       	rcall	.-836    	; 0x466 <d3_setMatrixColor>
	
	if (displayBlank == 0 && contClock >= (explosions.timeDuration[explosions.displayIndex] * 10)) {
     7aa:	80 91 06 01 	lds	r24, 0x0106
     7ae:	81 11       	cpse	r24, r1
     7b0:	3c c0       	rjmp	.+120    	; 0x82a <ExpTick+0x108>
     7b2:	c0 54       	subi	r28, 0x40	; 64
     7b4:	df 4f       	sbci	r29, 0xFF	; 255
     7b6:	88 81       	ld	r24, Y
     7b8:	c0 5c       	subi	r28, 0xC0	; 192
     7ba:	d0 40       	sbci	r29, 0x00	; 0
     7bc:	ed ea       	ldi	r30, 0xAD	; 173
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	ec 0f       	add	r30, r28
     7c2:	fd 1f       	adc	r31, r29
     7c4:	e8 0f       	add	r30, r24
     7c6:	f1 1d       	adc	r31, r1
     7c8:	20 81       	ld	r18, Z
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	a9 01       	movw	r20, r18
     7ce:	44 0f       	add	r20, r20
     7d0:	55 1f       	adc	r21, r21
     7d2:	22 0f       	add	r18, r18
     7d4:	33 1f       	adc	r19, r19
     7d6:	22 0f       	add	r18, r18
     7d8:	33 1f       	adc	r19, r19
     7da:	22 0f       	add	r18, r18
     7dc:	33 1f       	adc	r19, r19
     7de:	42 0f       	add	r20, r18
     7e0:	53 1f       	adc	r21, r19
     7e2:	05 2e       	mov	r0, r21
     7e4:	00 0c       	add	r0, r0
     7e6:	66 0b       	sbc	r22, r22
     7e8:	77 0b       	sbc	r23, r23
     7ea:	c0 90 07 01 	lds	r12, 0x0107
     7ee:	d0 90 08 01 	lds	r13, 0x0108
     7f2:	e0 90 09 01 	lds	r14, 0x0109
     7f6:	f0 90 0a 01 	lds	r15, 0x010A
     7fa:	c4 16       	cp	r12, r20
     7fc:	d5 06       	cpc	r13, r21
     7fe:	e6 06       	cpc	r14, r22
     800:	f7 06       	cpc	r15, r23
     802:	08 f4       	brcc	.+2      	; 0x806 <ExpTick+0xe4>
     804:	47 c0       	rjmp	.+142    	; 0x894 <ExpTick+0x172>
		displayBlank = 1;
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	90 93 06 01 	sts	0x0106, r25
		explosions.displayIndex++;
     80c:	8f 5f       	subi	r24, 0xFF	; 255
     80e:	c0 54       	subi	r28, 0x40	; 64
     810:	df 4f       	sbci	r29, 0xFF	; 255
     812:	88 83       	st	Y, r24
     814:	c0 5c       	subi	r28, 0xC0	; 192
     816:	d0 40       	sbci	r29, 0x00	; 0
		contClock = 0;
     818:	10 92 07 01 	sts	0x0107, r1
     81c:	10 92 08 01 	sts	0x0108, r1
     820:	10 92 09 01 	sts	0x0109, r1
     824:	10 92 0a 01 	sts	0x010A, r1
     828:	35 c0       	rjmp	.+106    	; 0x894 <ExpTick+0x172>
	} else if (displayBlank == 1 && contClock >= (explosions.timeBetween[explosions.displayIndex] * 10)) {
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	99 f5       	brne	.+102    	; 0x894 <ExpTick+0x172>
     82e:	c0 54       	subi	r28, 0x40	; 64
     830:	df 4f       	sbci	r29, 0xFF	; 255
     832:	88 81       	ld	r24, Y
     834:	c0 5c       	subi	r28, 0xC0	; 192
     836:	d0 40       	sbci	r29, 0x00	; 0
     838:	eb e9       	ldi	r30, 0x9B	; 155
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	ec 0f       	add	r30, r28
     83e:	fd 1f       	adc	r31, r29
     840:	e8 0f       	add	r30, r24
     842:	f1 1d       	adc	r31, r1
     844:	20 81       	ld	r18, Z
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	c9 01       	movw	r24, r18
     84a:	88 0f       	add	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	22 0f       	add	r18, r18
     850:	33 1f       	adc	r19, r19
     852:	22 0f       	add	r18, r18
     854:	33 1f       	adc	r19, r19
     856:	22 0f       	add	r18, r18
     858:	33 1f       	adc	r19, r19
     85a:	82 0f       	add	r24, r18
     85c:	93 1f       	adc	r25, r19
     85e:	09 2e       	mov	r0, r25
     860:	00 0c       	add	r0, r0
     862:	aa 0b       	sbc	r26, r26
     864:	bb 0b       	sbc	r27, r27
     866:	40 91 07 01 	lds	r20, 0x0107
     86a:	50 91 08 01 	lds	r21, 0x0108
     86e:	60 91 09 01 	lds	r22, 0x0109
     872:	70 91 0a 01 	lds	r23, 0x010A
     876:	48 17       	cp	r20, r24
     878:	59 07       	cpc	r21, r25
     87a:	6a 07       	cpc	r22, r26
     87c:	7b 07       	cpc	r23, r27
     87e:	50 f0       	brcs	.+20     	; 0x894 <ExpTick+0x172>
		displayBlank = 0;
     880:	10 92 06 01 	sts	0x0106, r1
		contClock = 0;
     884:	10 92 07 01 	sts	0x0107, r1
     888:	10 92 08 01 	sts	0x0108, r1
     88c:	10 92 09 01 	sts	0x0109, r1
     890:	10 92 0a 01 	sts	0x010A, r1
	}
	
	return explosions;
     894:	86 eb       	ldi	r24, 0xB6	; 182
     896:	fe 01       	movw	r30, r28
     898:	3b 96       	adiw	r30, 0x0b	; 11
     89a:	d8 01       	movw	r26, r16
     89c:	01 90       	ld	r0, Z+
     89e:	0d 92       	st	X+, r0
     8a0:	8a 95       	dec	r24
     8a2:	e1 f7       	brne	.-8      	; 0x89c <ExpTick+0x17a>
     8a4:	c8 01       	movw	r24, r16
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	df 90       	pop	r13
     8b4:	cf 90       	pop	r12
     8b6:	08 95       	ret

000008b8 <LED_Tick>:
		default:
			break;
	}
}

void LED_Tick() {
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	c0 5c       	subi	r28, 0xC0	; 192
     8ca:	d1 09       	sbc	r29, r1
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	cd bf       	out	0x3d, r28	; 61
	switch (LED_State) {
     8d6:	80 91 1b 01 	lds	r24, 0x011B
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	51 f0       	breq	.+20     	; 0x8f2 <LED_Tick+0x3a>
     8de:	18 f0       	brcs	.+6      	; 0x8e6 <LED_Tick+0x2e>
     8e0:	82 30       	cpi	r24, 0x02	; 2
     8e2:	91 f1       	breq	.+100    	; 0x948 <LED_Tick+0x90>
     8e4:	44 c0       	rjmp	.+136    	; 0x96e <LED_Tick+0xb6>
		case LED_SMStart:
			LED_State = LED_Wait;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	80 93 1b 01 	sts	0x011B, r24
			displayLED = 0;
     8ec:	10 92 1d 01 	sts	0x011D, r1
			break;
     8f0:	3e c0       	rjmp	.+124    	; 0x96e <LED_Tick+0xb6>
		
		case LED_Wait:
			if (displayLED) {
     8f2:	80 91 1d 01 	lds	r24, 0x011D
     8f6:	88 23       	and	r24, r24
     8f8:	09 f4       	brne	.+2      	; 0x8fc <LED_Tick+0x44>
     8fa:	6a c0       	rjmp	.+212    	; 0x9d0 <LED_Tick+0x118>
				LED_State = LED_Display;
     8fc:	82 e0       	ldi	r24, 0x02	; 2
     8fe:	80 93 1b 01 	sts	0x011B, r24
				userMatrix = initSingleUserMatrix(userMatrix);
     902:	e0 90 e5 01 	lds	r14, 0x01E5
     906:	f0 90 e6 01 	lds	r15, 0x01E6
     90a:	00 91 e7 01 	lds	r16, 0x01E7
     90e:	10 91 e8 01 	lds	r17, 0x01E8
     912:	20 91 e9 01 	lds	r18, 0x01E9
     916:	30 91 ea 01 	lds	r19, 0x01EA
     91a:	40 91 eb 01 	lds	r20, 0x01EB
     91e:	50 91 ec 01 	lds	r21, 0x01EC
     922:	60 91 ed 01 	lds	r22, 0x01ED
     926:	70 91 ee 01 	lds	r23, 0x01EE
     92a:	ce 01       	movw	r24, r28
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	e8 dc       	rcall	.-1584   	; 0x300 <initSingleUserMatrix>
     930:	8a e0       	ldi	r24, 0x0A	; 10
     932:	fe 01       	movw	r30, r28
     934:	31 96       	adiw	r30, 0x01	; 1
     936:	a5 ee       	ldi	r26, 0xE5	; 229
     938:	b1 e0       	ldi	r27, 0x01	; 1
     93a:	01 90       	ld	r0, Z+
     93c:	0d 92       	st	X+, r0
     93e:	8a 95       	dec	r24
     940:	e1 f7       	brne	.-8      	; 0x93a <LED_Tick+0x82>
				explosions.displayIndex = 0;
     942:	10 92 e4 01 	sts	0x01E4, r1
     946:	13 c0       	rjmp	.+38     	; 0x96e <LED_Tick+0xb6>
				LED_State = LED_Wait;
			}
			break;
		
		case LED_Display:
			if (displayLED) {
     948:	80 91 1d 01 	lds	r24, 0x011D
     94c:	81 11       	cpse	r24, r1
     94e:	13 c0       	rjmp	.+38     	; 0x976 <LED_Tick+0xbe>
				LED_State = LED_Display;
				} else if (!displayLED) {
				LED_State = LED_Wait; 
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	80 93 1b 01 	sts	0x011B, r24
				d3_setMatrixColor(blankMatrix.m, RED);
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	84 dd       	rcall	.-1272   	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, GREEN);
     95e:	62 e0       	ldi	r22, 0x02	; 2
     960:	8e e1       	ldi	r24, 0x1E	; 30
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	80 dd       	rcall	.-1280   	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, BLUE);
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	8e e1       	ldi	r24, 0x1E	; 30
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	7c dd       	rcall	.-1288   	; 0x466 <d3_setMatrixColor>
		
		default:
			break;
	}
	
	switch (LED_State) {
     96e:	80 91 1b 01 	lds	r24, 0x011B
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	69 f5       	brne	.+90     	; 0x9d0 <LED_Tick+0x118>
		
		case LED_Wait:
			break;
		
		case LED_Display:
			explosions = ExpTick(explosions);
     976:	8d b7       	in	r24, 0x3d	; 61
     978:	9e b7       	in	r25, 0x3e	; 62
     97a:	86 5b       	subi	r24, 0xB6	; 182
     97c:	91 09       	sbc	r25, r1
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	9e bf       	out	0x3e, r25	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	8d bf       	out	0x3d, r24	; 61
     988:	ad b7       	in	r26, 0x3d	; 61
     98a:	be b7       	in	r27, 0x3e	; 62
     98c:	11 96       	adiw	r26, 0x01	; 1
     98e:	86 eb       	ldi	r24, 0xB6	; 182
     990:	ef e2       	ldi	r30, 0x2F	; 47
     992:	f1 e0       	ldi	r31, 0x01	; 1
     994:	01 90       	ld	r0, Z+
     996:	0d 92       	st	X+, r0
     998:	8a 95       	dec	r24
     99a:	e1 f7       	brne	.-8      	; 0x994 <LED_Tick+0xdc>
     99c:	ce 01       	movw	r24, r28
     99e:	0b 96       	adiw	r24, 0x0b	; 11
     9a0:	c0 de       	rcall	.-640    	; 0x722 <ExpTick>
     9a2:	86 eb       	ldi	r24, 0xB6	; 182
     9a4:	fe 01       	movw	r30, r28
     9a6:	3b 96       	adiw	r30, 0x0b	; 11
     9a8:	af e2       	ldi	r26, 0x2F	; 47
     9aa:	b1 e0       	ldi	r27, 0x01	; 1
     9ac:	01 90       	ld	r0, Z+
     9ae:	0d 92       	st	X+, r0
     9b0:	8a 95       	dec	r24
     9b2:	e1 f7       	brne	.-8      	; 0x9ac <LED_Tick+0xf4>
			DeathTick();
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	e3 dd       	rcall	.-1082   	; 0x586 <DeathTick>
			d3_setMatrixColor(userMatrix.m, GREEN);
     9c0:	62 e0       	ldi	r22, 0x02	; 2
     9c2:	85 ee       	ldi	r24, 0xE5	; 229
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	4f dd       	rcall	.-1378   	; 0x466 <d3_setMatrixColor>
			d3_setMatrixColor(wallMatrix.m, BLUE);
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	8f ee       	ldi	r24, 0xEF	; 239
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	4b dd       	rcall	.-1386   	; 0x466 <d3_setMatrixColor>
			break;
		
		default:
			break;
	}	
}
     9d0:	c0 54       	subi	r28, 0x40	; 64
     9d2:	df 4f       	sbci	r29, 0xFF	; 255
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	08 95       	ret

000009ec <main>:

enum Edit_States {Edit_SMStart, Edit_Wait, Edit_Display} Edit_State;
void Edit_Tick();


int main(void) {
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	ca 56       	subi	r28, 0x6A	; 106
     9f6:	d9 41       	sbci	r29, 0x19	; 25
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00;
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	84 b9       	out	0x04, r24	; 4
     a06:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
     a08:	8a b9       	out	0x0a, r24	; 10
     a0a:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xFF; PORTC = 0x00;
     a0c:	87 b9       	out	0x07, r24	; 7
     a0e:	18 b8       	out	0x08, r1	; 8
	
	initUSART(0);
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	73 dd       	rcall	.-1306   	; 0x4fa <initUSART>
	
	initTasks();
     a14:	87 db       	rcall	.-2290   	; 0x124 <initTasks>
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	a0 e0       	ldi	r26, 0x00	; 0
     a1c:	b0 e0       	ldi	r27, 0x00	; 0
     a1e:	80 93 00 01 	sts	0x0100, r24
     a22:	90 93 01 01 	sts	0x0101, r25
     a26:	a0 93 02 01 	sts	0x0102, r26
     a2a:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
     a2e:	80 93 0b 01 	sts	0x010B, r24
     a32:	90 93 0c 01 	sts	0x010C, r25
     a36:	a0 93 0d 01 	sts	0x010D, r26
     a3a:	b0 93 0e 01 	sts	0x010E, r27
	
	TimerSet(1);
	TimerOn();
     a3e:	87 db       	rcall	.-2290   	; 0x14e <TimerOn>
	
	LED_State = LED_SMStart;
     a40:	10 92 1b 01 	sts	0x011B, r1
	
	blankMatrix = clearSingleMatrix(blankMatrix);
     a44:	20 91 1e 01 	lds	r18, 0x011E
     a48:	30 91 1f 01 	lds	r19, 0x011F
     a4c:	40 91 20 01 	lds	r20, 0x0120
     a50:	50 91 21 01 	lds	r21, 0x0121
     a54:	60 91 22 01 	lds	r22, 0x0122
     a58:	70 91 23 01 	lds	r23, 0x0123
     a5c:	80 91 24 01 	lds	r24, 0x0124
     a60:	90 91 25 01 	lds	r25, 0x0125
     a64:	17 dc       	rcall	.-2002   	; 0x294 <clearSingleMatrix>
     a66:	ee e1       	ldi	r30, 0x1E	; 30
     a68:	f1 e0       	ldi	r31, 0x01	; 1
     a6a:	20 83       	st	Z, r18
     a6c:	31 83       	std	Z+1, r19	; 0x01
     a6e:	42 83       	std	Z+2, r20	; 0x02
     a70:	53 83       	std	Z+3, r21	; 0x03
     a72:	64 83       	std	Z+4, r22	; 0x04
     a74:	75 83       	std	Z+5, r23	; 0x05
     a76:	86 83       	std	Z+6, r24	; 0x06
     a78:	97 83       	std	Z+7, r25	; 0x07
	
	explosions = initExplosions(explosions);
     a7a:	8d b7       	in	r24, 0x3d	; 61
     a7c:	9e b7       	in	r25, 0x3e	; 62
     a7e:	86 5b       	subi	r24, 0xB6	; 182
     a80:	91 09       	sbc	r25, r1
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	9e bf       	out	0x3e, r25	; 62
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	8d bf       	out	0x3d, r24	; 61
     a8c:	ad b7       	in	r26, 0x3d	; 61
     a8e:	be b7       	in	r27, 0x3e	; 62
     a90:	11 96       	adiw	r26, 0x01	; 1
     a92:	86 eb       	ldi	r24, 0xB6	; 182
     a94:	ef e2       	ldi	r30, 0x2F	; 47
     a96:	f1 e0       	ldi	r31, 0x01	; 1
     a98:	01 90       	ld	r0, Z+
     a9a:	0d 92       	st	X+, r0
     a9c:	8a 95       	dec	r24
     a9e:	e1 f7       	brne	.-8      	; 0xa98 <main+0xac>
     aa0:	ce 01       	movw	r24, r28
     aa2:	8b 54       	subi	r24, 0x4B	; 75
     aa4:	97 4e       	sbci	r25, 0xE7	; 231
     aa6:	0b dd       	rcall	.-1514   	; 0x4be <initExplosions>
     aa8:	86 eb       	ldi	r24, 0xB6	; 182
     aaa:	fe 01       	movw	r30, r28
     aac:	eb 54       	subi	r30, 0x4B	; 75
     aae:	f7 4e       	sbci	r31, 0xE7	; 231
     ab0:	af e2       	ldi	r26, 0x2F	; 47
     ab2:	b1 e0       	ldi	r27, 0x01	; 1
     ab4:	01 90       	ld	r0, Z+
     ab6:	0d 92       	st	X+, r0
     ab8:	8a 95       	dec	r24
     aba:	e1 f7       	brne	.-8      	; 0xab4 <main+0xc8>
	
	matrix = clearSingleMatrix(matrix);
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	20 91 27 01 	lds	r18, 0x0127
     aca:	30 91 28 01 	lds	r19, 0x0128
     ace:	40 91 29 01 	lds	r20, 0x0129
     ad2:	50 91 2a 01 	lds	r21, 0x012A
     ad6:	60 91 2b 01 	lds	r22, 0x012B
     ada:	70 91 2c 01 	lds	r23, 0x012C
     ade:	80 91 2d 01 	lds	r24, 0x012D
     ae2:	90 91 2e 01 	lds	r25, 0x012E
     ae6:	d6 db       	rcall	.-2132   	; 0x294 <clearSingleMatrix>
     ae8:	07 e2       	ldi	r16, 0x27	; 39
     aea:	11 e0       	ldi	r17, 0x01	; 1
     aec:	f8 01       	movw	r30, r16
     aee:	20 83       	st	Z, r18
     af0:	42 83       	std	Z+2, r20	; 0x02
     af2:	53 83       	std	Z+3, r21	; 0x03
     af4:	64 83       	std	Z+4, r22	; 0x04
     af6:	75 83       	std	Z+5, r23	; 0x05
     af8:	97 83       	std	Z+7, r25	; 0x07
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
     afa:	3e 7f       	andi	r19, 0xFE	; 254
	matrix.m[1] = SetBit(matrix.m[1], 0, 0);
     afc:	31 83       	std	Z+1, r19	; 0x01
     afe:	8e 7f       	andi	r24, 0xFE	; 254
	matrix.m[6] = SetBit(matrix.m[6], 0, 0);
     b00:	86 83       	std	Z+6, r24	; 0x06
     b02:	86 eb       	ldi	r24, 0xB6	; 182
     b04:	ef e2       	ldi	r30, 0x2F	; 47
     b06:	f1 e0       	ldi	r31, 0x01	; 1
     b08:	de 01       	movw	r26, r28
     b0a:	a9 58       	subi	r26, 0x89	; 137
     b0c:	b8 4e       	sbci	r27, 0xE8	; 232
     b0e:	01 90       	ld	r0, Z+
     b10:	0d 92       	st	X+, r0
     b12:	8a 95       	dec	r24
     b14:	e1 f7       	brne	.-8      	; 0xb0e <main+0x122>
     b16:	0f 2e       	mov	r0, r31
     b18:	f3 ee       	ldi	r31, 0xE3	; 227
     b1a:	cf 2e       	mov	r12, r31
     b1c:	f1 e0       	ldi	r31, 0x01	; 1
     b1e:	df 2e       	mov	r13, r31
     b20:	f0 2d       	mov	r31, r0
     b22:	d6 01       	movw	r26, r12
     b24:	8c 91       	ld	r24, X
     b26:	98 e0       	ldi	r25, 0x08	; 8
     b28:	f8 01       	movw	r30, r16
     b2a:	de 01       	movw	r26, r28
     b2c:	a3 55       	subi	r26, 0x53	; 83
     b2e:	b7 4e       	sbci	r27, 0xE7	; 231
     b30:	01 90       	ld	r0, Z+
     b32:	0d 92       	st	X+, r0
     b34:	9a 95       	dec	r25
     b36:	e1 f7       	brne	.-8      	; 0xb30 <main+0x144>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     b38:	a7 e7       	ldi	r26, 0x77	; 119
     b3a:	b7 e1       	ldi	r27, 0x17	; 23
     b3c:	ac 0f       	add	r26, r28
     b3e:	bd 1f       	adc	r27, r29
     b40:	e8 e0       	ldi	r30, 0x08	; 8
     b42:	8e 9f       	mul	r24, r30
     b44:	a0 0d       	add	r26, r0
     b46:	b1 1d       	adc	r27, r1
     b48:	11 24       	eor	r1, r1
     b4a:	98 e0       	ldi	r25, 0x08	; 8
     b4c:	fe 01       	movw	r30, r28
     b4e:	e3 55       	subi	r30, 0x53	; 83
     b50:	f7 4e       	sbci	r31, 0xE7	; 231
     b52:	01 90       	ld	r0, Z+
     b54:	0d 92       	st	X+, r0
     b56:	9a 95       	dec	r25
     b58:	e1 f7       	brne	.-8      	; 0xb52 <main+0x166>
	explosions.timeBetween[explosions.index] = a;
     b5a:	27 e7       	ldi	r18, 0x77	; 119
     b5c:	37 e1       	ldi	r19, 0x17	; 23
     b5e:	2c 0f       	add	r18, r28
     b60:	3d 1f       	adc	r19, r29
     b62:	28 0f       	add	r18, r24
     b64:	31 1d       	adc	r19, r1
     b66:	f9 01       	movw	r30, r18
     b68:	e0 57       	subi	r30, 0x70	; 112
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     b6e:	72 96       	adiw	r30, 0x12	; 18
     b70:	68 94       	set
     b72:	ff 24       	eor	r15, r15
     b74:	f1 f8       	bld	r15, 1
     b76:	f0 82       	st	Z, r15
	explosions.index++;
     b78:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     b7a:	c5 5d       	subi	r28, 0xD5	; 213
     b7c:	d7 4e       	sbci	r29, 0xE7	; 231
     b7e:	88 83       	st	Y, r24
     b80:	cb 52       	subi	r28, 0x2B	; 43
     b82:	d8 41       	sbci	r29, 0x18	; 24
     b84:	96 eb       	ldi	r25, 0xB6	; 182
     b86:	fe 01       	movw	r30, r28
     b88:	e9 58       	subi	r30, 0x89	; 137
     b8a:	f8 4e       	sbci	r31, 0xE8	; 232
     b8c:	de 01       	movw	r26, r28
     b8e:	af 53       	subi	r26, 0x3F	; 63
     b90:	b9 4e       	sbci	r27, 0xE9	; 233
     b92:	01 90       	ld	r0, Z+
     b94:	0d 92       	st	X+, r0
     b96:	9a 95       	dec	r25
     b98:	e1 f7       	brne	.-8      	; 0xb92 <main+0x1a6>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     b9a:	cb 58       	subi	r28, 0x8B	; 139
     b9c:	d8 4e       	sbci	r29, 0xE8	; 232
     b9e:	88 83       	st	Y, r24
     ba0:	c5 57       	subi	r28, 0x75	; 117
     ba2:	d7 41       	sbci	r29, 0x17	; 23
     ba4:	86 eb       	ldi	r24, 0xB6	; 182
     ba6:	fe 01       	movw	r30, r28
     ba8:	ef 53       	subi	r30, 0x3F	; 63
     baa:	f9 4e       	sbci	r31, 0xE9	; 233
     bac:	af e2       	ldi	r26, 0x2F	; 47
     bae:	b1 e0       	ldi	r27, 0x01	; 1
     bb0:	01 90       	ld	r0, Z+
     bb2:	0d 92       	st	X+, r0
     bb4:	8a 95       	dec	r24
     bb6:	e1 f7       	brne	.-8      	; 0xbb0 <main+0x1c4>
	
	matrix = clearSingleMatrix(matrix);
     bb8:	20 91 27 01 	lds	r18, 0x0127
     bbc:	30 91 28 01 	lds	r19, 0x0128
     bc0:	40 91 29 01 	lds	r20, 0x0129
     bc4:	50 91 2a 01 	lds	r21, 0x012A
     bc8:	60 91 2b 01 	lds	r22, 0x012B
     bcc:	70 91 2c 01 	lds	r23, 0x012C
     bd0:	80 91 2d 01 	lds	r24, 0x012D
     bd4:	90 91 2e 01 	lds	r25, 0x012E
     bd8:	5d db       	rcall	.-2374   	; 0x294 <clearSingleMatrix>
     bda:	d8 01       	movw	r26, r16
     bdc:	2c 93       	st	X, r18
     bde:	12 96       	adiw	r26, 0x02	; 2
     be0:	4c 93       	st	X, r20
     be2:	12 97       	sbiw	r26, 0x02	; 2
     be4:	13 96       	adiw	r26, 0x03	; 3
     be6:	5c 93       	st	X, r21
     be8:	13 97       	sbiw	r26, 0x03	; 3
     bea:	14 96       	adiw	r26, 0x04	; 4
     bec:	6c 93       	st	X, r22
     bee:	14 97       	sbiw	r26, 0x04	; 4
     bf0:	15 96       	adiw	r26, 0x05	; 5
     bf2:	7c 93       	st	X, r23
     bf4:	15 97       	sbiw	r26, 0x05	; 5
     bf6:	17 96       	adiw	r26, 0x07	; 7
     bf8:	9c 93       	st	X, r25
     bfa:	17 97       	sbiw	r26, 0x07	; 7
     bfc:	3d 7f       	andi	r19, 0xFD	; 253
	matrix.m[1] = SetBit(matrix.m[1], 1, 0);
     bfe:	11 96       	adiw	r26, 0x01	; 1
     c00:	3c 93       	st	X, r19
     c02:	11 97       	sbiw	r26, 0x01	; 1
     c04:	8d 7f       	andi	r24, 0xFD	; 253
	matrix.m[6] = SetBit(matrix.m[6], 1, 0);
     c06:	16 96       	adiw	r26, 0x06	; 6
     c08:	8c 93       	st	X, r24
     c0a:	86 eb       	ldi	r24, 0xB6	; 182
     c0c:	ef e2       	ldi	r30, 0x2F	; 47
     c0e:	f1 e0       	ldi	r31, 0x01	; 1
     c10:	de 01       	movw	r26, r28
     c12:	a5 5f       	subi	r26, 0xF5	; 245
     c14:	b9 4e       	sbci	r27, 0xE9	; 233
     c16:	01 90       	ld	r0, Z+
     c18:	0d 92       	st	X+, r0
     c1a:	8a 95       	dec	r24
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <main+0x22a>
     c1e:	f6 01       	movw	r30, r12
     c20:	80 81       	ld	r24, Z
     c22:	98 e0       	ldi	r25, 0x08	; 8
     c24:	f8 01       	movw	r30, r16
     c26:	de 01       	movw	r26, r28
     c28:	ab 55       	subi	r26, 0x5B	; 91
     c2a:	b7 4e       	sbci	r27, 0xE7	; 231
     c2c:	01 90       	ld	r0, Z+
     c2e:	0d 92       	st	X+, r0
     c30:	9a 95       	dec	r25
     c32:	e1 f7       	brne	.-8      	; 0xc2c <main+0x240>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     c34:	ab e0       	ldi	r26, 0x0B	; 11
     c36:	b6 e1       	ldi	r27, 0x16	; 22
     c38:	ac 0f       	add	r26, r28
     c3a:	bd 1f       	adc	r27, r29
     c3c:	f8 e0       	ldi	r31, 0x08	; 8
     c3e:	8f 9f       	mul	r24, r31
     c40:	a0 0d       	add	r26, r0
     c42:	b1 1d       	adc	r27, r1
     c44:	11 24       	eor	r1, r1
     c46:	98 e0       	ldi	r25, 0x08	; 8
     c48:	fe 01       	movw	r30, r28
     c4a:	eb 55       	subi	r30, 0x5B	; 91
     c4c:	f7 4e       	sbci	r31, 0xE7	; 231
     c4e:	01 90       	ld	r0, Z+
     c50:	0d 92       	st	X+, r0
     c52:	9a 95       	dec	r25
     c54:	e1 f7       	brne	.-8      	; 0xc4e <main+0x262>
	explosions.timeBetween[explosions.index] = a;
     c56:	2b e0       	ldi	r18, 0x0B	; 11
     c58:	36 e1       	ldi	r19, 0x16	; 22
     c5a:	2c 0f       	add	r18, r28
     c5c:	3d 1f       	adc	r19, r29
     c5e:	28 0f       	add	r18, r24
     c60:	31 1d       	adc	r19, r1
     c62:	f9 01       	movw	r30, r18
     c64:	e0 57       	subi	r30, 0x70	; 112
     c66:	ff 4f       	sbci	r31, 0xFF	; 255
     c68:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     c6a:	72 96       	adiw	r30, 0x12	; 18
     c6c:	f0 82       	st	Z, r15
	explosions.index++;
     c6e:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     c70:	c1 54       	subi	r28, 0x41	; 65
     c72:	d9 4e       	sbci	r29, 0xE9	; 233
     c74:	88 83       	st	Y, r24
     c76:	cf 5b       	subi	r28, 0xBF	; 191
     c78:	d6 41       	sbci	r29, 0x16	; 22
     c7a:	96 eb       	ldi	r25, 0xB6	; 182
     c7c:	fe 01       	movw	r30, r28
     c7e:	e5 5f       	subi	r30, 0xF5	; 245
     c80:	f9 4e       	sbci	r31, 0xE9	; 233
     c82:	de 01       	movw	r26, r28
     c84:	ab 5a       	subi	r26, 0xAB	; 171
     c86:	ba 4e       	sbci	r27, 0xEA	; 234
     c88:	01 90       	ld	r0, Z+
     c8a:	0d 92       	st	X+, r0
     c8c:	9a 95       	dec	r25
     c8e:	e1 f7       	brne	.-8      	; 0xc88 <main+0x29c>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     c90:	c7 5f       	subi	r28, 0xF7	; 247
     c92:	d9 4e       	sbci	r29, 0xE9	; 233
     c94:	88 83       	st	Y, r24
     c96:	c9 50       	subi	r28, 0x09	; 9
     c98:	d6 41       	sbci	r29, 0x16	; 22
     c9a:	86 eb       	ldi	r24, 0xB6	; 182
     c9c:	fe 01       	movw	r30, r28
     c9e:	eb 5a       	subi	r30, 0xAB	; 171
     ca0:	fa 4e       	sbci	r31, 0xEA	; 234
     ca2:	af e2       	ldi	r26, 0x2F	; 47
     ca4:	b1 e0       	ldi	r27, 0x01	; 1
     ca6:	01 90       	ld	r0, Z+
     ca8:	0d 92       	st	X+, r0
     caa:	8a 95       	dec	r24
     cac:	e1 f7       	brne	.-8      	; 0xca6 <main+0x2ba>
	
	matrix = clearSingleMatrix(matrix);
     cae:	20 91 27 01 	lds	r18, 0x0127
     cb2:	30 91 28 01 	lds	r19, 0x0128
     cb6:	40 91 29 01 	lds	r20, 0x0129
     cba:	50 91 2a 01 	lds	r21, 0x012A
     cbe:	60 91 2b 01 	lds	r22, 0x012B
     cc2:	70 91 2c 01 	lds	r23, 0x012C
     cc6:	80 91 2d 01 	lds	r24, 0x012D
     cca:	90 91 2e 01 	lds	r25, 0x012E
     cce:	e2 da       	rcall	.-2620   	; 0x294 <clearSingleMatrix>
     cd0:	d8 01       	movw	r26, r16
     cd2:	2c 93       	st	X, r18
     cd4:	12 96       	adiw	r26, 0x02	; 2
     cd6:	4c 93       	st	X, r20
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	13 96       	adiw	r26, 0x03	; 3
     cdc:	5c 93       	st	X, r21
     cde:	13 97       	sbiw	r26, 0x03	; 3
     ce0:	14 96       	adiw	r26, 0x04	; 4
     ce2:	6c 93       	st	X, r22
     ce4:	14 97       	sbiw	r26, 0x04	; 4
     ce6:	15 96       	adiw	r26, 0x05	; 5
     ce8:	7c 93       	st	X, r23
     cea:	15 97       	sbiw	r26, 0x05	; 5
     cec:	17 96       	adiw	r26, 0x07	; 7
     cee:	9c 93       	st	X, r25
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	3b 7f       	andi	r19, 0xFB	; 251
	matrix.m[1] = SetBit(matrix.m[1], 2, 0);
     cf4:	11 96       	adiw	r26, 0x01	; 1
     cf6:	3c 93       	st	X, r19
     cf8:	11 97       	sbiw	r26, 0x01	; 1
     cfa:	8b 7f       	andi	r24, 0xFB	; 251
	matrix.m[6] = SetBit(matrix.m[6], 2, 0);
     cfc:	16 96       	adiw	r26, 0x06	; 6
     cfe:	8c 93       	st	X, r24
     d00:	86 eb       	ldi	r24, 0xB6	; 182
     d02:	ef e2       	ldi	r30, 0x2F	; 47
     d04:	f1 e0       	ldi	r31, 0x01	; 1
     d06:	de 01       	movw	r26, r28
     d08:	a1 56       	subi	r26, 0x61	; 97
     d0a:	bb 4e       	sbci	r27, 0xEB	; 235
     d0c:	01 90       	ld	r0, Z+
     d0e:	0d 92       	st	X+, r0
     d10:	8a 95       	dec	r24
     d12:	e1 f7       	brne	.-8      	; 0xd0c <main+0x320>
     d14:	f6 01       	movw	r30, r12
     d16:	80 81       	ld	r24, Z
     d18:	98 e0       	ldi	r25, 0x08	; 8
     d1a:	f8 01       	movw	r30, r16
     d1c:	de 01       	movw	r26, r28
     d1e:	a3 56       	subi	r26, 0x63	; 99
     d20:	b7 4e       	sbci	r27, 0xE7	; 231
     d22:	01 90       	ld	r0, Z+
     d24:	0d 92       	st	X+, r0
     d26:	9a 95       	dec	r25
     d28:	e1 f7       	brne	.-8      	; 0xd22 <main+0x336>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     d2a:	af e9       	ldi	r26, 0x9F	; 159
     d2c:	b4 e1       	ldi	r27, 0x14	; 20
     d2e:	ac 0f       	add	r26, r28
     d30:	bd 1f       	adc	r27, r29
     d32:	f8 e0       	ldi	r31, 0x08	; 8
     d34:	8f 9f       	mul	r24, r31
     d36:	a0 0d       	add	r26, r0
     d38:	b1 1d       	adc	r27, r1
     d3a:	11 24       	eor	r1, r1
     d3c:	98 e0       	ldi	r25, 0x08	; 8
     d3e:	fe 01       	movw	r30, r28
     d40:	e3 56       	subi	r30, 0x63	; 99
     d42:	f7 4e       	sbci	r31, 0xE7	; 231
     d44:	01 90       	ld	r0, Z+
     d46:	0d 92       	st	X+, r0
     d48:	9a 95       	dec	r25
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <main+0x358>
	explosions.timeBetween[explosions.index] = a;
     d4c:	2f e9       	ldi	r18, 0x9F	; 159
     d4e:	34 e1       	ldi	r19, 0x14	; 20
     d50:	2c 0f       	add	r18, r28
     d52:	3d 1f       	adc	r19, r29
     d54:	28 0f       	add	r18, r24
     d56:	31 1d       	adc	r19, r1
     d58:	f9 01       	movw	r30, r18
     d5a:	e0 57       	subi	r30, 0x70	; 112
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     d60:	72 96       	adiw	r30, 0x12	; 18
     d62:	f0 82       	st	Z, r15
	explosions.index++;
     d64:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     d66:	cd 5a       	subi	r28, 0xAD	; 173
     d68:	da 4e       	sbci	r29, 0xEA	; 234
     d6a:	88 83       	st	Y, r24
     d6c:	c3 55       	subi	r28, 0x53	; 83
     d6e:	d5 41       	sbci	r29, 0x15	; 21
     d70:	96 eb       	ldi	r25, 0xB6	; 182
     d72:	fe 01       	movw	r30, r28
     d74:	e1 56       	subi	r30, 0x61	; 97
     d76:	fb 4e       	sbci	r31, 0xEB	; 235
     d78:	de 01       	movw	r26, r28
     d7a:	a7 51       	subi	r26, 0x17	; 23
     d7c:	bc 4e       	sbci	r27, 0xEC	; 236
     d7e:	01 90       	ld	r0, Z+
     d80:	0d 92       	st	X+, r0
     d82:	9a 95       	dec	r25
     d84:	e1 f7       	brne	.-8      	; 0xd7e <main+0x392>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     d86:	c3 56       	subi	r28, 0x63	; 99
     d88:	db 4e       	sbci	r29, 0xEB	; 235
     d8a:	88 83       	st	Y, r24
     d8c:	cd 59       	subi	r28, 0x9D	; 157
     d8e:	d4 41       	sbci	r29, 0x14	; 20
     d90:	86 eb       	ldi	r24, 0xB6	; 182
     d92:	fe 01       	movw	r30, r28
     d94:	e7 51       	subi	r30, 0x17	; 23
     d96:	fc 4e       	sbci	r31, 0xEC	; 236
     d98:	af e2       	ldi	r26, 0x2F	; 47
     d9a:	b1 e0       	ldi	r27, 0x01	; 1
     d9c:	01 90       	ld	r0, Z+
     d9e:	0d 92       	st	X+, r0
     da0:	8a 95       	dec	r24
     da2:	e1 f7       	brne	.-8      	; 0xd9c <main+0x3b0>
	
	matrix = clearSingleMatrix(matrix);
     da4:	20 91 27 01 	lds	r18, 0x0127
     da8:	30 91 28 01 	lds	r19, 0x0128
     dac:	40 91 29 01 	lds	r20, 0x0129
     db0:	50 91 2a 01 	lds	r21, 0x012A
     db4:	60 91 2b 01 	lds	r22, 0x012B
     db8:	70 91 2c 01 	lds	r23, 0x012C
     dbc:	80 91 2d 01 	lds	r24, 0x012D
     dc0:	90 91 2e 01 	lds	r25, 0x012E
     dc4:	67 da       	rcall	.-2866   	; 0x294 <clearSingleMatrix>
     dc6:	d8 01       	movw	r26, r16
     dc8:	2c 93       	st	X, r18
     dca:	12 96       	adiw	r26, 0x02	; 2
     dcc:	4c 93       	st	X, r20
     dce:	12 97       	sbiw	r26, 0x02	; 2
     dd0:	13 96       	adiw	r26, 0x03	; 3
     dd2:	5c 93       	st	X, r21
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	6c 93       	st	X, r22
     dda:	14 97       	sbiw	r26, 0x04	; 4
     ddc:	15 96       	adiw	r26, 0x05	; 5
     dde:	7c 93       	st	X, r23
     de0:	15 97       	sbiw	r26, 0x05	; 5
     de2:	17 96       	adiw	r26, 0x07	; 7
     de4:	9c 93       	st	X, r25
     de6:	17 97       	sbiw	r26, 0x07	; 7
     de8:	37 7f       	andi	r19, 0xF7	; 247
	matrix.m[1] = SetBit(matrix.m[1], 3, 0);
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	3c 93       	st	X, r19
     dee:	11 97       	sbiw	r26, 0x01	; 1
     df0:	87 7f       	andi	r24, 0xF7	; 247
	matrix.m[6] = SetBit(matrix.m[6], 3, 0);
     df2:	16 96       	adiw	r26, 0x06	; 6
     df4:	8c 93       	st	X, r24
     df6:	86 eb       	ldi	r24, 0xB6	; 182
     df8:	ef e2       	ldi	r30, 0x2F	; 47
     dfa:	f1 e0       	ldi	r31, 0x01	; 1
     dfc:	de 01       	movw	r26, r28
     dfe:	ad 5c       	subi	r26, 0xCD	; 205
     e00:	bc 4e       	sbci	r27, 0xEC	; 236
     e02:	01 90       	ld	r0, Z+
     e04:	0d 92       	st	X+, r0
     e06:	8a 95       	dec	r24
     e08:	e1 f7       	brne	.-8      	; 0xe02 <main+0x416>
     e0a:	f6 01       	movw	r30, r12
     e0c:	80 81       	ld	r24, Z
     e0e:	98 e0       	ldi	r25, 0x08	; 8
     e10:	f8 01       	movw	r30, r16
     e12:	de 01       	movw	r26, r28
     e14:	ab 56       	subi	r26, 0x6B	; 107
     e16:	b7 4e       	sbci	r27, 0xE7	; 231
     e18:	01 90       	ld	r0, Z+
     e1a:	0d 92       	st	X+, r0
     e1c:	9a 95       	dec	r25
     e1e:	e1 f7       	brne	.-8      	; 0xe18 <main+0x42c>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     e20:	a3 e3       	ldi	r26, 0x33	; 51
     e22:	b3 e1       	ldi	r27, 0x13	; 19
     e24:	ac 0f       	add	r26, r28
     e26:	bd 1f       	adc	r27, r29
     e28:	f8 e0       	ldi	r31, 0x08	; 8
     e2a:	8f 9f       	mul	r24, r31
     e2c:	a0 0d       	add	r26, r0
     e2e:	b1 1d       	adc	r27, r1
     e30:	11 24       	eor	r1, r1
     e32:	98 e0       	ldi	r25, 0x08	; 8
     e34:	fe 01       	movw	r30, r28
     e36:	eb 56       	subi	r30, 0x6B	; 107
     e38:	f7 4e       	sbci	r31, 0xE7	; 231
     e3a:	01 90       	ld	r0, Z+
     e3c:	0d 92       	st	X+, r0
     e3e:	9a 95       	dec	r25
     e40:	e1 f7       	brne	.-8      	; 0xe3a <main+0x44e>
	explosions.timeBetween[explosions.index] = a;
     e42:	23 e3       	ldi	r18, 0x33	; 51
     e44:	33 e1       	ldi	r19, 0x13	; 19
     e46:	2c 0f       	add	r18, r28
     e48:	3d 1f       	adc	r19, r29
     e4a:	28 0f       	add	r18, r24
     e4c:	31 1d       	adc	r19, r1
     e4e:	f9 01       	movw	r30, r18
     e50:	e0 57       	subi	r30, 0x70	; 112
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     e56:	72 96       	adiw	r30, 0x12	; 18
     e58:	f0 82       	st	Z, r15
	explosions.index++;
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     e5c:	c9 51       	subi	r28, 0x19	; 25
     e5e:	dc 4e       	sbci	r29, 0xEC	; 236
     e60:	88 83       	st	Y, r24
     e62:	c7 5e       	subi	r28, 0xE7	; 231
     e64:	d3 41       	sbci	r29, 0x13	; 19
     e66:	96 eb       	ldi	r25, 0xB6	; 182
     e68:	fe 01       	movw	r30, r28
     e6a:	ed 5c       	subi	r30, 0xCD	; 205
     e6c:	fc 4e       	sbci	r31, 0xEC	; 236
     e6e:	de 01       	movw	r26, r28
     e70:	a3 58       	subi	r26, 0x83	; 131
     e72:	bd 4e       	sbci	r27, 0xED	; 237
     e74:	01 90       	ld	r0, Z+
     e76:	0d 92       	st	X+, r0
     e78:	9a 95       	dec	r25
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <main+0x488>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     e7c:	cf 5c       	subi	r28, 0xCF	; 207
     e7e:	dc 4e       	sbci	r29, 0xEC	; 236
     e80:	88 83       	st	Y, r24
     e82:	c1 53       	subi	r28, 0x31	; 49
     e84:	d3 41       	sbci	r29, 0x13	; 19
     e86:	86 eb       	ldi	r24, 0xB6	; 182
     e88:	fe 01       	movw	r30, r28
     e8a:	e3 58       	subi	r30, 0x83	; 131
     e8c:	fd 4e       	sbci	r31, 0xED	; 237
     e8e:	af e2       	ldi	r26, 0x2F	; 47
     e90:	b1 e0       	ldi	r27, 0x01	; 1
     e92:	01 90       	ld	r0, Z+
     e94:	0d 92       	st	X+, r0
     e96:	8a 95       	dec	r24
     e98:	e1 f7       	brne	.-8      	; 0xe92 <main+0x4a6>
	
	matrix = clearSingleMatrix(matrix);
     e9a:	20 91 27 01 	lds	r18, 0x0127
     e9e:	30 91 28 01 	lds	r19, 0x0128
     ea2:	40 91 29 01 	lds	r20, 0x0129
     ea6:	50 91 2a 01 	lds	r21, 0x012A
     eaa:	60 91 2b 01 	lds	r22, 0x012B
     eae:	70 91 2c 01 	lds	r23, 0x012C
     eb2:	80 91 2d 01 	lds	r24, 0x012D
     eb6:	90 91 2e 01 	lds	r25, 0x012E
     eba:	ec d9       	rcall	.-3112   	; 0x294 <clearSingleMatrix>
     ebc:	d8 01       	movw	r26, r16
     ebe:	2c 93       	st	X, r18
     ec0:	12 96       	adiw	r26, 0x02	; 2
     ec2:	4c 93       	st	X, r20
     ec4:	12 97       	sbiw	r26, 0x02	; 2
     ec6:	13 96       	adiw	r26, 0x03	; 3
     ec8:	5c 93       	st	X, r21
     eca:	13 97       	sbiw	r26, 0x03	; 3
     ecc:	14 96       	adiw	r26, 0x04	; 4
     ece:	6c 93       	st	X, r22
     ed0:	14 97       	sbiw	r26, 0x04	; 4
     ed2:	15 96       	adiw	r26, 0x05	; 5
     ed4:	7c 93       	st	X, r23
     ed6:	15 97       	sbiw	r26, 0x05	; 5
     ed8:	17 96       	adiw	r26, 0x07	; 7
     eda:	9c 93       	st	X, r25
     edc:	17 97       	sbiw	r26, 0x07	; 7
     ede:	3f 7e       	andi	r19, 0xEF	; 239
	matrix.m[1] = SetBit(matrix.m[1], 4, 0);
     ee0:	11 96       	adiw	r26, 0x01	; 1
     ee2:	3c 93       	st	X, r19
     ee4:	11 97       	sbiw	r26, 0x01	; 1
     ee6:	8f 7e       	andi	r24, 0xEF	; 239
	matrix.m[6] = SetBit(matrix.m[6], 4, 0);
     ee8:	16 96       	adiw	r26, 0x06	; 6
     eea:	8c 93       	st	X, r24
     eec:	86 eb       	ldi	r24, 0xB6	; 182
     eee:	ef e2       	ldi	r30, 0x2F	; 47
     ef0:	f1 e0       	ldi	r31, 0x01	; 1
     ef2:	de 01       	movw	r26, r28
     ef4:	a9 53       	subi	r26, 0x39	; 57
     ef6:	be 4e       	sbci	r27, 0xEE	; 238
     ef8:	01 90       	ld	r0, Z+
     efa:	0d 92       	st	X+, r0
     efc:	8a 95       	dec	r24
     efe:	e1 f7       	brne	.-8      	; 0xef8 <main+0x50c>
     f00:	f6 01       	movw	r30, r12
     f02:	80 81       	ld	r24, Z
     f04:	98 e0       	ldi	r25, 0x08	; 8
     f06:	f8 01       	movw	r30, r16
     f08:	de 01       	movw	r26, r28
     f0a:	a3 57       	subi	r26, 0x73	; 115
     f0c:	b7 4e       	sbci	r27, 0xE7	; 231
     f0e:	01 90       	ld	r0, Z+
     f10:	0d 92       	st	X+, r0
     f12:	9a 95       	dec	r25
     f14:	e1 f7       	brne	.-8      	; 0xf0e <main+0x522>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     f16:	a7 ec       	ldi	r26, 0xC7	; 199
     f18:	b1 e1       	ldi	r27, 0x11	; 17
     f1a:	ac 0f       	add	r26, r28
     f1c:	bd 1f       	adc	r27, r29
     f1e:	f8 e0       	ldi	r31, 0x08	; 8
     f20:	8f 9f       	mul	r24, r31
     f22:	a0 0d       	add	r26, r0
     f24:	b1 1d       	adc	r27, r1
     f26:	11 24       	eor	r1, r1
     f28:	98 e0       	ldi	r25, 0x08	; 8
     f2a:	fe 01       	movw	r30, r28
     f2c:	e3 57       	subi	r30, 0x73	; 115
     f2e:	f7 4e       	sbci	r31, 0xE7	; 231
     f30:	01 90       	ld	r0, Z+
     f32:	0d 92       	st	X+, r0
     f34:	9a 95       	dec	r25
     f36:	e1 f7       	brne	.-8      	; 0xf30 <main+0x544>
	explosions.timeBetween[explosions.index] = a;
     f38:	27 ec       	ldi	r18, 0xC7	; 199
     f3a:	31 e1       	ldi	r19, 0x11	; 17
     f3c:	2c 0f       	add	r18, r28
     f3e:	3d 1f       	adc	r19, r29
     f40:	28 0f       	add	r18, r24
     f42:	31 1d       	adc	r19, r1
     f44:	f9 01       	movw	r30, r18
     f46:	e0 57       	subi	r30, 0x70	; 112
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     f4c:	72 96       	adiw	r30, 0x12	; 18
     f4e:	f0 82       	st	Z, r15
	explosions.index++;
     f50:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     f52:	c5 58       	subi	r28, 0x85	; 133
     f54:	dd 4e       	sbci	r29, 0xED	; 237
     f56:	88 83       	st	Y, r24
     f58:	cb 57       	subi	r28, 0x7B	; 123
     f5a:	d2 41       	sbci	r29, 0x12	; 18
     f5c:	96 eb       	ldi	r25, 0xB6	; 182
     f5e:	fe 01       	movw	r30, r28
     f60:	e9 53       	subi	r30, 0x39	; 57
     f62:	fe 4e       	sbci	r31, 0xEE	; 238
     f64:	de 01       	movw	r26, r28
     f66:	af 5e       	subi	r26, 0xEF	; 239
     f68:	be 4e       	sbci	r27, 0xEE	; 238
     f6a:	01 90       	ld	r0, Z+
     f6c:	0d 92       	st	X+, r0
     f6e:	9a 95       	dec	r25
     f70:	e1 f7       	brne	.-8      	; 0xf6a <main+0x57e>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     f72:	cb 53       	subi	r28, 0x3B	; 59
     f74:	de 4e       	sbci	r29, 0xEE	; 238
     f76:	88 83       	st	Y, r24
     f78:	c5 5c       	subi	r28, 0xC5	; 197
     f7a:	d1 41       	sbci	r29, 0x11	; 17
     f7c:	86 eb       	ldi	r24, 0xB6	; 182
     f7e:	fe 01       	movw	r30, r28
     f80:	ef 5e       	subi	r30, 0xEF	; 239
     f82:	fe 4e       	sbci	r31, 0xEE	; 238
     f84:	af e2       	ldi	r26, 0x2F	; 47
     f86:	b1 e0       	ldi	r27, 0x01	; 1
     f88:	01 90       	ld	r0, Z+
     f8a:	0d 92       	st	X+, r0
     f8c:	8a 95       	dec	r24
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <main+0x59c>
	
	matrix = clearSingleMatrix(matrix);
     f90:	20 91 27 01 	lds	r18, 0x0127
     f94:	30 91 28 01 	lds	r19, 0x0128
     f98:	40 91 29 01 	lds	r20, 0x0129
     f9c:	50 91 2a 01 	lds	r21, 0x012A
     fa0:	60 91 2b 01 	lds	r22, 0x012B
     fa4:	70 91 2c 01 	lds	r23, 0x012C
     fa8:	80 91 2d 01 	lds	r24, 0x012D
     fac:	90 91 2e 01 	lds	r25, 0x012E
     fb0:	71 d9       	rcall	.-3358   	; 0x294 <clearSingleMatrix>
     fb2:	d8 01       	movw	r26, r16
     fb4:	2c 93       	st	X, r18
     fb6:	12 96       	adiw	r26, 0x02	; 2
     fb8:	4c 93       	st	X, r20
     fba:	12 97       	sbiw	r26, 0x02	; 2
     fbc:	13 96       	adiw	r26, 0x03	; 3
     fbe:	5c 93       	st	X, r21
     fc0:	13 97       	sbiw	r26, 0x03	; 3
     fc2:	14 96       	adiw	r26, 0x04	; 4
     fc4:	6c 93       	st	X, r22
     fc6:	14 97       	sbiw	r26, 0x04	; 4
     fc8:	15 96       	adiw	r26, 0x05	; 5
     fca:	7c 93       	st	X, r23
     fcc:	15 97       	sbiw	r26, 0x05	; 5
     fce:	17 96       	adiw	r26, 0x07	; 7
     fd0:	9c 93       	st	X, r25
     fd2:	17 97       	sbiw	r26, 0x07	; 7
     fd4:	3f 7d       	andi	r19, 0xDF	; 223
	matrix.m[1] = SetBit(matrix.m[1], 5, 0);
     fd6:	11 96       	adiw	r26, 0x01	; 1
     fd8:	3c 93       	st	X, r19
     fda:	11 97       	sbiw	r26, 0x01	; 1
     fdc:	8f 7d       	andi	r24, 0xDF	; 223
	matrix.m[6] = SetBit(matrix.m[6], 5, 0);
     fde:	16 96       	adiw	r26, 0x06	; 6
     fe0:	8c 93       	st	X, r24
     fe2:	86 eb       	ldi	r24, 0xB6	; 182
     fe4:	ef e2       	ldi	r30, 0x2F	; 47
     fe6:	f1 e0       	ldi	r31, 0x01	; 1
     fe8:	de 01       	movw	r26, r28
     fea:	a5 5a       	subi	r26, 0xA5	; 165
     fec:	bf 4e       	sbci	r27, 0xEF	; 239
     fee:	01 90       	ld	r0, Z+
     ff0:	0d 92       	st	X+, r0
     ff2:	8a 95       	dec	r24
     ff4:	e1 f7       	brne	.-8      	; 0xfee <main+0x602>
     ff6:	f6 01       	movw	r30, r12
     ff8:	80 81       	ld	r24, Z
     ffa:	98 e0       	ldi	r25, 0x08	; 8
     ffc:	f8 01       	movw	r30, r16
     ffe:	de 01       	movw	r26, r28
    1000:	ab 57       	subi	r26, 0x7B	; 123
    1002:	b7 4e       	sbci	r27, 0xE7	; 231
    1004:	01 90       	ld	r0, Z+
    1006:	0d 92       	st	X+, r0
    1008:	9a 95       	dec	r25
    100a:	e1 f7       	brne	.-8      	; 0x1004 <main+0x618>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    100c:	ab e5       	ldi	r26, 0x5B	; 91
    100e:	b0 e1       	ldi	r27, 0x10	; 16
    1010:	ac 0f       	add	r26, r28
    1012:	bd 1f       	adc	r27, r29
    1014:	f8 e0       	ldi	r31, 0x08	; 8
    1016:	8f 9f       	mul	r24, r31
    1018:	a0 0d       	add	r26, r0
    101a:	b1 1d       	adc	r27, r1
    101c:	11 24       	eor	r1, r1
    101e:	98 e0       	ldi	r25, 0x08	; 8
    1020:	fe 01       	movw	r30, r28
    1022:	eb 57       	subi	r30, 0x7B	; 123
    1024:	f7 4e       	sbci	r31, 0xE7	; 231
    1026:	01 90       	ld	r0, Z+
    1028:	0d 92       	st	X+, r0
    102a:	9a 95       	dec	r25
    102c:	e1 f7       	brne	.-8      	; 0x1026 <main+0x63a>
	explosions.timeBetween[explosions.index] = a;
    102e:	2b e5       	ldi	r18, 0x5B	; 91
    1030:	30 e1       	ldi	r19, 0x10	; 16
    1032:	2c 0f       	add	r18, r28
    1034:	3d 1f       	adc	r19, r29
    1036:	28 0f       	add	r18, r24
    1038:	31 1d       	adc	r19, r1
    103a:	f9 01       	movw	r30, r18
    103c:	e0 57       	subi	r30, 0x70	; 112
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1042:	72 96       	adiw	r30, 0x12	; 18
    1044:	f0 82       	st	Z, r15
	explosions.index++;
    1046:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1048:	c1 5f       	subi	r28, 0xF1	; 241
    104a:	de 4e       	sbci	r29, 0xEE	; 238
    104c:	88 83       	st	Y, r24
    104e:	cf 50       	subi	r28, 0x0F	; 15
    1050:	d1 41       	sbci	r29, 0x11	; 17
    1052:	96 eb       	ldi	r25, 0xB6	; 182
    1054:	fe 01       	movw	r30, r28
    1056:	e5 5a       	subi	r30, 0xA5	; 165
    1058:	ff 4e       	sbci	r31, 0xEF	; 239
    105a:	de 01       	movw	r26, r28
    105c:	ab 55       	subi	r26, 0x5B	; 91
    105e:	b0 4f       	sbci	r27, 0xF0	; 240
    1060:	01 90       	ld	r0, Z+
    1062:	0d 92       	st	X+, r0
    1064:	9a 95       	dec	r25
    1066:	e1 f7       	brne	.-8      	; 0x1060 <main+0x674>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1068:	c7 5a       	subi	r28, 0xA7	; 167
    106a:	df 4e       	sbci	r29, 0xEF	; 239
    106c:	88 83       	st	Y, r24
    106e:	c9 55       	subi	r28, 0x59	; 89
    1070:	d0 41       	sbci	r29, 0x10	; 16
    1072:	86 eb       	ldi	r24, 0xB6	; 182
    1074:	fe 01       	movw	r30, r28
    1076:	eb 55       	subi	r30, 0x5B	; 91
    1078:	f0 4f       	sbci	r31, 0xF0	; 240
    107a:	af e2       	ldi	r26, 0x2F	; 47
    107c:	b1 e0       	ldi	r27, 0x01	; 1
    107e:	01 90       	ld	r0, Z+
    1080:	0d 92       	st	X+, r0
    1082:	8a 95       	dec	r24
    1084:	e1 f7       	brne	.-8      	; 0x107e <main+0x692>
	
	matrix = clearSingleMatrix(matrix);
    1086:	20 91 27 01 	lds	r18, 0x0127
    108a:	30 91 28 01 	lds	r19, 0x0128
    108e:	40 91 29 01 	lds	r20, 0x0129
    1092:	50 91 2a 01 	lds	r21, 0x012A
    1096:	60 91 2b 01 	lds	r22, 0x012B
    109a:	70 91 2c 01 	lds	r23, 0x012C
    109e:	80 91 2d 01 	lds	r24, 0x012D
    10a2:	90 91 2e 01 	lds	r25, 0x012E
    10a6:	f6 d8       	rcall	.-3604   	; 0x294 <clearSingleMatrix>
    10a8:	d8 01       	movw	r26, r16
    10aa:	2c 93       	st	X, r18
    10ac:	12 96       	adiw	r26, 0x02	; 2
    10ae:	4c 93       	st	X, r20
    10b0:	12 97       	sbiw	r26, 0x02	; 2
    10b2:	13 96       	adiw	r26, 0x03	; 3
    10b4:	5c 93       	st	X, r21
    10b6:	13 97       	sbiw	r26, 0x03	; 3
    10b8:	14 96       	adiw	r26, 0x04	; 4
    10ba:	6c 93       	st	X, r22
    10bc:	14 97       	sbiw	r26, 0x04	; 4
    10be:	15 96       	adiw	r26, 0x05	; 5
    10c0:	7c 93       	st	X, r23
    10c2:	15 97       	sbiw	r26, 0x05	; 5
    10c4:	17 96       	adiw	r26, 0x07	; 7
    10c6:	9c 93       	st	X, r25
    10c8:	17 97       	sbiw	r26, 0x07	; 7
    10ca:	3f 7b       	andi	r19, 0xBF	; 191
	matrix.m[1] = SetBit(matrix.m[1], 6, 0);
    10cc:	11 96       	adiw	r26, 0x01	; 1
    10ce:	3c 93       	st	X, r19
    10d0:	11 97       	sbiw	r26, 0x01	; 1
    10d2:	8f 7b       	andi	r24, 0xBF	; 191
	matrix.m[6] = SetBit(matrix.m[6], 6, 0);
    10d4:	16 96       	adiw	r26, 0x06	; 6
    10d6:	8c 93       	st	X, r24
    10d8:	86 eb       	ldi	r24, 0xB6	; 182
    10da:	ef e2       	ldi	r30, 0x2F	; 47
    10dc:	f1 e0       	ldi	r31, 0x01	; 1
    10de:	de 01       	movw	r26, r28
    10e0:	a1 51       	subi	r26, 0x11	; 17
    10e2:	b1 4f       	sbci	r27, 0xF1	; 241
    10e4:	01 90       	ld	r0, Z+
    10e6:	0d 92       	st	X+, r0
    10e8:	8a 95       	dec	r24
    10ea:	e1 f7       	brne	.-8      	; 0x10e4 <main+0x6f8>
    10ec:	f6 01       	movw	r30, r12
    10ee:	80 81       	ld	r24, Z
    10f0:	98 e0       	ldi	r25, 0x08	; 8
    10f2:	f8 01       	movw	r30, r16
    10f4:	de 01       	movw	r26, r28
    10f6:	a3 58       	subi	r26, 0x83	; 131
    10f8:	b7 4e       	sbci	r27, 0xE7	; 231
    10fa:	01 90       	ld	r0, Z+
    10fc:	0d 92       	st	X+, r0
    10fe:	9a 95       	dec	r25
    1100:	e1 f7       	brne	.-8      	; 0x10fa <main+0x70e>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1102:	af ee       	ldi	r26, 0xEF	; 239
    1104:	be e0       	ldi	r27, 0x0E	; 14
    1106:	ac 0f       	add	r26, r28
    1108:	bd 1f       	adc	r27, r29
    110a:	f8 e0       	ldi	r31, 0x08	; 8
    110c:	8f 9f       	mul	r24, r31
    110e:	a0 0d       	add	r26, r0
    1110:	b1 1d       	adc	r27, r1
    1112:	11 24       	eor	r1, r1
    1114:	98 e0       	ldi	r25, 0x08	; 8
    1116:	fe 01       	movw	r30, r28
    1118:	e3 58       	subi	r30, 0x83	; 131
    111a:	f7 4e       	sbci	r31, 0xE7	; 231
    111c:	01 90       	ld	r0, Z+
    111e:	0d 92       	st	X+, r0
    1120:	9a 95       	dec	r25
    1122:	e1 f7       	brne	.-8      	; 0x111c <main+0x730>
	explosions.timeBetween[explosions.index] = a;
    1124:	2f ee       	ldi	r18, 0xEF	; 239
    1126:	3e e0       	ldi	r19, 0x0E	; 14
    1128:	2c 0f       	add	r18, r28
    112a:	3d 1f       	adc	r19, r29
    112c:	28 0f       	add	r18, r24
    112e:	31 1d       	adc	r19, r1
    1130:	f9 01       	movw	r30, r18
    1132:	e0 57       	subi	r30, 0x70	; 112
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1138:	72 96       	adiw	r30, 0x12	; 18
    113a:	f0 82       	st	Z, r15
	explosions.index++;
    113c:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    113e:	cd 55       	subi	r28, 0x5D	; 93
    1140:	d0 4f       	sbci	r29, 0xF0	; 240
    1142:	88 83       	st	Y, r24
    1144:	c3 5a       	subi	r28, 0xA3	; 163
    1146:	df 40       	sbci	r29, 0x0F	; 15
    1148:	96 eb       	ldi	r25, 0xB6	; 182
    114a:	fe 01       	movw	r30, r28
    114c:	e1 51       	subi	r30, 0x11	; 17
    114e:	f1 4f       	sbci	r31, 0xF1	; 241
    1150:	de 01       	movw	r26, r28
    1152:	a7 5c       	subi	r26, 0xC7	; 199
    1154:	b1 4f       	sbci	r27, 0xF1	; 241
    1156:	01 90       	ld	r0, Z+
    1158:	0d 92       	st	X+, r0
    115a:	9a 95       	dec	r25
    115c:	e1 f7       	brne	.-8      	; 0x1156 <main+0x76a>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    115e:	c3 51       	subi	r28, 0x13	; 19
    1160:	d1 4f       	sbci	r29, 0xF1	; 241
    1162:	88 83       	st	Y, r24
    1164:	cd 5e       	subi	r28, 0xED	; 237
    1166:	de 40       	sbci	r29, 0x0E	; 14
    1168:	86 eb       	ldi	r24, 0xB6	; 182
    116a:	fe 01       	movw	r30, r28
    116c:	e7 5c       	subi	r30, 0xC7	; 199
    116e:	f1 4f       	sbci	r31, 0xF1	; 241
    1170:	af e2       	ldi	r26, 0x2F	; 47
    1172:	b1 e0       	ldi	r27, 0x01	; 1
    1174:	01 90       	ld	r0, Z+
    1176:	0d 92       	st	X+, r0
    1178:	8a 95       	dec	r24
    117a:	e1 f7       	brne	.-8      	; 0x1174 <main+0x788>
	
	matrix = clearSingleMatrix(matrix);
    117c:	20 91 27 01 	lds	r18, 0x0127
    1180:	30 91 28 01 	lds	r19, 0x0128
    1184:	40 91 29 01 	lds	r20, 0x0129
    1188:	50 91 2a 01 	lds	r21, 0x012A
    118c:	60 91 2b 01 	lds	r22, 0x012B
    1190:	70 91 2c 01 	lds	r23, 0x012C
    1194:	80 91 2d 01 	lds	r24, 0x012D
    1198:	90 91 2e 01 	lds	r25, 0x012E
    119c:	7b d8       	rcall	.-3850   	; 0x294 <clearSingleMatrix>
    119e:	d8 01       	movw	r26, r16
    11a0:	2c 93       	st	X, r18
    11a2:	12 96       	adiw	r26, 0x02	; 2
    11a4:	4c 93       	st	X, r20
    11a6:	12 97       	sbiw	r26, 0x02	; 2
    11a8:	13 96       	adiw	r26, 0x03	; 3
    11aa:	5c 93       	st	X, r21
    11ac:	13 97       	sbiw	r26, 0x03	; 3
    11ae:	14 96       	adiw	r26, 0x04	; 4
    11b0:	6c 93       	st	X, r22
    11b2:	14 97       	sbiw	r26, 0x04	; 4
    11b4:	15 96       	adiw	r26, 0x05	; 5
    11b6:	7c 93       	st	X, r23
    11b8:	15 97       	sbiw	r26, 0x05	; 5
    11ba:	17 96       	adiw	r26, 0x07	; 7
    11bc:	9c 93       	st	X, r25
    11be:	17 97       	sbiw	r26, 0x07	; 7
    11c0:	3f 77       	andi	r19, 0x7F	; 127
	matrix.m[1] = SetBit(matrix.m[1], 7, 0);
    11c2:	11 96       	adiw	r26, 0x01	; 1
    11c4:	3c 93       	st	X, r19
    11c6:	11 97       	sbiw	r26, 0x01	; 1
    11c8:	8f 77       	andi	r24, 0x7F	; 127
	matrix.m[6] = SetBit(matrix.m[6], 7, 0);
    11ca:	16 96       	adiw	r26, 0x06	; 6
    11cc:	8c 93       	st	X, r24
    11ce:	86 eb       	ldi	r24, 0xB6	; 182
    11d0:	ef e2       	ldi	r30, 0x2F	; 47
    11d2:	f1 e0       	ldi	r31, 0x01	; 1
    11d4:	de 01       	movw	r26, r28
    11d6:	ad 57       	subi	r26, 0x7D	; 125
    11d8:	b2 4f       	sbci	r27, 0xF2	; 242
    11da:	01 90       	ld	r0, Z+
    11dc:	0d 92       	st	X+, r0
    11de:	8a 95       	dec	r24
    11e0:	e1 f7       	brne	.-8      	; 0x11da <main+0x7ee>
    11e2:	f6 01       	movw	r30, r12
    11e4:	80 81       	ld	r24, Z
    11e6:	98 e0       	ldi	r25, 0x08	; 8
    11e8:	f8 01       	movw	r30, r16
    11ea:	de 01       	movw	r26, r28
    11ec:	ab 58       	subi	r26, 0x8B	; 139
    11ee:	b7 4e       	sbci	r27, 0xE7	; 231
    11f0:	01 90       	ld	r0, Z+
    11f2:	0d 92       	st	X+, r0
    11f4:	9a 95       	dec	r25
    11f6:	e1 f7       	brne	.-8      	; 0x11f0 <main+0x804>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    11f8:	a3 e8       	ldi	r26, 0x83	; 131
    11fa:	bd e0       	ldi	r27, 0x0D	; 13
    11fc:	ac 0f       	add	r26, r28
    11fe:	bd 1f       	adc	r27, r29
    1200:	f8 e0       	ldi	r31, 0x08	; 8
    1202:	8f 9f       	mul	r24, r31
    1204:	a0 0d       	add	r26, r0
    1206:	b1 1d       	adc	r27, r1
    1208:	11 24       	eor	r1, r1
    120a:	98 e0       	ldi	r25, 0x08	; 8
    120c:	fe 01       	movw	r30, r28
    120e:	eb 58       	subi	r30, 0x8B	; 139
    1210:	f7 4e       	sbci	r31, 0xE7	; 231
    1212:	01 90       	ld	r0, Z+
    1214:	0d 92       	st	X+, r0
    1216:	9a 95       	dec	r25
    1218:	e1 f7       	brne	.-8      	; 0x1212 <main+0x826>
	explosions.timeBetween[explosions.index] = a;
    121a:	23 e8       	ldi	r18, 0x83	; 131
    121c:	3d e0       	ldi	r19, 0x0D	; 13
    121e:	2c 0f       	add	r18, r28
    1220:	3d 1f       	adc	r19, r29
    1222:	28 0f       	add	r18, r24
    1224:	31 1d       	adc	r19, r1
    1226:	f9 01       	movw	r30, r18
    1228:	e0 57       	subi	r30, 0x70	; 112
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    122e:	72 96       	adiw	r30, 0x12	; 18
    1230:	f0 82       	st	Z, r15
	explosions.index++;
    1232:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1234:	c9 5c       	subi	r28, 0xC9	; 201
    1236:	d1 4f       	sbci	r29, 0xF1	; 241
    1238:	88 83       	st	Y, r24
    123a:	c7 53       	subi	r28, 0x37	; 55
    123c:	de 40       	sbci	r29, 0x0E	; 14
    123e:	96 eb       	ldi	r25, 0xB6	; 182
    1240:	fe 01       	movw	r30, r28
    1242:	ed 57       	subi	r30, 0x7D	; 125
    1244:	f2 4f       	sbci	r31, 0xF2	; 242
    1246:	de 01       	movw	r26, r28
    1248:	a3 53       	subi	r26, 0x33	; 51
    124a:	b3 4f       	sbci	r27, 0xF3	; 243
    124c:	01 90       	ld	r0, Z+
    124e:	0d 92       	st	X+, r0
    1250:	9a 95       	dec	r25
    1252:	e1 f7       	brne	.-8      	; 0x124c <main+0x860>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1254:	cf 57       	subi	r28, 0x7F	; 127
    1256:	d2 4f       	sbci	r29, 0xF2	; 242
    1258:	88 83       	st	Y, r24
    125a:	c1 58       	subi	r28, 0x81	; 129
    125c:	dd 40       	sbci	r29, 0x0D	; 13
    125e:	86 eb       	ldi	r24, 0xB6	; 182
    1260:	fe 01       	movw	r30, r28
    1262:	e3 53       	subi	r30, 0x33	; 51
    1264:	f3 4f       	sbci	r31, 0xF3	; 243
    1266:	af e2       	ldi	r26, 0x2F	; 47
    1268:	b1 e0       	ldi	r27, 0x01	; 1
    126a:	01 90       	ld	r0, Z+
    126c:	0d 92       	st	X+, r0
    126e:	8a 95       	dec	r24
    1270:	e1 f7       	brne	.-8      	; 0x126a <main+0x87e>
	
	matrix = clearSingleMatrix(matrix);
    1272:	20 91 27 01 	lds	r18, 0x0127
    1276:	30 91 28 01 	lds	r19, 0x0128
    127a:	40 91 29 01 	lds	r20, 0x0129
    127e:	50 91 2a 01 	lds	r21, 0x012A
    1282:	60 91 2b 01 	lds	r22, 0x012B
    1286:	70 91 2c 01 	lds	r23, 0x012C
    128a:	80 91 2d 01 	lds	r24, 0x012D
    128e:	90 91 2e 01 	lds	r25, 0x012E
    1292:	00 d8       	rcall	.-4096   	; 0x294 <clearSingleMatrix>
    1294:	d8 01       	movw	r26, r16
    1296:	2c 93       	st	X, r18
    1298:	11 96       	adiw	r26, 0x01	; 1
    129a:	3c 93       	st	X, r19
    129c:	11 97       	sbiw	r26, 0x01	; 1
    129e:	13 96       	adiw	r26, 0x03	; 3
    12a0:	5c 93       	st	X, r21
    12a2:	13 97       	sbiw	r26, 0x03	; 3
    12a4:	14 96       	adiw	r26, 0x04	; 4
    12a6:	6c 93       	st	X, r22
    12a8:	14 97       	sbiw	r26, 0x04	; 4
    12aa:	16 96       	adiw	r26, 0x06	; 6
    12ac:	8c 93       	st	X, r24
    12ae:	16 97       	sbiw	r26, 0x06	; 6
    12b0:	17 96       	adiw	r26, 0x07	; 7
    12b2:	9c 93       	st	X, r25
    12b4:	17 97       	sbiw	r26, 0x07	; 7
    12b6:	4f 77       	andi	r20, 0x7F	; 127
	matrix.m[2] = SetBit(matrix.m[2], 7, 0);
    12b8:	12 96       	adiw	r26, 0x02	; 2
    12ba:	4c 93       	st	X, r20
    12bc:	12 97       	sbiw	r26, 0x02	; 2
    12be:	7f 77       	andi	r23, 0x7F	; 127
	matrix.m[5] = SetBit(matrix.m[5], 7, 0);
    12c0:	15 96       	adiw	r26, 0x05	; 5
    12c2:	7c 93       	st	X, r23
    12c4:	86 eb       	ldi	r24, 0xB6	; 182
    12c6:	ef e2       	ldi	r30, 0x2F	; 47
    12c8:	f1 e0       	ldi	r31, 0x01	; 1
    12ca:	de 01       	movw	r26, r28
    12cc:	a9 5e       	subi	r26, 0xE9	; 233
    12ce:	b3 4f       	sbci	r27, 0xF3	; 243
    12d0:	01 90       	ld	r0, Z+
    12d2:	0d 92       	st	X+, r0
    12d4:	8a 95       	dec	r24
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <main+0x8e4>
    12d8:	f6 01       	movw	r30, r12
    12da:	80 81       	ld	r24, Z
    12dc:	98 e0       	ldi	r25, 0x08	; 8
    12de:	f8 01       	movw	r30, r16
    12e0:	de 01       	movw	r26, r28
    12e2:	a3 59       	subi	r26, 0x93	; 147
    12e4:	b7 4e       	sbci	r27, 0xE7	; 231
    12e6:	01 90       	ld	r0, Z+
    12e8:	0d 92       	st	X+, r0
    12ea:	9a 95       	dec	r25
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <main+0x8fa>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    12ee:	a7 e1       	ldi	r26, 0x17	; 23
    12f0:	bc e0       	ldi	r27, 0x0C	; 12
    12f2:	ac 0f       	add	r26, r28
    12f4:	bd 1f       	adc	r27, r29
    12f6:	f8 e0       	ldi	r31, 0x08	; 8
    12f8:	8f 9f       	mul	r24, r31
    12fa:	a0 0d       	add	r26, r0
    12fc:	b1 1d       	adc	r27, r1
    12fe:	11 24       	eor	r1, r1
    1300:	98 e0       	ldi	r25, 0x08	; 8
    1302:	fe 01       	movw	r30, r28
    1304:	e3 59       	subi	r30, 0x93	; 147
    1306:	f7 4e       	sbci	r31, 0xE7	; 231
    1308:	01 90       	ld	r0, Z+
    130a:	0d 92       	st	X+, r0
    130c:	9a 95       	dec	r25
    130e:	e1 f7       	brne	.-8      	; 0x1308 <main+0x91c>
	explosions.timeBetween[explosions.index] = a;
    1310:	27 e1       	ldi	r18, 0x17	; 23
    1312:	3c e0       	ldi	r19, 0x0C	; 12
    1314:	2c 0f       	add	r18, r28
    1316:	3d 1f       	adc	r19, r29
    1318:	28 0f       	add	r18, r24
    131a:	31 1d       	adc	r19, r1
    131c:	f9 01       	movw	r30, r18
    131e:	e0 57       	subi	r30, 0x70	; 112
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1324:	72 96       	adiw	r30, 0x12	; 18
    1326:	f0 82       	st	Z, r15
	explosions.index++;
    1328:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    132a:	c5 53       	subi	r28, 0x35	; 53
    132c:	d3 4f       	sbci	r29, 0xF3	; 243
    132e:	88 83       	st	Y, r24
    1330:	cb 5c       	subi	r28, 0xCB	; 203
    1332:	dc 40       	sbci	r29, 0x0C	; 12
    1334:	96 eb       	ldi	r25, 0xB6	; 182
    1336:	fe 01       	movw	r30, r28
    1338:	e9 5e       	subi	r30, 0xE9	; 233
    133a:	f3 4f       	sbci	r31, 0xF3	; 243
    133c:	de 01       	movw	r26, r28
    133e:	af 59       	subi	r26, 0x9F	; 159
    1340:	b4 4f       	sbci	r27, 0xF4	; 244
    1342:	01 90       	ld	r0, Z+
    1344:	0d 92       	st	X+, r0
    1346:	9a 95       	dec	r25
    1348:	e1 f7       	brne	.-8      	; 0x1342 <main+0x956>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    134a:	cb 5e       	subi	r28, 0xEB	; 235
    134c:	d3 4f       	sbci	r29, 0xF3	; 243
    134e:	88 83       	st	Y, r24
    1350:	c5 51       	subi	r28, 0x15	; 21
    1352:	dc 40       	sbci	r29, 0x0C	; 12
    1354:	86 eb       	ldi	r24, 0xB6	; 182
    1356:	fe 01       	movw	r30, r28
    1358:	ef 59       	subi	r30, 0x9F	; 159
    135a:	f4 4f       	sbci	r31, 0xF4	; 244
    135c:	af e2       	ldi	r26, 0x2F	; 47
    135e:	b1 e0       	ldi	r27, 0x01	; 1
    1360:	01 90       	ld	r0, Z+
    1362:	0d 92       	st	X+, r0
    1364:	8a 95       	dec	r24
    1366:	e1 f7       	brne	.-8      	; 0x1360 <main+0x974>
	
	matrix = clearSingleMatrix(matrix);
    1368:	20 91 27 01 	lds	r18, 0x0127
    136c:	30 91 28 01 	lds	r19, 0x0128
    1370:	40 91 29 01 	lds	r20, 0x0129
    1374:	50 91 2a 01 	lds	r21, 0x012A
    1378:	60 91 2b 01 	lds	r22, 0x012B
    137c:	70 91 2c 01 	lds	r23, 0x012C
    1380:	80 91 2d 01 	lds	r24, 0x012D
    1384:	90 91 2e 01 	lds	r25, 0x012E
    1388:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    138c:	d8 01       	movw	r26, r16
    138e:	2c 93       	st	X, r18
    1390:	11 96       	adiw	r26, 0x01	; 1
    1392:	3c 93       	st	X, r19
    1394:	11 97       	sbiw	r26, 0x01	; 1
    1396:	13 96       	adiw	r26, 0x03	; 3
    1398:	5c 93       	st	X, r21
    139a:	13 97       	sbiw	r26, 0x03	; 3
    139c:	14 96       	adiw	r26, 0x04	; 4
    139e:	6c 93       	st	X, r22
    13a0:	14 97       	sbiw	r26, 0x04	; 4
    13a2:	16 96       	adiw	r26, 0x06	; 6
    13a4:	8c 93       	st	X, r24
    13a6:	16 97       	sbiw	r26, 0x06	; 6
    13a8:	17 96       	adiw	r26, 0x07	; 7
    13aa:	9c 93       	st	X, r25
    13ac:	17 97       	sbiw	r26, 0x07	; 7
    13ae:	4f 7b       	andi	r20, 0xBF	; 191
	matrix.m[2] = SetBit(matrix.m[2], 6, 0);
    13b0:	12 96       	adiw	r26, 0x02	; 2
    13b2:	4c 93       	st	X, r20
    13b4:	12 97       	sbiw	r26, 0x02	; 2
    13b6:	7f 7b       	andi	r23, 0xBF	; 191
	matrix.m[5] = SetBit(matrix.m[5], 6, 0);
    13b8:	15 96       	adiw	r26, 0x05	; 5
    13ba:	7c 93       	st	X, r23
    13bc:	86 eb       	ldi	r24, 0xB6	; 182
    13be:	ef e2       	ldi	r30, 0x2F	; 47
    13c0:	f1 e0       	ldi	r31, 0x01	; 1
    13c2:	de 01       	movw	r26, r28
    13c4:	a5 55       	subi	r26, 0x55	; 85
    13c6:	b5 4f       	sbci	r27, 0xF5	; 245
    13c8:	01 90       	ld	r0, Z+
    13ca:	0d 92       	st	X+, r0
    13cc:	8a 95       	dec	r24
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <main+0x9dc>
    13d0:	f6 01       	movw	r30, r12
    13d2:	80 81       	ld	r24, Z
    13d4:	98 e0       	ldi	r25, 0x08	; 8
    13d6:	f8 01       	movw	r30, r16
    13d8:	de 01       	movw	r26, r28
    13da:	ab 59       	subi	r26, 0x9B	; 155
    13dc:	b7 4e       	sbci	r27, 0xE7	; 231
    13de:	01 90       	ld	r0, Z+
    13e0:	0d 92       	st	X+, r0
    13e2:	9a 95       	dec	r25
    13e4:	e1 f7       	brne	.-8      	; 0x13de <main+0x9f2>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    13e6:	ab ea       	ldi	r26, 0xAB	; 171
    13e8:	ba e0       	ldi	r27, 0x0A	; 10
    13ea:	ac 0f       	add	r26, r28
    13ec:	bd 1f       	adc	r27, r29
    13ee:	f8 e0       	ldi	r31, 0x08	; 8
    13f0:	8f 9f       	mul	r24, r31
    13f2:	a0 0d       	add	r26, r0
    13f4:	b1 1d       	adc	r27, r1
    13f6:	11 24       	eor	r1, r1
    13f8:	98 e0       	ldi	r25, 0x08	; 8
    13fa:	fe 01       	movw	r30, r28
    13fc:	eb 59       	subi	r30, 0x9B	; 155
    13fe:	f7 4e       	sbci	r31, 0xE7	; 231
    1400:	01 90       	ld	r0, Z+
    1402:	0d 92       	st	X+, r0
    1404:	9a 95       	dec	r25
    1406:	e1 f7       	brne	.-8      	; 0x1400 <main+0xa14>
	explosions.timeBetween[explosions.index] = a;
    1408:	2b ea       	ldi	r18, 0xAB	; 171
    140a:	3a e0       	ldi	r19, 0x0A	; 10
    140c:	2c 0f       	add	r18, r28
    140e:	3d 1f       	adc	r19, r29
    1410:	28 0f       	add	r18, r24
    1412:	31 1d       	adc	r19, r1
    1414:	f9 01       	movw	r30, r18
    1416:	e0 57       	subi	r30, 0x70	; 112
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    141c:	72 96       	adiw	r30, 0x12	; 18
    141e:	f0 82       	st	Z, r15
	explosions.index++;
    1420:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1422:	c1 5a       	subi	r28, 0xA1	; 161
    1424:	d4 4f       	sbci	r29, 0xF4	; 244
    1426:	88 83       	st	Y, r24
    1428:	cf 55       	subi	r28, 0x5F	; 95
    142a:	db 40       	sbci	r29, 0x0B	; 11
    142c:	96 eb       	ldi	r25, 0xB6	; 182
    142e:	fe 01       	movw	r30, r28
    1430:	e5 55       	subi	r30, 0x55	; 85
    1432:	f5 4f       	sbci	r31, 0xF5	; 245
    1434:	de 01       	movw	r26, r28
    1436:	ab 50       	subi	r26, 0x0B	; 11
    1438:	b6 4f       	sbci	r27, 0xF6	; 246
    143a:	01 90       	ld	r0, Z+
    143c:	0d 92       	st	X+, r0
    143e:	9a 95       	dec	r25
    1440:	e1 f7       	brne	.-8      	; 0x143a <main+0xa4e>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1442:	c7 55       	subi	r28, 0x57	; 87
    1444:	d5 4f       	sbci	r29, 0xF5	; 245
    1446:	88 83       	st	Y, r24
    1448:	c9 5a       	subi	r28, 0xA9	; 169
    144a:	da 40       	sbci	r29, 0x0A	; 10
    144c:	86 eb       	ldi	r24, 0xB6	; 182
    144e:	fe 01       	movw	r30, r28
    1450:	eb 50       	subi	r30, 0x0B	; 11
    1452:	f6 4f       	sbci	r31, 0xF6	; 246
    1454:	af e2       	ldi	r26, 0x2F	; 47
    1456:	b1 e0       	ldi	r27, 0x01	; 1
    1458:	01 90       	ld	r0, Z+
    145a:	0d 92       	st	X+, r0
    145c:	8a 95       	dec	r24
    145e:	e1 f7       	brne	.-8      	; 0x1458 <main+0xa6c>
	
	matrix = clearSingleMatrix(matrix);
    1460:	20 91 27 01 	lds	r18, 0x0127
    1464:	30 91 28 01 	lds	r19, 0x0128
    1468:	40 91 29 01 	lds	r20, 0x0129
    146c:	50 91 2a 01 	lds	r21, 0x012A
    1470:	60 91 2b 01 	lds	r22, 0x012B
    1474:	70 91 2c 01 	lds	r23, 0x012C
    1478:	80 91 2d 01 	lds	r24, 0x012D
    147c:	90 91 2e 01 	lds	r25, 0x012E
    1480:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    1484:	d8 01       	movw	r26, r16
    1486:	2c 93       	st	X, r18
    1488:	11 96       	adiw	r26, 0x01	; 1
    148a:	3c 93       	st	X, r19
    148c:	11 97       	sbiw	r26, 0x01	; 1
    148e:	13 96       	adiw	r26, 0x03	; 3
    1490:	5c 93       	st	X, r21
    1492:	13 97       	sbiw	r26, 0x03	; 3
    1494:	14 96       	adiw	r26, 0x04	; 4
    1496:	6c 93       	st	X, r22
    1498:	14 97       	sbiw	r26, 0x04	; 4
    149a:	16 96       	adiw	r26, 0x06	; 6
    149c:	8c 93       	st	X, r24
    149e:	16 97       	sbiw	r26, 0x06	; 6
    14a0:	17 96       	adiw	r26, 0x07	; 7
    14a2:	9c 93       	st	X, r25
    14a4:	17 97       	sbiw	r26, 0x07	; 7
    14a6:	4f 7d       	andi	r20, 0xDF	; 223
	matrix.m[2] = SetBit(matrix.m[2], 5, 0);
    14a8:	12 96       	adiw	r26, 0x02	; 2
    14aa:	4c 93       	st	X, r20
    14ac:	12 97       	sbiw	r26, 0x02	; 2
    14ae:	7f 7d       	andi	r23, 0xDF	; 223
	matrix.m[5] = SetBit(matrix.m[5], 5, 0);
    14b0:	15 96       	adiw	r26, 0x05	; 5
    14b2:	7c 93       	st	X, r23
    14b4:	86 eb       	ldi	r24, 0xB6	; 182
    14b6:	ef e2       	ldi	r30, 0x2F	; 47
    14b8:	f1 e0       	ldi	r31, 0x01	; 1
    14ba:	de 01       	movw	r26, r28
    14bc:	a1 5c       	subi	r26, 0xC1	; 193
    14be:	b6 4f       	sbci	r27, 0xF6	; 246
    14c0:	01 90       	ld	r0, Z+
    14c2:	0d 92       	st	X+, r0
    14c4:	8a 95       	dec	r24
    14c6:	e1 f7       	brne	.-8      	; 0x14c0 <main+0xad4>
    14c8:	f6 01       	movw	r30, r12
    14ca:	80 81       	ld	r24, Z
    14cc:	98 e0       	ldi	r25, 0x08	; 8
    14ce:	f8 01       	movw	r30, r16
    14d0:	de 01       	movw	r26, r28
    14d2:	a3 5a       	subi	r26, 0xA3	; 163
    14d4:	b7 4e       	sbci	r27, 0xE7	; 231
    14d6:	01 90       	ld	r0, Z+
    14d8:	0d 92       	st	X+, r0
    14da:	9a 95       	dec	r25
    14dc:	e1 f7       	brne	.-8      	; 0x14d6 <main+0xaea>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    14de:	af e3       	ldi	r26, 0x3F	; 63
    14e0:	b9 e0       	ldi	r27, 0x09	; 9
    14e2:	ac 0f       	add	r26, r28
    14e4:	bd 1f       	adc	r27, r29
    14e6:	f8 e0       	ldi	r31, 0x08	; 8
    14e8:	8f 9f       	mul	r24, r31
    14ea:	a0 0d       	add	r26, r0
    14ec:	b1 1d       	adc	r27, r1
    14ee:	11 24       	eor	r1, r1
    14f0:	98 e0       	ldi	r25, 0x08	; 8
    14f2:	fe 01       	movw	r30, r28
    14f4:	e3 5a       	subi	r30, 0xA3	; 163
    14f6:	f7 4e       	sbci	r31, 0xE7	; 231
    14f8:	01 90       	ld	r0, Z+
    14fa:	0d 92       	st	X+, r0
    14fc:	9a 95       	dec	r25
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <main+0xb0c>
	explosions.timeBetween[explosions.index] = a;
    1500:	2f e3       	ldi	r18, 0x3F	; 63
    1502:	39 e0       	ldi	r19, 0x09	; 9
    1504:	2c 0f       	add	r18, r28
    1506:	3d 1f       	adc	r19, r29
    1508:	28 0f       	add	r18, r24
    150a:	31 1d       	adc	r19, r1
    150c:	f9 01       	movw	r30, r18
    150e:	e0 57       	subi	r30, 0x70	; 112
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1514:	72 96       	adiw	r30, 0x12	; 18
    1516:	f0 82       	st	Z, r15
	explosions.index++;
    1518:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    151a:	cd 50       	subi	r28, 0x0D	; 13
    151c:	d6 4f       	sbci	r29, 0xF6	; 246
    151e:	88 83       	st	Y, r24
    1520:	c3 5f       	subi	r28, 0xF3	; 243
    1522:	d9 40       	sbci	r29, 0x09	; 9
    1524:	96 eb       	ldi	r25, 0xB6	; 182
    1526:	fe 01       	movw	r30, r28
    1528:	e1 5c       	subi	r30, 0xC1	; 193
    152a:	f6 4f       	sbci	r31, 0xF6	; 246
    152c:	de 01       	movw	r26, r28
    152e:	a7 57       	subi	r26, 0x77	; 119
    1530:	b7 4f       	sbci	r27, 0xF7	; 247
    1532:	01 90       	ld	r0, Z+
    1534:	0d 92       	st	X+, r0
    1536:	9a 95       	dec	r25
    1538:	e1 f7       	brne	.-8      	; 0x1532 <main+0xb46>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    153a:	c3 5c       	subi	r28, 0xC3	; 195
    153c:	d6 4f       	sbci	r29, 0xF6	; 246
    153e:	88 83       	st	Y, r24
    1540:	cd 53       	subi	r28, 0x3D	; 61
    1542:	d9 40       	sbci	r29, 0x09	; 9
    1544:	86 eb       	ldi	r24, 0xB6	; 182
    1546:	fe 01       	movw	r30, r28
    1548:	e7 57       	subi	r30, 0x77	; 119
    154a:	f7 4f       	sbci	r31, 0xF7	; 247
    154c:	af e2       	ldi	r26, 0x2F	; 47
    154e:	b1 e0       	ldi	r27, 0x01	; 1
    1550:	01 90       	ld	r0, Z+
    1552:	0d 92       	st	X+, r0
    1554:	8a 95       	dec	r24
    1556:	e1 f7       	brne	.-8      	; 0x1550 <main+0xb64>
	
	matrix = clearSingleMatrix(matrix);
    1558:	20 91 27 01 	lds	r18, 0x0127
    155c:	30 91 28 01 	lds	r19, 0x0128
    1560:	40 91 29 01 	lds	r20, 0x0129
    1564:	50 91 2a 01 	lds	r21, 0x012A
    1568:	60 91 2b 01 	lds	r22, 0x012B
    156c:	70 91 2c 01 	lds	r23, 0x012C
    1570:	80 91 2d 01 	lds	r24, 0x012D
    1574:	90 91 2e 01 	lds	r25, 0x012E
    1578:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    157c:	d8 01       	movw	r26, r16
    157e:	2c 93       	st	X, r18
    1580:	11 96       	adiw	r26, 0x01	; 1
    1582:	3c 93       	st	X, r19
    1584:	11 97       	sbiw	r26, 0x01	; 1
    1586:	13 96       	adiw	r26, 0x03	; 3
    1588:	5c 93       	st	X, r21
    158a:	13 97       	sbiw	r26, 0x03	; 3
    158c:	14 96       	adiw	r26, 0x04	; 4
    158e:	6c 93       	st	X, r22
    1590:	14 97       	sbiw	r26, 0x04	; 4
    1592:	16 96       	adiw	r26, 0x06	; 6
    1594:	8c 93       	st	X, r24
    1596:	16 97       	sbiw	r26, 0x06	; 6
    1598:	17 96       	adiw	r26, 0x07	; 7
    159a:	9c 93       	st	X, r25
    159c:	17 97       	sbiw	r26, 0x07	; 7
    159e:	4f 7e       	andi	r20, 0xEF	; 239
	matrix.m[2] = SetBit(matrix.m[2], 4, 0);
    15a0:	12 96       	adiw	r26, 0x02	; 2
    15a2:	4c 93       	st	X, r20
    15a4:	12 97       	sbiw	r26, 0x02	; 2
    15a6:	7f 7e       	andi	r23, 0xEF	; 239
	matrix.m[5] = SetBit(matrix.m[5], 4, 0);
    15a8:	15 96       	adiw	r26, 0x05	; 5
    15aa:	7c 93       	st	X, r23
    15ac:	86 eb       	ldi	r24, 0xB6	; 182
    15ae:	ef e2       	ldi	r30, 0x2F	; 47
    15b0:	f1 e0       	ldi	r31, 0x01	; 1
    15b2:	de 01       	movw	r26, r28
    15b4:	ad 52       	subi	r26, 0x2D	; 45
    15b6:	b8 4f       	sbci	r27, 0xF8	; 248
    15b8:	01 90       	ld	r0, Z+
    15ba:	0d 92       	st	X+, r0
    15bc:	8a 95       	dec	r24
    15be:	e1 f7       	brne	.-8      	; 0x15b8 <main+0xbcc>
    15c0:	f6 01       	movw	r30, r12
    15c2:	80 81       	ld	r24, Z
    15c4:	98 e0       	ldi	r25, 0x08	; 8
    15c6:	f8 01       	movw	r30, r16
    15c8:	de 01       	movw	r26, r28
    15ca:	ab 5a       	subi	r26, 0xAB	; 171
    15cc:	b7 4e       	sbci	r27, 0xE7	; 231
    15ce:	01 90       	ld	r0, Z+
    15d0:	0d 92       	st	X+, r0
    15d2:	9a 95       	dec	r25
    15d4:	e1 f7       	brne	.-8      	; 0x15ce <main+0xbe2>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    15d6:	a3 ed       	ldi	r26, 0xD3	; 211
    15d8:	b7 e0       	ldi	r27, 0x07	; 7
    15da:	ac 0f       	add	r26, r28
    15dc:	bd 1f       	adc	r27, r29
    15de:	f8 e0       	ldi	r31, 0x08	; 8
    15e0:	8f 9f       	mul	r24, r31
    15e2:	a0 0d       	add	r26, r0
    15e4:	b1 1d       	adc	r27, r1
    15e6:	11 24       	eor	r1, r1
    15e8:	98 e0       	ldi	r25, 0x08	; 8
    15ea:	fe 01       	movw	r30, r28
    15ec:	eb 5a       	subi	r30, 0xAB	; 171
    15ee:	f7 4e       	sbci	r31, 0xE7	; 231
    15f0:	01 90       	ld	r0, Z+
    15f2:	0d 92       	st	X+, r0
    15f4:	9a 95       	dec	r25
    15f6:	e1 f7       	brne	.-8      	; 0x15f0 <main+0xc04>
	explosions.timeBetween[explosions.index] = a;
    15f8:	23 ed       	ldi	r18, 0xD3	; 211
    15fa:	37 e0       	ldi	r19, 0x07	; 7
    15fc:	2c 0f       	add	r18, r28
    15fe:	3d 1f       	adc	r19, r29
    1600:	28 0f       	add	r18, r24
    1602:	31 1d       	adc	r19, r1
    1604:	f9 01       	movw	r30, r18
    1606:	e0 57       	subi	r30, 0x70	; 112
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    160c:	72 96       	adiw	r30, 0x12	; 18
    160e:	f0 82       	st	Z, r15
	explosions.index++;
    1610:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1612:	c9 57       	subi	r28, 0x79	; 121
    1614:	d7 4f       	sbci	r29, 0xF7	; 247
    1616:	88 83       	st	Y, r24
    1618:	c7 58       	subi	r28, 0x87	; 135
    161a:	d8 40       	sbci	r29, 0x08	; 8
    161c:	96 eb       	ldi	r25, 0xB6	; 182
    161e:	fe 01       	movw	r30, r28
    1620:	ed 52       	subi	r30, 0x2D	; 45
    1622:	f8 4f       	sbci	r31, 0xF8	; 248
    1624:	de 01       	movw	r26, r28
    1626:	a3 5e       	subi	r26, 0xE3	; 227
    1628:	b8 4f       	sbci	r27, 0xF8	; 248
    162a:	01 90       	ld	r0, Z+
    162c:	0d 92       	st	X+, r0
    162e:	9a 95       	dec	r25
    1630:	e1 f7       	brne	.-8      	; 0x162a <main+0xc3e>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1632:	cf 52       	subi	r28, 0x2F	; 47
    1634:	d8 4f       	sbci	r29, 0xF8	; 248
    1636:	88 83       	st	Y, r24
    1638:	c1 5d       	subi	r28, 0xD1	; 209
    163a:	d7 40       	sbci	r29, 0x07	; 7
    163c:	86 eb       	ldi	r24, 0xB6	; 182
    163e:	fe 01       	movw	r30, r28
    1640:	e3 5e       	subi	r30, 0xE3	; 227
    1642:	f8 4f       	sbci	r31, 0xF8	; 248
    1644:	af e2       	ldi	r26, 0x2F	; 47
    1646:	b1 e0       	ldi	r27, 0x01	; 1
    1648:	01 90       	ld	r0, Z+
    164a:	0d 92       	st	X+, r0
    164c:	8a 95       	dec	r24
    164e:	e1 f7       	brne	.-8      	; 0x1648 <main+0xc5c>
	
	matrix = clearSingleMatrix(matrix);
    1650:	20 91 27 01 	lds	r18, 0x0127
    1654:	30 91 28 01 	lds	r19, 0x0128
    1658:	40 91 29 01 	lds	r20, 0x0129
    165c:	50 91 2a 01 	lds	r21, 0x012A
    1660:	60 91 2b 01 	lds	r22, 0x012B
    1664:	70 91 2c 01 	lds	r23, 0x012C
    1668:	80 91 2d 01 	lds	r24, 0x012D
    166c:	90 91 2e 01 	lds	r25, 0x012E
    1670:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    1674:	d8 01       	movw	r26, r16
    1676:	2c 93       	st	X, r18
    1678:	11 96       	adiw	r26, 0x01	; 1
    167a:	3c 93       	st	X, r19
    167c:	11 97       	sbiw	r26, 0x01	; 1
    167e:	13 96       	adiw	r26, 0x03	; 3
    1680:	5c 93       	st	X, r21
    1682:	13 97       	sbiw	r26, 0x03	; 3
    1684:	14 96       	adiw	r26, 0x04	; 4
    1686:	6c 93       	st	X, r22
    1688:	14 97       	sbiw	r26, 0x04	; 4
    168a:	16 96       	adiw	r26, 0x06	; 6
    168c:	8c 93       	st	X, r24
    168e:	16 97       	sbiw	r26, 0x06	; 6
    1690:	17 96       	adiw	r26, 0x07	; 7
    1692:	9c 93       	st	X, r25
    1694:	17 97       	sbiw	r26, 0x07	; 7
    1696:	47 7f       	andi	r20, 0xF7	; 247
	matrix.m[2] = SetBit(matrix.m[2], 3, 0);
    1698:	12 96       	adiw	r26, 0x02	; 2
    169a:	4c 93       	st	X, r20
    169c:	12 97       	sbiw	r26, 0x02	; 2
    169e:	77 7f       	andi	r23, 0xF7	; 247
	matrix.m[5] = SetBit(matrix.m[5], 3, 0);
    16a0:	15 96       	adiw	r26, 0x05	; 5
    16a2:	7c 93       	st	X, r23
    16a4:	86 eb       	ldi	r24, 0xB6	; 182
    16a6:	ef e2       	ldi	r30, 0x2F	; 47
    16a8:	f1 e0       	ldi	r31, 0x01	; 1
    16aa:	de 01       	movw	r26, r28
    16ac:	a9 59       	subi	r26, 0x99	; 153
    16ae:	b9 4f       	sbci	r27, 0xF9	; 249
    16b0:	01 90       	ld	r0, Z+
    16b2:	0d 92       	st	X+, r0
    16b4:	8a 95       	dec	r24
    16b6:	e1 f7       	brne	.-8      	; 0x16b0 <main+0xcc4>
    16b8:	f6 01       	movw	r30, r12
    16ba:	80 81       	ld	r24, Z
    16bc:	98 e0       	ldi	r25, 0x08	; 8
    16be:	f8 01       	movw	r30, r16
    16c0:	de 01       	movw	r26, r28
    16c2:	a3 5b       	subi	r26, 0xB3	; 179
    16c4:	b7 4e       	sbci	r27, 0xE7	; 231
    16c6:	01 90       	ld	r0, Z+
    16c8:	0d 92       	st	X+, r0
    16ca:	9a 95       	dec	r25
    16cc:	e1 f7       	brne	.-8      	; 0x16c6 <main+0xcda>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    16ce:	a7 e6       	ldi	r26, 0x67	; 103
    16d0:	b6 e0       	ldi	r27, 0x06	; 6
    16d2:	ac 0f       	add	r26, r28
    16d4:	bd 1f       	adc	r27, r29
    16d6:	f8 e0       	ldi	r31, 0x08	; 8
    16d8:	8f 9f       	mul	r24, r31
    16da:	a0 0d       	add	r26, r0
    16dc:	b1 1d       	adc	r27, r1
    16de:	11 24       	eor	r1, r1
    16e0:	98 e0       	ldi	r25, 0x08	; 8
    16e2:	fe 01       	movw	r30, r28
    16e4:	e3 5b       	subi	r30, 0xB3	; 179
    16e6:	f7 4e       	sbci	r31, 0xE7	; 231
    16e8:	01 90       	ld	r0, Z+
    16ea:	0d 92       	st	X+, r0
    16ec:	9a 95       	dec	r25
    16ee:	e1 f7       	brne	.-8      	; 0x16e8 <main+0xcfc>
	explosions.timeBetween[explosions.index] = a;
    16f0:	27 e6       	ldi	r18, 0x67	; 103
    16f2:	36 e0       	ldi	r19, 0x06	; 6
    16f4:	2c 0f       	add	r18, r28
    16f6:	3d 1f       	adc	r19, r29
    16f8:	28 0f       	add	r18, r24
    16fa:	31 1d       	adc	r19, r1
    16fc:	f9 01       	movw	r30, r18
    16fe:	e0 57       	subi	r30, 0x70	; 112
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1704:	72 96       	adiw	r30, 0x12	; 18
    1706:	f0 82       	st	Z, r15
	explosions.index++;
    1708:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    170a:	c5 5e       	subi	r28, 0xE5	; 229
    170c:	d8 4f       	sbci	r29, 0xF8	; 248
    170e:	88 83       	st	Y, r24
    1710:	cb 51       	subi	r28, 0x1B	; 27
    1712:	d7 40       	sbci	r29, 0x07	; 7
    1714:	96 eb       	ldi	r25, 0xB6	; 182
    1716:	fe 01       	movw	r30, r28
    1718:	e9 59       	subi	r30, 0x99	; 153
    171a:	f9 4f       	sbci	r31, 0xF9	; 249
    171c:	de 01       	movw	r26, r28
    171e:	af 54       	subi	r26, 0x4F	; 79
    1720:	ba 4f       	sbci	r27, 0xFA	; 250
    1722:	01 90       	ld	r0, Z+
    1724:	0d 92       	st	X+, r0
    1726:	9a 95       	dec	r25
    1728:	e1 f7       	brne	.-8      	; 0x1722 <main+0xd36>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    172a:	cb 59       	subi	r28, 0x9B	; 155
    172c:	d9 4f       	sbci	r29, 0xF9	; 249
    172e:	88 83       	st	Y, r24
    1730:	c5 56       	subi	r28, 0x65	; 101
    1732:	d6 40       	sbci	r29, 0x06	; 6
    1734:	86 eb       	ldi	r24, 0xB6	; 182
    1736:	fe 01       	movw	r30, r28
    1738:	ef 54       	subi	r30, 0x4F	; 79
    173a:	fa 4f       	sbci	r31, 0xFA	; 250
    173c:	af e2       	ldi	r26, 0x2F	; 47
    173e:	b1 e0       	ldi	r27, 0x01	; 1
    1740:	01 90       	ld	r0, Z+
    1742:	0d 92       	st	X+, r0
    1744:	8a 95       	dec	r24
    1746:	e1 f7       	brne	.-8      	; 0x1740 <main+0xd54>
	
	matrix = clearSingleMatrix(matrix);
    1748:	20 91 27 01 	lds	r18, 0x0127
    174c:	30 91 28 01 	lds	r19, 0x0128
    1750:	40 91 29 01 	lds	r20, 0x0129
    1754:	50 91 2a 01 	lds	r21, 0x012A
    1758:	60 91 2b 01 	lds	r22, 0x012B
    175c:	70 91 2c 01 	lds	r23, 0x012C
    1760:	80 91 2d 01 	lds	r24, 0x012D
    1764:	90 91 2e 01 	lds	r25, 0x012E
    1768:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    176c:	d8 01       	movw	r26, r16
    176e:	2c 93       	st	X, r18
    1770:	11 96       	adiw	r26, 0x01	; 1
    1772:	3c 93       	st	X, r19
    1774:	11 97       	sbiw	r26, 0x01	; 1
    1776:	13 96       	adiw	r26, 0x03	; 3
    1778:	5c 93       	st	X, r21
    177a:	13 97       	sbiw	r26, 0x03	; 3
    177c:	14 96       	adiw	r26, 0x04	; 4
    177e:	6c 93       	st	X, r22
    1780:	14 97       	sbiw	r26, 0x04	; 4
    1782:	16 96       	adiw	r26, 0x06	; 6
    1784:	8c 93       	st	X, r24
    1786:	16 97       	sbiw	r26, 0x06	; 6
    1788:	17 96       	adiw	r26, 0x07	; 7
    178a:	9c 93       	st	X, r25
    178c:	17 97       	sbiw	r26, 0x07	; 7
    178e:	4b 7f       	andi	r20, 0xFB	; 251
	matrix.m[2] = SetBit(matrix.m[2], 2, 0);
    1790:	12 96       	adiw	r26, 0x02	; 2
    1792:	4c 93       	st	X, r20
    1794:	12 97       	sbiw	r26, 0x02	; 2
    1796:	7b 7f       	andi	r23, 0xFB	; 251
	matrix.m[5] = SetBit(matrix.m[5], 2, 0);
    1798:	15 96       	adiw	r26, 0x05	; 5
    179a:	7c 93       	st	X, r23
    179c:	86 eb       	ldi	r24, 0xB6	; 182
    179e:	ef e2       	ldi	r30, 0x2F	; 47
    17a0:	f1 e0       	ldi	r31, 0x01	; 1
    17a2:	de 01       	movw	r26, r28
    17a4:	a5 50       	subi	r26, 0x05	; 5
    17a6:	bb 4f       	sbci	r27, 0xFB	; 251
    17a8:	01 90       	ld	r0, Z+
    17aa:	0d 92       	st	X+, r0
    17ac:	8a 95       	dec	r24
    17ae:	e1 f7       	brne	.-8      	; 0x17a8 <main+0xdbc>
    17b0:	f6 01       	movw	r30, r12
    17b2:	80 81       	ld	r24, Z
    17b4:	98 e0       	ldi	r25, 0x08	; 8
    17b6:	f8 01       	movw	r30, r16
    17b8:	de 01       	movw	r26, r28
    17ba:	ab 5b       	subi	r26, 0xBB	; 187
    17bc:	b7 4e       	sbci	r27, 0xE7	; 231
    17be:	01 90       	ld	r0, Z+
    17c0:	0d 92       	st	X+, r0
    17c2:	9a 95       	dec	r25
    17c4:	e1 f7       	brne	.-8      	; 0x17be <main+0xdd2>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    17c6:	ab ef       	ldi	r26, 0xFB	; 251
    17c8:	b4 e0       	ldi	r27, 0x04	; 4
    17ca:	ac 0f       	add	r26, r28
    17cc:	bd 1f       	adc	r27, r29
    17ce:	f8 e0       	ldi	r31, 0x08	; 8
    17d0:	8f 9f       	mul	r24, r31
    17d2:	a0 0d       	add	r26, r0
    17d4:	b1 1d       	adc	r27, r1
    17d6:	11 24       	eor	r1, r1
    17d8:	98 e0       	ldi	r25, 0x08	; 8
    17da:	fe 01       	movw	r30, r28
    17dc:	eb 5b       	subi	r30, 0xBB	; 187
    17de:	f7 4e       	sbci	r31, 0xE7	; 231
    17e0:	01 90       	ld	r0, Z+
    17e2:	0d 92       	st	X+, r0
    17e4:	9a 95       	dec	r25
    17e6:	e1 f7       	brne	.-8      	; 0x17e0 <main+0xdf4>
	explosions.timeBetween[explosions.index] = a;
    17e8:	2b ef       	ldi	r18, 0xFB	; 251
    17ea:	34 e0       	ldi	r19, 0x04	; 4
    17ec:	2c 0f       	add	r18, r28
    17ee:	3d 1f       	adc	r19, r29
    17f0:	28 0f       	add	r18, r24
    17f2:	31 1d       	adc	r19, r1
    17f4:	f9 01       	movw	r30, r18
    17f6:	e0 57       	subi	r30, 0x70	; 112
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    17fc:	72 96       	adiw	r30, 0x12	; 18
    17fe:	f0 82       	st	Z, r15
	explosions.index++;
    1800:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1802:	c1 55       	subi	r28, 0x51	; 81
    1804:	da 4f       	sbci	r29, 0xFA	; 250
    1806:	88 83       	st	Y, r24
    1808:	cf 5a       	subi	r28, 0xAF	; 175
    180a:	d5 40       	sbci	r29, 0x05	; 5
    180c:	96 eb       	ldi	r25, 0xB6	; 182
    180e:	fe 01       	movw	r30, r28
    1810:	e5 50       	subi	r30, 0x05	; 5
    1812:	fb 4f       	sbci	r31, 0xFB	; 251
    1814:	de 01       	movw	r26, r28
    1816:	ab 5b       	subi	r26, 0xBB	; 187
    1818:	bb 4f       	sbci	r27, 0xFB	; 251
    181a:	01 90       	ld	r0, Z+
    181c:	0d 92       	st	X+, r0
    181e:	9a 95       	dec	r25
    1820:	e1 f7       	brne	.-8      	; 0x181a <main+0xe2e>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1822:	c7 50       	subi	r28, 0x07	; 7
    1824:	db 4f       	sbci	r29, 0xFB	; 251
    1826:	88 83       	st	Y, r24
    1828:	c9 5f       	subi	r28, 0xF9	; 249
    182a:	d4 40       	sbci	r29, 0x04	; 4
    182c:	86 eb       	ldi	r24, 0xB6	; 182
    182e:	fe 01       	movw	r30, r28
    1830:	eb 5b       	subi	r30, 0xBB	; 187
    1832:	fb 4f       	sbci	r31, 0xFB	; 251
    1834:	af e2       	ldi	r26, 0x2F	; 47
    1836:	b1 e0       	ldi	r27, 0x01	; 1
    1838:	01 90       	ld	r0, Z+
    183a:	0d 92       	st	X+, r0
    183c:	8a 95       	dec	r24
    183e:	e1 f7       	brne	.-8      	; 0x1838 <main+0xe4c>
	
	matrix = clearSingleMatrix(matrix);
    1840:	20 91 27 01 	lds	r18, 0x0127
    1844:	30 91 28 01 	lds	r19, 0x0128
    1848:	40 91 29 01 	lds	r20, 0x0129
    184c:	50 91 2a 01 	lds	r21, 0x012A
    1850:	60 91 2b 01 	lds	r22, 0x012B
    1854:	70 91 2c 01 	lds	r23, 0x012C
    1858:	80 91 2d 01 	lds	r24, 0x012D
    185c:	90 91 2e 01 	lds	r25, 0x012E
    1860:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    1864:	d8 01       	movw	r26, r16
    1866:	2c 93       	st	X, r18
    1868:	11 96       	adiw	r26, 0x01	; 1
    186a:	3c 93       	st	X, r19
    186c:	11 97       	sbiw	r26, 0x01	; 1
    186e:	13 96       	adiw	r26, 0x03	; 3
    1870:	5c 93       	st	X, r21
    1872:	13 97       	sbiw	r26, 0x03	; 3
    1874:	14 96       	adiw	r26, 0x04	; 4
    1876:	6c 93       	st	X, r22
    1878:	14 97       	sbiw	r26, 0x04	; 4
    187a:	16 96       	adiw	r26, 0x06	; 6
    187c:	8c 93       	st	X, r24
    187e:	16 97       	sbiw	r26, 0x06	; 6
    1880:	17 96       	adiw	r26, 0x07	; 7
    1882:	9c 93       	st	X, r25
    1884:	17 97       	sbiw	r26, 0x07	; 7
    1886:	4d 7f       	andi	r20, 0xFD	; 253
	matrix.m[2] = SetBit(matrix.m[2], 1, 0);
    1888:	12 96       	adiw	r26, 0x02	; 2
    188a:	4c 93       	st	X, r20
    188c:	12 97       	sbiw	r26, 0x02	; 2
    188e:	7d 7f       	andi	r23, 0xFD	; 253
	matrix.m[5] = SetBit(matrix.m[5], 1, 0);
    1890:	15 96       	adiw	r26, 0x05	; 5
    1892:	7c 93       	st	X, r23
    1894:	86 eb       	ldi	r24, 0xB6	; 182
    1896:	ef e2       	ldi	r30, 0x2F	; 47
    1898:	f1 e0       	ldi	r31, 0x01	; 1
    189a:	de 01       	movw	r26, r28
    189c:	a1 57       	subi	r26, 0x71	; 113
    189e:	bc 4f       	sbci	r27, 0xFC	; 252
    18a0:	01 90       	ld	r0, Z+
    18a2:	0d 92       	st	X+, r0
    18a4:	8a 95       	dec	r24
    18a6:	e1 f7       	brne	.-8      	; 0x18a0 <main+0xeb4>
    18a8:	f6 01       	movw	r30, r12
    18aa:	80 81       	ld	r24, Z
    18ac:	98 e0       	ldi	r25, 0x08	; 8
    18ae:	f8 01       	movw	r30, r16
    18b0:	de 01       	movw	r26, r28
    18b2:	a3 5c       	subi	r26, 0xC3	; 195
    18b4:	b7 4e       	sbci	r27, 0xE7	; 231
    18b6:	01 90       	ld	r0, Z+
    18b8:	0d 92       	st	X+, r0
    18ba:	9a 95       	dec	r25
    18bc:	e1 f7       	brne	.-8      	; 0x18b6 <main+0xeca>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    18be:	af e8       	ldi	r26, 0x8F	; 143
    18c0:	b3 e0       	ldi	r27, 0x03	; 3
    18c2:	ac 0f       	add	r26, r28
    18c4:	bd 1f       	adc	r27, r29
    18c6:	f8 e0       	ldi	r31, 0x08	; 8
    18c8:	8f 9f       	mul	r24, r31
    18ca:	a0 0d       	add	r26, r0
    18cc:	b1 1d       	adc	r27, r1
    18ce:	11 24       	eor	r1, r1
    18d0:	98 e0       	ldi	r25, 0x08	; 8
    18d2:	fe 01       	movw	r30, r28
    18d4:	e3 5c       	subi	r30, 0xC3	; 195
    18d6:	f7 4e       	sbci	r31, 0xE7	; 231
    18d8:	01 90       	ld	r0, Z+
    18da:	0d 92       	st	X+, r0
    18dc:	9a 95       	dec	r25
    18de:	e1 f7       	brne	.-8      	; 0x18d8 <main+0xeec>
	explosions.timeBetween[explosions.index] = a;
    18e0:	2f e8       	ldi	r18, 0x8F	; 143
    18e2:	33 e0       	ldi	r19, 0x03	; 3
    18e4:	2c 0f       	add	r18, r28
    18e6:	3d 1f       	adc	r19, r29
    18e8:	28 0f       	add	r18, r24
    18ea:	31 1d       	adc	r19, r1
    18ec:	f9 01       	movw	r30, r18
    18ee:	e0 57       	subi	r30, 0x70	; 112
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    18f4:	72 96       	adiw	r30, 0x12	; 18
    18f6:	f0 82       	st	Z, r15
	explosions.index++;
    18f8:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    18fa:	cd 5b       	subi	r28, 0xBD	; 189
    18fc:	db 4f       	sbci	r29, 0xFB	; 251
    18fe:	88 83       	st	Y, r24
    1900:	c3 54       	subi	r28, 0x43	; 67
    1902:	d4 40       	sbci	r29, 0x04	; 4
    1904:	96 eb       	ldi	r25, 0xB6	; 182
    1906:	fe 01       	movw	r30, r28
    1908:	e1 57       	subi	r30, 0x71	; 113
    190a:	fc 4f       	sbci	r31, 0xFC	; 252
    190c:	de 01       	movw	r26, r28
    190e:	a7 52       	subi	r26, 0x27	; 39
    1910:	bd 4f       	sbci	r27, 0xFD	; 253
    1912:	01 90       	ld	r0, Z+
    1914:	0d 92       	st	X+, r0
    1916:	9a 95       	dec	r25
    1918:	e1 f7       	brne	.-8      	; 0x1912 <main+0xf26>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    191a:	c3 57       	subi	r28, 0x73	; 115
    191c:	dc 4f       	sbci	r29, 0xFC	; 252
    191e:	88 83       	st	Y, r24
    1920:	cd 58       	subi	r28, 0x8D	; 141
    1922:	d3 40       	sbci	r29, 0x03	; 3
    1924:	86 eb       	ldi	r24, 0xB6	; 182
    1926:	fe 01       	movw	r30, r28
    1928:	e7 52       	subi	r30, 0x27	; 39
    192a:	fd 4f       	sbci	r31, 0xFD	; 253
    192c:	af e2       	ldi	r26, 0x2F	; 47
    192e:	b1 e0       	ldi	r27, 0x01	; 1
    1930:	01 90       	ld	r0, Z+
    1932:	0d 92       	st	X+, r0
    1934:	8a 95       	dec	r24
    1936:	e1 f7       	brne	.-8      	; 0x1930 <main+0xf44>
	
	matrix = clearSingleMatrix(matrix);
    1938:	20 91 27 01 	lds	r18, 0x0127
    193c:	30 91 28 01 	lds	r19, 0x0128
    1940:	40 91 29 01 	lds	r20, 0x0129
    1944:	50 91 2a 01 	lds	r21, 0x012A
    1948:	60 91 2b 01 	lds	r22, 0x012B
    194c:	70 91 2c 01 	lds	r23, 0x012C
    1950:	80 91 2d 01 	lds	r24, 0x012D
    1954:	90 91 2e 01 	lds	r25, 0x012E
    1958:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    195c:	d8 01       	movw	r26, r16
    195e:	2c 93       	st	X, r18
    1960:	11 96       	adiw	r26, 0x01	; 1
    1962:	3c 93       	st	X, r19
    1964:	11 97       	sbiw	r26, 0x01	; 1
    1966:	13 96       	adiw	r26, 0x03	; 3
    1968:	5c 93       	st	X, r21
    196a:	13 97       	sbiw	r26, 0x03	; 3
    196c:	14 96       	adiw	r26, 0x04	; 4
    196e:	6c 93       	st	X, r22
    1970:	14 97       	sbiw	r26, 0x04	; 4
    1972:	16 96       	adiw	r26, 0x06	; 6
    1974:	8c 93       	st	X, r24
    1976:	16 97       	sbiw	r26, 0x06	; 6
    1978:	17 96       	adiw	r26, 0x07	; 7
    197a:	9c 93       	st	X, r25
    197c:	17 97       	sbiw	r26, 0x07	; 7
    197e:	4e 7f       	andi	r20, 0xFE	; 254
	matrix.m[2] = SetBit(matrix.m[2], 0, 0);
    1980:	12 96       	adiw	r26, 0x02	; 2
    1982:	4c 93       	st	X, r20
    1984:	12 97       	sbiw	r26, 0x02	; 2
    1986:	7e 7f       	andi	r23, 0xFE	; 254
	matrix.m[5] = SetBit(matrix.m[5], 0, 0);
    1988:	15 96       	adiw	r26, 0x05	; 5
    198a:	7c 93       	st	X, r23
    198c:	86 eb       	ldi	r24, 0xB6	; 182
    198e:	ef e2       	ldi	r30, 0x2F	; 47
    1990:	f1 e0       	ldi	r31, 0x01	; 1
    1992:	de 01       	movw	r26, r28
    1994:	ad 5d       	subi	r26, 0xDD	; 221
    1996:	bd 4f       	sbci	r27, 0xFD	; 253
    1998:	01 90       	ld	r0, Z+
    199a:	0d 92       	st	X+, r0
    199c:	8a 95       	dec	r24
    199e:	e1 f7       	brne	.-8      	; 0x1998 <main+0xfac>
    19a0:	f6 01       	movw	r30, r12
    19a2:	80 81       	ld	r24, Z
    19a4:	98 e0       	ldi	r25, 0x08	; 8
    19a6:	f8 01       	movw	r30, r16
    19a8:	de 01       	movw	r26, r28
    19aa:	ab 5c       	subi	r26, 0xCB	; 203
    19ac:	b7 4e       	sbci	r27, 0xE7	; 231
    19ae:	01 90       	ld	r0, Z+
    19b0:	0d 92       	st	X+, r0
    19b2:	9a 95       	dec	r25
    19b4:	e1 f7       	brne	.-8      	; 0x19ae <main+0xfc2>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    19b6:	a3 e2       	ldi	r26, 0x23	; 35
    19b8:	b2 e0       	ldi	r27, 0x02	; 2
    19ba:	ac 0f       	add	r26, r28
    19bc:	bd 1f       	adc	r27, r29
    19be:	f8 e0       	ldi	r31, 0x08	; 8
    19c0:	8f 9f       	mul	r24, r31
    19c2:	a0 0d       	add	r26, r0
    19c4:	b1 1d       	adc	r27, r1
    19c6:	11 24       	eor	r1, r1
    19c8:	98 e0       	ldi	r25, 0x08	; 8
    19ca:	fe 01       	movw	r30, r28
    19cc:	eb 5c       	subi	r30, 0xCB	; 203
    19ce:	f7 4e       	sbci	r31, 0xE7	; 231
    19d0:	01 90       	ld	r0, Z+
    19d2:	0d 92       	st	X+, r0
    19d4:	9a 95       	dec	r25
    19d6:	e1 f7       	brne	.-8      	; 0x19d0 <main+0xfe4>
	explosions.timeBetween[explosions.index] = a;
    19d8:	23 e2       	ldi	r18, 0x23	; 35
    19da:	32 e0       	ldi	r19, 0x02	; 2
    19dc:	2c 0f       	add	r18, r28
    19de:	3d 1f       	adc	r19, r29
    19e0:	28 0f       	add	r18, r24
    19e2:	31 1d       	adc	r19, r1
    19e4:	f9 01       	movw	r30, r18
    19e6:	e0 57       	subi	r30, 0x70	; 112
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    19ec:	72 96       	adiw	r30, 0x12	; 18
    19ee:	f0 82       	st	Z, r15
	explosions.index++;
    19f0:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    19f2:	c9 52       	subi	r28, 0x29	; 41
    19f4:	dd 4f       	sbci	r29, 0xFD	; 253
    19f6:	88 83       	st	Y, r24
    19f8:	c7 5d       	subi	r28, 0xD7	; 215
    19fa:	d2 40       	sbci	r29, 0x02	; 2
    19fc:	96 eb       	ldi	r25, 0xB6	; 182
    19fe:	fe 01       	movw	r30, r28
    1a00:	ed 5d       	subi	r30, 0xDD	; 221
    1a02:	fd 4f       	sbci	r31, 0xFD	; 253
    1a04:	de 01       	movw	r26, r28
    1a06:	a3 59       	subi	r26, 0x93	; 147
    1a08:	be 4f       	sbci	r27, 0xFE	; 254
    1a0a:	01 90       	ld	r0, Z+
    1a0c:	0d 92       	st	X+, r0
    1a0e:	9a 95       	dec	r25
    1a10:	e1 f7       	brne	.-8      	; 0x1a0a <main+0x101e>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1a12:	cf 5d       	subi	r28, 0xDF	; 223
    1a14:	dd 4f       	sbci	r29, 0xFD	; 253
    1a16:	88 83       	st	Y, r24
    1a18:	c1 52       	subi	r28, 0x21	; 33
    1a1a:	d2 40       	sbci	r29, 0x02	; 2
    1a1c:	86 eb       	ldi	r24, 0xB6	; 182
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e3 59       	subi	r30, 0x93	; 147
    1a22:	fe 4f       	sbci	r31, 0xFE	; 254
    1a24:	af e2       	ldi	r26, 0x2F	; 47
    1a26:	b1 e0       	ldi	r27, 0x01	; 1
    1a28:	01 90       	ld	r0, Z+
    1a2a:	0d 92       	st	X+, r0
    1a2c:	8a 95       	dec	r24
    1a2e:	e1 f7       	brne	.-8      	; 0x1a28 <main+0x103c>
	
	matrix = clearSingleMatrix(matrix);
    1a30:	20 91 27 01 	lds	r18, 0x0127
    1a34:	30 91 28 01 	lds	r19, 0x0128
    1a38:	40 91 29 01 	lds	r20, 0x0129
    1a3c:	50 91 2a 01 	lds	r21, 0x012A
    1a40:	60 91 2b 01 	lds	r22, 0x012B
    1a44:	70 91 2c 01 	lds	r23, 0x012C
    1a48:	80 91 2d 01 	lds	r24, 0x012D
    1a4c:	90 91 2e 01 	lds	r25, 0x012E
    1a50:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    1a54:	d8 01       	movw	r26, r16
    1a56:	2c 93       	st	X, r18
    1a58:	11 96       	adiw	r26, 0x01	; 1
    1a5a:	3c 93       	st	X, r19
    1a5c:	11 97       	sbiw	r26, 0x01	; 1
    1a5e:	12 96       	adiw	r26, 0x02	; 2
    1a60:	4c 93       	st	X, r20
    1a62:	12 97       	sbiw	r26, 0x02	; 2
    1a64:	15 96       	adiw	r26, 0x05	; 5
    1a66:	7c 93       	st	X, r23
    1a68:	15 97       	sbiw	r26, 0x05	; 5
    1a6a:	16 96       	adiw	r26, 0x06	; 6
    1a6c:	8c 93       	st	X, r24
    1a6e:	16 97       	sbiw	r26, 0x06	; 6
    1a70:	17 96       	adiw	r26, 0x07	; 7
    1a72:	9c 93       	st	X, r25
    1a74:	17 97       	sbiw	r26, 0x07	; 7
	matrix.m[3] = 0x00;
    1a76:	13 96       	adiw	r26, 0x03	; 3
    1a78:	1c 92       	st	X, r1
    1a7a:	13 97       	sbiw	r26, 0x03	; 3
	matrix.m[4] = 0x00;
    1a7c:	14 96       	adiw	r26, 0x04	; 4
    1a7e:	1c 92       	st	X, r1
    1a80:	86 eb       	ldi	r24, 0xB6	; 182
    1a82:	ef e2       	ldi	r30, 0x2F	; 47
    1a84:	f1 e0       	ldi	r31, 0x01	; 1
    1a86:	de 01       	movw	r26, r28
    1a88:	a9 54       	subi	r26, 0x49	; 73
    1a8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a8c:	01 90       	ld	r0, Z+
    1a8e:	0d 92       	st	X+, r0
    1a90:	8a 95       	dec	r24
    1a92:	e1 f7       	brne	.-8      	; 0x1a8c <main+0x10a0>
    1a94:	f6 01       	movw	r30, r12
    1a96:	80 81       	ld	r24, Z
    1a98:	98 e0       	ldi	r25, 0x08	; 8
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	de 01       	movw	r26, r28
    1a9e:	a3 5d       	subi	r26, 0xD3	; 211
    1aa0:	b7 4e       	sbci	r27, 0xE7	; 231
    1aa2:	01 90       	ld	r0, Z+
    1aa4:	0d 92       	st	X+, r0
    1aa6:	9a 95       	dec	r25
    1aa8:	e1 f7       	brne	.-8      	; 0x1aa2 <main+0x10b6>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1aaa:	a7 eb       	ldi	r26, 0xB7	; 183
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	ac 0f       	add	r26, r28
    1ab0:	bd 1f       	adc	r27, r29
    1ab2:	f8 e0       	ldi	r31, 0x08	; 8
    1ab4:	8f 9f       	mul	r24, r31
    1ab6:	a0 0d       	add	r26, r0
    1ab8:	b1 1d       	adc	r27, r1
    1aba:	11 24       	eor	r1, r1
    1abc:	98 e0       	ldi	r25, 0x08	; 8
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e3 5d       	subi	r30, 0xD3	; 211
    1ac2:	f7 4e       	sbci	r31, 0xE7	; 231
    1ac4:	01 90       	ld	r0, Z+
    1ac6:	0d 92       	st	X+, r0
    1ac8:	9a 95       	dec	r25
    1aca:	e1 f7       	brne	.-8      	; 0x1ac4 <main+0x10d8>
	explosions.timeBetween[explosions.index] = a;
    1acc:	27 eb       	ldi	r18, 0xB7	; 183
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	2c 0f       	add	r18, r28
    1ad2:	3d 1f       	adc	r19, r29
    1ad4:	28 0f       	add	r18, r24
    1ad6:	31 1d       	adc	r19, r1
    1ad8:	f9 01       	movw	r30, r18
    1ada:	e0 57       	subi	r30, 0x70	; 112
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1ae0:	72 96       	adiw	r30, 0x12	; 18
    1ae2:	f0 82       	st	Z, r15
	explosions.index++;
    1ae4:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1ae6:	c5 59       	subi	r28, 0x95	; 149
    1ae8:	de 4f       	sbci	r29, 0xFE	; 254
    1aea:	88 83       	st	Y, r24
    1aec:	cb 56       	subi	r28, 0x6B	; 107
    1aee:	d1 40       	sbci	r29, 0x01	; 1
    1af0:	96 eb       	ldi	r25, 0xB6	; 182
    1af2:	fe 01       	movw	r30, r28
    1af4:	e9 54       	subi	r30, 0x49	; 73
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	de 01       	movw	r26, r28
    1afa:	11 96       	adiw	r26, 0x01	; 1
    1afc:	01 90       	ld	r0, Z+
    1afe:	0d 92       	st	X+, r0
    1b00:	9a 95       	dec	r25
    1b02:	e1 f7       	brne	.-8      	; 0x1afc <main+0x1110>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1b04:	cb 54       	subi	r28, 0x4B	; 75
    1b06:	df 4f       	sbci	r29, 0xFF	; 255
    1b08:	88 83       	st	Y, r24
    1b0a:	c5 5b       	subi	r28, 0xB5	; 181
    1b0c:	d0 40       	sbci	r29, 0x00	; 0
    1b0e:	86 eb       	ldi	r24, 0xB6	; 182
    1b10:	fe 01       	movw	r30, r28
    1b12:	31 96       	adiw	r30, 0x01	; 1
    1b14:	af e2       	ldi	r26, 0x2F	; 47
    1b16:	b1 e0       	ldi	r27, 0x01	; 1
    1b18:	01 90       	ld	r0, Z+
    1b1a:	0d 92       	st	X+, r0
    1b1c:	8a 95       	dec	r24
    1b1e:	e1 f7       	brne	.-8      	; 0x1b18 <main+0x112c>
	
	userMatrix = initSingleUserMatrix(userMatrix);
    1b20:	e0 90 e5 01 	lds	r14, 0x01E5
    1b24:	f0 90 e6 01 	lds	r15, 0x01E6
    1b28:	00 91 e7 01 	lds	r16, 0x01E7
    1b2c:	10 91 e8 01 	lds	r17, 0x01E8
    1b30:	20 91 e9 01 	lds	r18, 0x01E9
    1b34:	30 91 ea 01 	lds	r19, 0x01EA
    1b38:	40 91 eb 01 	lds	r20, 0x01EB
    1b3c:	50 91 ec 01 	lds	r21, 0x01EC
    1b40:	60 91 ed 01 	lds	r22, 0x01ED
    1b44:	70 91 ee 01 	lds	r23, 0x01EE
    1b48:	ce 01       	movw	r24, r28
    1b4a:	8b 54       	subi	r24, 0x4B	; 75
    1b4c:	97 4e       	sbci	r25, 0xE7	; 231
    1b4e:	0e 94 80 01 	call	0x300	; 0x300 <initSingleUserMatrix>
    1b52:	8a e0       	ldi	r24, 0x0A	; 10
    1b54:	fe 01       	movw	r30, r28
    1b56:	eb 54       	subi	r30, 0x4B	; 75
    1b58:	f7 4e       	sbci	r31, 0xE7	; 231
    1b5a:	a5 ee       	ldi	r26, 0xE5	; 229
    1b5c:	b1 e0       	ldi	r27, 0x01	; 1
    1b5e:	01 90       	ld	r0, Z+
    1b60:	0d 92       	st	X+, r0
    1b62:	8a 95       	dec	r24
    1b64:	e1 f7       	brne	.-8      	; 0x1b5e <main+0x1172>
	wallMatrix = clearSingleMatrix(wallMatrix);
    1b66:	20 91 ef 01 	lds	r18, 0x01EF
    1b6a:	30 91 f0 01 	lds	r19, 0x01F0
    1b6e:	40 91 f1 01 	lds	r20, 0x01F1
    1b72:	50 91 f2 01 	lds	r21, 0x01F2
    1b76:	60 91 f3 01 	lds	r22, 0x01F3
    1b7a:	70 91 f4 01 	lds	r23, 0x01F4
    1b7e:	80 91 f5 01 	lds	r24, 0x01F5
    1b82:	90 91 f6 01 	lds	r25, 0x01F6
    1b86:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    1b8a:	ef ee       	ldi	r30, 0xEF	; 239
    1b8c:	f1 e0       	ldi	r31, 0x01	; 1
    1b8e:	20 83       	st	Z, r18
    1b90:	31 83       	std	Z+1, r19	; 0x01
    1b92:	42 83       	std	Z+2, r20	; 0x02
    1b94:	53 83       	std	Z+3, r21	; 0x03
    1b96:	75 83       	std	Z+5, r23	; 0x05
    1b98:	86 83       	std	Z+6, r24	; 0x06
    1b9a:	97 83       	std	Z+7, r25	; 0x07
	wallMatrix.m[4] = 0xCC;
    1b9c:	8c ec       	ldi	r24, 0xCC	; 204
    1b9e:	84 83       	std	Z+4, r24	; 0x04
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
    1ba0:	00 ec       	ldi	r16, 0xC0	; 192
    1ba2:	10 e0       	ldi	r17, 0x00	; 0
			} else if (USARTReceiver == 0x04) { // Game start
				displayLED = 1;
			} else if (USARTReceiver == 0x05) { // Game end
				displayLED = 0;
			} else if (USARTReceiver == 0x06) { // Edit start
				displayEDIT = 1;
    1ba4:	bb 24       	eor	r11, r11
    1ba6:	b3 94       	inc	r11
					userMatrix.row--;
					userMatrix.m[userMatrix.row + 1] = SetBit(userMatrix.m[userMatrix.row + 1], userMatrix.column, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
				}
			} else if (USARTReceiver == 0x03) { // left
				if (userMatrix.column > 0 &&  GetBit(wallMatrix.m[userMatrix.row], userMatrix.column - 1)) {
    1ba8:	0f 2e       	mov	r0, r31
    1baa:	f5 ee       	ldi	r31, 0xE5	; 229
    1bac:	ef 2e       	mov	r14, r31
    1bae:	f1 e0       	ldi	r31, 0x01	; 1
    1bb0:	ff 2e       	mov	r15, r31
    1bb2:	f0 2d       	mov	r31, r0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
    1bb4:	cc 24       	eor	r12, r12
    1bb6:	c3 94       	inc	r12
    1bb8:	d1 2c       	mov	r13, r1
	userMatrix = initSingleUserMatrix(userMatrix);
	wallMatrix = clearSingleMatrix(wallMatrix);
	wallMatrix.m[4] = 0xCC;
	
	while (1) {
		LED_Tick();
    1bba:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LED_Tick>
		Edit_Tick();
    1bbe:	0e 94 26 03 	call	0x64c	; 0x64c <Edit_Tick>
    1bc2:	d8 01       	movw	r26, r16
    1bc4:	8c 91       	ld	r24, X
		
		if (USART_HasReceived(0)) {
    1bc6:	88 23       	and	r24, r24
    1bc8:	c4 f7       	brge	.-16     	; 0x1bba <main+0x11ce>
			USARTReceiver = USART_Receive(0);
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	0e 94 b1 02 	call	0x562	; 0x562 <USART_Receive>
    1bd0:	80 93 1c 01 	sts	0x011C, r24
			
			if (USARTReceiver == 0x00) { // up
    1bd4:	81 11       	cpse	r24, r1
    1bd6:	28 c0       	rjmp	.+80     	; 0x1c28 <main+0x123c>
				if (userMatrix.row < 7 && GetBit(wallMatrix.m[userMatrix.row + 1], userMatrix.column)) {
    1bd8:	d7 01       	movw	r26, r14
    1bda:	18 96       	adiw	r26, 0x08	; 8
    1bdc:	ec 91       	ld	r30, X
    1bde:	18 97       	sbiw	r26, 0x08	; 8
    1be0:	e7 30       	cpi	r30, 0x07	; 7
    1be2:	58 f7       	brcc	.-42     	; 0x1bba <main+0x11ce>
    1be4:	c6 01       	movw	r24, r12
    1be6:	19 96       	adiw	r26, 0x09	; 9
    1be8:	0c 90       	ld	r0, X
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <main+0x1204>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <main+0x1200>
    1bf4:	ae 2f       	mov	r26, r30
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	a1 51       	subi	r26, 0x11	; 17
    1bfa:	be 4f       	sbci	r27, 0xFE	; 254
	return ((bits & mask) != 0);
    1bfc:	11 96       	adiw	r26, 0x01	; 1
    1bfe:	2c 91       	ld	r18, X
    1c00:	28 23       	and	r18, r24
    1c02:	d9 f2       	breq	.-74     	; 0x1bba <main+0x11ce>
					userMatrix.row++;
    1c04:	ef 5f       	subi	r30, 0xFF	; 255
    1c06:	d7 01       	movw	r26, r14
    1c08:	18 96       	adiw	r26, 0x08	; 8
    1c0a:	ec 93       	st	X, r30
					userMatrix.m[userMatrix.row - 1] = SetBit(userMatrix.m[userMatrix.row - 1], userMatrix.column, 1);
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	df 01       	movw	r26, r30
    1c10:	ac 51       	subi	r26, 0x1C	; 28
    1c12:	be 4f       	sbci	r27, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
    1c14:	9c 91       	ld	r25, X
    1c16:	98 2b       	or	r25, r24
    1c18:	9c 93       	st	X, r25
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
    1c1a:	eb 51       	subi	r30, 0x1B	; 27
    1c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1e:	80 95       	com	r24
    1c20:	90 81       	ld	r25, Z
    1c22:	89 23       	and	r24, r25
    1c24:	80 83       	st	Z, r24
    1c26:	c9 cf       	rjmp	.-110    	; 0x1bba <main+0x11ce>
				}
			} else if (USARTReceiver == 0x01) { // right
    1c28:	81 30       	cpi	r24, 0x01	; 1
    1c2a:	41 f5       	brne	.+80     	; 0x1c7c <main+0x1290>
				if (userMatrix.column  < 7 && GetBit(wallMatrix.m[userMatrix.row], userMatrix.column + 1)) {
    1c2c:	f7 01       	movw	r30, r14
    1c2e:	21 85       	ldd	r18, Z+9	; 0x09
    1c30:	27 30       	cpi	r18, 0x07	; 7
    1c32:	18 f6       	brcc	.-122    	; 0x1bba <main+0x11ce>
    1c34:	61 e0       	ldi	r22, 0x01	; 1
    1c36:	62 0f       	add	r22, r18
    1c38:	80 85       	ldd	r24, Z+8	; 0x08
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
    1c3c:	a6 01       	movw	r20, r12
    1c3e:	06 2e       	mov	r0, r22
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <main+0x125a>
    1c42:	44 0f       	add	r20, r20
    1c44:	55 1f       	adc	r21, r21
    1c46:	0a 94       	dec	r0
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <main+0x1256>
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	e1 51       	subi	r30, 0x11	; 17
    1c4e:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
    1c50:	30 81       	ld	r19, Z
    1c52:	34 23       	and	r19, r20
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <main+0x126c>
    1c56:	b1 cf       	rjmp	.-158    	; 0x1bba <main+0x11ce>
					userMatrix.column++;
    1c58:	d7 01       	movw	r26, r14
    1c5a:	19 96       	adiw	r26, 0x09	; 9
    1c5c:	6c 93       	st	X, r22
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column - 1, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
    1c5e:	fc 01       	movw	r30, r24
    1c60:	eb 51       	subi	r30, 0x1B	; 27
    1c62:	fe 4f       	sbci	r31, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
    1c64:	40 95       	com	r20
    1c66:	c6 01       	movw	r24, r12
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <main+0x1282>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	2a 95       	dec	r18
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <main+0x127e>
    1c72:	90 81       	ld	r25, Z
    1c74:	89 2b       	or	r24, r25
    1c76:	48 23       	and	r20, r24
    1c78:	40 83       	st	Z, r20
    1c7a:	9f cf       	rjmp	.-194    	; 0x1bba <main+0x11ce>
				}
			} else if (USARTReceiver == 0x02) { // down
    1c7c:	82 30       	cpi	r24, 0x02	; 2
    1c7e:	49 f5       	brne	.+82     	; 0x1cd2 <main+0x12e6>
				if (userMatrix.row > 0  && GetBit(wallMatrix.m[userMatrix.row - 1], userMatrix.column)) {
    1c80:	d7 01       	movw	r26, r14
    1c82:	18 96       	adiw	r26, 0x08	; 8
    1c84:	ec 91       	ld	r30, X
    1c86:	18 97       	sbiw	r26, 0x08	; 8
    1c88:	ee 23       	and	r30, r30
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <main+0x12a2>
    1c8c:	96 cf       	rjmp	.-212    	; 0x1bba <main+0x11ce>
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
    1c8e:	c6 01       	movw	r24, r12
    1c90:	19 96       	adiw	r26, 0x09	; 9
    1c92:	0c 90       	ld	r0, X
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <main+0x12ae>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	0a 94       	dec	r0
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <main+0x12aa>
    1c9e:	ae 2f       	mov	r26, r30
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	a2 51       	subi	r26, 0x12	; 18
    1ca4:	be 4f       	sbci	r27, 0xFE	; 254
	return ((bits & mask) != 0);
    1ca6:	2c 91       	ld	r18, X
    1ca8:	28 23       	and	r18, r24
    1caa:	09 f4       	brne	.+2      	; 0x1cae <main+0x12c2>
    1cac:	86 cf       	rjmp	.-244    	; 0x1bba <main+0x11ce>
					userMatrix.row--;
    1cae:	e1 50       	subi	r30, 0x01	; 1
    1cb0:	d7 01       	movw	r26, r14
    1cb2:	18 96       	adiw	r26, 0x08	; 8
    1cb4:	ec 93       	st	X, r30
					userMatrix.m[userMatrix.row + 1] = SetBit(userMatrix.m[userMatrix.row + 1], userMatrix.column, 1);
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	df 01       	movw	r26, r30
    1cba:	aa 51       	subi	r26, 0x1A	; 26
    1cbc:	be 4f       	sbci	r27, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
    1cbe:	9c 91       	ld	r25, X
    1cc0:	98 2b       	or	r25, r24
    1cc2:	9c 93       	st	X, r25
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
    1cc4:	eb 51       	subi	r30, 0x1B	; 27
    1cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc8:	80 95       	com	r24
    1cca:	90 81       	ld	r25, Z
    1ccc:	89 23       	and	r24, r25
    1cce:	80 83       	st	Z, r24
    1cd0:	74 cf       	rjmp	.-280    	; 0x1bba <main+0x11ce>
				}
			} else if (USARTReceiver == 0x03) { // left
    1cd2:	83 30       	cpi	r24, 0x03	; 3
    1cd4:	49 f5       	brne	.+82     	; 0x1d28 <main+0x133c>
				if (userMatrix.column > 0 &&  GetBit(wallMatrix.m[userMatrix.row], userMatrix.column - 1)) {
    1cd6:	f7 01       	movw	r30, r14
    1cd8:	21 85       	ldd	r18, Z+9	; 0x09
    1cda:	22 23       	and	r18, r18
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <main+0x12f4>
    1cde:	6d cf       	rjmp	.-294    	; 0x1bba <main+0x11ce>
    1ce0:	6f ef       	ldi	r22, 0xFF	; 255
    1ce2:	62 0f       	add	r22, r18
    1ce4:	80 85       	ldd	r24, Z+8	; 0x08
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
    1ce8:	a6 01       	movw	r20, r12
    1cea:	06 2e       	mov	r0, r22
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <main+0x1306>
    1cee:	44 0f       	add	r20, r20
    1cf0:	55 1f       	adc	r21, r21
    1cf2:	0a 94       	dec	r0
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <main+0x1302>
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	e1 51       	subi	r30, 0x11	; 17
    1cfa:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
    1cfc:	30 81       	ld	r19, Z
    1cfe:	34 23       	and	r19, r20
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <main+0x1318>
    1d02:	5b cf       	rjmp	.-330    	; 0x1bba <main+0x11ce>
					userMatrix.column--;
    1d04:	d7 01       	movw	r26, r14
    1d06:	19 96       	adiw	r26, 0x09	; 9
    1d08:	6c 93       	st	X, r22
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column + 1, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	eb 51       	subi	r30, 0x1B	; 27
    1d0e:	fe 4f       	sbci	r31, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
    1d10:	40 95       	com	r20
    1d12:	c6 01       	movw	r24, r12
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <main+0x132e>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	2a 95       	dec	r18
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <main+0x132a>
    1d1e:	90 81       	ld	r25, Z
    1d20:	89 2b       	or	r24, r25
    1d22:	48 23       	and	r20, r24
    1d24:	40 83       	st	Z, r20
    1d26:	49 cf       	rjmp	.-366    	; 0x1bba <main+0x11ce>
				}
			} else if (USARTReceiver == 0x04) { // Game start
    1d28:	84 30       	cpi	r24, 0x04	; 4
    1d2a:	19 f4       	brne	.+6      	; 0x1d32 <main+0x1346>
				displayLED = 1;
    1d2c:	b0 92 1d 01 	sts	0x011D, r11
    1d30:	44 cf       	rjmp	.-376    	; 0x1bba <main+0x11ce>
			} else if (USARTReceiver == 0x05) { // Game end
    1d32:	85 30       	cpi	r24, 0x05	; 5
    1d34:	19 f4       	brne	.+6      	; 0x1d3c <main+0x1350>
				displayLED = 0;
    1d36:	10 92 1d 01 	sts	0x011D, r1
    1d3a:	3f cf       	rjmp	.-386    	; 0x1bba <main+0x11ce>
			} else if (USARTReceiver == 0x06) { // Edit start
    1d3c:	86 30       	cpi	r24, 0x06	; 6
    1d3e:	19 f4       	brne	.+6      	; 0x1d46 <main+0x135a>
				displayEDIT = 1;
    1d40:	b0 92 26 01 	sts	0x0126, r11
    1d44:	3a cf       	rjmp	.-396    	; 0x1bba <main+0x11ce>
			} else if (USARTReceiver == 0x07) { // Edit end
    1d46:	87 30       	cpi	r24, 0x07	; 7
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <main+0x1360>
    1d4a:	37 cf       	rjmp	.-402    	; 0x1bba <main+0x11ce>
				displayEDIT = 0;
    1d4c:	10 92 26 01 	sts	0x0126, r1
    1d50:	34 cf       	rjmp	.-408    	; 0x1bba <main+0x11ce>

00001d52 <_exit>:
    1d52:	f8 94       	cli

00001d54 <__stop_program>:
    1d54:	ff cf       	rjmp	.-2      	; 0x1d54 <__stop_program>
