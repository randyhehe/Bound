
scbound.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000110c  000011a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000110c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f7  00800104  00800104  000011a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001773  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000048c  00000000  00000000  00002ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f8b  00000000  00000000  00002f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000480  00000000  00000000  00003ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b0  00000000  00000000  00004360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000158c  00000000  00000000  00004910  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  00005e9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	e1 c0       	rjmp	.+450    	; 0x1f8 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e0       	ldi	r30, 0x0C	; 12
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 30       	cpi	r26, 0x04	; 4
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a4 e0       	ldi	r26, 0x04	; 4
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 3f       	cpi	r26, 0xFB	; 251
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	f7 d5       	rcall	.+3054   	; 0xcb2 <main>
      c4:	0c 94 84 08 	jmp	0x1108	; 0x1108 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <ETIMERTick>:
	dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
      ca:	00 97       	sbiw	r24, 0x00	; 0
      cc:	21 f0       	breq	.+8      	; 0xd6 <ETIMERTick+0xc>
      ce:	81 30       	cpi	r24, 0x01	; 1
      d0:	91 05       	cpc	r25, r1
      d2:	49 f0       	breq	.+18     	; 0xe6 <ETIMERTick+0x1c>
      d4:	05 c0       	rjmp	.+10     	; 0xe0 <ETIMERTick+0x16>
      d6:	10 92 05 01 	sts	0x0105, r1
      da:	10 92 04 01 	sts	0x0104, r1
      de:	03 c0       	rjmp	.+6      	; 0xe6 <ETIMERTick+0x1c>
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	91 05       	cpc	r25, r1
      e4:	f1 f4       	brne	.+60     	; 0x122 <ETIMERTick+0x58>
      e6:	80 91 04 01 	lds	r24, 0x0104
      ea:	90 91 05 01 	lds	r25, 0x0105
      ee:	01 96       	adiw	r24, 0x01	; 1
      f0:	90 93 05 01 	sts	0x0105, r25
      f4:	80 93 04 01 	sts	0x0104, r24
      f8:	80 91 0a 01 	lds	r24, 0x010A
      fc:	90 91 0b 01 	lds	r25, 0x010B
     100:	a0 91 0c 01 	lds	r26, 0x010C
     104:	b0 91 0d 01 	lds	r27, 0x010D
     108:	01 96       	adiw	r24, 0x01	; 1
     10a:	a1 1d       	adc	r26, r1
     10c:	b1 1d       	adc	r27, r1
     10e:	80 93 0a 01 	sts	0x010A, r24
     112:	90 93 0b 01 	sts	0x010B, r25
     116:	a0 93 0c 01 	sts	0x010C, r26
     11a:	b0 93 0d 01 	sts	0x010D, r27
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	08 95       	ret

00000124 <initTasks>:
     124:	e2 e1       	ldi	r30, 0x12	; 18
     126:	f1 e0       	ldi	r31, 0x01	; 1
     128:	11 82       	std	Z+1, r1	; 0x01
     12a:	10 82       	st	Z, r1
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	82 83       	std	Z+2, r24	; 0x02
     136:	93 83       	std	Z+3, r25	; 0x03
     138:	a4 83       	std	Z+4, r26	; 0x04
     13a:	b5 83       	std	Z+5, r27	; 0x05
     13c:	86 83       	std	Z+6, r24	; 0x06
     13e:	97 83       	std	Z+7, r25	; 0x07
     140:	a0 87       	std	Z+8, r26	; 0x08
     142:	b1 87       	std	Z+9, r27	; 0x09
     144:	85 e6       	ldi	r24, 0x65	; 101
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	93 87       	std	Z+11, r25	; 0x0b
     14a:	82 87       	std	Z+10, r24	; 0x0a
     14c:	08 95       	ret

0000014e <TimerOn>:
     14e:	8b e0       	ldi	r24, 0x0B	; 11
     150:	80 93 81 00 	sts	0x0081, r24
     154:	8d e7       	ldi	r24, 0x7D	; 125
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	90 93 89 00 	sts	0x0089, r25
     15c:	80 93 88 00 	sts	0x0088, r24
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	80 93 6f 00 	sts	0x006F, r24
     166:	10 92 85 00 	sts	0x0085, r1
     16a:	10 92 84 00 	sts	0x0084, r1
     16e:	80 91 00 01 	lds	r24, 0x0100
     172:	90 91 01 01 	lds	r25, 0x0101
     176:	a0 91 02 01 	lds	r26, 0x0102
     17a:	b0 91 03 01 	lds	r27, 0x0103
     17e:	80 93 0e 01 	sts	0x010E, r24
     182:	90 93 0f 01 	sts	0x010F, r25
     186:	a0 93 10 01 	sts	0x0110, r26
     18a:	b0 93 11 01 	sts	0x0111, r27
     18e:	8f b7       	in	r24, 0x3f	; 63
     190:	80 68       	ori	r24, 0x80	; 128
     192:	8f bf       	out	0x3f, r24	; 63
     194:	08 95       	ret

00000196 <TimerISR>:
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	e2 e1       	ldi	r30, 0x12	; 18
     19c:	f1 e0       	ldi	r31, 0x01	; 1
     19e:	86 81       	ldd	r24, Z+6	; 0x06
     1a0:	97 81       	ldd	r25, Z+7	; 0x07
     1a2:	a0 85       	ldd	r26, Z+8	; 0x08
     1a4:	b1 85       	ldd	r27, Z+9	; 0x09
     1a6:	42 81       	ldd	r20, Z+2	; 0x02
     1a8:	53 81       	ldd	r21, Z+3	; 0x03
     1aa:	64 81       	ldd	r22, Z+4	; 0x04
     1ac:	75 81       	ldd	r23, Z+5	; 0x05
     1ae:	84 17       	cp	r24, r20
     1b0:	95 07       	cpc	r25, r21
     1b2:	a6 07       	cpc	r26, r22
     1b4:	b7 07       	cpc	r27, r23
     1b6:	90 f0       	brcs	.+36     	; 0x1dc <TimerISR+0x46>
     1b8:	ef 01       	movw	r28, r30
     1ba:	02 84       	ldd	r0, Z+10	; 0x0a
     1bc:	f3 85       	ldd	r31, Z+11	; 0x0b
     1be:	e0 2d       	mov	r30, r0
     1c0:	88 81       	ld	r24, Y
     1c2:	99 81       	ldd	r25, Y+1	; 0x01
     1c4:	09 95       	icall
     1c6:	99 83       	std	Y+1, r25	; 0x01
     1c8:	88 83       	st	Y, r24
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	a0 e0       	ldi	r26, 0x00	; 0
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	8e 83       	std	Y+6, r24	; 0x06
     1d4:	9f 83       	std	Y+7, r25	; 0x07
     1d6:	a8 87       	std	Y+8, r26	; 0x08
     1d8:	b9 87       	std	Y+9, r27	; 0x09
     1da:	0b c0       	rjmp	.+22     	; 0x1f2 <TimerISR+0x5c>
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	a1 1d       	adc	r26, r1
     1e0:	b1 1d       	adc	r27, r1
     1e2:	80 93 18 01 	sts	0x0118, r24
     1e6:	90 93 19 01 	sts	0x0119, r25
     1ea:	a0 93 1a 01 	sts	0x011A, r26
     1ee:	b0 93 1b 01 	sts	0x011B, r27
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <__vector_13>:
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	0b b6       	in	r0, 0x3b	; 59
     204:	0f 92       	push	r0
     206:	2f 93       	push	r18
     208:	3f 93       	push	r19
     20a:	4f 93       	push	r20
     20c:	5f 93       	push	r21
     20e:	6f 93       	push	r22
     210:	7f 93       	push	r23
     212:	8f 93       	push	r24
     214:	9f 93       	push	r25
     216:	af 93       	push	r26
     218:	bf 93       	push	r27
     21a:	ef 93       	push	r30
     21c:	ff 93       	push	r31
     21e:	80 91 0e 01 	lds	r24, 0x010E
     222:	90 91 0f 01 	lds	r25, 0x010F
     226:	a0 91 10 01 	lds	r26, 0x0110
     22a:	b0 91 11 01 	lds	r27, 0x0111
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	a1 09       	sbc	r26, r1
     232:	b1 09       	sbc	r27, r1
     234:	80 93 0e 01 	sts	0x010E, r24
     238:	90 93 0f 01 	sts	0x010F, r25
     23c:	a0 93 10 01 	sts	0x0110, r26
     240:	b0 93 11 01 	sts	0x0111, r27
     244:	89 2b       	or	r24, r25
     246:	8a 2b       	or	r24, r26
     248:	8b 2b       	or	r24, r27
     24a:	89 f4       	brne	.+34     	; 0x26e <__vector_13+0x76>
     24c:	a4 df       	rcall	.-184    	; 0x196 <TimerISR>
     24e:	80 91 00 01 	lds	r24, 0x0100
     252:	90 91 01 01 	lds	r25, 0x0101
     256:	a0 91 02 01 	lds	r26, 0x0102
     25a:	b0 91 03 01 	lds	r27, 0x0103
     25e:	80 93 0e 01 	sts	0x010E, r24
     262:	90 93 0f 01 	sts	0x010F, r25
     266:	a0 93 10 01 	sts	0x0110, r26
     26a:	b0 93 11 01 	sts	0x0111, r27
     26e:	ff 91       	pop	r31
     270:	ef 91       	pop	r30
     272:	bf 91       	pop	r27
     274:	af 91       	pop	r26
     276:	9f 91       	pop	r25
     278:	8f 91       	pop	r24
     27a:	7f 91       	pop	r23
     27c:	6f 91       	pop	r22
     27e:	5f 91       	pop	r21
     280:	4f 91       	pop	r20
     282:	3f 91       	pop	r19
     284:	2f 91       	pop	r18
     286:	0f 90       	pop	r0
     288:	0b be       	out	0x3b, r0	; 59
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <clearSingleMatrix>:
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	60 97       	sbiw	r28, 0x10	; 16
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	29 87       	std	Y+9, r18	; 0x09
     2aa:	3a 87       	std	Y+10, r19	; 0x0a
     2ac:	4b 87       	std	Y+11, r20	; 0x0b
     2ae:	5c 87       	std	Y+12, r21	; 0x0c
     2b0:	6d 87       	std	Y+13, r22	; 0x0d
     2b2:	7e 87       	std	Y+14, r23	; 0x0e
     2b4:	8f 87       	std	Y+15, r24	; 0x0f
     2b6:	98 8b       	std	Y+16, r25	; 0x10
     2b8:	fe 01       	movw	r30, r28
     2ba:	39 96       	adiw	r30, 0x09	; 9
     2bc:	9e 01       	movw	r18, r28
     2be:	2f 5e       	subi	r18, 0xEF	; 239
     2c0:	3f 4f       	sbci	r19, 0xFF	; 255
     2c2:	8f ef       	ldi	r24, 0xFF	; 255
     2c4:	81 93       	st	Z+, r24
     2c6:	e2 17       	cp	r30, r18
     2c8:	f3 07       	cpc	r31, r19
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <clearSingleMatrix+0x30>
     2cc:	88 e0       	ldi	r24, 0x08	; 8
     2ce:	fe 01       	movw	r30, r28
     2d0:	39 96       	adiw	r30, 0x09	; 9
     2d2:	de 01       	movw	r26, r28
     2d4:	11 96       	adiw	r26, 0x01	; 1
     2d6:	01 90       	ld	r0, Z+
     2d8:	0d 92       	st	X+, r0
     2da:	8a 95       	dec	r24
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <clearSingleMatrix+0x42>
     2de:	29 81       	ldd	r18, Y+1	; 0x01
     2e0:	3a 81       	ldd	r19, Y+2	; 0x02
     2e2:	4b 81       	ldd	r20, Y+3	; 0x03
     2e4:	5c 81       	ldd	r21, Y+4	; 0x04
     2e6:	6d 81       	ldd	r22, Y+5	; 0x05
     2e8:	7e 81       	ldd	r23, Y+6	; 0x06
     2ea:	8f 81       	ldd	r24, Y+7	; 0x07
     2ec:	98 85       	ldd	r25, Y+8	; 0x08
     2ee:	60 96       	adiw	r28, 0x10	; 16
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <initSingleUserMatrix>:
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	2a 97       	sbiw	r28, 0x0a	; 10
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	bc 01       	movw	r22, r24
     31e:	e9 82       	std	Y+1, r14	; 0x01
     320:	fa 82       	std	Y+2, r15	; 0x02
     322:	0b 83       	std	Y+3, r16	; 0x03
     324:	1c 83       	std	Y+4, r17	; 0x04
     326:	2d 83       	std	Y+5, r18	; 0x05
     328:	3e 83       	std	Y+6, r19	; 0x06
     32a:	4f 83       	std	Y+7, r20	; 0x07
     32c:	58 87       	std	Y+8, r21	; 0x08
     32e:	fe 01       	movw	r30, r28
     330:	31 96       	adiw	r30, 0x01	; 1
     332:	9e 01       	movw	r18, r28
     334:	27 5f       	subi	r18, 0xF7	; 247
     336:	3f 4f       	sbci	r19, 0xFF	; 255
     338:	9f ef       	ldi	r25, 0xFF	; 255
     33a:	91 93       	st	Z+, r25
     33c:	e2 17       	cp	r30, r18
     33e:	f3 07       	cpc	r31, r19
     340:	e1 f7       	brne	.-8      	; 0x33a <initSingleUserMatrix+0x3a>
     342:	99 81       	ldd	r25, Y+1	; 0x01
     344:	97 7f       	andi	r25, 0xF7	; 247
     346:	99 83       	std	Y+1, r25	; 0x01
     348:	19 86       	std	Y+9, r1	; 0x09
     34a:	83 e0       	ldi	r24, 0x03	; 3
     34c:	8a 87       	std	Y+10, r24	; 0x0a
     34e:	8a e0       	ldi	r24, 0x0A	; 10
     350:	fe 01       	movw	r30, r28
     352:	31 96       	adiw	r30, 0x01	; 1
     354:	db 01       	movw	r26, r22
     356:	01 90       	ld	r0, Z+
     358:	0d 92       	st	X+, r0
     35a:	8a 95       	dec	r24
     35c:	e1 f7       	brne	.-8      	; 0x356 <initSingleUserMatrix+0x56>
     35e:	cb 01       	movw	r24, r22
     360:	2a 96       	adiw	r28, 0x0a	; 10
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	de bf       	out	0x3e, r29	; 62
     368:	0f be       	out	0x3f, r0	; 63
     36a:	cd bf       	out	0x3d, r28	; 61
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	ff 90       	pop	r15
     376:	ef 90       	pop	r14
     378:	08 95       	ret

0000037a <shiftSR>:
     37a:	85 b9       	out	0x05, r24	; 5
     37c:	29 9a       	sbi	0x05, 1	; 5
     37e:	15 b8       	out	0x05, r1	; 5
     380:	08 95       	ret

00000382 <shiftWhole>:
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	e1 e0       	ldi	r30, 0x01	; 1
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	71 e0       	ldi	r23, 0x01	; 1
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	af 01       	movw	r20, r30
     390:	02 2e       	mov	r0, r18
     392:	02 c0       	rjmp	.+4      	; 0x398 <shiftWhole+0x16>
     394:	44 0f       	add	r20, r20
     396:	55 1f       	adc	r21, r21
     398:	0a 94       	dec	r0
     39a:	e2 f7       	brpl	.-8      	; 0x394 <shiftWhole+0x12>
     39c:	48 23       	and	r20, r24
     39e:	97 2f       	mov	r25, r23
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <shiftWhole+0x22>
     3a2:	96 2f       	mov	r25, r22
     3a4:	95 b9       	out	0x05, r25	; 5
     3a6:	29 9a       	sbi	0x05, 1	; 5
     3a8:	65 b9       	out	0x05, r22	; 5
     3aa:	2f 5f       	subi	r18, 0xFF	; 255
     3ac:	3f 4f       	sbci	r19, 0xFF	; 255
     3ae:	28 30       	cpi	r18, 0x08	; 8
     3b0:	31 05       	cpc	r19, r1
     3b2:	69 f7       	brne	.-38     	; 0x38e <shiftWhole+0xc>
     3b4:	84 e0       	ldi	r24, 0x04	; 4
     3b6:	85 b9       	out	0x05, r24	; 5
     3b8:	08 95       	ret

000003ba <clearSR>:
     3ba:	cf 93       	push	r28
     3bc:	c8 e0       	ldi	r28, 0x08	; 8
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	dc df       	rcall	.-72     	; 0x37a <shiftSR>
     3c2:	c1 50       	subi	r28, 0x01	; 1
     3c4:	e1 f7       	brne	.-8      	; 0x3be <clearSR+0x4>
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	85 b9       	out	0x05, r24	; 5
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <d3_clearSR>:
     3ce:	f5 df       	rcall	.-22     	; 0x3ba <clearSR>
     3d0:	f4 df       	rcall	.-24     	; 0x3ba <clearSR>
     3d2:	f3 cf       	rjmp	.-26     	; 0x3ba <clearSR>
     3d4:	08 95       	ret

000003d6 <d3_setRowMatrixColor>:
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	18 2f       	mov	r17, r24
     3e0:	c9 2f       	mov	r28, r25
     3e2:	06 2f       	mov	r16, r22
     3e4:	d4 2f       	mov	r29, r20
     3e6:	f3 df       	rcall	.-26     	; 0x3ce <d3_clearSR>
     3e8:	51 e0       	ldi	r21, 0x01	; 1
     3ea:	01 c0       	rjmp	.+2      	; 0x3ee <d3_setRowMatrixColor+0x18>
     3ec:	55 0f       	add	r21, r21
     3ee:	0a 95       	dec	r16
     3f0:	ea f7       	brpl	.-6      	; 0x3ec <d3_setRowMatrixColor+0x16>
     3f2:	e1 2f       	mov	r30, r17
     3f4:	fc 2f       	mov	r31, r28
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	c0 e0       	ldi	r28, 0x00	; 0
     3fc:	a1 e0       	ldi	r26, 0x01	; 1
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	91 91       	ld	r25, Z+
     402:	95 23       	and	r25, r21
     404:	49 f0       	breq	.+18     	; 0x418 <d3_setRowMatrixColor+0x42>
     406:	cd 01       	movw	r24, r26
     408:	02 2e       	mov	r0, r18
     40a:	02 c0       	rjmp	.+4      	; 0x410 <d3_setRowMatrixColor+0x3a>
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	0a 94       	dec	r0
     412:	e2 f7       	brpl	.-8      	; 0x40c <d3_setRowMatrixColor+0x36>
     414:	c8 2b       	or	r28, r24
     416:	09 c0       	rjmp	.+18     	; 0x42a <d3_setRowMatrixColor+0x54>
     418:	bd 01       	movw	r22, r26
     41a:	02 2e       	mov	r0, r18
     41c:	02 c0       	rjmp	.+4      	; 0x422 <d3_setRowMatrixColor+0x4c>
     41e:	66 0f       	add	r22, r22
     420:	77 1f       	adc	r23, r23
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <d3_setRowMatrixColor+0x48>
     426:	60 95       	com	r22
     428:	c6 23       	and	r28, r22
     42a:	2f 5f       	subi	r18, 0xFF	; 255
     42c:	3f 4f       	sbci	r19, 0xFF	; 255
     42e:	28 30       	cpi	r18, 0x08	; 8
     430:	31 05       	cpc	r19, r1
     432:	31 f7       	brne	.-52     	; 0x400 <d3_setRowMatrixColor+0x2a>
     434:	d1 30       	cpi	r29, 0x01	; 1
     436:	71 f0       	breq	.+28     	; 0x454 <d3_setRowMatrixColor+0x7e>
     438:	18 f0       	brcs	.+6      	; 0x440 <d3_setRowMatrixColor+0x6a>
     43a:	d2 30       	cpi	r29, 0x02	; 2
     43c:	31 f0       	breq	.+12     	; 0x44a <d3_setRowMatrixColor+0x74>
     43e:	0e c0       	rjmp	.+28     	; 0x45c <d3_setRowMatrixColor+0x86>
     440:	bc df       	rcall	.-136    	; 0x3ba <clearSR>
     442:	8c 2f       	mov	r24, r28
     444:	9e df       	rcall	.-196    	; 0x382 <shiftWhole>
     446:	b9 df       	rcall	.-142    	; 0x3ba <clearSR>
     448:	09 c0       	rjmp	.+18     	; 0x45c <d3_setRowMatrixColor+0x86>
     44a:	8c 2f       	mov	r24, r28
     44c:	9a df       	rcall	.-204    	; 0x382 <shiftWhole>
     44e:	b5 df       	rcall	.-150    	; 0x3ba <clearSR>
     450:	b4 df       	rcall	.-152    	; 0x3ba <clearSR>
     452:	04 c0       	rjmp	.+8      	; 0x45c <d3_setRowMatrixColor+0x86>
     454:	b2 df       	rcall	.-156    	; 0x3ba <clearSR>
     456:	b1 df       	rcall	.-158    	; 0x3ba <clearSR>
     458:	8c 2f       	mov	r24, r28
     45a:	93 df       	rcall	.-218    	; 0x382 <shiftWhole>
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	08 95       	ret

00000466 <d3_setMatrixColor>:
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	6c 01       	movw	r12, r24
     476:	f6 2e       	mov	r15, r22
     478:	c0 e0       	ldi	r28, 0x00	; 0
     47a:	d0 e0       	ldi	r29, 0x00	; 0
     47c:	01 e0       	ldi	r16, 0x01	; 1
     47e:	10 e0       	ldi	r17, 0x00	; 0
     480:	98 01       	movw	r18, r16
     482:	0c 2e       	mov	r0, r28
     484:	02 c0       	rjmp	.+4      	; 0x48a <d3_setMatrixColor+0x24>
     486:	22 0f       	add	r18, r18
     488:	33 1f       	adc	r19, r19
     48a:	0a 94       	dec	r0
     48c:	e2 f7       	brpl	.-8      	; 0x486 <d3_setMatrixColor+0x20>
     48e:	28 b9       	out	0x08, r18	; 8
     490:	4f 2d       	mov	r20, r15
     492:	6c 2f       	mov	r22, r28
     494:	c6 01       	movw	r24, r12
     496:	9f df       	rcall	.-194    	; 0x3d6 <d3_setRowMatrixColor>
     498:	8f e8       	ldi	r24, 0x8F	; 143
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <d3_setMatrixColor+0x36>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <d3_setMatrixColor+0x3c>
     4a2:	00 00       	nop
     4a4:	94 df       	rcall	.-216    	; 0x3ce <d3_clearSR>
     4a6:	21 96       	adiw	r28, 0x01	; 1
     4a8:	c8 30       	cpi	r28, 0x08	; 8
     4aa:	d1 05       	cpc	r29, r1
     4ac:	49 f7       	brne	.-46     	; 0x480 <d3_setMatrixColor+0x1a>
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	08 95       	ret

000004be <initExplosions>:
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	9c 01       	movw	r18, r24
     4c8:	92 e1       	ldi	r25, 0x12	; 18
     4ca:	91 50       	subi	r25, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <initExplosions+0xc>
     4ce:	c7 54       	subi	r28, 0x47	; 71
     4d0:	df 4f       	sbci	r29, 0xFF	; 255
     4d2:	18 82       	st	Y, r1
     4d4:	c9 5b       	subi	r28, 0xB9	; 185
     4d6:	d0 40       	sbci	r29, 0x00	; 0
     4d8:	c6 54       	subi	r28, 0x46	; 70
     4da:	df 4f       	sbci	r29, 0xFF	; 255
     4dc:	18 82       	st	Y, r1
     4de:	ca 5b       	subi	r28, 0xBA	; 186
     4e0:	d0 40       	sbci	r29, 0x00	; 0
     4e2:	86 eb       	ldi	r24, 0xB6	; 182
     4e4:	fe 01       	movw	r30, r28
     4e6:	35 96       	adiw	r30, 0x05	; 5
     4e8:	d9 01       	movw	r26, r18
     4ea:	01 90       	ld	r0, Z+
     4ec:	0d 92       	st	X+, r0
     4ee:	8a 95       	dec	r24
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <initExplosions+0x2c>
     4f2:	c9 01       	movw	r24, r18
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <initUSART>:
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	81 f0       	breq	.+32     	; 0x51e <initUSART+0x24>
     4fe:	e1 ec       	ldi	r30, 0xC1	; 193
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	88 61       	ori	r24, 0x18	; 24
     506:	80 83       	st	Z, r24
     508:	e2 ec       	ldi	r30, 0xC2	; 194
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	86 60       	ori	r24, 0x06	; 6
     510:	80 83       	st	Z, r24
     512:	83 e3       	ldi	r24, 0x33	; 51
     514:	80 93 c4 00 	sts	0x00C4, r24
     518:	10 92 c5 00 	sts	0x00C5, r1
     51c:	08 95       	ret
     51e:	e9 ec       	ldi	r30, 0xC9	; 201
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	88 61       	ori	r24, 0x18	; 24
     526:	80 83       	st	Z, r24
     528:	ea ec       	ldi	r30, 0xCA	; 202
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	86 60       	ori	r24, 0x06	; 6
     530:	80 83       	st	Z, r24
     532:	83 e3       	ldi	r24, 0x33	; 51
     534:	80 93 cc 00 	sts	0x00CC, r24
     538:	10 92 cd 00 	sts	0x00CD, r1
     53c:	08 95       	ret

0000053e <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
     53e:	61 30       	cpi	r22, 0x01	; 1
     540:	41 f0       	breq	.+16     	; 0x552 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
     542:	e0 ec       	ldi	r30, 0xC0	; 192
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	90 81       	ld	r25, Z
     548:	95 ff       	sbrs	r25, 5
     54a:	fd cf       	rjmp	.-6      	; 0x546 <USART_Send+0x8>
		UDR0 = sendMe;
     54c:	80 93 c6 00 	sts	0x00C6, r24
     550:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
     552:	e8 ec       	ldi	r30, 0xC8	; 200
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	90 81       	ld	r25, Z
     558:	95 ff       	sbrs	r25, 5
     55a:	fd cf       	rjmp	.-6      	; 0x556 <USART_Send+0x18>
		UDR1 = sendMe;
     55c:	80 93 ce 00 	sts	0x00CE, r24
     560:	08 95       	ret

00000562 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	41 f0       	breq	.+16     	; 0x576 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
     566:	e0 ec       	ldi	r30, 0xC0	; 192
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	88 23       	and	r24, r24
     56e:	ec f7       	brge	.-6      	; 0x56a <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
     570:	80 91 c6 00 	lds	r24, 0x00C6
     574:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
     576:	e8 ec       	ldi	r30, 0xC8	; 200
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	88 23       	and	r24, r24
     57e:	ec f7       	brge	.-6      	; 0x57a <USART_Receive+0x18>
		return UDR1;
     580:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
     584:	08 95       	ret

00000586 <DeathTick>:
			contClock++;
	}
	return state;
}

unsigned char DeathTick() {	
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	2a 97       	sbiw	r28, 0x0a	; 10
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
	if ((displayBlank == 0) && GetBit(explosions.matricies[explosions.displayIndex].m[userMatrix.row], userMatrix.column) == 0) {
     5a2:	80 91 09 01 	lds	r24, 0x0109
     5a6:	81 11       	cpse	r24, r1
     5a8:	41 c0       	rjmp	.+130    	; 0x62c <DeathTick+0xa6>
     5aa:	e8 ee       	ldi	r30, 0xE8	; 232
     5ac:	f1 e0       	ldi	r31, 0x01	; 1
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	01 84       	ldd	r0, Z+9	; 0x09
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DeathTick+0x34>
     5b6:	22 0f       	add	r18, r18
     5b8:	33 1f       	adc	r19, r19
     5ba:	0a 94       	dec	r0
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DeathTick+0x30>
     5be:	90 91 e7 01 	lds	r25, 0x01E7
     5c2:	e0 85       	ldd	r30, Z+8	; 0x08
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	48 e0       	ldi	r20, 0x08	; 8
     5c8:	94 9f       	mul	r25, r20
     5ca:	e0 0d       	add	r30, r0
     5cc:	f1 1d       	adc	r31, r1
     5ce:	11 24       	eor	r1, r1
     5d0:	ee 5c       	subi	r30, 0xCE	; 206
     5d2:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
     5d4:	90 81       	ld	r25, Z
     5d6:	29 23       	and	r18, r25
     5d8:	61 f5       	brne	.+88     	; 0x632 <DeathTick+0xac>
		userMatrix = initSingleUserMatrix(userMatrix);
     5da:	e0 90 e8 01 	lds	r14, 0x01E8
     5de:	f0 90 e9 01 	lds	r15, 0x01E9
     5e2:	00 91 ea 01 	lds	r16, 0x01EA
     5e6:	10 91 eb 01 	lds	r17, 0x01EB
     5ea:	20 91 ec 01 	lds	r18, 0x01EC
     5ee:	30 91 ed 01 	lds	r19, 0x01ED
     5f2:	40 91 ee 01 	lds	r20, 0x01EE
     5f6:	50 91 ef 01 	lds	r21, 0x01EF
     5fa:	60 91 f0 01 	lds	r22, 0x01F0
     5fe:	70 91 f1 01 	lds	r23, 0x01F1
     602:	ce 01       	movw	r24, r28
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	7c de       	rcall	.-776    	; 0x300 <initSingleUserMatrix>
     608:	8a e0       	ldi	r24, 0x0A	; 10
     60a:	fe 01       	movw	r30, r28
     60c:	31 96       	adiw	r30, 0x01	; 1
     60e:	a8 ee       	ldi	r26, 0xE8	; 232
     610:	b1 e0       	ldi	r27, 0x01	; 1
     612:	01 90       	ld	r0, Z+
     614:	0d 92       	st	X+, r0
     616:	8a 95       	dec	r24
     618:	e1 f7       	brne	.-8      	; 0x612 <DeathTick+0x8c>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
     61a:	80 91 c0 00 	lds	r24, 0x00C0
		if (USART_IsSendReady(0)) {
     61e:	85 ff       	sbrs	r24, 5
     620:	07 c0       	rjmp	.+14     	; 0x630 <DeathTick+0xaa>
			USART_Send(0x00, 0);
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	8b df       	rcall	.-234    	; 0x53e <USART_Send>
		}
		return 1;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	03 c0       	rjmp	.+6      	; 0x632 <DeathTick+0xac>
	} else {
		// nothing
		return 0;
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	01 c0       	rjmp	.+2      	; 0x632 <DeathTick+0xac>
	if ((displayBlank == 0) && GetBit(explosions.matricies[explosions.displayIndex].m[userMatrix.row], userMatrix.column) == 0) {
		userMatrix = initSingleUserMatrix(userMatrix);
		if (USART_IsSendReady(0)) {
			USART_Send(0x00, 0);
		}
		return 1;
     630:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		// nothing
		return 0;
	}
}
     632:	2a 96       	adiw	r28, 0x0a	; 10
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	08 95       	ret

0000064c <ExpTick>:
		default:
			break;
	}	
}

Explosions ExpTick(Explosions explosions) {	
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	8c 01       	movw	r16, r24
	// Return if empty (Protection code)
	if (explosions.index == 0) {
     662:	c1 54       	subi	r28, 0x41	; 65
     664:	df 4f       	sbci	r29, 0xFF	; 255
     666:	88 81       	ld	r24, Y
     668:	cf 5b       	subi	r28, 0xBF	; 191
     66a:	d0 40       	sbci	r29, 0x00	; 0
     66c:	81 11       	cpse	r24, r1
     66e:	09 c0       	rjmp	.+18     	; 0x682 <ExpTick+0x36>
		return explosions;
     670:	86 eb       	ldi	r24, 0xB6	; 182
     672:	fe 01       	movw	r30, r28
     674:	3b 96       	adiw	r30, 0x0b	; 11
     676:	d8 01       	movw	r26, r16
     678:	01 90       	ld	r0, Z+
     67a:	0d 92       	st	X+, r0
     67c:	8a 95       	dec	r24
     67e:	e1 f7       	brne	.-8      	; 0x678 <ExpTick+0x2c>
     680:	a6 c0       	rjmp	.+332    	; 0x7ce <ExpTick+0x182>
	} 
	
	if (explosions.displayIndex >= explosions.index) {
     682:	c0 54       	subi	r28, 0x40	; 64
     684:	df 4f       	sbci	r29, 0xFF	; 255
     686:	98 81       	ld	r25, Y
     688:	c0 5c       	subi	r28, 0xC0	; 192
     68a:	d0 40       	sbci	r29, 0x00	; 0
     68c:	98 17       	cp	r25, r24
     68e:	28 f0       	brcs	.+10     	; 0x69a <ExpTick+0x4e>
		explosions.displayIndex = 0;
     690:	c0 54       	subi	r28, 0x40	; 64
     692:	df 4f       	sbci	r29, 0xFF	; 255
     694:	18 82       	st	Y, r1
     696:	c0 5c       	subi	r28, 0xC0	; 192
     698:	d0 40       	sbci	r29, 0x00	; 0
	}
	
	if (displayBlank == 0)
     69a:	80 91 09 01 	lds	r24, 0x0109
     69e:	81 11       	cpse	r24, r1
     6a0:	12 c0       	rjmp	.+36     	; 0x6c6 <ExpTick+0x7a>
		d3_setMatrixColor(explosions.matricies[explosions.displayIndex].m, RED);
     6a2:	c0 54       	subi	r28, 0x40	; 64
     6a4:	df 4f       	sbci	r29, 0xFF	; 255
     6a6:	88 81       	ld	r24, Y
     6a8:	c0 5c       	subi	r28, 0xC0	; 192
     6aa:	d0 40       	sbci	r29, 0x00	; 0
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	2b e0       	ldi	r18, 0x0B	; 11
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	2c 0f       	add	r18, r28
     6b4:	3d 1f       	adc	r19, r29
     6b6:	48 e0       	ldi	r20, 0x08	; 8
     6b8:	84 9f       	mul	r24, r20
     6ba:	20 0d       	add	r18, r0
     6bc:	31 1d       	adc	r19, r1
     6be:	11 24       	eor	r1, r1
     6c0:	c9 01       	movw	r24, r18
     6c2:	d1 de       	rcall	.-606    	; 0x466 <d3_setMatrixColor>
     6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <ExpTick+0x88>
	else if (displayBlank == 1)
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	09 f0       	breq	.+2      	; 0x6cc <ExpTick+0x80>
     6ca:	79 c0       	rjmp	.+242    	; 0x7be <ExpTick+0x172>
		d3_setMatrixColor(blankMatrix.m, RED);
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	81 e2       	ldi	r24, 0x21	; 33
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	c9 de       	rcall	.-622    	; 0x466 <d3_setMatrixColor>
	
	if (displayBlank == 0 && contClock >= (explosions.timeDuration[explosions.displayIndex] * 10)) {
     6d4:	80 91 09 01 	lds	r24, 0x0109
     6d8:	81 11       	cpse	r24, r1
     6da:	3c c0       	rjmp	.+120    	; 0x754 <ExpTick+0x108>
     6dc:	c0 54       	subi	r28, 0x40	; 64
     6de:	df 4f       	sbci	r29, 0xFF	; 255
     6e0:	88 81       	ld	r24, Y
     6e2:	c0 5c       	subi	r28, 0xC0	; 192
     6e4:	d0 40       	sbci	r29, 0x00	; 0
     6e6:	ed ea       	ldi	r30, 0xAD	; 173
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	ec 0f       	add	r30, r28
     6ec:	fd 1f       	adc	r31, r29
     6ee:	e8 0f       	add	r30, r24
     6f0:	f1 1d       	adc	r31, r1
     6f2:	20 81       	ld	r18, Z
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	a9 01       	movw	r20, r18
     6f8:	44 0f       	add	r20, r20
     6fa:	55 1f       	adc	r21, r21
     6fc:	22 0f       	add	r18, r18
     6fe:	33 1f       	adc	r19, r19
     700:	22 0f       	add	r18, r18
     702:	33 1f       	adc	r19, r19
     704:	22 0f       	add	r18, r18
     706:	33 1f       	adc	r19, r19
     708:	42 0f       	add	r20, r18
     70a:	53 1f       	adc	r21, r19
     70c:	05 2e       	mov	r0, r21
     70e:	00 0c       	add	r0, r0
     710:	66 0b       	sbc	r22, r22
     712:	77 0b       	sbc	r23, r23
     714:	c0 90 0a 01 	lds	r12, 0x010A
     718:	d0 90 0b 01 	lds	r13, 0x010B
     71c:	e0 90 0c 01 	lds	r14, 0x010C
     720:	f0 90 0d 01 	lds	r15, 0x010D
     724:	c4 16       	cp	r12, r20
     726:	d5 06       	cpc	r13, r21
     728:	e6 06       	cpc	r14, r22
     72a:	f7 06       	cpc	r15, r23
     72c:	08 f4       	brcc	.+2      	; 0x730 <ExpTick+0xe4>
     72e:	47 c0       	rjmp	.+142    	; 0x7be <ExpTick+0x172>
		displayBlank = 1;
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	90 93 09 01 	sts	0x0109, r25
		explosions.displayIndex++;
     736:	8f 5f       	subi	r24, 0xFF	; 255
     738:	c0 54       	subi	r28, 0x40	; 64
     73a:	df 4f       	sbci	r29, 0xFF	; 255
     73c:	88 83       	st	Y, r24
     73e:	c0 5c       	subi	r28, 0xC0	; 192
     740:	d0 40       	sbci	r29, 0x00	; 0
		contClock = 0;
     742:	10 92 0a 01 	sts	0x010A, r1
     746:	10 92 0b 01 	sts	0x010B, r1
     74a:	10 92 0c 01 	sts	0x010C, r1
     74e:	10 92 0d 01 	sts	0x010D, r1
     752:	35 c0       	rjmp	.+106    	; 0x7be <ExpTick+0x172>
	} else if (displayBlank == 1 && contClock >= (explosions.timeBetween[explosions.displayIndex] * 10)) {
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	99 f5       	brne	.+102    	; 0x7be <ExpTick+0x172>
     758:	c0 54       	subi	r28, 0x40	; 64
     75a:	df 4f       	sbci	r29, 0xFF	; 255
     75c:	88 81       	ld	r24, Y
     75e:	c0 5c       	subi	r28, 0xC0	; 192
     760:	d0 40       	sbci	r29, 0x00	; 0
     762:	eb e9       	ldi	r30, 0x9B	; 155
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	ec 0f       	add	r30, r28
     768:	fd 1f       	adc	r31, r29
     76a:	e8 0f       	add	r30, r24
     76c:	f1 1d       	adc	r31, r1
     76e:	20 81       	ld	r18, Z
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	c9 01       	movw	r24, r18
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	22 0f       	add	r18, r18
     77a:	33 1f       	adc	r19, r19
     77c:	22 0f       	add	r18, r18
     77e:	33 1f       	adc	r19, r19
     780:	22 0f       	add	r18, r18
     782:	33 1f       	adc	r19, r19
     784:	82 0f       	add	r24, r18
     786:	93 1f       	adc	r25, r19
     788:	09 2e       	mov	r0, r25
     78a:	00 0c       	add	r0, r0
     78c:	aa 0b       	sbc	r26, r26
     78e:	bb 0b       	sbc	r27, r27
     790:	40 91 0a 01 	lds	r20, 0x010A
     794:	50 91 0b 01 	lds	r21, 0x010B
     798:	60 91 0c 01 	lds	r22, 0x010C
     79c:	70 91 0d 01 	lds	r23, 0x010D
     7a0:	48 17       	cp	r20, r24
     7a2:	59 07       	cpc	r21, r25
     7a4:	6a 07       	cpc	r22, r26
     7a6:	7b 07       	cpc	r23, r27
     7a8:	50 f0       	brcs	.+20     	; 0x7be <ExpTick+0x172>
		displayBlank = 0;
     7aa:	10 92 09 01 	sts	0x0109, r1
		contClock = 0;
     7ae:	10 92 0a 01 	sts	0x010A, r1
     7b2:	10 92 0b 01 	sts	0x010B, r1
     7b6:	10 92 0c 01 	sts	0x010C, r1
     7ba:	10 92 0d 01 	sts	0x010D, r1
	}
	
	return explosions;
     7be:	86 eb       	ldi	r24, 0xB6	; 182
     7c0:	fe 01       	movw	r30, r28
     7c2:	3b 96       	adiw	r30, 0x0b	; 11
     7c4:	d8 01       	movw	r26, r16
     7c6:	01 90       	ld	r0, Z+
     7c8:	0d 92       	st	X+, r0
     7ca:	8a 95       	dec	r24
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <ExpTick+0x17a>
}
     7ce:	c8 01       	movw	r24, r16
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	df 90       	pop	r13
     7de:	cf 90       	pop	r12
     7e0:	08 95       	ret

000007e2 <Edit_Tick>:
		// nothing
		return 0;
	}
}

void Edit_Tick() {
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	c6 5b       	subi	r28, 0xB6	; 182
     7ec:	d1 09       	sbc	r29, r1
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
	switch (Edit_State) {
     7f8:	80 91 fa 01 	lds	r24, 0x01FA
     7fc:	81 30       	cpi	r24, 0x01	; 1
     7fe:	51 f0       	breq	.+20     	; 0x814 <Edit_Tick+0x32>
     800:	28 f0       	brcs	.+10     	; 0x80c <Edit_Tick+0x2a>
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	c9 f0       	breq	.+50     	; 0x838 <Edit_Tick+0x56>
     806:	83 30       	cpi	r24, 0x03	; 3
     808:	89 f1       	breq	.+98     	; 0x86c <Edit_Tick+0x8a>
     80a:	56 c0       	rjmp	.+172    	; 0x8b8 <Edit_Tick+0xd6>
		case Edit_SMStart:
			Edit_State = Edit_Wait;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	80 93 fa 01 	sts	0x01FA, r24
			break;
     812:	8f c0       	rjmp	.+286    	; 0x932 <Edit_Tick+0x150>
			
		case Edit_Wait:
			if (displayEDIT == 0) {
     814:	80 91 29 01 	lds	r24, 0x0129
     818:	88 23       	and	r24, r24
     81a:	09 f4       	brne	.+2      	; 0x81e <Edit_Tick+0x3c>
     81c:	8a c0       	rjmp	.+276    	; 0x932 <Edit_Tick+0x150>
				Edit_State = Edit_Wait;
			} else if (displayEDIT == 1) {
     81e:	81 30       	cpi	r24, 0x01	; 1
     820:	21 f4       	brne	.+8      	; 0x82a <Edit_Tick+0x48>
				Edit_State = Edit_Display;
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	80 93 fa 01 	sts	0x01FA, r24
     828:	4e c0       	rjmp	.+156    	; 0x8c6 <Edit_Tick+0xe4>
			} else if (displayEDIT == 2) {
     82a:	82 30       	cpi	r24, 0x02	; 2
     82c:	09 f0       	breq	.+2      	; 0x830 <Edit_Tick+0x4e>
     82e:	81 c0       	rjmp	.+258    	; 0x932 <Edit_Tick+0x150>
				Edit_State = Edit_Pat;
     830:	83 e0       	ldi	r24, 0x03	; 3
     832:	80 93 fa 01 	sts	0x01FA, r24
     836:	70 c0       	rjmp	.+224    	; 0x918 <Edit_Tick+0x136>
			} 
			break;
			
		case Edit_Display:
			if (displayEDIT == 0) {
     838:	80 91 29 01 	lds	r24, 0x0129
     83c:	81 11       	cpse	r24, r1
     83e:	10 c0       	rjmp	.+32     	; 0x860 <Edit_Tick+0x7e>
				Edit_State = Edit_Wait;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	80 93 fa 01 	sts	0x01FA, r24
				d3_setMatrixColor(blankMatrix.m, RED);
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	81 e2       	ldi	r24, 0x21	; 33
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0c de       	rcall	.-1000   	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, GREEN);
     84e:	62 e0       	ldi	r22, 0x02	; 2
     850:	81 e2       	ldi	r24, 0x21	; 33
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	08 de       	rcall	.-1008   	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, BLUE);
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	81 e2       	ldi	r24, 0x21	; 33
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	04 de       	rcall	.-1016   	; 0x466 <d3_setMatrixColor>
     85e:	2c c0       	rjmp	.+88     	; 0x8b8 <Edit_Tick+0xd6>
			} else if (displayEDIT == 1) {
     860:	82 30       	cpi	r24, 0x02	; 2
     862:	89 f5       	brne	.+98     	; 0x8c6 <Edit_Tick+0xe4>
				Edit_State = Edit_Display;
			} else if (displayEDIT == 2) {
				Edit_State = Edit_Pat;
     864:	83 e0       	ldi	r24, 0x03	; 3
     866:	80 93 fa 01 	sts	0x01FA, r24
     86a:	56 c0       	rjmp	.+172    	; 0x918 <Edit_Tick+0x136>
			}
			break;
			
		case Edit_Pat:
			if (displayEDIT == 0) {
     86c:	80 91 29 01 	lds	r24, 0x0129
     870:	81 11       	cpse	r24, r1
     872:	10 c0       	rjmp	.+32     	; 0x894 <Edit_Tick+0xb2>
				Edit_State = Edit_Wait;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	80 93 fa 01 	sts	0x01FA, r24
				d3_setMatrixColor(blankMatrix.m, RED);
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	81 e2       	ldi	r24, 0x21	; 33
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	f2 dd       	rcall	.-1052   	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, GREEN);
     882:	62 e0       	ldi	r22, 0x02	; 2
     884:	81 e2       	ldi	r24, 0x21	; 33
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	ee dd       	rcall	.-1060   	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, BLUE);
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	81 e2       	ldi	r24, 0x21	; 33
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	ea dd       	rcall	.-1068   	; 0x466 <d3_setMatrixColor>
     892:	12 c0       	rjmp	.+36     	; 0x8b8 <Edit_Tick+0xd6>
			} else if (displayEDIT == 1) {
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	09 f0       	breq	.+2      	; 0x89a <Edit_Tick+0xb8>
     898:	3f c0       	rjmp	.+126    	; 0x918 <Edit_Tick+0x136>
				Edit_State = Edit_Display;
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	80 93 fa 01 	sts	0x01FA, r24
				d3_setMatrixColor(blankMatrix.m, RED);
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	81 e2       	ldi	r24, 0x21	; 33
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	df dd       	rcall	.-1090   	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, GREEN);
     8a8:	62 e0       	ldi	r22, 0x02	; 2
     8aa:	81 e2       	ldi	r24, 0x21	; 33
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	db dd       	rcall	.-1098   	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, BLUE);
     8b0:	61 e0       	ldi	r22, 0x01	; 1
     8b2:	81 e2       	ldi	r24, 0x21	; 33
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	d7 dd       	rcall	.-1106   	; 0x466 <d3_setMatrixColor>
			
		default:
			break;
	}
	
	switch (Edit_State) {
     8b8:	80 91 fa 01 	lds	r24, 0x01FA
     8bc:	82 30       	cpi	r24, 0x02	; 2
     8be:	19 f0       	breq	.+6      	; 0x8c6 <Edit_Tick+0xe4>
     8c0:	83 30       	cpi	r24, 0x03	; 3
     8c2:	b9 f5       	brne	.+110    	; 0x932 <Edit_Tick+0x150>
     8c4:	29 c0       	rjmp	.+82     	; 0x918 <Edit_Tick+0x136>
		
		case Edit_Wait:
			break;
		
		case Edit_Display:
			explosions = ExpTick(explosions);
     8c6:	8d b7       	in	r24, 0x3d	; 61
     8c8:	9e b7       	in	r25, 0x3e	; 62
     8ca:	86 5b       	subi	r24, 0xB6	; 182
     8cc:	91 09       	sbc	r25, r1
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	9e bf       	out	0x3e, r25	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	8d bf       	out	0x3d, r24	; 61
     8d8:	ad b7       	in	r26, 0x3d	; 61
     8da:	be b7       	in	r27, 0x3e	; 62
     8dc:	11 96       	adiw	r26, 0x01	; 1
     8de:	86 eb       	ldi	r24, 0xB6	; 182
     8e0:	e2 e3       	ldi	r30, 0x32	; 50
     8e2:	f1 e0       	ldi	r31, 0x01	; 1
     8e4:	01 90       	ld	r0, Z+
     8e6:	0d 92       	st	X+, r0
     8e8:	8a 95       	dec	r24
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <Edit_Tick+0x102>
     8ec:	ce 01       	movw	r24, r28
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	ad de       	rcall	.-678    	; 0x64c <ExpTick>
     8f2:	86 eb       	ldi	r24, 0xB6	; 182
     8f4:	fe 01       	movw	r30, r28
     8f6:	31 96       	adiw	r30, 0x01	; 1
     8f8:	a2 e3       	ldi	r26, 0x32	; 50
     8fa:	b1 e0       	ldi	r27, 0x01	; 1
     8fc:	01 90       	ld	r0, Z+
     8fe:	0d 92       	st	X+, r0
     900:	8a 95       	dec	r24
     902:	e1 f7       	brne	.-8      	; 0x8fc <Edit_Tick+0x11a>
			d3_setMatrixColor(wallMatrix.m, BLUE);
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	82 ef       	ldi	r24, 0xF2	; 242
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	a8 dd       	rcall	.-1200   	; 0x466 <d3_setMatrixColor>
			break;
     916:	0d c0       	rjmp	.+26     	; 0x932 <Edit_Tick+0x150>
			
		case Edit_Pat:
			d3_setMatrixColor(explosions.matricies[curPattern].m, RED);
     918:	80 91 06 01 	lds	r24, 0x0106
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	8e 5c       	subi	r24, 0xCE	; 206
     92e:	9e 4f       	sbci	r25, 0xFE	; 254
     930:	9a dd       	rcall	.-1228   	; 0x466 <d3_setMatrixColor>
			break;
		
		default:
			break;
	}
}
     932:	ca 54       	subi	r28, 0x4A	; 74
     934:	df 4f       	sbci	r29, 0xFF	; 255
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	08 95       	ret

00000946 <LED_Tick>:

void LED_Tick() {
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	c0 5c       	subi	r28, 0xC0	; 192
     958:	d1 09       	sbc	r29, r1
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
	switch (LED_State) {
     964:	80 91 1e 01 	lds	r24, 0x011E
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	51 f0       	breq	.+20     	; 0x980 <LED_Tick+0x3a>
     96c:	18 f0       	brcs	.+6      	; 0x974 <LED_Tick+0x2e>
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	91 f1       	breq	.+100    	; 0x9d6 <LED_Tick+0x90>
     972:	44 c0       	rjmp	.+136    	; 0x9fc <LED_Tick+0xb6>
		case LED_SMStart:
			LED_State = LED_Wait;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 1e 01 	sts	0x011E, r24
			displayLED = 0;
     97a:	10 92 20 01 	sts	0x0120, r1
			break;
     97e:	3e c0       	rjmp	.+124    	; 0x9fc <LED_Tick+0xb6>
		
		case LED_Wait:
			if (displayLED) {
     980:	80 91 20 01 	lds	r24, 0x0120
     984:	88 23       	and	r24, r24
     986:	09 f4       	brne	.+2      	; 0x98a <LED_Tick+0x44>
     988:	6a c0       	rjmp	.+212    	; 0xa5e <LED_Tick+0x118>
				LED_State = LED_Display;
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	80 93 1e 01 	sts	0x011E, r24
				userMatrix = initSingleUserMatrix(userMatrix);
     990:	e0 90 e8 01 	lds	r14, 0x01E8
     994:	f0 90 e9 01 	lds	r15, 0x01E9
     998:	00 91 ea 01 	lds	r16, 0x01EA
     99c:	10 91 eb 01 	lds	r17, 0x01EB
     9a0:	20 91 ec 01 	lds	r18, 0x01EC
     9a4:	30 91 ed 01 	lds	r19, 0x01ED
     9a8:	40 91 ee 01 	lds	r20, 0x01EE
     9ac:	50 91 ef 01 	lds	r21, 0x01EF
     9b0:	60 91 f0 01 	lds	r22, 0x01F0
     9b4:	70 91 f1 01 	lds	r23, 0x01F1
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	a1 dc       	rcall	.-1726   	; 0x300 <initSingleUserMatrix>
     9be:	8a e0       	ldi	r24, 0x0A	; 10
     9c0:	fe 01       	movw	r30, r28
     9c2:	31 96       	adiw	r30, 0x01	; 1
     9c4:	a8 ee       	ldi	r26, 0xE8	; 232
     9c6:	b1 e0       	ldi	r27, 0x01	; 1
     9c8:	01 90       	ld	r0, Z+
     9ca:	0d 92       	st	X+, r0
     9cc:	8a 95       	dec	r24
     9ce:	e1 f7       	brne	.-8      	; 0x9c8 <LED_Tick+0x82>
				explosions.displayIndex = 0;
     9d0:	10 92 e7 01 	sts	0x01E7, r1
     9d4:	13 c0       	rjmp	.+38     	; 0x9fc <LED_Tick+0xb6>
				LED_State = LED_Wait;
			}
			break;
		
		case LED_Display:
			 if (displayLED) {
     9d6:	80 91 20 01 	lds	r24, 0x0120
     9da:	81 11       	cpse	r24, r1
     9dc:	13 c0       	rjmp	.+38     	; 0xa04 <LED_Tick+0xbe>
				LED_State = LED_Display;
			} else if (!displayLED) {
				LED_State = LED_Wait; 
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	80 93 1e 01 	sts	0x011E, r24
				d3_setMatrixColor(blankMatrix.m, RED);
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	81 e2       	ldi	r24, 0x21	; 33
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	3d dd       	rcall	.-1414   	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, GREEN);
     9ec:	62 e0       	ldi	r22, 0x02	; 2
     9ee:	81 e2       	ldi	r24, 0x21	; 33
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	39 dd       	rcall	.-1422   	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, BLUE);
     9f4:	61 e0       	ldi	r22, 0x01	; 1
     9f6:	81 e2       	ldi	r24, 0x21	; 33
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	35 dd       	rcall	.-1430   	; 0x466 <d3_setMatrixColor>
		
		default:
			break;
	}
	
	switch (LED_State) {
     9fc:	80 91 1e 01 	lds	r24, 0x011E
     a00:	82 30       	cpi	r24, 0x02	; 2
     a02:	69 f5       	brne	.+90     	; 0xa5e <LED_Tick+0x118>
		
		case LED_Wait:
			break;
		
		case LED_Display:
			explosions = ExpTick(explosions);
     a04:	8d b7       	in	r24, 0x3d	; 61
     a06:	9e b7       	in	r25, 0x3e	; 62
     a08:	86 5b       	subi	r24, 0xB6	; 182
     a0a:	91 09       	sbc	r25, r1
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	9e bf       	out	0x3e, r25	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	8d bf       	out	0x3d, r24	; 61
     a16:	ad b7       	in	r26, 0x3d	; 61
     a18:	be b7       	in	r27, 0x3e	; 62
     a1a:	11 96       	adiw	r26, 0x01	; 1
     a1c:	86 eb       	ldi	r24, 0xB6	; 182
     a1e:	e2 e3       	ldi	r30, 0x32	; 50
     a20:	f1 e0       	ldi	r31, 0x01	; 1
     a22:	01 90       	ld	r0, Z+
     a24:	0d 92       	st	X+, r0
     a26:	8a 95       	dec	r24
     a28:	e1 f7       	brne	.-8      	; 0xa22 <LED_Tick+0xdc>
     a2a:	ce 01       	movw	r24, r28
     a2c:	0b 96       	adiw	r24, 0x0b	; 11
     a2e:	0e de       	rcall	.-996    	; 0x64c <ExpTick>
     a30:	86 eb       	ldi	r24, 0xB6	; 182
     a32:	fe 01       	movw	r30, r28
     a34:	3b 96       	adiw	r30, 0x0b	; 11
     a36:	a2 e3       	ldi	r26, 0x32	; 50
     a38:	b1 e0       	ldi	r27, 0x01	; 1
     a3a:	01 90       	ld	r0, Z+
     a3c:	0d 92       	st	X+, r0
     a3e:	8a 95       	dec	r24
     a40:	e1 f7       	brne	.-8      	; 0xa3a <LED_Tick+0xf4>
			DeathTick();
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	9c dd       	rcall	.-1224   	; 0x586 <DeathTick>
			d3_setMatrixColor(userMatrix.m, GREEN);
     a4e:	62 e0       	ldi	r22, 0x02	; 2
     a50:	88 ee       	ldi	r24, 0xE8	; 232
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	08 dd       	rcall	.-1520   	; 0x466 <d3_setMatrixColor>
			d3_setMatrixColor(wallMatrix.m, BLUE);
     a56:	61 e0       	ldi	r22, 0x01	; 1
     a58:	82 ef       	ldi	r24, 0xF2	; 242
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	04 dd       	rcall	.-1528   	; 0x466 <d3_setMatrixColor>
			break;
		
		default:
			break;
	}	
}
     a5e:	c0 54       	subi	r28, 0x40	; 64
     a60:	df 4f       	sbci	r29, 0xFF	; 255
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	08 95       	ret

00000a7a <initNumLevel>:
	}
	
	return explosions;
}

void initNumLevel() {
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
	unsigned short startingIndex = 1;
     a7e:	c1 e0       	ldi	r28, 0x01	; 1
     a80:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(eeprom_read_byte((uint8_t*)startingIndex) != 0) {
     a82:	07 c0       	rjmp	.+14     	; 0xa92 <initNumLevel+0x18>
		numLevels++;
     a84:	90 91 08 01 	lds	r25, 0x0108
     a88:	9f 5f       	subi	r25, 0xFF	; 255
     a8a:	90 93 08 01 	sts	0x0108, r25
		startingIndex += 250;
     a8e:	c6 50       	subi	r28, 0x06	; 6
     a90:	df 4f       	sbci	r29, 0xFF	; 255
}

void initNumLevel() {
	unsigned short startingIndex = 1;
	
	while(eeprom_read_byte((uint8_t*)startingIndex) != 0) {
     a92:	ce 01       	movw	r24, r28
     a94:	31 d3       	rcall	.+1634   	; 0x10f8 <eeprom_read_byte>
     a96:	81 11       	cpse	r24, r1
     a98:	f5 cf       	rjmp	.-22     	; 0xa84 <initNumLevel+0xa>
		numLevels++;
		startingIndex += 250;
	}
}
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	08 95       	ret

00000aa0 <setLevel>:

void setLevel() {
     aa0:	2f 92       	push	r2
     aa2:	3f 92       	push	r3
     aa4:	4f 92       	push	r4
     aa6:	5f 92       	push	r5
     aa8:	6f 92       	push	r6
     aaa:	7f 92       	push	r7
     aac:	8f 92       	push	r8
     aae:	9f 92       	push	r9
     ab0:	af 92       	push	r10
     ab2:	bf 92       	push	r11
     ab4:	cf 92       	push	r12
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	ca 52       	subi	r28, 0x2A	; 42
     aca:	d2 40       	sbci	r29, 0x02	; 2
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
	unsigned short startingIndex = curLevel*250;
     ad6:	a0 90 07 01 	lds	r10, 0x0107
     ada:	2a ef       	ldi	r18, 0xFA	; 250
     adc:	a2 9e       	mul	r10, r18
     ade:	50 01       	movw	r10, r0
     ae0:	11 24       	eor	r1, r1
	unsigned char numPatterns = eeprom_read_byte((uint8_t*)(startingIndex + 1));
     ae2:	c5 01       	movw	r24, r10
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	08 d3       	rcall	.+1552   	; 0x10f8 <eeprom_read_byte>
     ae8:	28 2e       	mov	r2, r24
     aea:	75 01       	movw	r14, r10
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	e8 0e       	add	r14, r24
     af0:	f1 1c       	adc	r15, r1
     af2:	02 ef       	ldi	r16, 0xF2	; 242
     af4:	11 e0       	ldi	r17, 0x01	; 1
     af6:	0f 2e       	mov	r0, r31
     af8:	fa ef       	ldi	r31, 0xFA	; 250
     afa:	cf 2e       	mov	r12, r31
     afc:	f1 e0       	ldi	r31, 0x01	; 1
     afe:	df 2e       	mov	r13, r31
     b00:	f0 2d       	mov	r31, r0
	
	for (unsigned char i = 0; i < 8; i++) {
		wallMatrix.m[i] = eeprom_read_byte((uint8_t*)(startingIndex + 2 + i));
     b02:	c7 01       	movw	r24, r14
     b04:	f9 d2       	rcall	.+1522   	; 0x10f8 <eeprom_read_byte>
     b06:	f8 01       	movw	r30, r16
     b08:	81 93       	st	Z+, r24
     b0a:	8f 01       	movw	r16, r30
     b0c:	ff ef       	ldi	r31, 0xFF	; 255
     b0e:	ef 1a       	sub	r14, r31
     b10:	ff 0a       	sbc	r15, r31

void setLevel() {
	unsigned short startingIndex = curLevel*250;
	unsigned char numPatterns = eeprom_read_byte((uint8_t*)(startingIndex + 1));
	
	for (unsigned char i = 0; i < 8; i++) {
     b12:	0c 15       	cp	r16, r12
     b14:	1d 05       	cpc	r17, r13
     b16:	a9 f7       	brne	.-22     	; 0xb02 <setLevel+0x62>
		wallMatrix.m[i] = eeprom_read_byte((uint8_t*)(startingIndex + 2 + i));
	}
	
	explosions = initExplosions(explosions);
     b18:	8d b7       	in	r24, 0x3d	; 61
     b1a:	9e b7       	in	r25, 0x3e	; 62
     b1c:	86 5b       	subi	r24, 0xB6	; 182
     b1e:	91 09       	sbc	r25, r1
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	9e bf       	out	0x3e, r25	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	8d bf       	out	0x3d, r24	; 61
     b2a:	ad b7       	in	r26, 0x3d	; 61
     b2c:	be b7       	in	r27, 0x3e	; 62
     b2e:	11 96       	adiw	r26, 0x01	; 1
     b30:	86 eb       	ldi	r24, 0xB6	; 182
     b32:	e2 e3       	ldi	r30, 0x32	; 50
     b34:	f1 e0       	ldi	r31, 0x01	; 1
     b36:	01 90       	ld	r0, Z+
     b38:	0d 92       	st	X+, r0
     b3a:	8a 95       	dec	r24
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <setLevel+0x96>
     b3e:	ce 01       	movw	r24, r28
     b40:	8b 58       	subi	r24, 0x8B	; 139
     b42:	9e 4f       	sbci	r25, 0xFE	; 254
     b44:	bc dc       	rcall	.-1672   	; 0x4be <initExplosions>
     b46:	86 eb       	ldi	r24, 0xB6	; 182
     b48:	fe 01       	movw	r30, r28
     b4a:	eb 58       	subi	r30, 0x8B	; 139
     b4c:	fe 4f       	sbci	r31, 0xFE	; 254
     b4e:	a2 e3       	ldi	r26, 0x32	; 50
     b50:	b1 e0       	ldi	r27, 0x01	; 1
     b52:	01 90       	ld	r0, Z+
     b54:	0d 92       	st	X+, r0
     b56:	8a 95       	dec	r24
     b58:	e1 f7       	brne	.-8      	; 0xb52 <setLevel+0xb2>
	
	unsigned short tempCnt = startingIndex + 11;
     b5a:	9b e0       	ldi	r25, 0x0B	; 11
     b5c:	a9 0e       	add	r10, r25
     b5e:	b1 1c       	adc	r11, r1
	unsigned char timeBetween;
	unsigned char timeDuration;
	for (unsigned char i = 0; i < numPatterns; i++) {
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	21 10       	cpse	r2, r1
     b6c:	69 c0       	rjmp	.+210    	; 0xc40 <setLevel+0x1a0>
     b6e:	87 c0       	rjmp	.+270    	; 0xc7e <setLevel+0x1de>
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[j] = eeprom_read_byte((uint8_t*)(j+ tempCnt));
     b70:	c7 01       	movw	r24, r14
     b72:	80 0f       	add	r24, r16
     b74:	91 1f       	adc	r25, r17
     b76:	c0 d2       	rcall	.+1408   	; 0x10f8 <eeprom_read_byte>
     b78:	f8 01       	movw	r30, r16
     b7a:	81 93       	st	Z+, r24
     b7c:	8f 01       	movw	r16, r30
	
	unsigned short tempCnt = startingIndex + 11;
	unsigned char timeBetween;
	unsigned char timeDuration;
	for (unsigned char i = 0; i < numPatterns; i++) {
		for (unsigned char j = 0; j < 8; j++) {
     b7e:	ec 15       	cp	r30, r12
     b80:	fd 05       	cpc	r31, r13
     b82:	b1 f7       	brne	.-20     	; 0xb70 <setLevel+0xd0>
			matrix.m[j] = eeprom_read_byte((uint8_t*)(j+ tempCnt));
		}
		timeBetween = eeprom_read_byte((uint8_t*)(tempCnt + 8));
     b84:	c5 01       	movw	r24, r10
     b86:	08 96       	adiw	r24, 0x08	; 8
     b88:	b7 d2       	rcall	.+1390   	; 0x10f8 <eeprom_read_byte>
     b8a:	18 2f       	mov	r17, r24
		timeDuration = eeprom_read_byte((uint8_t*)(tempCnt + 9));
     b8c:	c5 01       	movw	r24, r10
     b8e:	09 96       	adiw	r24, 0x09	; 9
     b90:	b3 d2       	rcall	.+1382   	; 0x10f8 <eeprom_read_byte>
     b92:	e2 e3       	ldi	r30, 0x32	; 50
     b94:	f1 e0       	ldi	r31, 0x01	; 1
     b96:	de 01       	movw	r26, r28
     b98:	a9 54       	subi	r26, 0x49	; 73
     b9a:	bf 4f       	sbci	r27, 0xFF	; 255
     b9c:	95 2d       	mov	r25, r5
     b9e:	01 90       	ld	r0, Z+
     ba0:	0d 92       	st	X+, r0
     ba2:	9a 95       	dec	r25
     ba4:	e1 f7       	brne	.-8      	; 0xb9e <setLevel+0xfe>
     ba6:	f3 01       	movw	r30, r6
     ba8:	90 81       	ld	r25, Z
     baa:	f4 01       	movw	r30, r8
     bac:	de 01       	movw	r26, r28
     bae:	a3 59       	subi	r26, 0x93	; 147
     bb0:	be 4f       	sbci	r27, 0xFE	; 254
     bb2:	23 2d       	mov	r18, r3
     bb4:	01 90       	ld	r0, Z+
     bb6:	0d 92       	st	X+, r0
     bb8:	2a 95       	dec	r18
     bba:	e1 f7       	brne	.-8      	; 0xbb4 <setLevel+0x114>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     bbc:	a7 eb       	ldi	r26, 0xB7	; 183
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	ac 0f       	add	r26, r28
     bc2:	bd 1f       	adc	r27, r29
     bc4:	f8 e0       	ldi	r31, 0x08	; 8
     bc6:	9f 9f       	mul	r25, r31
     bc8:	a0 0d       	add	r26, r0
     bca:	b1 1d       	adc	r27, r1
     bcc:	11 24       	eor	r1, r1
     bce:	fe 01       	movw	r30, r28
     bd0:	e3 59       	subi	r30, 0x93	; 147
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	23 2d       	mov	r18, r3
     bd6:	01 90       	ld	r0, Z+
     bd8:	0d 92       	st	X+, r0
     bda:	2a 95       	dec	r18
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <setLevel+0x136>
	explosions.timeBetween[explosions.index] = a;
     bde:	27 eb       	ldi	r18, 0xB7	; 183
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	2c 0f       	add	r18, r28
     be4:	3d 1f       	adc	r19, r29
     be6:	29 0f       	add	r18, r25
     be8:	31 1d       	adc	r19, r1
     bea:	f9 01       	movw	r30, r18
     bec:	e0 57       	subi	r30, 0x70	; 112
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	10 83       	st	Z, r17
	explosions.timeDuration[explosions.index] = b;
     bf2:	72 96       	adiw	r30, 0x12	; 18
     bf4:	80 83       	st	Z, r24
	explosions.index++;
     bf6:	9f 5f       	subi	r25, 0xFF	; 255
	
	return explosions;
     bf8:	c5 59       	subi	r28, 0x95	; 149
     bfa:	de 4f       	sbci	r29, 0xFE	; 254
     bfc:	98 83       	st	Y, r25
     bfe:	cb 56       	subi	r28, 0x6B	; 107
     c00:	d1 40       	sbci	r29, 0x01	; 1
     c02:	fe 01       	movw	r30, r28
     c04:	e9 54       	subi	r30, 0x49	; 73
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	de 01       	movw	r26, r28
     c0a:	11 96       	adiw	r26, 0x01	; 1
     c0c:	85 2d       	mov	r24, r5
     c0e:	01 90       	ld	r0, Z+
     c10:	0d 92       	st	X+, r0
     c12:	8a 95       	dec	r24
     c14:	e1 f7       	brne	.-8      	; 0xc0e <setLevel+0x16e>
		explosions = pushExplosion(explosions, matrix, timeBetween, timeDuration);
     c16:	cb 54       	subi	r28, 0x4B	; 75
     c18:	df 4f       	sbci	r29, 0xFF	; 255
     c1a:	98 83       	st	Y, r25
     c1c:	c5 5b       	subi	r28, 0xB5	; 181
     c1e:	d0 40       	sbci	r29, 0x00	; 0
     c20:	fe 01       	movw	r30, r28
     c22:	31 96       	adiw	r30, 0x01	; 1
     c24:	a2 e3       	ldi	r26, 0x32	; 50
     c26:	b1 e0       	ldi	r27, 0x01	; 1
     c28:	85 2d       	mov	r24, r5
     c2a:	01 90       	ld	r0, Z+
     c2c:	0d 92       	st	X+, r0
     c2e:	8a 95       	dec	r24
     c30:	e1 f7       	brne	.-8      	; 0xc2a <setLevel+0x18a>
		
		tempCnt +=10;
     c32:	2a e0       	ldi	r18, 0x0A	; 10
     c34:	a2 0e       	add	r10, r18
     c36:	b1 1c       	adc	r11, r1
	explosions = initExplosions(explosions);
	
	unsigned short tempCnt = startingIndex + 11;
	unsigned char timeBetween;
	unsigned char timeDuration;
	for (unsigned char i = 0; i < numPatterns; i++) {
     c38:	43 94       	inc	r4
     c3a:	42 10       	cpse	r4, r2
     c3c:	1b c0       	rjmp	.+54     	; 0xc74 <setLevel+0x1d4>
     c3e:	1f c0       	rjmp	.+62     	; 0xc7e <setLevel+0x1de>
     c40:	41 2c       	mov	r4, r1
     c42:	0f 2e       	mov	r0, r31
     c44:	fa e2       	ldi	r31, 0x2A	; 42
     c46:	8f 2e       	mov	r8, r31
     c48:	f1 e0       	ldi	r31, 0x01	; 1
     c4a:	9f 2e       	mov	r9, r31
     c4c:	f0 2d       	mov	r31, r0
     c4e:	0f 2e       	mov	r0, r31
     c50:	f2 e3       	ldi	r31, 0x32	; 50
     c52:	cf 2e       	mov	r12, r31
     c54:	f1 e0       	ldi	r31, 0x01	; 1
     c56:	df 2e       	mov	r13, r31
     c58:	f0 2d       	mov	r31, r0
     c5a:	0f 2e       	mov	r0, r31
     c5c:	f6 eb       	ldi	r31, 0xB6	; 182
     c5e:	5f 2e       	mov	r5, r31
     c60:	f0 2d       	mov	r31, r0
     c62:	0f 2e       	mov	r0, r31
     c64:	f6 ee       	ldi	r31, 0xE6	; 230
     c66:	6f 2e       	mov	r6, r31
     c68:	f1 e0       	ldi	r31, 0x01	; 1
     c6a:	7f 2e       	mov	r7, r31
     c6c:	f0 2d       	mov	r31, r0
     c6e:	68 94       	set
     c70:	33 24       	eor	r3, r3
     c72:	33 f8       	bld	r3, 3
		numLevels++;
		startingIndex += 250;
	}
}

void setLevel() {
     c74:	84 01       	movw	r16, r8
     c76:	75 01       	movw	r14, r10
     c78:	e8 18       	sub	r14, r8
     c7a:	f9 08       	sbc	r15, r9
     c7c:	79 cf       	rjmp	.-270    	; 0xb70 <setLevel+0xd0>
		timeDuration = eeprom_read_byte((uint8_t*)(tempCnt + 9));
		explosions = pushExplosion(explosions, matrix, timeBetween, timeDuration);
		
		tempCnt +=10;
	}
     c7e:	c6 5d       	subi	r28, 0xD6	; 214
     c80:	dd 4f       	sbci	r29, 0xFD	; 253
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	df 90       	pop	r13
     c9a:	cf 90       	pop	r12
     c9c:	bf 90       	pop	r11
     c9e:	af 90       	pop	r10
     ca0:	9f 90       	pop	r9
     ca2:	8f 90       	pop	r8
     ca4:	7f 90       	pop	r7
     ca6:	6f 90       	pop	r6
     ca8:	5f 90       	pop	r5
     caa:	4f 90       	pop	r4
     cac:	3f 90       	pop	r3
     cae:	2f 90       	pop	r2
     cb0:	08 95       	ret

00000cb2 <main>:

void setLevel();
void initNumLevel();


int main(void) {
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	c6 5b       	subi	r28, 0xB6	; 182
     cbc:	d1 09       	sbc	r29, r1
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00;
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	84 b9       	out	0x04, r24	; 4
     ccc:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
     cce:	8a b9       	out	0x0a, r24	; 10
     cd0:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xFF; PORTC = 0x00;
     cd2:	87 b9       	out	0x07, r24	; 7
     cd4:	18 b8       	out	0x08, r1	; 8
	
	initUSART(0);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	10 dc       	rcall	.-2016   	; 0x4fa <initUSART>
	
	initNumLevel();
     cda:	cf de       	rcall	.-610    	; 0xa7a <initNumLevel>
	initTasks();
     cdc:	23 da       	rcall	.-3002   	; 0x124 <initTasks>
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	a0 e0       	ldi	r26, 0x00	; 0
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	80 93 00 01 	sts	0x0100, r24
     cea:	90 93 01 01 	sts	0x0101, r25
     cee:	a0 93 02 01 	sts	0x0102, r26
     cf2:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
     cf6:	80 93 0e 01 	sts	0x010E, r24
     cfa:	90 93 0f 01 	sts	0x010F, r25
     cfe:	a0 93 10 01 	sts	0x0110, r26
     d02:	b0 93 11 01 	sts	0x0111, r27
	
	TimerSet(1);
	TimerOn();
     d06:	23 da       	rcall	.-3002   	; 0x14e <TimerOn>
	
	LED_State = LED_SMStart;
     d08:	10 92 1e 01 	sts	0x011E, r1
	
	blankMatrix = clearSingleMatrix(blankMatrix);
     d0c:	20 91 21 01 	lds	r18, 0x0121
     d10:	30 91 22 01 	lds	r19, 0x0122
     d14:	40 91 23 01 	lds	r20, 0x0123
     d18:	50 91 24 01 	lds	r21, 0x0124
     d1c:	60 91 25 01 	lds	r22, 0x0125
     d20:	70 91 26 01 	lds	r23, 0x0126
     d24:	80 91 27 01 	lds	r24, 0x0127
     d28:	90 91 28 01 	lds	r25, 0x0128
     d2c:	b3 da       	rcall	.-2714   	; 0x294 <clearSingleMatrix>
     d2e:	e1 e2       	ldi	r30, 0x21	; 33
     d30:	f1 e0       	ldi	r31, 0x01	; 1
     d32:	20 83       	st	Z, r18
     d34:	31 83       	std	Z+1, r19	; 0x01
     d36:	42 83       	std	Z+2, r20	; 0x02
     d38:	53 83       	std	Z+3, r21	; 0x03
     d3a:	64 83       	std	Z+4, r22	; 0x04
     d3c:	75 83       	std	Z+5, r23	; 0x05
     d3e:	86 83       	std	Z+6, r24	; 0x06
     d40:	97 83       	std	Z+7, r25	; 0x07
	explosions = initExplosions(explosions);
     d42:	2d b7       	in	r18, 0x3d	; 61
     d44:	3e b7       	in	r19, 0x3e	; 62
     d46:	26 5b       	subi	r18, 0xB6	; 182
     d48:	31 09       	sbc	r19, r1
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	3e bf       	out	0x3e, r19	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	2d bf       	out	0x3d, r18	; 61
     d54:	ad b7       	in	r26, 0x3d	; 61
     d56:	be b7       	in	r27, 0x3e	; 62
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	86 eb       	ldi	r24, 0xB6	; 182
     d5c:	e2 e3       	ldi	r30, 0x32	; 50
     d5e:	f1 e0       	ldi	r31, 0x01	; 1
     d60:	01 90       	ld	r0, Z+
     d62:	0d 92       	st	X+, r0
     d64:	8a 95       	dec	r24
     d66:	e1 f7       	brne	.-8      	; 0xd60 <main+0xae>
     d68:	ce 01       	movw	r24, r28
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	a8 db       	rcall	.-2224   	; 0x4be <initExplosions>
     d6e:	86 eb       	ldi	r24, 0xB6	; 182
     d70:	fe 01       	movw	r30, r28
     d72:	31 96       	adiw	r30, 0x01	; 1
     d74:	a2 e3       	ldi	r26, 0x32	; 50
     d76:	b1 e0       	ldi	r27, 0x01	; 1
     d78:	01 90       	ld	r0, Z+
     d7a:	0d 92       	st	X+, r0
     d7c:	8a 95       	dec	r24
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <main+0xc6>
	wallMatrix = clearSingleMatrix(wallMatrix);
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	20 91 f2 01 	lds	r18, 0x01F2
     d8e:	30 91 f3 01 	lds	r19, 0x01F3
     d92:	40 91 f4 01 	lds	r20, 0x01F4
     d96:	50 91 f5 01 	lds	r21, 0x01F5
     d9a:	60 91 f6 01 	lds	r22, 0x01F6
     d9e:	70 91 f7 01 	lds	r23, 0x01F7
     da2:	80 91 f8 01 	lds	r24, 0x01F8
     da6:	90 91 f9 01 	lds	r25, 0x01F9
     daa:	74 da       	rcall	.-2840   	; 0x294 <clearSingleMatrix>
     dac:	e2 ef       	ldi	r30, 0xF2	; 242
     dae:	f1 e0       	ldi	r31, 0x01	; 1
     db0:	20 83       	st	Z, r18
     db2:	31 83       	std	Z+1, r19	; 0x01
     db4:	42 83       	std	Z+2, r20	; 0x02
     db6:	53 83       	std	Z+3, r21	; 0x03
     db8:	64 83       	std	Z+4, r22	; 0x04
     dba:	75 83       	std	Z+5, r23	; 0x05
     dbc:	86 83       	std	Z+6, r24	; 0x06
     dbe:	97 83       	std	Z+7, r25	; 0x07
	
	setLevel();
     dc0:	6f de       	rcall	.-802    	; 0xaa0 <setLevel>
	matrix.m[3] = 0x00;
	matrix.m[4] = 0x00;
	explosions = pushExplosion(explosions, matrix, 0, 2);
	*/
	
	userMatrix = initSingleUserMatrix(userMatrix);
     dc2:	e0 90 e8 01 	lds	r14, 0x01E8
     dc6:	f0 90 e9 01 	lds	r15, 0x01E9
     dca:	00 91 ea 01 	lds	r16, 0x01EA
     dce:	10 91 eb 01 	lds	r17, 0x01EB
     dd2:	20 91 ec 01 	lds	r18, 0x01EC
     dd6:	30 91 ed 01 	lds	r19, 0x01ED
     dda:	40 91 ee 01 	lds	r20, 0x01EE
     dde:	50 91 ef 01 	lds	r21, 0x01EF
     de2:	60 91 f0 01 	lds	r22, 0x01F0
     de6:	70 91 f1 01 	lds	r23, 0x01F1
     dea:	ce 01       	movw	r24, r28
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	88 da       	rcall	.-2800   	; 0x300 <initSingleUserMatrix>
     df0:	8a e0       	ldi	r24, 0x0A	; 10
     df2:	fe 01       	movw	r30, r28
     df4:	31 96       	adiw	r30, 0x01	; 1
     df6:	a8 ee       	ldi	r26, 0xE8	; 232
     df8:	b1 e0       	ldi	r27, 0x01	; 1
     dfa:	01 90       	ld	r0, Z+
     dfc:	0d 92       	st	X+, r0
     dfe:	8a 95       	dec	r24
     e00:	e1 f7       	brne	.-8      	; 0xdfa <main+0x148>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     e02:	00 ec       	ldi	r16, 0xC0	; 192
     e04:	10 e0       	ldi	r17, 0x00	; 0
					}
				}
			} else if (USARTReceiver == 0x0E) { // go from regular editing screen to pattern screen
				displayEDIT = 2;
			} else if (USARTReceiver == 0x0F) {
				displayEDIT = 1;
     e06:	bb 24       	eor	r11, r11
     e08:	b3 94       	inc	r11
					if (curPattern > 0) {
						curPattern--;
					}
				}
			} else if (USARTReceiver == 0x0E) { // go from regular editing screen to pattern screen
				displayEDIT = 2;
     e0a:	68 94       	set
     e0c:	88 24       	eor	r8, r8
     e0e:	81 f8       	bld	r8, 1
						if (USART_IsSendReady(0)) {
							USART_Send(curLevel, 0);
						}
						
						if (USART_IsSendReady(0)) {
							unsigned char numPatterns = eeprom_read_byte((uint8_t*)(curLevel*250 + 1)) | 0x80;
     e10:	0f 2e       	mov	r0, r31
     e12:	fa ef       	ldi	r31, 0xFA	; 250
     e14:	af 2e       	mov	r10, r31
     e16:	f0 2d       	mov	r31, r0
							unsigned char numPatterns = eeprom_read_byte((uint8_t*)(curLevel*250 + 1)) | 0x80;
							USART_Send(numPatterns, 0);
						}
					}
				} else if (displayEDIT == 2) {
					if (curPattern < explosions.index - 1) {
     e18:	0f 2e       	mov	r0, r31
     e1a:	f6 ee       	ldi	r31, 0xE6	; 230
     e1c:	6f 2e       	mov	r6, r31
     e1e:	f1 e0       	ldi	r31, 0x01	; 1
     e20:	7f 2e       	mov	r7, r31
     e22:	f0 2d       	mov	r31, r0
					userMatrix.row--;
					userMatrix.m[userMatrix.row + 1] = SetBit(userMatrix.m[userMatrix.row + 1], userMatrix.column, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
				}
			} else if (USARTReceiver == 0x03) { // game left
				if (userMatrix.column > 0 &&  GetBit(wallMatrix.m[userMatrix.row], userMatrix.column - 1)) {
     e24:	0f 2e       	mov	r0, r31
     e26:	f8 ee       	ldi	r31, 0xE8	; 232
     e28:	ef 2e       	mov	r14, r31
     e2a:	f1 e0       	ldi	r31, 0x01	; 1
     e2c:	ff 2e       	mov	r15, r31
     e2e:	f0 2d       	mov	r31, r0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
     e30:	cc 24       	eor	r12, r12
     e32:	c3 94       	inc	r12
     e34:	d1 2c       	mov	r13, r1
	*/
	
	userMatrix = initSingleUserMatrix(userMatrix);
	
	while (1) {
		LED_Tick();
     e36:	87 dd       	rcall	.-1266   	; 0x946 <LED_Tick>
		Edit_Tick();
     e38:	d4 dc       	rcall	.-1624   	; 0x7e2 <Edit_Tick>
     e3a:	d8 01       	movw	r26, r16
     e3c:	8c 91       	ld	r24, X
		
		if (USART_HasReceived(0)) {
     e3e:	88 23       	and	r24, r24
     e40:	d4 f7       	brge	.-12     	; 0xe36 <main+0x184>
			USARTReceiver = USART_Receive(0);
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	8e db       	rcall	.-2276   	; 0x562 <USART_Receive>
     e46:	80 93 1f 01 	sts	0x011F, r24
			
			if (USARTReceiver == 0x00) { // game up
     e4a:	81 11       	cpse	r24, r1
     e4c:	28 c0       	rjmp	.+80     	; 0xe9e <main+0x1ec>
				if (userMatrix.row < 7 && GetBit(wallMatrix.m[userMatrix.row + 1], userMatrix.column)) {
     e4e:	d7 01       	movw	r26, r14
     e50:	18 96       	adiw	r26, 0x08	; 8
     e52:	ec 91       	ld	r30, X
     e54:	18 97       	sbiw	r26, 0x08	; 8
     e56:	e7 30       	cpi	r30, 0x07	; 7
     e58:	70 f7       	brcc	.-36     	; 0xe36 <main+0x184>
     e5a:	c6 01       	movw	r24, r12
     e5c:	19 96       	adiw	r26, 0x09	; 9
     e5e:	0c 90       	ld	r0, X
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <main+0x1b4>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <main+0x1b0>
     e6a:	ae 2f       	mov	r26, r30
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	ae 50       	subi	r26, 0x0E	; 14
     e70:	be 4f       	sbci	r27, 0xFE	; 254
	return ((bits & mask) != 0);
     e72:	11 96       	adiw	r26, 0x01	; 1
     e74:	2c 91       	ld	r18, X
     e76:	28 23       	and	r18, r24
     e78:	f1 f2       	breq	.-68     	; 0xe36 <main+0x184>
					userMatrix.row++;
     e7a:	ef 5f       	subi	r30, 0xFF	; 255
     e7c:	d7 01       	movw	r26, r14
     e7e:	18 96       	adiw	r26, 0x08	; 8
     e80:	ec 93       	st	X, r30
					userMatrix.m[userMatrix.row - 1] = SetBit(userMatrix.m[userMatrix.row - 1], userMatrix.column, 1);
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	df 01       	movw	r26, r30
     e86:	a9 51       	subi	r26, 0x19	; 25
     e88:	be 4f       	sbci	r27, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
     e8a:	9c 91       	ld	r25, X
     e8c:	98 2b       	or	r25, r24
     e8e:	9c 93       	st	X, r25
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
     e90:	e8 51       	subi	r30, 0x18	; 24
     e92:	fe 4f       	sbci	r31, 0xFE	; 254
     e94:	80 95       	com	r24
     e96:	90 81       	ld	r25, Z
     e98:	89 23       	and	r24, r25
     e9a:	80 83       	st	Z, r24
     e9c:	cc cf       	rjmp	.-104    	; 0xe36 <main+0x184>
				}
			} else if (USARTReceiver == 0x01) { // game right
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	49 f5       	brne	.+82     	; 0xef4 <main+0x242>
				if (userMatrix.column  < 7 && GetBit(wallMatrix.m[userMatrix.row], userMatrix.column + 1)) {
     ea2:	f7 01       	movw	r30, r14
     ea4:	81 85       	ldd	r24, Z+9	; 0x09
     ea6:	87 30       	cpi	r24, 0x07	; 7
     ea8:	30 f6       	brcc	.-116    	; 0xe36 <main+0x184>
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	68 0f       	add	r22, r24
     eae:	20 85       	ldd	r18, Z+8	; 0x08
     eb0:	30 e0       	ldi	r19, 0x00	; 0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
     eb2:	a6 01       	movw	r20, r12
     eb4:	06 2e       	mov	r0, r22
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <main+0x20a>
     eb8:	44 0f       	add	r20, r20
     eba:	55 1f       	adc	r21, r21
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <main+0x206>
     ec0:	f9 01       	movw	r30, r18
     ec2:	ee 50       	subi	r30, 0x0E	; 14
     ec4:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
     ec6:	90 81       	ld	r25, Z
     ec8:	94 23       	and	r25, r20
     eca:	09 f4       	brne	.+2      	; 0xece <main+0x21c>
     ecc:	b4 cf       	rjmp	.-152    	; 0xe36 <main+0x184>
					userMatrix.column++;
     ece:	d7 01       	movw	r26, r14
     ed0:	19 96       	adiw	r26, 0x09	; 9
     ed2:	6c 93       	st	X, r22
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column - 1, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
     ed4:	f9 01       	movw	r30, r18
     ed6:	e8 51       	subi	r30, 0x18	; 24
     ed8:	fe 4f       	sbci	r31, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
     eda:	40 95       	com	r20
     edc:	96 01       	movw	r18, r12
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <main+0x232>
     ee0:	22 0f       	add	r18, r18
     ee2:	33 1f       	adc	r19, r19
     ee4:	8a 95       	dec	r24
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <main+0x22e>
     ee8:	c9 01       	movw	r24, r18
     eea:	90 81       	ld	r25, Z
     eec:	89 2b       	or	r24, r25
     eee:	48 23       	and	r20, r24
     ef0:	40 83       	st	Z, r20
     ef2:	a1 cf       	rjmp	.-190    	; 0xe36 <main+0x184>
				}
			} else if (USARTReceiver == 0x02) { // game down
     ef4:	82 30       	cpi	r24, 0x02	; 2
     ef6:	49 f5       	brne	.+82     	; 0xf4a <main+0x298>
				if (userMatrix.row > 0  && GetBit(wallMatrix.m[userMatrix.row - 1], userMatrix.column)) {
     ef8:	d7 01       	movw	r26, r14
     efa:	18 96       	adiw	r26, 0x08	; 8
     efc:	ec 91       	ld	r30, X
     efe:	18 97       	sbiw	r26, 0x08	; 8
     f00:	ee 23       	and	r30, r30
     f02:	09 f4       	brne	.+2      	; 0xf06 <main+0x254>
     f04:	98 cf       	rjmp	.-208    	; 0xe36 <main+0x184>
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
     f06:	c6 01       	movw	r24, r12
     f08:	19 96       	adiw	r26, 0x09	; 9
     f0a:	0c 90       	ld	r0, X
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <main+0x260>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <main+0x25c>
     f16:	ae 2f       	mov	r26, r30
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	af 50       	subi	r26, 0x0F	; 15
     f1c:	be 4f       	sbci	r27, 0xFE	; 254
	return ((bits & mask) != 0);
     f1e:	2c 91       	ld	r18, X
     f20:	28 23       	and	r18, r24
     f22:	09 f4       	brne	.+2      	; 0xf26 <main+0x274>
     f24:	88 cf       	rjmp	.-240    	; 0xe36 <main+0x184>
					userMatrix.row--;
     f26:	e1 50       	subi	r30, 0x01	; 1
     f28:	d7 01       	movw	r26, r14
     f2a:	18 96       	adiw	r26, 0x08	; 8
     f2c:	ec 93       	st	X, r30
					userMatrix.m[userMatrix.row + 1] = SetBit(userMatrix.m[userMatrix.row + 1], userMatrix.column, 1);
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	df 01       	movw	r26, r30
     f32:	a7 51       	subi	r26, 0x17	; 23
     f34:	be 4f       	sbci	r27, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
     f36:	9c 91       	ld	r25, X
     f38:	98 2b       	or	r25, r24
     f3a:	9c 93       	st	X, r25
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
     f3c:	e8 51       	subi	r30, 0x18	; 24
     f3e:	fe 4f       	sbci	r31, 0xFE	; 254
     f40:	80 95       	com	r24
     f42:	90 81       	ld	r25, Z
     f44:	89 23       	and	r24, r25
     f46:	80 83       	st	Z, r24
     f48:	76 cf       	rjmp	.-276    	; 0xe36 <main+0x184>
				}
			} else if (USARTReceiver == 0x03) { // game left
     f4a:	83 30       	cpi	r24, 0x03	; 3
     f4c:	51 f5       	brne	.+84     	; 0xfa2 <main+0x2f0>
				if (userMatrix.column > 0 &&  GetBit(wallMatrix.m[userMatrix.row], userMatrix.column - 1)) {
     f4e:	f7 01       	movw	r30, r14
     f50:	21 85       	ldd	r18, Z+9	; 0x09
     f52:	22 23       	and	r18, r18
     f54:	09 f4       	brne	.+2      	; 0xf58 <main+0x2a6>
     f56:	6f cf       	rjmp	.-290    	; 0xe36 <main+0x184>
     f58:	6f ef       	ldi	r22, 0xFF	; 255
     f5a:	62 0f       	add	r22, r18
     f5c:	80 85       	ldd	r24, Z+8	; 0x08
     f5e:	90 e0       	ldi	r25, 0x00	; 0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
     f60:	a6 01       	movw	r20, r12
     f62:	06 2e       	mov	r0, r22
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <main+0x2b8>
     f66:	44 0f       	add	r20, r20
     f68:	55 1f       	adc	r21, r21
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <main+0x2b4>
     f6e:	fc 01       	movw	r30, r24
     f70:	ee 50       	subi	r30, 0x0E	; 14
     f72:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
     f74:	30 81       	ld	r19, Z
     f76:	34 23       	and	r19, r20
     f78:	09 f4       	brne	.+2      	; 0xf7c <main+0x2ca>
     f7a:	5d cf       	rjmp	.-326    	; 0xe36 <main+0x184>
					userMatrix.column--;
     f7c:	d7 01       	movw	r26, r14
     f7e:	19 96       	adiw	r26, 0x09	; 9
     f80:	6c 93       	st	X, r22
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column + 1, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
     f82:	fc 01       	movw	r30, r24
     f84:	e8 51       	subi	r30, 0x18	; 24
     f86:	fe 4f       	sbci	r31, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
     f88:	40 95       	com	r20
     f8a:	c6 01       	movw	r24, r12
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <main+0x2e0>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	2a 95       	dec	r18
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <main+0x2dc>
     f96:	9c 01       	movw	r18, r24
     f98:	80 81       	ld	r24, Z
     f9a:	28 2b       	or	r18, r24
     f9c:	42 23       	and	r20, r18
     f9e:	40 83       	st	Z, r20
     fa0:	4a cf       	rjmp	.-364    	; 0xe36 <main+0x184>
				}
			} else if (USARTReceiver == 0x04) { // Game start
     fa2:	84 30       	cpi	r24, 0x04	; 4
     fa4:	19 f4       	brne	.+6      	; 0xfac <main+0x2fa>
				displayLED = 1;
     fa6:	b0 92 20 01 	sts	0x0120, r11
     faa:	45 cf       	rjmp	.-374    	; 0xe36 <main+0x184>
			} else if (USARTReceiver == 0x05) { // Game end
     fac:	85 30       	cpi	r24, 0x05	; 5
     fae:	19 f4       	brne	.+6      	; 0xfb6 <main+0x304>
				displayLED = 0;
     fb0:	10 92 20 01 	sts	0x0120, r1
     fb4:	40 cf       	rjmp	.-384    	; 0xe36 <main+0x184>
			} else if (USARTReceiver == 0x06) { // Edit start
     fb6:	86 30       	cpi	r24, 0x06	; 6
     fb8:	c9 f4       	brne	.+50     	; 0xfec <main+0x33a>
				displayEDIT = 1;
     fba:	b0 92 29 01 	sts	0x0129, r11
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
     fbe:	d8 01       	movw	r26, r16
     fc0:	8c 91       	ld	r24, X
				if (USART_IsSendReady(0)) {
     fc2:	85 ff       	sbrs	r24, 5
     fc4:	04 c0       	rjmp	.+8      	; 0xfce <main+0x31c>
					USART_Send(curLevel, 0);
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	80 91 07 01 	lds	r24, 0x0107
     fcc:	b8 da       	rcall	.-2704   	; 0x53e <USART_Send>
     fce:	f8 01       	movw	r30, r16
     fd0:	80 81       	ld	r24, Z
				}
				if (USART_IsSendReady(0)) {
     fd2:	85 ff       	sbrs	r24, 5
     fd4:	30 cf       	rjmp	.-416    	; 0xe36 <main+0x184>
					unsigned char numPatterns = eeprom_read_byte((uint8_t*)(curLevel*250 + 1)) | 0x80;
     fd6:	80 91 07 01 	lds	r24, 0x0107
     fda:	a8 9e       	mul	r10, r24
     fdc:	c0 01       	movw	r24, r0
     fde:	11 24       	eor	r1, r1
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	8a d0       	rcall	.+276    	; 0x10f8 <eeprom_read_byte>
					USART_Send(numPatterns, 0);
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	aa da       	rcall	.-2732   	; 0x53e <USART_Send>
     fea:	25 cf       	rjmp	.-438    	; 0xe36 <main+0x184>
				}
			} else if (USARTReceiver == 0x07) { // Edit end
     fec:	87 30       	cpi	r24, 0x07	; 7
     fee:	39 f4       	brne	.+14     	; 0xffe <main+0x34c>
				displayEDIT = 0;
     ff0:	10 92 29 01 	sts	0x0129, r1
				curLevel = 0;
     ff4:	10 92 07 01 	sts	0x0107, r1
				curPattern = 0;
     ff8:	10 92 06 01 	sts	0x0106, r1
     ffc:	1c cf       	rjmp	.-456    	; 0xe36 <main+0x184>
			} else if (USARTReceiver == 0x08) { // Edit right
     ffe:	88 30       	cpi	r24, 0x08	; 8
    1000:	09 f0       	breq	.+2      	; 0x1004 <main+0x352>
    1002:	3d c0       	rjmp	.+122    	; 0x107e <main+0x3cc>
				if (displayEDIT == 1) {
    1004:	80 91 29 01 	lds	r24, 0x0129
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	31 f5       	brne	.+76     	; 0x1058 <main+0x3a6>
					if (eeprom_read_byte((uint8_t*)(curLevel * 250 + 251)) != 0) {
    100c:	90 90 07 01 	lds	r9, 0x0107
    1010:	a9 9c       	mul	r10, r9
    1012:	c0 01       	movw	r24, r0
    1014:	11 24       	eor	r1, r1
    1016:	85 50       	subi	r24, 0x05	; 5
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	6e d0       	rcall	.+220    	; 0x10f8 <eeprom_read_byte>
    101c:	88 23       	and	r24, r24
    101e:	09 f4       	brne	.+2      	; 0x1022 <main+0x370>
    1020:	0a cf       	rjmp	.-492    	; 0xe36 <main+0x184>
						curLevel++;
    1022:	93 94       	inc	r9
    1024:	90 92 07 01 	sts	0x0107, r9
						setLevel();
    1028:	3b dd       	rcall	.-1418   	; 0xaa0 <setLevel>
    102a:	d8 01       	movw	r26, r16
    102c:	8c 91       	ld	r24, X
						
						if (USART_IsSendReady(0)) {
    102e:	85 ff       	sbrs	r24, 5
    1030:	04 c0       	rjmp	.+8      	; 0x103a <main+0x388>
							USART_Send(curLevel, 0);
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	80 91 07 01 	lds	r24, 0x0107
    1038:	82 da       	rcall	.-2812   	; 0x53e <USART_Send>
    103a:	f8 01       	movw	r30, r16
    103c:	80 81       	ld	r24, Z
						}
						if (USART_IsSendReady(0)) {
    103e:	85 ff       	sbrs	r24, 5
    1040:	fa ce       	rjmp	.-524    	; 0xe36 <main+0x184>
							unsigned char numPatterns = eeprom_read_byte((uint8_t*)(curLevel*250 + 1)) | 0x80;
    1042:	80 91 07 01 	lds	r24, 0x0107
    1046:	a8 9e       	mul	r10, r24
    1048:	c0 01       	movw	r24, r0
    104a:	11 24       	eor	r1, r1
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	54 d0       	rcall	.+168    	; 0x10f8 <eeprom_read_byte>
							USART_Send(numPatterns, 0);
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	80 68       	ori	r24, 0x80	; 128
    1054:	74 da       	rcall	.-2840   	; 0x53e <USART_Send>
    1056:	ef ce       	rjmp	.-546    	; 0xe36 <main+0x184>
						}
					}
				} else if (displayEDIT == 2) {
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	09 f0       	breq	.+2      	; 0x105e <main+0x3ac>
    105c:	ec ce       	rjmp	.-552    	; 0xe36 <main+0x184>
					if (curPattern < explosions.index - 1) {
    105e:	20 91 06 01 	lds	r18, 0x0106
    1062:	42 2f       	mov	r20, r18
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	d3 01       	movw	r26, r6
    1068:	8c 91       	ld	r24, X
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	48 17       	cp	r20, r24
    1070:	59 07       	cpc	r21, r25
    1072:	0c f0       	brlt	.+2      	; 0x1076 <main+0x3c4>
    1074:	e0 ce       	rjmp	.-576    	; 0xe36 <main+0x184>
						curPattern++;
    1076:	2f 5f       	subi	r18, 0xFF	; 255
    1078:	20 93 06 01 	sts	0x0106, r18
    107c:	dc ce       	rjmp	.-584    	; 0xe36 <main+0x184>
					}
				}
			} else if (USARTReceiver == 0x09) { // Edit left
    107e:	89 30       	cpi	r24, 0x09	; 9
    1080:	81 f5       	brne	.+96     	; 0x10e2 <main+0x430>
				if (displayEDIT == 1) {
    1082:	80 91 29 01 	lds	r24, 0x0129
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	01 f5       	brne	.+64     	; 0x10ca <main+0x418>
					if (curLevel > 0) {
    108a:	80 91 07 01 	lds	r24, 0x0107
    108e:	88 23       	and	r24, r24
    1090:	09 f4       	brne	.+2      	; 0x1094 <main+0x3e2>
    1092:	d1 ce       	rjmp	.-606    	; 0xe36 <main+0x184>
						curLevel--;
    1094:	81 50       	subi	r24, 0x01	; 1
    1096:	80 93 07 01 	sts	0x0107, r24
						setLevel();
    109a:	02 dd       	rcall	.-1532   	; 0xaa0 <setLevel>
    109c:	f8 01       	movw	r30, r16
    109e:	80 81       	ld	r24, Z
						
						if (USART_IsSendReady(0)) {
    10a0:	85 ff       	sbrs	r24, 5
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <main+0x3fa>
							USART_Send(curLevel, 0);
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	80 91 07 01 	lds	r24, 0x0107
    10aa:	49 da       	rcall	.-2926   	; 0x53e <USART_Send>
    10ac:	d8 01       	movw	r26, r16
    10ae:	8c 91       	ld	r24, X
						}
						
						if (USART_IsSendReady(0)) {
    10b0:	85 ff       	sbrs	r24, 5
    10b2:	c1 ce       	rjmp	.-638    	; 0xe36 <main+0x184>
							unsigned char numPatterns = eeprom_read_byte((uint8_t*)(curLevel*250 + 1)) | 0x80;
    10b4:	80 91 07 01 	lds	r24, 0x0107
    10b8:	a8 9e       	mul	r10, r24
    10ba:	c0 01       	movw	r24, r0
    10bc:	11 24       	eor	r1, r1
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	1b d0       	rcall	.+54     	; 0x10f8 <eeprom_read_byte>
							USART_Send(numPatterns, 0);
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	80 68       	ori	r24, 0x80	; 128
    10c6:	3b da       	rcall	.-2954   	; 0x53e <USART_Send>
    10c8:	b6 ce       	rjmp	.-660    	; 0xe36 <main+0x184>
						}
					}
				} 
				else if (displayEDIT == 2) {
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <main+0x41e>
    10ce:	b3 ce       	rjmp	.-666    	; 0xe36 <main+0x184>
					if (curPattern > 0) {
    10d0:	80 91 06 01 	lds	r24, 0x0106
    10d4:	88 23       	and	r24, r24
    10d6:	09 f4       	brne	.+2      	; 0x10da <main+0x428>
    10d8:	ae ce       	rjmp	.-676    	; 0xe36 <main+0x184>
						curPattern--;
    10da:	81 50       	subi	r24, 0x01	; 1
    10dc:	80 93 06 01 	sts	0x0106, r24
    10e0:	aa ce       	rjmp	.-684    	; 0xe36 <main+0x184>
					}
				}
			} else if (USARTReceiver == 0x0E) { // go from regular editing screen to pattern screen
    10e2:	8e 30       	cpi	r24, 0x0E	; 14
    10e4:	19 f4       	brne	.+6      	; 0x10ec <main+0x43a>
				displayEDIT = 2;
    10e6:	80 92 29 01 	sts	0x0129, r8
    10ea:	a5 ce       	rjmp	.-694    	; 0xe36 <main+0x184>
			} else if (USARTReceiver == 0x0F) {
    10ec:	8f 30       	cpi	r24, 0x0F	; 15
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <main+0x440>
    10f0:	a2 ce       	rjmp	.-700    	; 0xe36 <main+0x184>
				displayEDIT = 1;
    10f2:	b0 92 29 01 	sts	0x0129, r11
    10f6:	9f ce       	rjmp	.-706    	; 0xe36 <main+0x184>

000010f8 <eeprom_read_byte>:
    10f8:	f9 99       	sbic	0x1f, 1	; 31
    10fa:	fe cf       	rjmp	.-4      	; 0x10f8 <eeprom_read_byte>
    10fc:	92 bd       	out	0x22, r25	; 34
    10fe:	81 bd       	out	0x21, r24	; 33
    1100:	f8 9a       	sbi	0x1f, 0	; 31
    1102:	99 27       	eor	r25, r25
    1104:	80 b5       	in	r24, 0x20	; 32
    1106:	08 95       	ret

00001108 <_exit>:
    1108:	f8 94       	cli

0000110a <__stop_program>:
    110a:	ff cf       	rjmp	.-2      	; 0x110a <__stop_program>
