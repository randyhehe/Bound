
scbound.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000dc4  00000e58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000525  00800106  00800106  00000e5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ed9  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ca  00000000  00000000  00001ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b2c  00000000  00000000  00002273  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00002da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000499  00000000  00000000  0000316c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c66  00000000  00000000  00003605  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000426b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	1a c1       	rjmp	.+564    	; 0x26a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ec       	ldi	r30, 0xC4	; 196
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	26 e0       	ldi	r18, 0x06	; 6
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 32       	cpi	r26, 0x2B	; 43
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5e d4       	rcall	.+2236   	; 0x980 <main>
  c4:	7d c6       	rjmp	.+3322   	; 0xdc0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ETIMERTick>:
	}
	
	// Display explosion
	d3_setMatrixColor(explosions.matricies[explosions.displayIndex].m, RED);
	explosions.displayIndex++;
}
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	21 f0       	breq	.+8      	; 0xd4 <ETIMERTick+0xc>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	49 f0       	breq	.+18     	; 0xe4 <ETIMERTick+0x1c>
  d2:	05 c0       	rjmp	.+10     	; 0xde <ETIMERTick+0x16>
  d4:	10 92 07 01 	sts	0x0107, r1
  d8:	10 92 06 01 	sts	0x0106, r1
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <ETIMERTick+0x1c>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 05       	cpc	r25, r1
  e2:	c9 f5       	brne	.+114    	; 0x156 <ETIMERTick+0x8e>
  e4:	80 91 06 01 	lds	r24, 0x0106
  e8:	90 91 07 01 	lds	r25, 0x0107
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 07 01 	sts	0x0107, r25
  f2:	80 93 06 01 	sts	0x0106, r24
  f6:	40 91 0b 01 	lds	r20, 0x010B
  fa:	50 91 0c 01 	lds	r21, 0x010C
  fe:	60 91 0d 01 	lds	r22, 0x010D
 102:	70 91 0e 01 	lds	r23, 0x010E
 106:	4f 5f       	subi	r20, 0xFF	; 255
 108:	5f 4f       	sbci	r21, 0xFF	; 255
 10a:	6f 4f       	sbci	r22, 0xFF	; 255
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	40 93 0b 01 	sts	0x010B, r20
 112:	50 93 0c 01 	sts	0x010C, r21
 116:	60 93 0d 01 	sts	0x010D, r22
 11a:	70 93 0e 01 	sts	0x010E, r23
 11e:	20 91 00 01 	lds	r18, 0x0100
 122:	30 91 01 01 	lds	r19, 0x0101
 126:	28 17       	cp	r18, r24
 128:	39 07       	cpc	r19, r25
 12a:	98 f4       	brcc	.+38     	; 0x152 <ETIMERTick+0x8a>
 12c:	80 91 0a 01 	lds	r24, 0x010A
 130:	81 11       	cpse	r24, r1
 132:	04 c0       	rjmp	.+8      	; 0x13c <ETIMERTick+0x74>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 0a 01 	sts	0x010A, r24
 13a:	04 c0       	rjmp	.+8      	; 0x144 <ETIMERTick+0x7c>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	11 f4       	brne	.+4      	; 0x144 <ETIMERTick+0x7c>
 140:	10 92 0a 01 	sts	0x010A, r1
 144:	10 92 07 01 	sts	0x0107, r1
 148:	10 92 06 01 	sts	0x0106, r1
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret

00000158 <initTasks>:
 158:	e3 e1       	ldi	r30, 0x13	; 19
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	11 82       	std	Z+1, r1	; 0x01
 15e:	10 82       	st	Z, r1
 160:	84 e1       	ldi	r24, 0x14	; 20
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	a0 e0       	ldi	r26, 0x00	; 0
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	82 83       	std	Z+2, r24	; 0x02
 16a:	93 83       	std	Z+3, r25	; 0x03
 16c:	a4 83       	std	Z+4, r26	; 0x04
 16e:	b5 83       	std	Z+5, r27	; 0x05
 170:	86 83       	std	Z+6, r24	; 0x06
 172:	97 83       	std	Z+7, r25	; 0x07
 174:	a0 87       	std	Z+8, r26	; 0x08
 176:	b1 87       	std	Z+9, r27	; 0x09
 178:	88 ec       	ldi	r24, 0xC8	; 200
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	93 87       	std	Z+11, r25	; 0x0b
 17e:	82 87       	std	Z+10, r24	; 0x0a
 180:	15 86       	std	Z+13, r1	; 0x0d
 182:	14 86       	std	Z+12, r1	; 0x0c
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	a0 e0       	ldi	r26, 0x00	; 0
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	86 87       	std	Z+14, r24	; 0x0e
 18e:	97 87       	std	Z+15, r25	; 0x0f
 190:	a0 8b       	std	Z+16, r26	; 0x10
 192:	b1 8b       	std	Z+17, r27	; 0x11
 194:	82 8b       	std	Z+18, r24	; 0x12
 196:	93 8b       	std	Z+19, r25	; 0x13
 198:	a4 8b       	std	Z+20, r26	; 0x14
 19a:	b5 8b       	std	Z+21, r27	; 0x15
 19c:	84 e6       	ldi	r24, 0x64	; 100
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	97 8b       	std	Z+23, r25	; 0x17
 1a2:	86 8b       	std	Z+22, r24	; 0x16
 1a4:	08 95       	ret

000001a6 <TimerOn>:
 1a6:	8b e0       	ldi	r24, 0x0B	; 11
 1a8:	80 93 81 00 	sts	0x0081, r24
 1ac:	8d e7       	ldi	r24, 0x7D	; 125
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 89 00 	sts	0x0089, r25
 1b4:	80 93 88 00 	sts	0x0088, r24
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	80 93 6f 00 	sts	0x006F, r24
 1be:	10 92 85 00 	sts	0x0085, r1
 1c2:	10 92 84 00 	sts	0x0084, r1
 1c6:	80 91 02 01 	lds	r24, 0x0102
 1ca:	90 91 03 01 	lds	r25, 0x0103
 1ce:	a0 91 04 01 	lds	r26, 0x0104
 1d2:	b0 91 05 01 	lds	r27, 0x0105
 1d6:	80 93 0f 01 	sts	0x010F, r24
 1da:	90 93 10 01 	sts	0x0110, r25
 1de:	a0 93 11 01 	sts	0x0111, r26
 1e2:	b0 93 12 01 	sts	0x0112, r27
 1e6:	8f b7       	in	r24, 0x3f	; 63
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	8f bf       	out	0x3f, r24	; 63
 1ec:	08 95       	ret

000001ee <TimerISR>:
 1ee:	ef 92       	push	r14
 1f0:	ff 92       	push	r15
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	c3 e1       	ldi	r28, 0x13	; 19
 1fc:	d1 e0       	ldi	r29, 0x01	; 1
 1fe:	0f 2e       	mov	r0, r31
 200:	fb e2       	ldi	r31, 0x2B	; 43
 202:	ef 2e       	mov	r14, r31
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	ff 2e       	mov	r15, r31
 208:	f0 2d       	mov	r31, r0
 20a:	8e 01       	movw	r16, r28
 20c:	4e 81       	ldd	r20, Y+6	; 0x06
 20e:	5f 81       	ldd	r21, Y+7	; 0x07
 210:	68 85       	ldd	r22, Y+8	; 0x08
 212:	79 85       	ldd	r23, Y+9	; 0x09
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	9b 81       	ldd	r25, Y+3	; 0x03
 218:	ac 81       	ldd	r26, Y+4	; 0x04
 21a:	bd 81       	ldd	r27, Y+5	; 0x05
 21c:	48 17       	cp	r20, r24
 21e:	59 07       	cpc	r21, r25
 220:	6a 07       	cpc	r22, r26
 222:	7b 07       	cpc	r23, r27
 224:	58 f0       	brcs	.+22     	; 0x23c <TimerISR+0x4e>
 226:	ea 85       	ldd	r30, Y+10	; 0x0a
 228:	fb 85       	ldd	r31, Y+11	; 0x0b
 22a:	88 81       	ld	r24, Y
 22c:	99 81       	ldd	r25, Y+1	; 0x01
 22e:	09 95       	icall
 230:	99 83       	std	Y+1, r25	; 0x01
 232:	88 83       	st	Y, r24
 234:	1e 82       	std	Y+6, r1	; 0x06
 236:	1f 82       	std	Y+7, r1	; 0x07
 238:	18 86       	std	Y+8, r1	; 0x08
 23a:	19 86       	std	Y+9, r1	; 0x09
 23c:	f8 01       	movw	r30, r16
 23e:	86 81       	ldd	r24, Z+6	; 0x06
 240:	97 81       	ldd	r25, Z+7	; 0x07
 242:	a0 85       	ldd	r26, Z+8	; 0x08
 244:	b1 85       	ldd	r27, Z+9	; 0x09
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	a1 1d       	adc	r26, r1
 24a:	b1 1d       	adc	r27, r1
 24c:	86 83       	std	Z+6, r24	; 0x06
 24e:	97 83       	std	Z+7, r25	; 0x07
 250:	a0 87       	std	Z+8, r26	; 0x08
 252:	b1 87       	std	Z+9, r27	; 0x09
 254:	2c 96       	adiw	r28, 0x0c	; 12
 256:	ce 15       	cp	r28, r14
 258:	df 05       	cpc	r29, r15
 25a:	b9 f6       	brne	.-82     	; 0x20a <TimerISR+0x1c>
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	08 95       	ret

0000026a <__vector_13>:
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	0b b6       	in	r0, 0x3b	; 59
 276:	0f 92       	push	r0
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
 290:	80 91 0f 01 	lds	r24, 0x010F
 294:	90 91 10 01 	lds	r25, 0x0110
 298:	a0 91 11 01 	lds	r26, 0x0111
 29c:	b0 91 12 01 	lds	r27, 0x0112
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	a1 09       	sbc	r26, r1
 2a4:	b1 09       	sbc	r27, r1
 2a6:	80 93 0f 01 	sts	0x010F, r24
 2aa:	90 93 10 01 	sts	0x0110, r25
 2ae:	a0 93 11 01 	sts	0x0111, r26
 2b2:	b0 93 12 01 	sts	0x0112, r27
 2b6:	89 2b       	or	r24, r25
 2b8:	8a 2b       	or	r24, r26
 2ba:	8b 2b       	or	r24, r27
 2bc:	89 f4       	brne	.+34     	; 0x2e0 <__vector_13+0x76>
 2be:	97 df       	rcall	.-210    	; 0x1ee <TimerISR>
 2c0:	80 91 02 01 	lds	r24, 0x0102
 2c4:	90 91 03 01 	lds	r25, 0x0103
 2c8:	a0 91 04 01 	lds	r26, 0x0104
 2cc:	b0 91 05 01 	lds	r27, 0x0105
 2d0:	80 93 0f 01 	sts	0x010F, r24
 2d4:	90 93 10 01 	sts	0x0110, r25
 2d8:	a0 93 11 01 	sts	0x0111, r26
 2dc:	b0 93 12 01 	sts	0x0112, r27
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	7f 91       	pop	r23
 2ee:	6f 91       	pop	r22
 2f0:	5f 91       	pop	r21
 2f2:	4f 91       	pop	r20
 2f4:	3f 91       	pop	r19
 2f6:	2f 91       	pop	r18
 2f8:	0f 90       	pop	r0
 2fa:	0b be       	out	0x3b, r0	; 59
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <clearSingleMatrix>:
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	8c 01       	movw	r16, r24
 314:	ae 01       	movw	r20, r28
 316:	49 5f       	subi	r20, 0xF9	; 249
 318:	5f 4f       	sbci	r21, 0xFF	; 255
 31a:	be 01       	movw	r22, r28
 31c:	69 5b       	subi	r22, 0xB9	; 185
 31e:	7f 4f       	sbci	r23, 0xFF	; 255
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	09 c0       	rjmp	.+18     	; 0x338 <clearSingleMatrix+0x32>
 326:	21 93       	st	Z+, r18
 328:	9f 5f       	subi	r25, 0xFF	; 255
 32a:	98 30       	cpi	r25, 0x08	; 8
 32c:	e1 f7       	brne	.-8      	; 0x326 <clearSingleMatrix+0x20>
 32e:	48 5f       	subi	r20, 0xF8	; 248
 330:	5f 4f       	sbci	r21, 0xFF	; 255
 332:	46 17       	cp	r20, r22
 334:	57 07       	cpc	r21, r23
 336:	19 f0       	breq	.+6      	; 0x33e <clearSingleMatrix+0x38>
 338:	fa 01       	movw	r30, r20
 33a:	93 2f       	mov	r25, r19
 33c:	f4 cf       	rjmp	.-24     	; 0x326 <clearSingleMatrix+0x20>
 33e:	80 e4       	ldi	r24, 0x40	; 64
 340:	fe 01       	movw	r30, r28
 342:	37 96       	adiw	r30, 0x07	; 7
 344:	d8 01       	movw	r26, r16
 346:	01 90       	ld	r0, Z+
 348:	0d 92       	st	X+, r0
 34a:	8a 95       	dec	r24
 34c:	e1 f7       	brne	.-8      	; 0x346 <clearSingleMatrix+0x40>
 34e:	c8 01       	movw	r24, r16
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	08 95       	ret

0000035a <initSingleUserMatrix>:
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
 366:	8c 01       	movw	r16, r24
 368:	ae 01       	movw	r20, r28
 36a:	49 5f       	subi	r20, 0xF9	; 249
 36c:	5f 4f       	sbci	r21, 0xFF	; 255
 36e:	be 01       	movw	r22, r28
 370:	69 5b       	subi	r22, 0xB9	; 185
 372:	7f 4f       	sbci	r23, 0xFF	; 255
 374:	38 e0       	ldi	r19, 0x08	; 8
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	08 c0       	rjmp	.+16     	; 0x38a <initSingleUserMatrix+0x30>
 37a:	21 93       	st	Z+, r18
 37c:	91 50       	subi	r25, 0x01	; 1
 37e:	e9 f7       	brne	.-6      	; 0x37a <initSingleUserMatrix+0x20>
 380:	48 5f       	subi	r20, 0xF8	; 248
 382:	5f 4f       	sbci	r21, 0xFF	; 255
 384:	46 17       	cp	r20, r22
 386:	57 07       	cpc	r21, r23
 388:	19 f0       	breq	.+6      	; 0x390 <initSingleUserMatrix+0x36>
 38a:	fa 01       	movw	r30, r20
 38c:	93 2f       	mov	r25, r19
 38e:	f5 cf       	rjmp	.-22     	; 0x37a <initSingleUserMatrix+0x20>
 390:	1a 86       	std	Y+10, r1	; 0x0a
 392:	28 96       	adiw	r28, 0x08	; 8
 394:	1f ae       	std	Y+63, r1	; 0x3f
 396:	28 97       	sbiw	r28, 0x08	; 8
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	29 96       	adiw	r28, 0x09	; 9
 39c:	8f af       	std	Y+63, r24	; 0x3f
 39e:	29 97       	sbiw	r28, 0x09	; 9
 3a0:	82 e4       	ldi	r24, 0x42	; 66
 3a2:	fe 01       	movw	r30, r28
 3a4:	37 96       	adiw	r30, 0x07	; 7
 3a6:	d8 01       	movw	r26, r16
 3a8:	01 90       	ld	r0, Z+
 3aa:	0d 92       	st	X+, r0
 3ac:	8a 95       	dec	r24
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <initSingleUserMatrix+0x4e>
 3b0:	c8 01       	movw	r24, r16
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	08 95       	ret

000003bc <shiftSR>:
 3bc:	85 b9       	out	0x05, r24	; 5
 3be:	29 9a       	sbi	0x05, 1	; 5
 3c0:	15 b8       	out	0x05, r1	; 5
 3c2:	08 95       	ret

000003c4 <clearSR>:
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	c8 e0       	ldi	r28, 0x08	; 8
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	f6 df       	rcall	.-20     	; 0x3bc <shiftSR>
 3d0:	21 97       	sbiw	r28, 0x01	; 1
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <clearSR+0x8>
 3d4:	84 e0       	ldi	r24, 0x04	; 4
 3d6:	85 b9       	out	0x05, r24	; 5
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <d3_clearSR>:
 3de:	f2 df       	rcall	.-28     	; 0x3c4 <clearSR>
 3e0:	f1 df       	rcall	.-30     	; 0x3c4 <clearSR>
 3e2:	f0 cf       	rjmp	.-32     	; 0x3c4 <clearSR>
 3e4:	08 95       	ret

000003e6 <d3_setRow>:
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	ec 01       	movw	r28, r24
 3f0:	8c 01       	movw	r16, r24
 3f2:	08 5f       	subi	r16, 0xF8	; 248
 3f4:	1f 4f       	sbci	r17, 0xFF	; 255
 3f6:	89 91       	ld	r24, Y+
 3f8:	e1 df       	rcall	.-62     	; 0x3bc <shiftSR>
 3fa:	c0 17       	cp	r28, r16
 3fc:	d1 07       	cpc	r29, r17
 3fe:	d9 f7       	brne	.-10     	; 0x3f6 <d3_setRow+0x10>
 400:	84 e0       	ldi	r24, 0x04	; 4
 402:	85 b9       	out	0x05, r24	; 5
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	08 95       	ret

0000040e <d3_setRowMatrixColor>:
 40e:	ef 92       	push	r14
 410:	ff 92       	push	r15
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	28 97       	sbiw	r28, 0x08	; 8
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	f8 94       	cli
 424:	de bf       	out	0x3e, r29	; 62
 426:	0f be       	out	0x3f, r0	; 63
 428:	cd bf       	out	0x3d, r28	; 61
 42a:	8c 01       	movw	r16, r24
 42c:	e6 2e       	mov	r14, r22
 42e:	f4 2e       	mov	r15, r20
 430:	d6 df       	rcall	.-84     	; 0x3de <d3_clearSR>
 432:	f8 01       	movw	r30, r16
 434:	ee 0d       	add	r30, r14
 436:	f1 1d       	adc	r31, r1
 438:	de 01       	movw	r26, r28
 43a:	11 96       	adiw	r26, 0x01	; 1
 43c:	9e 01       	movw	r18, r28
 43e:	27 5f       	subi	r18, 0xF7	; 247
 440:	3f 4f       	sbci	r19, 0xFF	; 255
 442:	80 81       	ld	r24, Z
 444:	8d 93       	st	X+, r24
 446:	38 96       	adiw	r30, 0x08	; 8
 448:	a2 17       	cp	r26, r18
 44a:	b3 07       	cpc	r27, r19
 44c:	d1 f7       	brne	.-12     	; 0x442 <d3_setRowMatrixColor+0x34>
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	f8 16       	cp	r15, r24
 452:	91 f0       	breq	.+36     	; 0x478 <d3_setRowMatrixColor+0x6a>
 454:	f8 16       	cp	r15, r24
 456:	20 f0       	brcs	.+8      	; 0x460 <d3_setRowMatrixColor+0x52>
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	f8 16       	cp	r15, r24
 45c:	39 f0       	breq	.+14     	; 0x46c <d3_setRowMatrixColor+0x5e>
 45e:	11 c0       	rjmp	.+34     	; 0x482 <d3_setRowMatrixColor+0x74>
 460:	b1 df       	rcall	.-158    	; 0x3c4 <clearSR>
 462:	ce 01       	movw	r24, r28
 464:	01 96       	adiw	r24, 0x01	; 1
 466:	bf df       	rcall	.-130    	; 0x3e6 <d3_setRow>
 468:	ad df       	rcall	.-166    	; 0x3c4 <clearSR>
 46a:	0b c0       	rjmp	.+22     	; 0x482 <d3_setRowMatrixColor+0x74>
 46c:	ce 01       	movw	r24, r28
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	ba df       	rcall	.-140    	; 0x3e6 <d3_setRow>
 472:	a8 df       	rcall	.-176    	; 0x3c4 <clearSR>
 474:	a7 df       	rcall	.-178    	; 0x3c4 <clearSR>
 476:	05 c0       	rjmp	.+10     	; 0x482 <d3_setRowMatrixColor+0x74>
 478:	a5 df       	rcall	.-182    	; 0x3c4 <clearSR>
 47a:	a4 df       	rcall	.-184    	; 0x3c4 <clearSR>
 47c:	ce 01       	movw	r24, r28
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	b2 df       	rcall	.-156    	; 0x3e6 <d3_setRow>
 482:	28 96       	adiw	r28, 0x08	; 8
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	de bf       	out	0x3e, r29	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	cd bf       	out	0x3d, r28	; 61
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	08 95       	ret

0000049c <d3_setMatrixColor>:
 49c:	cf 92       	push	r12
 49e:	df 92       	push	r13
 4a0:	ff 92       	push	r15
 4a2:	0f 93       	push	r16
 4a4:	1f 93       	push	r17
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	6c 01       	movw	r12, r24
 4ac:	f6 2e       	mov	r15, r22
 4ae:	c0 e0       	ldi	r28, 0x00	; 0
 4b0:	d0 e0       	ldi	r29, 0x00	; 0
 4b2:	01 e0       	ldi	r16, 0x01	; 1
 4b4:	10 e0       	ldi	r17, 0x00	; 0
 4b6:	98 01       	movw	r18, r16
 4b8:	0c 2e       	mov	r0, r28
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <d3_setMatrixColor+0x24>
 4bc:	22 0f       	add	r18, r18
 4be:	33 1f       	adc	r19, r19
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <d3_setMatrixColor+0x20>
 4c4:	2b b9       	out	0x0b, r18	; 11
 4c6:	4f 2d       	mov	r20, r15
 4c8:	6c 2f       	mov	r22, r28
 4ca:	c6 01       	movw	r24, r12
 4cc:	a0 df       	rcall	.-192    	; 0x40e <d3_setRowMatrixColor>
 4ce:	8f ea       	ldi	r24, 0xAF	; 175
 4d0:	94 e0       	ldi	r25, 0x04	; 4
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <d3_setMatrixColor+0x36>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <d3_setMatrixColor+0x3c>
 4d8:	00 00       	nop
 4da:	81 df       	rcall	.-254    	; 0x3de <d3_clearSR>
 4dc:	21 96       	adiw	r28, 0x01	; 1
 4de:	c8 30       	cpi	r28, 0x08	; 8
 4e0:	d1 05       	cpc	r29, r1
 4e2:	49 f7       	brne	.-46     	; 0x4b6 <d3_setMatrixColor+0x1a>
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	ff 90       	pop	r15
 4ee:	df 90       	pop	r13
 4f0:	cf 90       	pop	r12
 4f2:	08 95       	ret

000004f4 <GetKeypadKey>:
 4f4:	8f ee       	ldi	r24, 0xEF	; 239
 4f6:	88 b9       	out	0x08, r24	; 8
 4f8:	00 00       	nop
 4fa:	30 9b       	sbis	0x06, 0	; 6
 4fc:	29 c0       	rjmp	.+82     	; 0x550 <GetKeypadKey+0x5c>
 4fe:	31 9b       	sbis	0x06, 1	; 6
 500:	29 c0       	rjmp	.+82     	; 0x554 <GetKeypadKey+0x60>
 502:	32 9b       	sbis	0x06, 2	; 6
 504:	29 c0       	rjmp	.+82     	; 0x558 <GetKeypadKey+0x64>
 506:	33 9b       	sbis	0x06, 3	; 6
 508:	29 c0       	rjmp	.+82     	; 0x55c <GetKeypadKey+0x68>
 50a:	8f ed       	ldi	r24, 0xDF	; 223
 50c:	88 b9       	out	0x08, r24	; 8
 50e:	00 00       	nop
 510:	30 9b       	sbis	0x06, 0	; 6
 512:	26 c0       	rjmp	.+76     	; 0x560 <GetKeypadKey+0x6c>
 514:	31 9b       	sbis	0x06, 1	; 6
 516:	26 c0       	rjmp	.+76     	; 0x564 <GetKeypadKey+0x70>
 518:	32 9b       	sbis	0x06, 2	; 6
 51a:	26 c0       	rjmp	.+76     	; 0x568 <GetKeypadKey+0x74>
 51c:	33 9b       	sbis	0x06, 3	; 6
 51e:	26 c0       	rjmp	.+76     	; 0x56c <GetKeypadKey+0x78>
 520:	8f eb       	ldi	r24, 0xBF	; 191
 522:	88 b9       	out	0x08, r24	; 8
 524:	00 00       	nop
 526:	30 9b       	sbis	0x06, 0	; 6
 528:	23 c0       	rjmp	.+70     	; 0x570 <GetKeypadKey+0x7c>
 52a:	31 9b       	sbis	0x06, 1	; 6
 52c:	23 c0       	rjmp	.+70     	; 0x574 <GetKeypadKey+0x80>
 52e:	32 9b       	sbis	0x06, 2	; 6
 530:	23 c0       	rjmp	.+70     	; 0x578 <GetKeypadKey+0x84>
 532:	33 9b       	sbis	0x06, 3	; 6
 534:	23 c0       	rjmp	.+70     	; 0x57c <GetKeypadKey+0x88>
 536:	8f e7       	ldi	r24, 0x7F	; 127
 538:	88 b9       	out	0x08, r24	; 8
 53a:	00 00       	nop
 53c:	30 9b       	sbis	0x06, 0	; 6
 53e:	20 c0       	rjmp	.+64     	; 0x580 <GetKeypadKey+0x8c>
 540:	31 9b       	sbis	0x06, 1	; 6
 542:	20 c0       	rjmp	.+64     	; 0x584 <GetKeypadKey+0x90>
 544:	32 9b       	sbis	0x06, 2	; 6
 546:	20 c0       	rjmp	.+64     	; 0x588 <GetKeypadKey+0x94>
 548:	33 9b       	sbis	0x06, 3	; 6
 54a:	20 c0       	rjmp	.+64     	; 0x58c <GetKeypadKey+0x98>
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	08 95       	ret
 550:	81 e3       	ldi	r24, 0x31	; 49
 552:	08 95       	ret
 554:	84 e3       	ldi	r24, 0x34	; 52
 556:	08 95       	ret
 558:	87 e3       	ldi	r24, 0x37	; 55
 55a:	08 95       	ret
 55c:	8a e2       	ldi	r24, 0x2A	; 42
 55e:	08 95       	ret
 560:	82 e3       	ldi	r24, 0x32	; 50
 562:	08 95       	ret
 564:	85 e3       	ldi	r24, 0x35	; 53
 566:	08 95       	ret
 568:	88 e3       	ldi	r24, 0x38	; 56
 56a:	08 95       	ret
 56c:	80 e3       	ldi	r24, 0x30	; 48
 56e:	08 95       	ret
 570:	83 e3       	ldi	r24, 0x33	; 51
 572:	08 95       	ret
 574:	86 e3       	ldi	r24, 0x36	; 54
 576:	08 95       	ret
 578:	89 e3       	ldi	r24, 0x39	; 57
 57a:	08 95       	ret
 57c:	83 e2       	ldi	r24, 0x23	; 35
 57e:	08 95       	ret
 580:	81 e4       	ldi	r24, 0x41	; 65
 582:	08 95       	ret
 584:	82 e4       	ldi	r24, 0x42	; 66
 586:	08 95       	ret
 588:	83 e4       	ldi	r24, 0x43	; 67
 58a:	08 95       	ret
 58c:	84 e4       	ldi	r24, 0x44	; 68
 58e:	08 95       	ret

00000590 <KPTick>:
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	ec 01       	movw	r28, r24
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	91 05       	cpc	r25, r1
 59a:	51 f0       	breq	.+20     	; 0x5b0 <KPTick+0x20>
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	91 05       	cpc	r25, r1
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <KPTick+0x14>
 5a2:	aa c0       	rjmp	.+340    	; 0x6f8 <KPTick+0x168>
 5a4:	89 2b       	or	r24, r25
 5a6:	09 f0       	breq	.+2      	; 0x5aa <KPTick+0x1a>
 5a8:	bd c0       	rjmp	.+378    	; 0x724 <KPTick+0x194>
 5aa:	c1 e0       	ldi	r28, 0x01	; 1
 5ac:	d0 e0       	ldi	r29, 0x00	; 0
 5ae:	ba c0       	rjmp	.+372    	; 0x724 <KPTick+0x194>
 5b0:	a1 df       	rcall	.-190    	; 0x4f4 <GetKeypadKey>
 5b2:	80 93 08 01 	sts	0x0108, r24
 5b6:	88 23       	and	r24, r24
 5b8:	09 f4       	brne	.+2      	; 0x5bc <KPTick+0x2c>
 5ba:	b4 c0       	rjmp	.+360    	; 0x724 <KPTick+0x194>
 5bc:	84 33       	cpi	r24, 0x34	; 52
 5be:	49 f5       	brne	.+82     	; 0x612 <KPTick+0x82>
 5c0:	80 91 e9 05 	lds	r24, 0x05E9
 5c4:	87 30       	cpi	r24, 0x07	; 7
 5c6:	08 f0       	brcs	.+2      	; 0x5ca <KPTick+0x3a>
 5c8:	9c c0       	rjmp	.+312    	; 0x702 <KPTick+0x172>
 5ca:	8f 5f       	subi	r24, 0xFF	; 255
 5cc:	80 93 e9 05 	sts	0x05E9, r24
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	20 91 ea 05 	lds	r18, 0x05EA
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	fc 01       	movw	r30, r24
 5da:	31 97       	sbiw	r30, 0x01	; 1
 5dc:	ee 0f       	add	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	ee 0f       	add	r30, r30
 5e2:	ff 1f       	adc	r31, r31
 5e4:	ee 0f       	add	r30, r30
 5e6:	ff 1f       	adc	r31, r31
 5e8:	e2 0f       	add	r30, r18
 5ea:	f3 1f       	adc	r31, r19
 5ec:	e7 55       	subi	r30, 0x57	; 87
 5ee:	fa 4f       	sbci	r31, 0xFA	; 250
 5f0:	41 e0       	ldi	r20, 0x01	; 1
 5f2:	40 83       	st	Z, r20
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	82 0f       	add	r24, r18
 602:	93 1f       	adc	r25, r19
 604:	fc 01       	movw	r30, r24
 606:	e7 55       	subi	r30, 0x57	; 87
 608:	fa 4f       	sbci	r31, 0xFA	; 250
 60a:	10 82       	st	Z, r1
 60c:	c2 e0       	ldi	r28, 0x02	; 2
 60e:	d0 e0       	ldi	r29, 0x00	; 0
 610:	89 c0       	rjmp	.+274    	; 0x724 <KPTick+0x194>
 612:	82 33       	cpi	r24, 0x32	; 50
 614:	11 f5       	brne	.+68     	; 0x65a <KPTick+0xca>
 616:	80 91 ea 05 	lds	r24, 0x05EA
 61a:	87 30       	cpi	r24, 0x07	; 7
 61c:	08 f0       	brcs	.+2      	; 0x620 <KPTick+0x90>
 61e:	74 c0       	rjmp	.+232    	; 0x708 <KPTick+0x178>
 620:	8f 5f       	subi	r24, 0xFF	; 255
 622:	80 93 ea 05 	sts	0x05EA, r24
 626:	e0 91 e9 05 	lds	r30, 0x05E9
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	ee 0f       	add	r30, r30
 630:	ff 1f       	adc	r31, r31
 632:	ee 0f       	add	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	ee 0f       	add	r30, r30
 638:	ff 1f       	adc	r31, r31
 63a:	dc 01       	movw	r26, r24
 63c:	ae 0f       	add	r26, r30
 63e:	bf 1f       	adc	r27, r31
 640:	a8 55       	subi	r26, 0x58	; 88
 642:	ba 4f       	sbci	r27, 0xFA	; 250
 644:	21 e0       	ldi	r18, 0x01	; 1
 646:	2c 93       	st	X, r18
 648:	8e 0f       	add	r24, r30
 64a:	9f 1f       	adc	r25, r31
 64c:	fc 01       	movw	r30, r24
 64e:	e7 55       	subi	r30, 0x57	; 87
 650:	fa 4f       	sbci	r31, 0xFA	; 250
 652:	10 82       	st	Z, r1
 654:	c2 e0       	ldi	r28, 0x02	; 2
 656:	d0 e0       	ldi	r29, 0x00	; 0
 658:	65 c0       	rjmp	.+202    	; 0x724 <KPTick+0x194>
 65a:	85 33       	cpi	r24, 0x35	; 53
 65c:	49 f5       	brne	.+82     	; 0x6b0 <KPTick+0x120>
 65e:	80 91 e9 05 	lds	r24, 0x05E9
 662:	88 23       	and	r24, r24
 664:	09 f4       	brne	.+2      	; 0x668 <KPTick+0xd8>
 666:	53 c0       	rjmp	.+166    	; 0x70e <KPTick+0x17e>
 668:	81 50       	subi	r24, 0x01	; 1
 66a:	80 93 e9 05 	sts	0x05E9, r24
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	20 91 ea 05 	lds	r18, 0x05EA
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	fc 01       	movw	r30, r24
 678:	31 96       	adiw	r30, 0x01	; 1
 67a:	ee 0f       	add	r30, r30
 67c:	ff 1f       	adc	r31, r31
 67e:	ee 0f       	add	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	ee 0f       	add	r30, r30
 684:	ff 1f       	adc	r31, r31
 686:	e2 0f       	add	r30, r18
 688:	f3 1f       	adc	r31, r19
 68a:	e7 55       	subi	r30, 0x57	; 87
 68c:	fa 4f       	sbci	r31, 0xFA	; 250
 68e:	41 e0       	ldi	r20, 0x01	; 1
 690:	40 83       	st	Z, r20
 692:	88 0f       	add	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	82 0f       	add	r24, r18
 6a0:	93 1f       	adc	r25, r19
 6a2:	fc 01       	movw	r30, r24
 6a4:	e7 55       	subi	r30, 0x57	; 87
 6a6:	fa 4f       	sbci	r31, 0xFA	; 250
 6a8:	10 82       	st	Z, r1
 6aa:	c2 e0       	ldi	r28, 0x02	; 2
 6ac:	d0 e0       	ldi	r29, 0x00	; 0
 6ae:	3a c0       	rjmp	.+116    	; 0x724 <KPTick+0x194>
 6b0:	88 33       	cpi	r24, 0x38	; 56
 6b2:	81 f5       	brne	.+96     	; 0x714 <KPTick+0x184>
 6b4:	80 91 ea 05 	lds	r24, 0x05EA
 6b8:	88 23       	and	r24, r24
 6ba:	79 f1       	breq	.+94     	; 0x71a <KPTick+0x18a>
 6bc:	81 50       	subi	r24, 0x01	; 1
 6be:	80 93 ea 05 	sts	0x05EA, r24
 6c2:	e0 91 e9 05 	lds	r30, 0x05E9
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	ee 0f       	add	r30, r30
 6cc:	ff 1f       	adc	r31, r31
 6ce:	ee 0f       	add	r30, r30
 6d0:	ff 1f       	adc	r31, r31
 6d2:	ee 0f       	add	r30, r30
 6d4:	ff 1f       	adc	r31, r31
 6d6:	df 01       	movw	r26, r30
 6d8:	a7 55       	subi	r26, 0x57	; 87
 6da:	ba 4f       	sbci	r27, 0xFA	; 250
 6dc:	a8 0f       	add	r26, r24
 6de:	b9 1f       	adc	r27, r25
 6e0:	21 e0       	ldi	r18, 0x01	; 1
 6e2:	11 96       	adiw	r26, 0x01	; 1
 6e4:	2c 93       	st	X, r18
 6e6:	8e 0f       	add	r24, r30
 6e8:	9f 1f       	adc	r25, r31
 6ea:	fc 01       	movw	r30, r24
 6ec:	e7 55       	subi	r30, 0x57	; 87
 6ee:	fa 4f       	sbci	r31, 0xFA	; 250
 6f0:	10 82       	st	Z, r1
 6f2:	c2 e0       	ldi	r28, 0x02	; 2
 6f4:	d0 e0       	ldi	r29, 0x00	; 0
 6f6:	16 c0       	rjmp	.+44     	; 0x724 <KPTick+0x194>
 6f8:	fd de       	rcall	.-518    	; 0x4f4 <GetKeypadKey>
 6fa:	88 23       	and	r24, r24
 6fc:	89 f0       	breq	.+34     	; 0x720 <KPTick+0x190>
 6fe:	fa de       	rcall	.-524    	; 0x4f4 <GetKeypadKey>
 700:	11 c0       	rjmp	.+34     	; 0x724 <KPTick+0x194>
 702:	c2 e0       	ldi	r28, 0x02	; 2
 704:	d0 e0       	ldi	r29, 0x00	; 0
 706:	0e c0       	rjmp	.+28     	; 0x724 <KPTick+0x194>
 708:	c2 e0       	ldi	r28, 0x02	; 2
 70a:	d0 e0       	ldi	r29, 0x00	; 0
 70c:	0b c0       	rjmp	.+22     	; 0x724 <KPTick+0x194>
 70e:	c2 e0       	ldi	r28, 0x02	; 2
 710:	d0 e0       	ldi	r29, 0x00	; 0
 712:	08 c0       	rjmp	.+16     	; 0x724 <KPTick+0x194>
 714:	c2 e0       	ldi	r28, 0x02	; 2
 716:	d0 e0       	ldi	r29, 0x00	; 0
 718:	05 c0       	rjmp	.+10     	; 0x724 <KPTick+0x194>
 71a:	c2 e0       	ldi	r28, 0x02	; 2
 71c:	d0 e0       	ldi	r29, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <KPTick+0x194>
 720:	c1 e0       	ldi	r28, 0x01	; 1
 722:	d0 e0       	ldi	r29, 0x00	; 0
 724:	ce 01       	movw	r24, r28
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	08 95       	ret

0000072c <initExplosions>:
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	cf 5f       	subi	r28, 0xFF	; 255
 736:	db 4f       	sbci	r29, 0xFB	; 251
 738:	18 82       	st	Y, r1
 73a:	c1 50       	subi	r28, 0x01	; 1
 73c:	d4 40       	sbci	r29, 0x04	; 4
 73e:	ce 5f       	subi	r28, 0xFE	; 254
 740:	db 4f       	sbci	r29, 0xFB	; 251
 742:	18 82       	st	Y, r1
 744:	c2 50       	subi	r28, 0x02	; 2
 746:	d4 40       	sbci	r29, 0x04	; 4
 748:	2e ef       	ldi	r18, 0xFE	; 254
 74a:	33 e0       	ldi	r19, 0x03	; 3
 74c:	fe 01       	movw	r30, r28
 74e:	35 96       	adiw	r30, 0x05	; 5
 750:	dc 01       	movw	r26, r24
 752:	01 90       	ld	r0, Z+
 754:	0d 92       	st	X+, r0
 756:	21 50       	subi	r18, 0x01	; 1
 758:	30 40       	sbci	r19, 0x00	; 0
 75a:	d9 f7       	brne	.-10     	; 0x752 <initExplosions+0x26>
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	08 95       	ret

00000762 <DeathTick>:
			}
		}
	return state;
}

unsigned char DeathTick() {	
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	cd b7       	in	r28, 0x3d	; 61
 768:	de b7       	in	r29, 0x3e	; 62
 76a:	c2 54       	subi	r28, 0x42	; 66
 76c:	d1 09       	sbc	r29, r1
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	f8 94       	cli
 772:	de bf       	out	0x3e, r29	; 62
 774:	0f be       	out	0x3f, r0	; 63
 776:	cd bf       	out	0x3d, r28	; 61
	if ((displayBlank == 0) && (explosions.matricies[explosions.displayIndex].m[userMatrix.row][userMatrix.column] == 0)) {
 778:	80 91 09 01 	lds	r24, 0x0109
 77c:	81 11       	cpse	r24, r1
 77e:	3f c0       	rjmp	.+126    	; 0x7fe <DeathTick+0x9c>
 780:	90 91 a8 05 	lds	r25, 0x05A8
 784:	e0 91 e9 05 	lds	r30, 0x05E9
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	28 e0       	ldi	r18, 0x08	; 8
 78c:	92 9f       	mul	r25, r18
 78e:	e0 0d       	add	r30, r0
 790:	f1 1d       	adc	r31, r1
 792:	11 24       	eor	r1, r1
 794:	90 91 ea 05 	lds	r25, 0x05EA
 798:	ee 0f       	add	r30, r30
 79a:	ff 1f       	adc	r31, r31
 79c:	ee 0f       	add	r30, r30
 79e:	ff 1f       	adc	r31, r31
 7a0:	ee 0f       	add	r30, r30
 7a2:	ff 1f       	adc	r31, r31
 7a4:	e9 0f       	add	r30, r25
 7a6:	f1 1d       	adc	r31, r1
 7a8:	e5 55       	subi	r30, 0x55	; 85
 7aa:	fe 4f       	sbci	r31, 0xFE	; 254
 7ac:	90 81       	ld	r25, Z
 7ae:	91 11       	cpse	r25, r1
 7b0:	27 c0       	rjmp	.+78     	; 0x800 <DeathTick+0x9e>
		// Lose Game
		userMatrix = initSingleUserMatrix(userMatrix); // place user back to original position
 7b2:	8d b7       	in	r24, 0x3d	; 61
 7b4:	9e b7       	in	r25, 0x3e	; 62
 7b6:	82 54       	subi	r24, 0x42	; 66
 7b8:	91 09       	sbc	r25, r1
 7ba:	0f b6       	in	r0, 0x3f	; 63
 7bc:	f8 94       	cli
 7be:	9e bf       	out	0x3e, r25	; 62
 7c0:	0f be       	out	0x3f, r0	; 63
 7c2:	8d bf       	out	0x3d, r24	; 61
 7c4:	ad b7       	in	r26, 0x3d	; 61
 7c6:	be b7       	in	r27, 0x3e	; 62
 7c8:	11 96       	adiw	r26, 0x01	; 1
 7ca:	82 e4       	ldi	r24, 0x42	; 66
 7cc:	e9 ea       	ldi	r30, 0xA9	; 169
 7ce:	f5 e0       	ldi	r31, 0x05	; 5
 7d0:	01 90       	ld	r0, Z+
 7d2:	0d 92       	st	X+, r0
 7d4:	8a 95       	dec	r24
 7d6:	e1 f7       	brne	.-8      	; 0x7d0 <DeathTick+0x6e>
 7d8:	ce 01       	movw	r24, r28
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	be dd       	rcall	.-1156   	; 0x35a <initSingleUserMatrix>
 7de:	82 e4       	ldi	r24, 0x42	; 66
 7e0:	fe 01       	movw	r30, r28
 7e2:	31 96       	adiw	r30, 0x01	; 1
 7e4:	a9 ea       	ldi	r26, 0xA9	; 169
 7e6:	b5 e0       	ldi	r27, 0x05	; 5
 7e8:	01 90       	ld	r0, Z+
 7ea:	0d 92       	st	X+, r0
 7ec:	8a 95       	dec	r24
 7ee:	e1 f7       	brne	.-8      	; 0x7e8 <DeathTick+0x86>
		return 1;
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	f8 94       	cli
 7f4:	de bf       	out	0x3e, r29	; 62
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	cd bf       	out	0x3d, r28	; 61
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	01 c0       	rjmp	.+2      	; 0x800 <DeathTick+0x9e>
	} else {
		// Nothing
		return 0;
 7fe:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 800:	ce 5b       	subi	r28, 0xBE	; 190
 802:	df 4f       	sbci	r29, 0xFF	; 255
 804:	0f b6       	in	r0, 0x3f	; 63
 806:	f8 94       	cli
 808:	de bf       	out	0x3e, r29	; 62
 80a:	0f be       	out	0x3f, r0	; 63
 80c:	cd bf       	out	0x3d, r28	; 61
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	08 95       	ret

00000814 <ExpTick>:

Explosions ExpTick(Explosions explosions) {	
 814:	0f 93       	push	r16
 816:	1f 93       	push	r17
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
 81c:	cd b7       	in	r28, 0x3d	; 61
 81e:	de b7       	in	r29, 0x3e	; 62
 820:	8c 01       	movw	r16, r24
	// Return if empty (Protection code)
	if (explosions.index == 0) {
 822:	cd 5f       	subi	r28, 0xFD	; 253
 824:	db 4f       	sbci	r29, 0xFB	; 251
 826:	88 81       	ld	r24, Y
 828:	c3 50       	subi	r28, 0x03	; 3
 82a:	d4 40       	sbci	r29, 0x04	; 4
 82c:	81 11       	cpse	r24, r1
 82e:	0a c0       	rjmp	.+20     	; 0x844 <ExpTick+0x30>
		return explosions;
 830:	8e ef       	ldi	r24, 0xFE	; 254
 832:	93 e0       	ldi	r25, 0x03	; 3
 834:	fe 01       	movw	r30, r28
 836:	37 96       	adiw	r30, 0x07	; 7
 838:	d8 01       	movw	r26, r16
 83a:	01 90       	ld	r0, Z+
 83c:	0d 92       	st	X+, r0
 83e:	01 97       	sbiw	r24, 0x01	; 1
 840:	e1 f7       	brne	.-8      	; 0x83a <ExpTick+0x26>
 842:	98 c0       	rjmp	.+304    	; 0x974 <ExpTick+0x160>
	} 
	
	if (explosions.displayIndex >= explosions.index) {
 844:	cc 5f       	subi	r28, 0xFC	; 252
 846:	db 4f       	sbci	r29, 0xFB	; 251
 848:	98 81       	ld	r25, Y
 84a:	c4 50       	subi	r28, 0x04	; 4
 84c:	d4 40       	sbci	r29, 0x04	; 4
 84e:	98 17       	cp	r25, r24
 850:	28 f0       	brcs	.+10     	; 0x85c <ExpTick+0x48>
		explosions.displayIndex = 0;
 852:	cc 5f       	subi	r28, 0xFC	; 252
 854:	db 4f       	sbci	r29, 0xFB	; 251
 856:	18 82       	st	Y, r1
 858:	c4 50       	subi	r28, 0x04	; 4
 85a:	d4 40       	sbci	r29, 0x04	; 4
	}
	
	if (displayBlank == 0)
 85c:	80 91 09 01 	lds	r24, 0x0109
 860:	81 11       	cpse	r24, r1
 862:	12 c0       	rjmp	.+36     	; 0x888 <ExpTick+0x74>
		d3_setMatrixColor(explosions.matricies[explosions.displayIndex].m, RED);
 864:	cc 5f       	subi	r28, 0xFC	; 252
 866:	db 4f       	sbci	r29, 0xFB	; 251
 868:	88 81       	ld	r24, Y
 86a:	c4 50       	subi	r28, 0x04	; 4
 86c:	d4 40       	sbci	r29, 0x04	; 4
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	27 e0       	ldi	r18, 0x07	; 7
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	2c 0f       	add	r18, r28
 876:	3d 1f       	adc	r19, r29
 878:	40 e4       	ldi	r20, 0x40	; 64
 87a:	84 9f       	mul	r24, r20
 87c:	20 0d       	add	r18, r0
 87e:	31 1d       	adc	r19, r1
 880:	11 24       	eor	r1, r1
 882:	c9 01       	movw	r24, r18
 884:	0b de       	rcall	.-1002   	; 0x49c <d3_setMatrixColor>
 886:	07 c0       	rjmp	.+14     	; 0x896 <ExpTick+0x82>
	else if (displayBlank == 1)
 888:	81 30       	cpi	r24, 0x01	; 1
 88a:	09 f0       	breq	.+2      	; 0x88e <ExpTick+0x7a>
 88c:	6a c0       	rjmp	.+212    	; 0x962 <ExpTick+0x14e>
		d3_setMatrixColor(blankMatrix.m, RED);
 88e:	60 e0       	ldi	r22, 0x00	; 0
 890:	8b e2       	ldi	r24, 0x2B	; 43
 892:	91 e0       	ldi	r25, 0x01	; 1
 894:	03 de       	rcall	.-1018   	; 0x49c <d3_setMatrixColor>
	
	if (displayBlank == 0 && contClock >= explosions.timeDuration[explosions.displayIndex]) {
 896:	80 91 09 01 	lds	r24, 0x0109
 89a:	81 11       	cpse	r24, r1
 89c:	35 c0       	rjmp	.+106    	; 0x908 <ExpTick+0xf4>
 89e:	cc 5f       	subi	r28, 0xFC	; 252
 8a0:	db 4f       	sbci	r29, 0xFB	; 251
 8a2:	28 81       	ld	r18, Y
 8a4:	c4 50       	subi	r28, 0x04	; 4
 8a6:	d4 40       	sbci	r29, 0x04	; 4
 8a8:	e2 2f       	mov	r30, r18
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	e1 51       	subi	r30, 0x11	; 17
 8ae:	fe 4f       	sbci	r31, 0xFE	; 254
 8b0:	ee 0f       	add	r30, r30
 8b2:	ff 1f       	adc	r31, r31
 8b4:	87 e0       	ldi	r24, 0x07	; 7
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	8c 0f       	add	r24, r28
 8ba:	9d 1f       	adc	r25, r29
 8bc:	e8 0f       	add	r30, r24
 8be:	f9 1f       	adc	r31, r25
 8c0:	80 81       	ld	r24, Z
 8c2:	91 81       	ldd	r25, Z+1	; 0x01
 8c4:	a0 e0       	ldi	r26, 0x00	; 0
 8c6:	b0 e0       	ldi	r27, 0x00	; 0
 8c8:	40 91 0b 01 	lds	r20, 0x010B
 8cc:	50 91 0c 01 	lds	r21, 0x010C
 8d0:	60 91 0d 01 	lds	r22, 0x010D
 8d4:	70 91 0e 01 	lds	r23, 0x010E
 8d8:	48 17       	cp	r20, r24
 8da:	59 07       	cpc	r21, r25
 8dc:	6a 07       	cpc	r22, r26
 8de:	7b 07       	cpc	r23, r27
 8e0:	08 f4       	brcc	.+2      	; 0x8e4 <ExpTick+0xd0>
 8e2:	3f c0       	rjmp	.+126    	; 0x962 <ExpTick+0x14e>
		displayBlank = 1;
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	80 93 09 01 	sts	0x0109, r24
		explosions.displayIndex++;
 8ea:	2f 5f       	subi	r18, 0xFF	; 255
 8ec:	cc 5f       	subi	r28, 0xFC	; 252
 8ee:	db 4f       	sbci	r29, 0xFB	; 251
 8f0:	28 83       	st	Y, r18
 8f2:	c4 50       	subi	r28, 0x04	; 4
 8f4:	d4 40       	sbci	r29, 0x04	; 4
		contClock = 0;
 8f6:	10 92 0b 01 	sts	0x010B, r1
 8fa:	10 92 0c 01 	sts	0x010C, r1
 8fe:	10 92 0d 01 	sts	0x010D, r1
 902:	10 92 0e 01 	sts	0x010E, r1
 906:	2d c0       	rjmp	.+90     	; 0x962 <ExpTick+0x14e>
	} else if (displayBlank == 1 && contClock >= explosions.timeBetween[explosions.displayIndex]) {
 908:	81 30       	cpi	r24, 0x01	; 1
 90a:	59 f5       	brne	.+86     	; 0x962 <ExpTick+0x14e>
 90c:	cc 5f       	subi	r28, 0xFC	; 252
 90e:	db 4f       	sbci	r29, 0xFB	; 251
 910:	e8 81       	ld	r30, Y
 912:	c4 50       	subi	r28, 0x04	; 4
 914:	d4 40       	sbci	r29, 0x04	; 4
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	e0 52       	subi	r30, 0x20	; 32
 91a:	fe 4f       	sbci	r31, 0xFE	; 254
 91c:	ee 0f       	add	r30, r30
 91e:	ff 1f       	adc	r31, r31
 920:	27 e0       	ldi	r18, 0x07	; 7
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	2c 0f       	add	r18, r28
 926:	3d 1f       	adc	r19, r29
 928:	e2 0f       	add	r30, r18
 92a:	f3 1f       	adc	r31, r19
 92c:	80 81       	ld	r24, Z
 92e:	91 81       	ldd	r25, Z+1	; 0x01
 930:	a0 e0       	ldi	r26, 0x00	; 0
 932:	b0 e0       	ldi	r27, 0x00	; 0
 934:	40 91 0b 01 	lds	r20, 0x010B
 938:	50 91 0c 01 	lds	r21, 0x010C
 93c:	60 91 0d 01 	lds	r22, 0x010D
 940:	70 91 0e 01 	lds	r23, 0x010E
 944:	48 17       	cp	r20, r24
 946:	59 07       	cpc	r21, r25
 948:	6a 07       	cpc	r22, r26
 94a:	7b 07       	cpc	r23, r27
 94c:	50 f0       	brcs	.+20     	; 0x962 <ExpTick+0x14e>
		displayBlank = 0;
 94e:	10 92 09 01 	sts	0x0109, r1
		contClock = 0;
 952:	10 92 0b 01 	sts	0x010B, r1
 956:	10 92 0c 01 	sts	0x010C, r1
 95a:	10 92 0d 01 	sts	0x010D, r1
 95e:	10 92 0e 01 	sts	0x010E, r1
	}
	
	return explosions;
 962:	8e ef       	ldi	r24, 0xFE	; 254
 964:	93 e0       	ldi	r25, 0x03	; 3
 966:	fe 01       	movw	r30, r28
 968:	37 96       	adiw	r30, 0x07	; 7
 96a:	d8 01       	movw	r26, r16
 96c:	01 90       	ld	r0, Z+
 96e:	0d 92       	st	X+, r0
 970:	01 97       	sbiw	r24, 0x01	; 1
 972:	e1 f7       	brne	.-8      	; 0x96c <ExpTick+0x158>
 974:	c8 01       	movw	r24, r16
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	1f 91       	pop	r17
 97c:	0f 91       	pop	r16
 97e:	08 95       	ret

00000980 <main>:
SingleMatrix matrix;
SingleMatrix matrix2;
SingleMatrix blankMatrix;


int main(void) {
 980:	cf 93       	push	r28
 982:	df 93       	push	r29
 984:	cd b7       	in	r28, 0x3d	; 61
 986:	de b7       	in	r29, 0x3e	; 62
 988:	c6 5b       	subi	r28, 0xB6	; 182
 98a:	d4 41       	sbci	r29, 0x14	; 20
 98c:	0f b6       	in	r0, 0x3f	; 63
 98e:	f8 94       	cli
 990:	de bf       	out	0x3e, r29	; 62
 992:	0f be       	out	0x3f, r0	; 63
 994:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00;
 996:	8f ef       	ldi	r24, 0xFF	; 255
 998:	84 b9       	out	0x04, r24	; 4
 99a:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 99c:	8a b9       	out	0x0a, r24	; 10
 99e:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xF0; PORTC = 0x0F;
 9a0:	80 ef       	ldi	r24, 0xF0	; 240
 9a2:	87 b9       	out	0x07, r24	; 7
 9a4:	8f e0       	ldi	r24, 0x0F	; 15
 9a6:	88 b9       	out	0x08, r24	; 8
	
	initTasks();
 9a8:	d7 db       	rcall	.-2130   	; 0x158 <initTasks>
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 9aa:	81 e0       	ldi	r24, 0x01	; 1
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	a0 e0       	ldi	r26, 0x00	; 0
 9b0:	b0 e0       	ldi	r27, 0x00	; 0
 9b2:	80 93 02 01 	sts	0x0102, r24
 9b6:	90 93 03 01 	sts	0x0103, r25
 9ba:	a0 93 04 01 	sts	0x0104, r26
 9be:	b0 93 05 01 	sts	0x0105, r27
	_avr_timer_cntcurr = _avr_timer_M;
 9c2:	80 93 0f 01 	sts	0x010F, r24
 9c6:	90 93 10 01 	sts	0x0110, r25
 9ca:	a0 93 11 01 	sts	0x0111, r26
 9ce:	b0 93 12 01 	sts	0x0112, r27
	
	TimerSet(1);
	TimerOn();
 9d2:	e9 db       	rcall	.-2094   	; 0x1a6 <TimerOn>
	
	matrix = clearSingleMatrix(matrix);
 9d4:	4d b7       	in	r20, 0x3d	; 61
 9d6:	5e b7       	in	r21, 0x3e	; 62
 9d8:	40 54       	subi	r20, 0x40	; 64
 9da:	51 09       	sbc	r21, r1
 9dc:	0f b6       	in	r0, 0x3f	; 63
 9de:	f8 94       	cli
 9e0:	5e bf       	out	0x3e, r21	; 62
 9e2:	0f be       	out	0x3f, r0	; 63
 9e4:	4d bf       	out	0x3d, r20	; 61
 9e6:	ad b7       	in	r26, 0x3d	; 61
 9e8:	be b7       	in	r27, 0x3e	; 62
 9ea:	11 96       	adiw	r26, 0x01	; 1
 9ec:	80 e4       	ldi	r24, 0x40	; 64
 9ee:	eb e6       	ldi	r30, 0x6B	; 107
 9f0:	f1 e0       	ldi	r31, 0x01	; 1
 9f2:	01 90       	ld	r0, Z+
 9f4:	0d 92       	st	X+, r0
 9f6:	8a 95       	dec	r24
 9f8:	e1 f7       	brne	.-8      	; 0x9f2 <main+0x72>
 9fa:	ce 01       	movw	r24, r28
 9fc:	87 58       	subi	r24, 0x87	; 135
 9fe:	9f 4e       	sbci	r25, 0xEF	; 239
 a00:	82 dc       	rcall	.-1788   	; 0x306 <clearSingleMatrix>
 a02:	80 e4       	ldi	r24, 0x40	; 64
 a04:	fe 01       	movw	r30, r28
 a06:	e7 58       	subi	r30, 0x87	; 135
 a08:	ff 4e       	sbci	r31, 0xEF	; 239
 a0a:	ab e6       	ldi	r26, 0x6B	; 107
 a0c:	b1 e0       	ldi	r27, 0x01	; 1
 a0e:	01 90       	ld	r0, Z+
 a10:	0d 92       	st	X+, r0
 a12:	8a 95       	dec	r24
 a14:	e1 f7       	brne	.-8      	; 0xa0e <main+0x8e>
 a16:	2b e7       	ldi	r18, 0x7B	; 123
 a18:	31 e0       	ldi	r19, 0x01	; 1
 a1a:	ab ea       	ldi	r26, 0xAB	; 171
 a1c:	b1 e0       	ldi	r27, 0x01	; 1
 a1e:	0f b6       	in	r0, 0x3f	; 63
 a20:	f8 94       	cli
 a22:	de bf       	out	0x3e, r29	; 62
 a24:	0f be       	out	0x3f, r0	; 63
 a26:	cd bf       	out	0x3d, r28	; 61

	unsigned char alternate = 0;
 a28:	80 e0       	ldi	r24, 0x00	; 0
	for (int i = 1; i < 7; i++) {
		for (int j = 0; j < 8; j++) {
			matrix.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
 a2a:	40 e0       	ldi	r20, 0x00	; 0
			else if (alternate == 0) alternate = 1;
 a2c:	91 e0       	ldi	r25, 0x01	; 1

	unsigned char alternate = 0;
	for (int i = 1; i < 7; i++) {
		for (int j = 0; j < 8; j++) {
			matrix.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
 a2e:	64 2f       	mov	r22, r20
			else if (alternate == 0) alternate = 1;
 a30:	59 2f       	mov	r21, r25
 a32:	17 c0       	rjmp	.+46     	; 0xa62 <main+0xe2>
	matrix = clearSingleMatrix(matrix);

	unsigned char alternate = 0;
	for (int i = 1; i < 7; i++) {
		for (int j = 0; j < 8; j++) {
			matrix.m[i][j] = alternate;
 a34:	81 93       	st	Z+, r24
			if (alternate == 1) alternate = 0;
 a36:	81 30       	cpi	r24, 0x01	; 1
 a38:	21 f0       	breq	.+8      	; 0xa42 <main+0xc2>
			else if (alternate == 0) alternate = 1;
 a3a:	81 11       	cpse	r24, r1
 a3c:	03 c0       	rjmp	.+6      	; 0xa44 <main+0xc4>
 a3e:	85 2f       	mov	r24, r21
 a40:	01 c0       	rjmp	.+2      	; 0xa44 <main+0xc4>

	unsigned char alternate = 0;
	for (int i = 1; i < 7; i++) {
		for (int j = 0; j < 8; j++) {
			matrix.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
 a42:	86 2f       	mov	r24, r22
	
	matrix = clearSingleMatrix(matrix);

	unsigned char alternate = 0;
	for (int i = 1; i < 7; i++) {
		for (int j = 0; j < 8; j++) {
 a44:	e2 17       	cp	r30, r18
 a46:	f3 07       	cpc	r31, r19
 a48:	a9 f7       	brne	.-22     	; 0xa34 <main+0xb4>
			matrix.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
		}
		if (alternate == 1) alternate = 0;
 a4a:	81 30       	cpi	r24, 0x01	; 1
 a4c:	21 f0       	breq	.+8      	; 0xa56 <main+0xd6>
		else if (alternate == 0) alternate = 1;
 a4e:	81 11       	cpse	r24, r1
 a50:	03 c0       	rjmp	.+6      	; 0xa58 <main+0xd8>
 a52:	89 2f       	mov	r24, r25
 a54:	01 c0       	rjmp	.+2      	; 0xa58 <main+0xd8>
		for (int j = 0; j < 8; j++) {
			matrix.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
		}
		if (alternate == 1) alternate = 0;
 a56:	84 2f       	mov	r24, r20
 a58:	28 5f       	subi	r18, 0xF8	; 248
 a5a:	3f 4f       	sbci	r19, 0xFF	; 255
	TimerOn();
	
	matrix = clearSingleMatrix(matrix);

	unsigned char alternate = 0;
	for (int i = 1; i < 7; i++) {
 a5c:	2a 17       	cp	r18, r26
 a5e:	3b 07       	cpc	r19, r27
 a60:	19 f0       	breq	.+6      	; 0xa68 <main+0xe8>
 a62:	f9 01       	movw	r30, r18
 a64:	38 97       	sbiw	r30, 0x08	; 8
 a66:	e6 cf       	rjmp	.-52     	; 0xa34 <main+0xb4>
		}
		if (alternate == 1) alternate = 0;
		else if (alternate == 0) alternate = 1;
	}
	
	matrix2 = clearSingleMatrix(matrix2);
 a68:	ad b7       	in	r26, 0x3d	; 61
 a6a:	be b7       	in	r27, 0x3e	; 62
 a6c:	a0 54       	subi	r26, 0x40	; 64
 a6e:	b1 09       	sbc	r27, r1
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	f8 94       	cli
 a74:	be bf       	out	0x3e, r27	; 62
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	ad bf       	out	0x3d, r26	; 61
 a7a:	11 96       	adiw	r26, 0x01	; 1
 a7c:	80 e4       	ldi	r24, 0x40	; 64
 a7e:	eb ee       	ldi	r30, 0xEB	; 235
 a80:	f5 e0       	ldi	r31, 0x05	; 5
 a82:	01 90       	ld	r0, Z+
 a84:	0d 92       	st	X+, r0
 a86:	8a 95       	dec	r24
 a88:	e1 f7       	brne	.-8      	; 0xa82 <main+0x102>
 a8a:	ce 01       	movw	r24, r28
 a8c:	87 58       	subi	r24, 0x87	; 135
 a8e:	9f 4e       	sbci	r25, 0xEF	; 239
 a90:	3a dc       	rcall	.-1932   	; 0x306 <clearSingleMatrix>
 a92:	80 e4       	ldi	r24, 0x40	; 64
 a94:	fe 01       	movw	r30, r28
 a96:	e7 58       	subi	r30, 0x87	; 135
 a98:	ff 4e       	sbci	r31, 0xEF	; 239
 a9a:	ab ee       	ldi	r26, 0xEB	; 235
 a9c:	b5 e0       	ldi	r27, 0x05	; 5
 a9e:	01 90       	ld	r0, Z+
 aa0:	0d 92       	st	X+, r0
 aa2:	8a 95       	dec	r24
 aa4:	e1 f7       	brne	.-8      	; 0xa9e <main+0x11e>
 aa6:	2b ef       	ldi	r18, 0xFB	; 251
 aa8:	35 e0       	ldi	r19, 0x05	; 5
 aaa:	ab e2       	ldi	r26, 0x2B	; 43
 aac:	b6 e0       	ldi	r27, 0x06	; 6
 aae:	0f b6       	in	r0, 0x3f	; 63
 ab0:	f8 94       	cli
 ab2:	de bf       	out	0x3e, r29	; 62
 ab4:	0f be       	out	0x3f, r0	; 63
 ab6:	cd bf       	out	0x3d, r28	; 61
	alternate = 1;
 ab8:	81 e0       	ldi	r24, 0x01	; 1
	for (int i = 1; i < 7; i++) {
		for (int j = 0; j < 8; j++) {
			matrix2.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
 aba:	40 e0       	ldi	r20, 0x00	; 0
			else if (alternate == 0) alternate = 1;
 abc:	91 e0       	ldi	r25, 0x01	; 1
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (int i = 1; i < 7; i++) {
		for (int j = 0; j < 8; j++) {
			matrix2.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
 abe:	64 2f       	mov	r22, r20
			else if (alternate == 0) alternate = 1;
 ac0:	59 2f       	mov	r21, r25
 ac2:	17 c0       	rjmp	.+46     	; 0xaf2 <main+0x172>
	
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (int i = 1; i < 7; i++) {
		for (int j = 0; j < 8; j++) {
			matrix2.m[i][j] = alternate;
 ac4:	81 93       	st	Z+, r24
			if (alternate == 1) alternate = 0;
 ac6:	81 30       	cpi	r24, 0x01	; 1
 ac8:	21 f0       	breq	.+8      	; 0xad2 <main+0x152>
			else if (alternate == 0) alternate = 1;
 aca:	81 11       	cpse	r24, r1
 acc:	03 c0       	rjmp	.+6      	; 0xad4 <main+0x154>
 ace:	85 2f       	mov	r24, r21
 ad0:	01 c0       	rjmp	.+2      	; 0xad4 <main+0x154>
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (int i = 1; i < 7; i++) {
		for (int j = 0; j < 8; j++) {
			matrix2.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
 ad2:	86 2f       	mov	r24, r22
	}
	
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (int i = 1; i < 7; i++) {
		for (int j = 0; j < 8; j++) {
 ad4:	2e 17       	cp	r18, r30
 ad6:	3f 07       	cpc	r19, r31
 ad8:	a9 f7       	brne	.-22     	; 0xac4 <main+0x144>
			matrix2.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
		}
		if (alternate == 1) alternate = 0;
 ada:	81 30       	cpi	r24, 0x01	; 1
 adc:	21 f0       	breq	.+8      	; 0xae6 <main+0x166>
		else if (alternate == 0) alternate = 1;
 ade:	81 11       	cpse	r24, r1
 ae0:	03 c0       	rjmp	.+6      	; 0xae8 <main+0x168>
 ae2:	89 2f       	mov	r24, r25
 ae4:	01 c0       	rjmp	.+2      	; 0xae8 <main+0x168>
		for (int j = 0; j < 8; j++) {
			matrix2.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
		}
		if (alternate == 1) alternate = 0;
 ae6:	84 2f       	mov	r24, r20
 ae8:	28 5f       	subi	r18, 0xF8	; 248
 aea:	3f 4f       	sbci	r19, 0xFF	; 255
		else if (alternate == 0) alternate = 1;
	}
	
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (int i = 1; i < 7; i++) {
 aec:	2a 17       	cp	r18, r26
 aee:	3b 07       	cpc	r19, r27
 af0:	19 f0       	breq	.+6      	; 0xaf8 <main+0x178>
 af2:	f9 01       	movw	r30, r18
 af4:	38 97       	sbiw	r30, 0x08	; 8
 af6:	e6 cf       	rjmp	.-52     	; 0xac4 <main+0x144>
		}
		if (alternate == 1) alternate = 0;
		else if (alternate == 0) alternate = 1;
	}
	
	blankMatrix = clearSingleMatrix(blankMatrix);
 af8:	4d b7       	in	r20, 0x3d	; 61
 afa:	5e b7       	in	r21, 0x3e	; 62
 afc:	40 54       	subi	r20, 0x40	; 64
 afe:	51 09       	sbc	r21, r1
 b00:	0f b6       	in	r0, 0x3f	; 63
 b02:	f8 94       	cli
 b04:	5e bf       	out	0x3e, r21	; 62
 b06:	0f be       	out	0x3f, r0	; 63
 b08:	4d bf       	out	0x3d, r20	; 61
 b0a:	ad b7       	in	r26, 0x3d	; 61
 b0c:	be b7       	in	r27, 0x3e	; 62
 b0e:	11 96       	adiw	r26, 0x01	; 1
 b10:	80 e4       	ldi	r24, 0x40	; 64
 b12:	eb e2       	ldi	r30, 0x2B	; 43
 b14:	f1 e0       	ldi	r31, 0x01	; 1
 b16:	01 90       	ld	r0, Z+
 b18:	0d 92       	st	X+, r0
 b1a:	8a 95       	dec	r24
 b1c:	e1 f7       	brne	.-8      	; 0xb16 <main+0x196>
 b1e:	ce 01       	movw	r24, r28
 b20:	87 58       	subi	r24, 0x87	; 135
 b22:	9f 4e       	sbci	r25, 0xEF	; 239
 b24:	f0 db       	rcall	.-2080   	; 0x306 <clearSingleMatrix>
 b26:	80 e4       	ldi	r24, 0x40	; 64
 b28:	fe 01       	movw	r30, r28
 b2a:	e7 58       	subi	r30, 0x87	; 135
 b2c:	ff 4e       	sbci	r31, 0xEF	; 239
 b2e:	ab e2       	ldi	r26, 0x2B	; 43
 b30:	b1 e0       	ldi	r27, 0x01	; 1
 b32:	01 90       	ld	r0, Z+
 b34:	0d 92       	st	X+, r0
 b36:	8a 95       	dec	r24
 b38:	e1 f7       	brne	.-8      	; 0xb32 <main+0x1b2>
	
	explosions = initExplosions(explosions);
 b3a:	0f b6       	in	r0, 0x3f	; 63
 b3c:	f8 94       	cli
 b3e:	de bf       	out	0x3e, r29	; 62
 b40:	0f be       	out	0x3f, r0	; 63
 b42:	cd bf       	out	0x3d, r28	; 61
 b44:	ad b7       	in	r26, 0x3d	; 61
 b46:	be b7       	in	r27, 0x3e	; 62
 b48:	ae 5f       	subi	r26, 0xFE	; 254
 b4a:	b3 40       	sbci	r27, 0x03	; 3
 b4c:	0f b6       	in	r0, 0x3f	; 63
 b4e:	f8 94       	cli
 b50:	be bf       	out	0x3e, r27	; 62
 b52:	0f be       	out	0x3f, r0	; 63
 b54:	ad bf       	out	0x3d, r26	; 61
 b56:	11 96       	adiw	r26, 0x01	; 1
 b58:	8e ef       	ldi	r24, 0xFE	; 254
 b5a:	93 e0       	ldi	r25, 0x03	; 3
 b5c:	eb ea       	ldi	r30, 0xAB	; 171
 b5e:	f1 e0       	ldi	r31, 0x01	; 1
 b60:	01 90       	ld	r0, Z+
 b62:	0d 92       	st	X+, r0
 b64:	01 97       	sbiw	r24, 0x01	; 1
 b66:	e1 f7       	brne	.-8      	; 0xb60 <main+0x1e0>
 b68:	ce 01       	movw	r24, r28
 b6a:	87 54       	subi	r24, 0x47	; 71
 b6c:	9f 4e       	sbci	r25, 0xEF	; 239
 b6e:	de dd       	rcall	.-1092   	; 0x72c <initExplosions>
 b70:	8e ef       	ldi	r24, 0xFE	; 254
 b72:	93 e0       	ldi	r25, 0x03	; 3
 b74:	fe 01       	movw	r30, r28
 b76:	e7 54       	subi	r30, 0x47	; 71
 b78:	ff 4e       	sbci	r31, 0xEF	; 239
 b7a:	ab ea       	ldi	r26, 0xAB	; 171
 b7c:	b1 e0       	ldi	r27, 0x01	; 1
 b7e:	01 90       	ld	r0, Z+
 b80:	0d 92       	st	X+, r0
 b82:	01 97       	sbiw	r24, 0x01	; 1
 b84:	e1 f7       	brne	.-8      	; 0xb7e <main+0x1fe>
 b86:	8e ef       	ldi	r24, 0xFE	; 254
 b88:	93 e0       	ldi	r25, 0x03	; 3
 b8a:	eb ea       	ldi	r30, 0xAB	; 171
 b8c:	f1 e0       	ldi	r31, 0x01	; 1
 b8e:	de 01       	movw	r26, r28
 b90:	a5 50       	subi	r26, 0x05	; 5
 b92:	b4 4f       	sbci	r27, 0xF4	; 244
 b94:	01 90       	ld	r0, Z+
 b96:	0d 92       	st	X+, r0
 b98:	01 97       	sbiw	r24, 0x01	; 1
 b9a:	e1 f7       	brne	.-8      	; 0xb94 <main+0x214>
 b9c:	07 ea       	ldi	r16, 0xA7	; 167
 b9e:	15 e0       	ldi	r17, 0x05	; 5
 ba0:	f8 01       	movw	r30, r16
 ba2:	20 81       	ld	r18, Z
 ba4:	80 e4       	ldi	r24, 0x40	; 64
 ba6:	eb e6       	ldi	r30, 0x6B	; 107
 ba8:	f1 e0       	ldi	r31, 0x01	; 1
 baa:	de 01       	movw	r26, r28
 bac:	a7 5c       	subi	r26, 0xC7	; 199
 bae:	bf 4e       	sbci	r27, 0xEF	; 239
 bb0:	01 90       	ld	r0, Z+
 bb2:	0d 92       	st	X+, r0
 bb4:	8a 95       	dec	r24
 bb6:	e1 f7       	brne	.-8      	; 0xbb0 <main+0x230>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned short a, unsigned short b) {
	explosions.matricies[explosions.index] = matrix;
 bb8:	82 2f       	mov	r24, r18
 bba:	90 e0       	ldi	r25, 0x00	; 0
 bbc:	ab ef       	ldi	r26, 0xFB	; 251
 bbe:	bb e0       	ldi	r27, 0x0B	; 11
 bc0:	ac 0f       	add	r26, r28
 bc2:	bd 1f       	adc	r27, r29
 bc4:	f0 e4       	ldi	r31, 0x40	; 64
 bc6:	2f 9f       	mul	r18, r31
 bc8:	a0 0d       	add	r26, r0
 bca:	b1 1d       	adc	r27, r1
 bcc:	11 24       	eor	r1, r1
 bce:	30 e4       	ldi	r19, 0x40	; 64
 bd0:	fe 01       	movw	r30, r28
 bd2:	e7 5c       	subi	r30, 0xC7	; 199
 bd4:	ff 4e       	sbci	r31, 0xEF	; 239
 bd6:	01 90       	ld	r0, Z+
 bd8:	0d 92       	st	X+, r0
 bda:	3a 95       	dec	r19
 bdc:	e1 f7       	brne	.-8      	; 0xbd6 <main+0x256>
	explosions.timeBetween[explosions.index] = a;
 bde:	fc 01       	movw	r30, r24
 be0:	e0 52       	subi	r30, 0x20	; 32
 be2:	fe 4f       	sbci	r31, 0xFE	; 254
 be4:	ee 0f       	add	r30, r30
 be6:	ff 1f       	adc	r31, r31
 be8:	4b ef       	ldi	r20, 0xFB	; 251
 bea:	5b e0       	ldi	r21, 0x0B	; 11
 bec:	4c 0f       	add	r20, r28
 bee:	5d 1f       	adc	r21, r29
 bf0:	e4 0f       	add	r30, r20
 bf2:	f5 1f       	adc	r31, r21
 bf4:	6e e5       	ldi	r22, 0x5E	; 94
 bf6:	71 e0       	ldi	r23, 0x01	; 1
 bf8:	71 83       	std	Z+1, r23	; 0x01
 bfa:	60 83       	st	Z, r22
	explosions.timeDuration[explosions.index] = b;
 bfc:	fc 01       	movw	r30, r24
 bfe:	e1 51       	subi	r30, 0x11	; 17
 c00:	fe 4f       	sbci	r31, 0xFE	; 254
 c02:	ee 0f       	add	r30, r30
 c04:	ff 1f       	adc	r31, r31
 c06:	e4 0f       	add	r30, r20
 c08:	f5 1f       	adc	r31, r21
 c0a:	48 ec       	ldi	r20, 0xC8	; 200
 c0c:	50 e0       	ldi	r21, 0x00	; 0
 c0e:	51 83       	std	Z+1, r21	; 0x01
 c10:	40 83       	st	Z, r20
	explosions.index++;
 c12:	2f 5f       	subi	r18, 0xFF	; 255
	
	return explosions;
 c14:	c9 50       	subi	r28, 0x09	; 9
 c16:	d0 4f       	sbci	r29, 0xF0	; 240
 c18:	28 83       	st	Y, r18
 c1a:	c7 5f       	subi	r28, 0xF7	; 247
 c1c:	df 40       	sbci	r29, 0x0F	; 15
 c1e:	8e ef       	ldi	r24, 0xFE	; 254
 c20:	93 e0       	ldi	r25, 0x03	; 3
 c22:	fe 01       	movw	r30, r28
 c24:	e5 50       	subi	r30, 0x05	; 5
 c26:	f4 4f       	sbci	r31, 0xF4	; 244
 c28:	de 01       	movw	r26, r28
 c2a:	a3 50       	subi	r26, 0x03	; 3
 c2c:	b8 4f       	sbci	r27, 0xF8	; 248
 c2e:	01 90       	ld	r0, Z+
 c30:	0d 92       	st	X+, r0
 c32:	01 97       	sbiw	r24, 0x01	; 1
 c34:	e1 f7       	brne	.-8      	; 0xc2e <main+0x2ae>
	explosions = pushExplosion(explosions, matrix, 350, 200);
 c36:	c7 50       	subi	r28, 0x07	; 7
 c38:	d4 4f       	sbci	r29, 0xF4	; 244
 c3a:	28 83       	st	Y, r18
 c3c:	c9 5f       	subi	r28, 0xF9	; 249
 c3e:	db 40       	sbci	r29, 0x0B	; 11
 c40:	8e ef       	ldi	r24, 0xFE	; 254
 c42:	93 e0       	ldi	r25, 0x03	; 3
 c44:	fe 01       	movw	r30, r28
 c46:	e3 50       	subi	r30, 0x03	; 3
 c48:	f8 4f       	sbci	r31, 0xF8	; 248
 c4a:	ab ea       	ldi	r26, 0xAB	; 171
 c4c:	b1 e0       	ldi	r27, 0x01	; 1
 c4e:	01 90       	ld	r0, Z+
 c50:	0d 92       	st	X+, r0
 c52:	01 97       	sbiw	r24, 0x01	; 1
 c54:	e1 f7       	brne	.-8      	; 0xc4e <main+0x2ce>
 c56:	8e ef       	ldi	r24, 0xFE	; 254
 c58:	93 e0       	ldi	r25, 0x03	; 3
 c5a:	eb ea       	ldi	r30, 0xAB	; 171
 c5c:	f1 e0       	ldi	r31, 0x01	; 1
 c5e:	de 01       	movw	r26, r28
 c60:	a1 50       	subi	r26, 0x01	; 1
 c62:	bc 4f       	sbci	r27, 0xFC	; 252
 c64:	01 90       	ld	r0, Z+
 c66:	0d 92       	st	X+, r0
 c68:	01 97       	sbiw	r24, 0x01	; 1
 c6a:	e1 f7       	brne	.-8      	; 0xc64 <main+0x2e4>
 c6c:	d8 01       	movw	r26, r16
 c6e:	2c 91       	ld	r18, X
 c70:	80 e4       	ldi	r24, 0x40	; 64
 c72:	eb ee       	ldi	r30, 0xEB	; 235
 c74:	f5 e0       	ldi	r31, 0x05	; 5
 c76:	de 01       	movw	r26, r28
 c78:	a7 50       	subi	r26, 0x07	; 7
 c7a:	b0 4f       	sbci	r27, 0xF0	; 240
 c7c:	01 90       	ld	r0, Z+
 c7e:	0d 92       	st	X+, r0
 c80:	8a 95       	dec	r24
 c82:	e1 f7       	brne	.-8      	; 0xc7c <main+0x2fc>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned short a, unsigned short b) {
	explosions.matricies[explosions.index] = matrix;
 c84:	82 2f       	mov	r24, r18
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	af ef       	ldi	r26, 0xFF	; 255
 c8a:	b3 e0       	ldi	r27, 0x03	; 3
 c8c:	ac 0f       	add	r26, r28
 c8e:	bd 1f       	adc	r27, r29
 c90:	e0 e4       	ldi	r30, 0x40	; 64
 c92:	2e 9f       	mul	r18, r30
 c94:	a0 0d       	add	r26, r0
 c96:	b1 1d       	adc	r27, r1
 c98:	11 24       	eor	r1, r1
 c9a:	30 e4       	ldi	r19, 0x40	; 64
 c9c:	fe 01       	movw	r30, r28
 c9e:	e7 50       	subi	r30, 0x07	; 7
 ca0:	f0 4f       	sbci	r31, 0xF0	; 240
 ca2:	01 90       	ld	r0, Z+
 ca4:	0d 92       	st	X+, r0
 ca6:	3a 95       	dec	r19
 ca8:	e1 f7       	brne	.-8      	; 0xca2 <main+0x322>
	explosions.timeBetween[explosions.index] = a;
 caa:	fc 01       	movw	r30, r24
 cac:	e0 52       	subi	r30, 0x20	; 32
 cae:	fe 4f       	sbci	r31, 0xFE	; 254
 cb0:	ee 0f       	add	r30, r30
 cb2:	ff 1f       	adc	r31, r31
 cb4:	af ef       	ldi	r26, 0xFF	; 255
 cb6:	b3 e0       	ldi	r27, 0x03	; 3
 cb8:	ac 0f       	add	r26, r28
 cba:	bd 1f       	adc	r27, r29
 cbc:	ea 0f       	add	r30, r26
 cbe:	fb 1f       	adc	r31, r27
 cc0:	71 83       	std	Z+1, r23	; 0x01
 cc2:	60 83       	st	Z, r22
	explosions.timeDuration[explosions.index] = b;
 cc4:	fc 01       	movw	r30, r24
 cc6:	e1 51       	subi	r30, 0x11	; 17
 cc8:	fe 4f       	sbci	r31, 0xFE	; 254
 cca:	ee 0f       	add	r30, r30
 ccc:	ff 1f       	adc	r31, r31
 cce:	ea 0f       	add	r30, r26
 cd0:	fb 1f       	adc	r31, r27
 cd2:	51 83       	std	Z+1, r21	; 0x01
 cd4:	40 83       	st	Z, r20
	explosions.index++;
 cd6:	2f 5f       	subi	r18, 0xFF	; 255
	
	return explosions;
 cd8:	c5 50       	subi	r28, 0x05	; 5
 cda:	d8 4f       	sbci	r29, 0xF8	; 248
 cdc:	28 83       	st	Y, r18
 cde:	cb 5f       	subi	r28, 0xFB	; 251
 ce0:	d7 40       	sbci	r29, 0x07	; 7
 ce2:	8e ef       	ldi	r24, 0xFE	; 254
 ce4:	93 e0       	ldi	r25, 0x03	; 3
 ce6:	fd 01       	movw	r30, r26
 ce8:	ae 5f       	subi	r26, 0xFE	; 254
 cea:	b3 40       	sbci	r27, 0x03	; 3
 cec:	01 90       	ld	r0, Z+
 cee:	0d 92       	st	X+, r0
 cf0:	01 97       	sbiw	r24, 0x01	; 1
 cf2:	e1 f7       	brne	.-8      	; 0xcec <main+0x36c>
	explosions = pushExplosion(explosions, matrix2, 350, 200);
 cf4:	c3 50       	subi	r28, 0x03	; 3
 cf6:	dc 4f       	sbci	r29, 0xFC	; 252
 cf8:	28 83       	st	Y, r18
 cfa:	cd 5f       	subi	r28, 0xFD	; 253
 cfc:	d3 40       	sbci	r29, 0x03	; 3
 cfe:	8e ef       	ldi	r24, 0xFE	; 254
 d00:	93 e0       	ldi	r25, 0x03	; 3
 d02:	fe 01       	movw	r30, r28
 d04:	31 96       	adiw	r30, 0x01	; 1
 d06:	ab ea       	ldi	r26, 0xAB	; 171
 d08:	b1 e0       	ldi	r27, 0x01	; 1
 d0a:	01 90       	ld	r0, Z+
 d0c:	0d 92       	st	X+, r0
 d0e:	01 97       	sbiw	r24, 0x01	; 1
 d10:	e1 f7       	brne	.-8      	; 0xd0a <main+0x38a>
	
	userMatrix = initSingleUserMatrix(userMatrix);
 d12:	0f b6       	in	r0, 0x3f	; 63
 d14:	f8 94       	cli
 d16:	de bf       	out	0x3e, r29	; 62
 d18:	0f be       	out	0x3f, r0	; 63
 d1a:	cd bf       	out	0x3d, r28	; 61
 d1c:	4d b7       	in	r20, 0x3d	; 61
 d1e:	5e b7       	in	r21, 0x3e	; 62
 d20:	42 54       	subi	r20, 0x42	; 66
 d22:	51 09       	sbc	r21, r1
 d24:	0f b6       	in	r0, 0x3f	; 63
 d26:	f8 94       	cli
 d28:	5e bf       	out	0x3e, r21	; 62
 d2a:	0f be       	out	0x3f, r0	; 63
 d2c:	4d bf       	out	0x3d, r20	; 61
 d2e:	ad b7       	in	r26, 0x3d	; 61
 d30:	be b7       	in	r27, 0x3e	; 62
 d32:	11 96       	adiw	r26, 0x01	; 1
 d34:	82 e4       	ldi	r24, 0x42	; 66
 d36:	e9 ea       	ldi	r30, 0xA9	; 169
 d38:	f5 e0       	ldi	r31, 0x05	; 5
 d3a:	01 90       	ld	r0, Z+
 d3c:	0d 92       	st	X+, r0
 d3e:	8a 95       	dec	r24
 d40:	e1 f7       	brne	.-8      	; 0xd3a <main+0x3ba>
 d42:	ce 01       	movw	r24, r28
 d44:	87 58       	subi	r24, 0x87	; 135
 d46:	9f 4e       	sbci	r25, 0xEF	; 239
 d48:	08 db       	rcall	.-2544   	; 0x35a <initSingleUserMatrix>
 d4a:	82 e4       	ldi	r24, 0x42	; 66
 d4c:	fe 01       	movw	r30, r28
 d4e:	e7 58       	subi	r30, 0x87	; 135
 d50:	ff 4e       	sbci	r31, 0xEF	; 239
 d52:	a9 ea       	ldi	r26, 0xA9	; 169
 d54:	b5 e0       	ldi	r27, 0x05	; 5
 d56:	01 90       	ld	r0, Z+
 d58:	0d 92       	st	X+, r0
 d5a:	8a 95       	dec	r24
 d5c:	e1 f7       	brne	.-8      	; 0xd56 <main+0x3d6>
 d5e:	0f b6       	in	r0, 0x3f	; 63
 d60:	f8 94       	cli
 d62:	de bf       	out	0x3e, r29	; 62
 d64:	0f be       	out	0x3f, r0	; 63
 d66:	cd bf       	out	0x3d, r28	; 61
	
	while (1) {
		//d3_setMatrix(explosions.matricies[0]);
		explosions = ExpTick(explosions);
 d68:	0e ef       	ldi	r16, 0xFE	; 254
 d6a:	13 e0       	ldi	r17, 0x03	; 3
 d6c:	ad b7       	in	r26, 0x3d	; 61
 d6e:	be b7       	in	r27, 0x3e	; 62
 d70:	ae 5f       	subi	r26, 0xFE	; 254
 d72:	b3 40       	sbci	r27, 0x03	; 3
 d74:	0f b6       	in	r0, 0x3f	; 63
 d76:	f8 94       	cli
 d78:	be bf       	out	0x3e, r27	; 62
 d7a:	0f be       	out	0x3f, r0	; 63
 d7c:	ad bf       	out	0x3d, r26	; 61
 d7e:	11 96       	adiw	r26, 0x01	; 1
 d80:	eb ea       	ldi	r30, 0xAB	; 171
 d82:	f1 e0       	ldi	r31, 0x01	; 1
 d84:	c8 01       	movw	r24, r16
 d86:	01 90       	ld	r0, Z+
 d88:	0d 92       	st	X+, r0
 d8a:	01 97       	sbiw	r24, 0x01	; 1
 d8c:	e1 f7       	brne	.-8      	; 0xd86 <main+0x406>
 d8e:	ce 01       	movw	r24, r28
 d90:	87 58       	subi	r24, 0x87	; 135
 d92:	9f 4e       	sbci	r25, 0xEF	; 239
 d94:	3f dd       	rcall	.-1410   	; 0x814 <ExpTick>
 d96:	fe 01       	movw	r30, r28
 d98:	e7 58       	subi	r30, 0x87	; 135
 d9a:	ff 4e       	sbci	r31, 0xEF	; 239
 d9c:	ab ea       	ldi	r26, 0xAB	; 171
 d9e:	b1 e0       	ldi	r27, 0x01	; 1
 da0:	c8 01       	movw	r24, r16
 da2:	01 90       	ld	r0, Z+
 da4:	0d 92       	st	X+, r0
 da6:	01 97       	sbiw	r24, 0x01	; 1
 da8:	e1 f7       	brne	.-8      	; 0xda2 <main+0x422>
		DeathTick();
 daa:	0f b6       	in	r0, 0x3f	; 63
 dac:	f8 94       	cli
 dae:	de bf       	out	0x3e, r29	; 62
 db0:	0f be       	out	0x3f, r0	; 63
 db2:	cd bf       	out	0x3d, r28	; 61
 db4:	d6 dc       	rcall	.-1620   	; 0x762 <DeathTick>
		d3_setMatrixColor(userMatrix.m, GREEN);
 db6:	62 e0       	ldi	r22, 0x02	; 2
 db8:	89 ea       	ldi	r24, 0xA9	; 169
 dba:	95 e0       	ldi	r25, 0x05	; 5
 dbc:	6f db       	rcall	.-2338   	; 0x49c <d3_setMatrixColor>
	}
 dbe:	d6 cf       	rjmp	.-84     	; 0xd6c <main+0x3ec>

00000dc0 <_exit>:
 dc0:	f8 94       	cli

00000dc2 <__stop_program>:
 dc2:	ff cf       	rjmp	.-2      	; 0xdc2 <__stop_program>
