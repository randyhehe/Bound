
scbound.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001c64  00001cf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fa  00800104  00800104  00001cfc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a40  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003f4  00000000  00000000  000038d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001140  00000000  00000000  00003cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00004e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f7  00000000  00000000  000051d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001196  00000000  00000000  000056cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00006861  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	e1 c0       	rjmp	.+450    	; 0x1f8 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e6       	ldi	r30, 0x64	; 100
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 30       	cpi	r26, 0x04	; 4
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a4 e0       	ldi	r26, 0x04	; 4
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 3f       	cpi	r26, 0xFE	; 254
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	27 d4       	rcall	.+2126   	; 0x912 <main>
      c4:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <ETIMERTick>:
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
      ca:	00 97       	sbiw	r24, 0x00	; 0
      cc:	21 f0       	breq	.+8      	; 0xd6 <ETIMERTick+0xc>
      ce:	81 30       	cpi	r24, 0x01	; 1
      d0:	91 05       	cpc	r25, r1
      d2:	49 f0       	breq	.+18     	; 0xe6 <ETIMERTick+0x1c>
      d4:	05 c0       	rjmp	.+10     	; 0xe0 <ETIMERTick+0x16>
      d6:	10 92 05 01 	sts	0x0105, r1
      da:	10 92 04 01 	sts	0x0104, r1
      de:	03 c0       	rjmp	.+6      	; 0xe6 <ETIMERTick+0x1c>
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	91 05       	cpc	r25, r1
      e4:	f1 f4       	brne	.+60     	; 0x122 <ETIMERTick+0x58>
      e6:	80 91 04 01 	lds	r24, 0x0104
      ea:	90 91 05 01 	lds	r25, 0x0105
      ee:	01 96       	adiw	r24, 0x01	; 1
      f0:	90 93 05 01 	sts	0x0105, r25
      f4:	80 93 04 01 	sts	0x0104, r24
      f8:	80 91 07 01 	lds	r24, 0x0107
      fc:	90 91 08 01 	lds	r25, 0x0108
     100:	a0 91 09 01 	lds	r26, 0x0109
     104:	b0 91 0a 01 	lds	r27, 0x010A
     108:	01 96       	adiw	r24, 0x01	; 1
     10a:	a1 1d       	adc	r26, r1
     10c:	b1 1d       	adc	r27, r1
     10e:	80 93 07 01 	sts	0x0107, r24
     112:	90 93 08 01 	sts	0x0108, r25
     116:	a0 93 09 01 	sts	0x0109, r26
     11a:	b0 93 0a 01 	sts	0x010A, r27
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	08 95       	ret

00000124 <initTasks>:
     124:	ef e0       	ldi	r30, 0x0F	; 15
     126:	f1 e0       	ldi	r31, 0x01	; 1
     128:	11 82       	std	Z+1, r1	; 0x01
     12a:	10 82       	st	Z, r1
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	82 83       	std	Z+2, r24	; 0x02
     136:	93 83       	std	Z+3, r25	; 0x03
     138:	a4 83       	std	Z+4, r26	; 0x04
     13a:	b5 83       	std	Z+5, r27	; 0x05
     13c:	86 83       	std	Z+6, r24	; 0x06
     13e:	97 83       	std	Z+7, r25	; 0x07
     140:	a0 87       	std	Z+8, r26	; 0x08
     142:	b1 87       	std	Z+9, r27	; 0x09
     144:	85 e6       	ldi	r24, 0x65	; 101
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	93 87       	std	Z+11, r25	; 0x0b
     14a:	82 87       	std	Z+10, r24	; 0x0a
     14c:	08 95       	ret

0000014e <TimerOn>:
     14e:	8b e0       	ldi	r24, 0x0B	; 11
     150:	80 93 81 00 	sts	0x0081, r24
     154:	8d e7       	ldi	r24, 0x7D	; 125
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	90 93 89 00 	sts	0x0089, r25
     15c:	80 93 88 00 	sts	0x0088, r24
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	80 93 6f 00 	sts	0x006F, r24
     166:	10 92 85 00 	sts	0x0085, r1
     16a:	10 92 84 00 	sts	0x0084, r1
     16e:	80 91 00 01 	lds	r24, 0x0100
     172:	90 91 01 01 	lds	r25, 0x0101
     176:	a0 91 02 01 	lds	r26, 0x0102
     17a:	b0 91 03 01 	lds	r27, 0x0103
     17e:	80 93 0b 01 	sts	0x010B, r24
     182:	90 93 0c 01 	sts	0x010C, r25
     186:	a0 93 0d 01 	sts	0x010D, r26
     18a:	b0 93 0e 01 	sts	0x010E, r27
     18e:	8f b7       	in	r24, 0x3f	; 63
     190:	80 68       	ori	r24, 0x80	; 128
     192:	8f bf       	out	0x3f, r24	; 63
     194:	08 95       	ret

00000196 <TimerISR>:
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	ef e0       	ldi	r30, 0x0F	; 15
     19c:	f1 e0       	ldi	r31, 0x01	; 1
     19e:	86 81       	ldd	r24, Z+6	; 0x06
     1a0:	97 81       	ldd	r25, Z+7	; 0x07
     1a2:	a0 85       	ldd	r26, Z+8	; 0x08
     1a4:	b1 85       	ldd	r27, Z+9	; 0x09
     1a6:	42 81       	ldd	r20, Z+2	; 0x02
     1a8:	53 81       	ldd	r21, Z+3	; 0x03
     1aa:	64 81       	ldd	r22, Z+4	; 0x04
     1ac:	75 81       	ldd	r23, Z+5	; 0x05
     1ae:	84 17       	cp	r24, r20
     1b0:	95 07       	cpc	r25, r21
     1b2:	a6 07       	cpc	r26, r22
     1b4:	b7 07       	cpc	r27, r23
     1b6:	90 f0       	brcs	.+36     	; 0x1dc <TimerISR+0x46>
     1b8:	ef 01       	movw	r28, r30
     1ba:	02 84       	ldd	r0, Z+10	; 0x0a
     1bc:	f3 85       	ldd	r31, Z+11	; 0x0b
     1be:	e0 2d       	mov	r30, r0
     1c0:	88 81       	ld	r24, Y
     1c2:	99 81       	ldd	r25, Y+1	; 0x01
     1c4:	09 95       	icall
     1c6:	99 83       	std	Y+1, r25	; 0x01
     1c8:	88 83       	st	Y, r24
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	a0 e0       	ldi	r26, 0x00	; 0
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	8e 83       	std	Y+6, r24	; 0x06
     1d4:	9f 83       	std	Y+7, r25	; 0x07
     1d6:	a8 87       	std	Y+8, r26	; 0x08
     1d8:	b9 87       	std	Y+9, r27	; 0x09
     1da:	0b c0       	rjmp	.+22     	; 0x1f2 <TimerISR+0x5c>
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	a1 1d       	adc	r26, r1
     1e0:	b1 1d       	adc	r27, r1
     1e2:	80 93 15 01 	sts	0x0115, r24
     1e6:	90 93 16 01 	sts	0x0116, r25
     1ea:	a0 93 17 01 	sts	0x0117, r26
     1ee:	b0 93 18 01 	sts	0x0118, r27
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <__vector_13>:
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	0b b6       	in	r0, 0x3b	; 59
     204:	0f 92       	push	r0
     206:	2f 93       	push	r18
     208:	3f 93       	push	r19
     20a:	4f 93       	push	r20
     20c:	5f 93       	push	r21
     20e:	6f 93       	push	r22
     210:	7f 93       	push	r23
     212:	8f 93       	push	r24
     214:	9f 93       	push	r25
     216:	af 93       	push	r26
     218:	bf 93       	push	r27
     21a:	ef 93       	push	r30
     21c:	ff 93       	push	r31
     21e:	80 91 0b 01 	lds	r24, 0x010B
     222:	90 91 0c 01 	lds	r25, 0x010C
     226:	a0 91 0d 01 	lds	r26, 0x010D
     22a:	b0 91 0e 01 	lds	r27, 0x010E
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	a1 09       	sbc	r26, r1
     232:	b1 09       	sbc	r27, r1
     234:	80 93 0b 01 	sts	0x010B, r24
     238:	90 93 0c 01 	sts	0x010C, r25
     23c:	a0 93 0d 01 	sts	0x010D, r26
     240:	b0 93 0e 01 	sts	0x010E, r27
     244:	89 2b       	or	r24, r25
     246:	8a 2b       	or	r24, r26
     248:	8b 2b       	or	r24, r27
     24a:	89 f4       	brne	.+34     	; 0x26e <__vector_13+0x76>
     24c:	a4 df       	rcall	.-184    	; 0x196 <TimerISR>
     24e:	80 91 00 01 	lds	r24, 0x0100
     252:	90 91 01 01 	lds	r25, 0x0101
     256:	a0 91 02 01 	lds	r26, 0x0102
     25a:	b0 91 03 01 	lds	r27, 0x0103
     25e:	80 93 0b 01 	sts	0x010B, r24
     262:	90 93 0c 01 	sts	0x010C, r25
     266:	a0 93 0d 01 	sts	0x010D, r26
     26a:	b0 93 0e 01 	sts	0x010E, r27
     26e:	ff 91       	pop	r31
     270:	ef 91       	pop	r30
     272:	bf 91       	pop	r27
     274:	af 91       	pop	r26
     276:	9f 91       	pop	r25
     278:	8f 91       	pop	r24
     27a:	7f 91       	pop	r23
     27c:	6f 91       	pop	r22
     27e:	5f 91       	pop	r21
     280:	4f 91       	pop	r20
     282:	3f 91       	pop	r19
     284:	2f 91       	pop	r18
     286:	0f 90       	pop	r0
     288:	0b be       	out	0x3b, r0	; 59
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <clearSingleMatrix>:
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	60 97       	sbiw	r28, 0x10	; 16
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	29 87       	std	Y+9, r18	; 0x09
     2aa:	3a 87       	std	Y+10, r19	; 0x0a
     2ac:	4b 87       	std	Y+11, r20	; 0x0b
     2ae:	5c 87       	std	Y+12, r21	; 0x0c
     2b0:	6d 87       	std	Y+13, r22	; 0x0d
     2b2:	7e 87       	std	Y+14, r23	; 0x0e
     2b4:	8f 87       	std	Y+15, r24	; 0x0f
     2b6:	98 8b       	std	Y+16, r25	; 0x10
     2b8:	fe 01       	movw	r30, r28
     2ba:	39 96       	adiw	r30, 0x09	; 9
     2bc:	9e 01       	movw	r18, r28
     2be:	2f 5e       	subi	r18, 0xEF	; 239
     2c0:	3f 4f       	sbci	r19, 0xFF	; 255
     2c2:	8f ef       	ldi	r24, 0xFF	; 255
     2c4:	81 93       	st	Z+, r24
     2c6:	e2 17       	cp	r30, r18
     2c8:	f3 07       	cpc	r31, r19
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <clearSingleMatrix+0x30>
     2cc:	88 e0       	ldi	r24, 0x08	; 8
     2ce:	fe 01       	movw	r30, r28
     2d0:	39 96       	adiw	r30, 0x09	; 9
     2d2:	de 01       	movw	r26, r28
     2d4:	11 96       	adiw	r26, 0x01	; 1
     2d6:	01 90       	ld	r0, Z+
     2d8:	0d 92       	st	X+, r0
     2da:	8a 95       	dec	r24
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <clearSingleMatrix+0x42>
     2de:	29 81       	ldd	r18, Y+1	; 0x01
     2e0:	3a 81       	ldd	r19, Y+2	; 0x02
     2e2:	4b 81       	ldd	r20, Y+3	; 0x03
     2e4:	5c 81       	ldd	r21, Y+4	; 0x04
     2e6:	6d 81       	ldd	r22, Y+5	; 0x05
     2e8:	7e 81       	ldd	r23, Y+6	; 0x06
     2ea:	8f 81       	ldd	r24, Y+7	; 0x07
     2ec:	98 85       	ldd	r25, Y+8	; 0x08
     2ee:	60 96       	adiw	r28, 0x10	; 16
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <initSingleUserMatrix>:
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	2a 97       	sbiw	r28, 0x0a	; 10
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	bc 01       	movw	r22, r24
     31e:	e9 82       	std	Y+1, r14	; 0x01
     320:	fa 82       	std	Y+2, r15	; 0x02
     322:	0b 83       	std	Y+3, r16	; 0x03
     324:	1c 83       	std	Y+4, r17	; 0x04
     326:	2d 83       	std	Y+5, r18	; 0x05
     328:	3e 83       	std	Y+6, r19	; 0x06
     32a:	4f 83       	std	Y+7, r20	; 0x07
     32c:	58 87       	std	Y+8, r21	; 0x08
     32e:	fe 01       	movw	r30, r28
     330:	31 96       	adiw	r30, 0x01	; 1
     332:	9e 01       	movw	r18, r28
     334:	27 5f       	subi	r18, 0xF7	; 247
     336:	3f 4f       	sbci	r19, 0xFF	; 255
     338:	9f ef       	ldi	r25, 0xFF	; 255
     33a:	91 93       	st	Z+, r25
     33c:	e2 17       	cp	r30, r18
     33e:	f3 07       	cpc	r31, r19
     340:	e1 f7       	brne	.-8      	; 0x33a <initSingleUserMatrix+0x3a>
     342:	99 81       	ldd	r25, Y+1	; 0x01
     344:	97 7f       	andi	r25, 0xF7	; 247
     346:	99 83       	std	Y+1, r25	; 0x01
     348:	19 86       	std	Y+9, r1	; 0x09
     34a:	83 e0       	ldi	r24, 0x03	; 3
     34c:	8a 87       	std	Y+10, r24	; 0x0a
     34e:	8a e0       	ldi	r24, 0x0A	; 10
     350:	fe 01       	movw	r30, r28
     352:	31 96       	adiw	r30, 0x01	; 1
     354:	db 01       	movw	r26, r22
     356:	01 90       	ld	r0, Z+
     358:	0d 92       	st	X+, r0
     35a:	8a 95       	dec	r24
     35c:	e1 f7       	brne	.-8      	; 0x356 <initSingleUserMatrix+0x56>
     35e:	cb 01       	movw	r24, r22
     360:	2a 96       	adiw	r28, 0x0a	; 10
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	de bf       	out	0x3e, r29	; 62
     368:	0f be       	out	0x3f, r0	; 63
     36a:	cd bf       	out	0x3d, r28	; 61
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	ff 90       	pop	r15
     376:	ef 90       	pop	r14
     378:	08 95       	ret

0000037a <shiftSR>:
     37a:	85 b9       	out	0x05, r24	; 5
     37c:	29 9a       	sbi	0x05, 1	; 5
     37e:	15 b8       	out	0x05, r1	; 5
     380:	08 95       	ret

00000382 <shiftWhole>:
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	e1 e0       	ldi	r30, 0x01	; 1
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	71 e0       	ldi	r23, 0x01	; 1
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	af 01       	movw	r20, r30
     390:	02 2e       	mov	r0, r18
     392:	02 c0       	rjmp	.+4      	; 0x398 <shiftWhole+0x16>
     394:	44 0f       	add	r20, r20
     396:	55 1f       	adc	r21, r21
     398:	0a 94       	dec	r0
     39a:	e2 f7       	brpl	.-8      	; 0x394 <shiftWhole+0x12>
     39c:	48 23       	and	r20, r24
     39e:	97 2f       	mov	r25, r23
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <shiftWhole+0x22>
     3a2:	96 2f       	mov	r25, r22
     3a4:	95 b9       	out	0x05, r25	; 5
     3a6:	29 9a       	sbi	0x05, 1	; 5
     3a8:	65 b9       	out	0x05, r22	; 5
     3aa:	2f 5f       	subi	r18, 0xFF	; 255
     3ac:	3f 4f       	sbci	r19, 0xFF	; 255
     3ae:	28 30       	cpi	r18, 0x08	; 8
     3b0:	31 05       	cpc	r19, r1
     3b2:	69 f7       	brne	.-38     	; 0x38e <shiftWhole+0xc>
     3b4:	84 e0       	ldi	r24, 0x04	; 4
     3b6:	85 b9       	out	0x05, r24	; 5
     3b8:	08 95       	ret

000003ba <clearSR>:
     3ba:	cf 93       	push	r28
     3bc:	c8 e0       	ldi	r28, 0x08	; 8
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	dc df       	rcall	.-72     	; 0x37a <shiftSR>
     3c2:	c1 50       	subi	r28, 0x01	; 1
     3c4:	e1 f7       	brne	.-8      	; 0x3be <clearSR+0x4>
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	85 b9       	out	0x05, r24	; 5
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <d3_clearSR>:
     3ce:	f5 df       	rcall	.-22     	; 0x3ba <clearSR>
     3d0:	f4 df       	rcall	.-24     	; 0x3ba <clearSR>
     3d2:	f3 cf       	rjmp	.-26     	; 0x3ba <clearSR>
     3d4:	08 95       	ret

000003d6 <d3_setRowMatrixColor>:
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	18 2f       	mov	r17, r24
     3e0:	c9 2f       	mov	r28, r25
     3e2:	06 2f       	mov	r16, r22
     3e4:	d4 2f       	mov	r29, r20
     3e6:	f3 df       	rcall	.-26     	; 0x3ce <d3_clearSR>
     3e8:	51 e0       	ldi	r21, 0x01	; 1
     3ea:	01 c0       	rjmp	.+2      	; 0x3ee <d3_setRowMatrixColor+0x18>
     3ec:	55 0f       	add	r21, r21
     3ee:	0a 95       	dec	r16
     3f0:	ea f7       	brpl	.-6      	; 0x3ec <d3_setRowMatrixColor+0x16>
     3f2:	e1 2f       	mov	r30, r17
     3f4:	fc 2f       	mov	r31, r28
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	c0 e0       	ldi	r28, 0x00	; 0
     3fc:	a1 e0       	ldi	r26, 0x01	; 1
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	91 91       	ld	r25, Z+
     402:	95 23       	and	r25, r21
     404:	49 f0       	breq	.+18     	; 0x418 <d3_setRowMatrixColor+0x42>
     406:	cd 01       	movw	r24, r26
     408:	02 2e       	mov	r0, r18
     40a:	02 c0       	rjmp	.+4      	; 0x410 <d3_setRowMatrixColor+0x3a>
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	0a 94       	dec	r0
     412:	e2 f7       	brpl	.-8      	; 0x40c <d3_setRowMatrixColor+0x36>
     414:	c8 2b       	or	r28, r24
     416:	09 c0       	rjmp	.+18     	; 0x42a <d3_setRowMatrixColor+0x54>
     418:	bd 01       	movw	r22, r26
     41a:	02 2e       	mov	r0, r18
     41c:	02 c0       	rjmp	.+4      	; 0x422 <d3_setRowMatrixColor+0x4c>
     41e:	66 0f       	add	r22, r22
     420:	77 1f       	adc	r23, r23
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <d3_setRowMatrixColor+0x48>
     426:	60 95       	com	r22
     428:	c6 23       	and	r28, r22
     42a:	2f 5f       	subi	r18, 0xFF	; 255
     42c:	3f 4f       	sbci	r19, 0xFF	; 255
     42e:	28 30       	cpi	r18, 0x08	; 8
     430:	31 05       	cpc	r19, r1
     432:	31 f7       	brne	.-52     	; 0x400 <d3_setRowMatrixColor+0x2a>
     434:	d1 30       	cpi	r29, 0x01	; 1
     436:	71 f0       	breq	.+28     	; 0x454 <d3_setRowMatrixColor+0x7e>
     438:	18 f0       	brcs	.+6      	; 0x440 <d3_setRowMatrixColor+0x6a>
     43a:	d2 30       	cpi	r29, 0x02	; 2
     43c:	31 f0       	breq	.+12     	; 0x44a <d3_setRowMatrixColor+0x74>
     43e:	0e c0       	rjmp	.+28     	; 0x45c <d3_setRowMatrixColor+0x86>
     440:	bc df       	rcall	.-136    	; 0x3ba <clearSR>
     442:	8c 2f       	mov	r24, r28
     444:	9e df       	rcall	.-196    	; 0x382 <shiftWhole>
     446:	b9 df       	rcall	.-142    	; 0x3ba <clearSR>
     448:	09 c0       	rjmp	.+18     	; 0x45c <d3_setRowMatrixColor+0x86>
     44a:	8c 2f       	mov	r24, r28
     44c:	9a df       	rcall	.-204    	; 0x382 <shiftWhole>
     44e:	b5 df       	rcall	.-150    	; 0x3ba <clearSR>
     450:	b4 df       	rcall	.-152    	; 0x3ba <clearSR>
     452:	04 c0       	rjmp	.+8      	; 0x45c <d3_setRowMatrixColor+0x86>
     454:	b2 df       	rcall	.-156    	; 0x3ba <clearSR>
     456:	b1 df       	rcall	.-158    	; 0x3ba <clearSR>
     458:	8c 2f       	mov	r24, r28
     45a:	93 df       	rcall	.-218    	; 0x382 <shiftWhole>
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	08 95       	ret

00000466 <d3_setMatrixColor>:
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	6c 01       	movw	r12, r24
     476:	f6 2e       	mov	r15, r22
     478:	c0 e0       	ldi	r28, 0x00	; 0
     47a:	d0 e0       	ldi	r29, 0x00	; 0
     47c:	01 e0       	ldi	r16, 0x01	; 1
     47e:	10 e0       	ldi	r17, 0x00	; 0
     480:	98 01       	movw	r18, r16
     482:	0c 2e       	mov	r0, r28
     484:	02 c0       	rjmp	.+4      	; 0x48a <d3_setMatrixColor+0x24>
     486:	22 0f       	add	r18, r18
     488:	33 1f       	adc	r19, r19
     48a:	0a 94       	dec	r0
     48c:	e2 f7       	brpl	.-8      	; 0x486 <d3_setMatrixColor+0x20>
     48e:	28 b9       	out	0x08, r18	; 8
     490:	4f 2d       	mov	r20, r15
     492:	6c 2f       	mov	r22, r28
     494:	c6 01       	movw	r24, r12
     496:	9f df       	rcall	.-194    	; 0x3d6 <d3_setRowMatrixColor>
     498:	8f ea       	ldi	r24, 0xAF	; 175
     49a:	94 e0       	ldi	r25, 0x04	; 4
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <d3_setMatrixColor+0x36>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <d3_setMatrixColor+0x3c>
     4a2:	00 00       	nop
     4a4:	94 df       	rcall	.-216    	; 0x3ce <d3_clearSR>
     4a6:	21 96       	adiw	r28, 0x01	; 1
     4a8:	c8 30       	cpi	r28, 0x08	; 8
     4aa:	d1 05       	cpc	r29, r1
     4ac:	49 f7       	brne	.-46     	; 0x480 <d3_setMatrixColor+0x1a>
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	08 95       	ret

000004be <initExplosions>:
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	9c 01       	movw	r18, r24
     4c8:	92 e1       	ldi	r25, 0x12	; 18
     4ca:	91 50       	subi	r25, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <initExplosions+0xc>
     4ce:	c7 54       	subi	r28, 0x47	; 71
     4d0:	df 4f       	sbci	r29, 0xFF	; 255
     4d2:	18 82       	st	Y, r1
     4d4:	c9 5b       	subi	r28, 0xB9	; 185
     4d6:	d0 40       	sbci	r29, 0x00	; 0
     4d8:	c6 54       	subi	r28, 0x46	; 70
     4da:	df 4f       	sbci	r29, 0xFF	; 255
     4dc:	18 82       	st	Y, r1
     4de:	ca 5b       	subi	r28, 0xBA	; 186
     4e0:	d0 40       	sbci	r29, 0x00	; 0
     4e2:	86 eb       	ldi	r24, 0xB6	; 182
     4e4:	fe 01       	movw	r30, r28
     4e6:	35 96       	adiw	r30, 0x05	; 5
     4e8:	d9 01       	movw	r26, r18
     4ea:	01 90       	ld	r0, Z+
     4ec:	0d 92       	st	X+, r0
     4ee:	8a 95       	dec	r24
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <initExplosions+0x2c>
     4f2:	c9 01       	movw	r24, r18
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <initUSART>:
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	81 f0       	breq	.+32     	; 0x51e <initUSART+0x24>
     4fe:	e1 ec       	ldi	r30, 0xC1	; 193
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	88 61       	ori	r24, 0x18	; 24
     506:	80 83       	st	Z, r24
     508:	e2 ec       	ldi	r30, 0xC2	; 194
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	86 60       	ori	r24, 0x06	; 6
     510:	80 83       	st	Z, r24
     512:	83 e3       	ldi	r24, 0x33	; 51
     514:	80 93 c4 00 	sts	0x00C4, r24
     518:	10 92 c5 00 	sts	0x00C5, r1
     51c:	08 95       	ret
     51e:	e9 ec       	ldi	r30, 0xC9	; 201
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	88 61       	ori	r24, 0x18	; 24
     526:	80 83       	st	Z, r24
     528:	ea ec       	ldi	r30, 0xCA	; 202
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	86 60       	ori	r24, 0x06	; 6
     530:	80 83       	st	Z, r24
     532:	83 e3       	ldi	r24, 0x33	; 51
     534:	80 93 cc 00 	sts	0x00CC, r24
     538:	10 92 cd 00 	sts	0x00CD, r1
     53c:	08 95       	ret

0000053e <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
     53e:	61 30       	cpi	r22, 0x01	; 1
     540:	41 f0       	breq	.+16     	; 0x552 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
     542:	e0 ec       	ldi	r30, 0xC0	; 192
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	90 81       	ld	r25, Z
     548:	95 ff       	sbrs	r25, 5
     54a:	fd cf       	rjmp	.-6      	; 0x546 <USART_Send+0x8>
		UDR0 = sendMe;
     54c:	80 93 c6 00 	sts	0x00C6, r24
     550:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
     552:	e8 ec       	ldi	r30, 0xC8	; 200
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	90 81       	ld	r25, Z
     558:	95 ff       	sbrs	r25, 5
     55a:	fd cf       	rjmp	.-6      	; 0x556 <USART_Send+0x18>
		UDR1 = sendMe;
     55c:	80 93 ce 00 	sts	0x00CE, r24
     560:	08 95       	ret

00000562 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	41 f0       	breq	.+16     	; 0x576 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
     566:	e0 ec       	ldi	r30, 0xC0	; 192
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	88 23       	and	r24, r24
     56e:	ec f7       	brge	.-6      	; 0x56a <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
     570:	80 91 c6 00 	lds	r24, 0x00C6
     574:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
     576:	e8 ec       	ldi	r30, 0xC8	; 200
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	88 23       	and	r24, r24
     57e:	ec f7       	brge	.-6      	; 0x57a <USART_Receive+0x18>
		return UDR1;
     580:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
     584:	08 95       	ret

00000586 <DeathTick>:
			contClock++;
	}
	return state;
}

unsigned char DeathTick() {	
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	2a 97       	sbiw	r28, 0x0a	; 10
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
	if ((displayBlank == 0) && GetBit(explosions.matricies[explosions.displayIndex].m[userMatrix.row], userMatrix.column) == 0) {
     5a2:	80 91 06 01 	lds	r24, 0x0106
     5a6:	81 11       	cpse	r24, r1
     5a8:	41 c0       	rjmp	.+130    	; 0x62c <DeathTick+0xa6>
     5aa:	e2 ee       	ldi	r30, 0xE2	; 226
     5ac:	f1 e0       	ldi	r31, 0x01	; 1
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	01 84       	ldd	r0, Z+9	; 0x09
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DeathTick+0x34>
     5b6:	22 0f       	add	r18, r18
     5b8:	33 1f       	adc	r19, r19
     5ba:	0a 94       	dec	r0
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DeathTick+0x30>
     5be:	90 91 e1 01 	lds	r25, 0x01E1
     5c2:	e0 85       	ldd	r30, Z+8	; 0x08
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	48 e0       	ldi	r20, 0x08	; 8
     5c8:	94 9f       	mul	r25, r20
     5ca:	e0 0d       	add	r30, r0
     5cc:	f1 1d       	adc	r31, r1
     5ce:	11 24       	eor	r1, r1
     5d0:	e4 5d       	subi	r30, 0xD4	; 212
     5d2:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
     5d4:	90 81       	ld	r25, Z
     5d6:	29 23       	and	r18, r25
     5d8:	61 f5       	brne	.+88     	; 0x632 <DeathTick+0xac>
		userMatrix = initSingleUserMatrix(userMatrix);
     5da:	e0 90 e2 01 	lds	r14, 0x01E2
     5de:	f0 90 e3 01 	lds	r15, 0x01E3
     5e2:	00 91 e4 01 	lds	r16, 0x01E4
     5e6:	10 91 e5 01 	lds	r17, 0x01E5
     5ea:	20 91 e6 01 	lds	r18, 0x01E6
     5ee:	30 91 e7 01 	lds	r19, 0x01E7
     5f2:	40 91 e8 01 	lds	r20, 0x01E8
     5f6:	50 91 e9 01 	lds	r21, 0x01E9
     5fa:	60 91 ea 01 	lds	r22, 0x01EA
     5fe:	70 91 eb 01 	lds	r23, 0x01EB
     602:	ce 01       	movw	r24, r28
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	7c de       	rcall	.-776    	; 0x300 <initSingleUserMatrix>
     608:	8a e0       	ldi	r24, 0x0A	; 10
     60a:	fe 01       	movw	r30, r28
     60c:	31 96       	adiw	r30, 0x01	; 1
     60e:	a2 ee       	ldi	r26, 0xE2	; 226
     610:	b1 e0       	ldi	r27, 0x01	; 1
     612:	01 90       	ld	r0, Z+
     614:	0d 92       	st	X+, r0
     616:	8a 95       	dec	r24
     618:	e1 f7       	brne	.-8      	; 0x612 <DeathTick+0x8c>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
     61a:	80 91 c0 00 	lds	r24, 0x00C0
		if (USART_IsSendReady(0)) {
     61e:	85 ff       	sbrs	r24, 5
     620:	07 c0       	rjmp	.+14     	; 0x630 <DeathTick+0xaa>
			USART_Send(0x00, 0);
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	8b df       	rcall	.-234    	; 0x53e <USART_Send>
		}
		return 1;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	03 c0       	rjmp	.+6      	; 0x632 <DeathTick+0xac>
	} else {
		// nothing
		return 0;
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	01 c0       	rjmp	.+2      	; 0x632 <DeathTick+0xac>
	if ((displayBlank == 0) && GetBit(explosions.matricies[explosions.displayIndex].m[userMatrix.row], userMatrix.column) == 0) {
		userMatrix = initSingleUserMatrix(userMatrix);
		if (USART_IsSendReady(0)) {
			USART_Send(0x00, 0);
		}
		return 1;
     630:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		// nothing
		return 0;
	}
}
     632:	2a 96       	adiw	r28, 0x0a	; 10
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	08 95       	ret

0000064c <ExpTick>:
		default:
			break;
	}	
}

Explosions ExpTick(Explosions explosions) {	
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	8c 01       	movw	r16, r24
	// Return if empty (Protection code)
	if (explosions.index == 0) {
     662:	c1 54       	subi	r28, 0x41	; 65
     664:	df 4f       	sbci	r29, 0xFF	; 255
     666:	88 81       	ld	r24, Y
     668:	cf 5b       	subi	r28, 0xBF	; 191
     66a:	d0 40       	sbci	r29, 0x00	; 0
     66c:	81 11       	cpse	r24, r1
     66e:	09 c0       	rjmp	.+18     	; 0x682 <ExpTick+0x36>
		return explosions;
     670:	86 eb       	ldi	r24, 0xB6	; 182
     672:	fe 01       	movw	r30, r28
     674:	3b 96       	adiw	r30, 0x0b	; 11
     676:	d8 01       	movw	r26, r16
     678:	01 90       	ld	r0, Z+
     67a:	0d 92       	st	X+, r0
     67c:	8a 95       	dec	r24
     67e:	e1 f7       	brne	.-8      	; 0x678 <ExpTick+0x2c>
     680:	a6 c0       	rjmp	.+332    	; 0x7ce <ExpTick+0x182>
	} 
	
	if (explosions.displayIndex >= explosions.index) {
     682:	c0 54       	subi	r28, 0x40	; 64
     684:	df 4f       	sbci	r29, 0xFF	; 255
     686:	98 81       	ld	r25, Y
     688:	c0 5c       	subi	r28, 0xC0	; 192
     68a:	d0 40       	sbci	r29, 0x00	; 0
     68c:	98 17       	cp	r25, r24
     68e:	28 f0       	brcs	.+10     	; 0x69a <ExpTick+0x4e>
		explosions.displayIndex = 0;
     690:	c0 54       	subi	r28, 0x40	; 64
     692:	df 4f       	sbci	r29, 0xFF	; 255
     694:	18 82       	st	Y, r1
     696:	c0 5c       	subi	r28, 0xC0	; 192
     698:	d0 40       	sbci	r29, 0x00	; 0
	}
	
	if (displayBlank == 0)
     69a:	80 91 06 01 	lds	r24, 0x0106
     69e:	81 11       	cpse	r24, r1
     6a0:	12 c0       	rjmp	.+36     	; 0x6c6 <ExpTick+0x7a>
		d3_setMatrixColor(explosions.matricies[explosions.displayIndex].m, RED);
     6a2:	c0 54       	subi	r28, 0x40	; 64
     6a4:	df 4f       	sbci	r29, 0xFF	; 255
     6a6:	88 81       	ld	r24, Y
     6a8:	c0 5c       	subi	r28, 0xC0	; 192
     6aa:	d0 40       	sbci	r29, 0x00	; 0
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	2b e0       	ldi	r18, 0x0B	; 11
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	2c 0f       	add	r18, r28
     6b4:	3d 1f       	adc	r19, r29
     6b6:	48 e0       	ldi	r20, 0x08	; 8
     6b8:	84 9f       	mul	r24, r20
     6ba:	20 0d       	add	r18, r0
     6bc:	31 1d       	adc	r19, r1
     6be:	11 24       	eor	r1, r1
     6c0:	c9 01       	movw	r24, r18
     6c2:	d1 de       	rcall	.-606    	; 0x466 <d3_setMatrixColor>
     6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <ExpTick+0x88>
	else if (displayBlank == 1)
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	09 f0       	breq	.+2      	; 0x6cc <ExpTick+0x80>
     6ca:	79 c0       	rjmp	.+242    	; 0x7be <ExpTick+0x172>
		d3_setMatrixColor(blankMatrix.m, RED);
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	8c e1       	ldi	r24, 0x1C	; 28
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	c9 de       	rcall	.-622    	; 0x466 <d3_setMatrixColor>
	
	if (displayBlank == 0 && contClock >= (explosions.timeDuration[explosions.displayIndex] * 10)) {
     6d4:	80 91 06 01 	lds	r24, 0x0106
     6d8:	81 11       	cpse	r24, r1
     6da:	3c c0       	rjmp	.+120    	; 0x754 <ExpTick+0x108>
     6dc:	c0 54       	subi	r28, 0x40	; 64
     6de:	df 4f       	sbci	r29, 0xFF	; 255
     6e0:	88 81       	ld	r24, Y
     6e2:	c0 5c       	subi	r28, 0xC0	; 192
     6e4:	d0 40       	sbci	r29, 0x00	; 0
     6e6:	ed ea       	ldi	r30, 0xAD	; 173
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	ec 0f       	add	r30, r28
     6ec:	fd 1f       	adc	r31, r29
     6ee:	e8 0f       	add	r30, r24
     6f0:	f1 1d       	adc	r31, r1
     6f2:	20 81       	ld	r18, Z
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	a9 01       	movw	r20, r18
     6f8:	44 0f       	add	r20, r20
     6fa:	55 1f       	adc	r21, r21
     6fc:	22 0f       	add	r18, r18
     6fe:	33 1f       	adc	r19, r19
     700:	22 0f       	add	r18, r18
     702:	33 1f       	adc	r19, r19
     704:	22 0f       	add	r18, r18
     706:	33 1f       	adc	r19, r19
     708:	42 0f       	add	r20, r18
     70a:	53 1f       	adc	r21, r19
     70c:	05 2e       	mov	r0, r21
     70e:	00 0c       	add	r0, r0
     710:	66 0b       	sbc	r22, r22
     712:	77 0b       	sbc	r23, r23
     714:	c0 90 07 01 	lds	r12, 0x0107
     718:	d0 90 08 01 	lds	r13, 0x0108
     71c:	e0 90 09 01 	lds	r14, 0x0109
     720:	f0 90 0a 01 	lds	r15, 0x010A
     724:	c4 16       	cp	r12, r20
     726:	d5 06       	cpc	r13, r21
     728:	e6 06       	cpc	r14, r22
     72a:	f7 06       	cpc	r15, r23
     72c:	08 f4       	brcc	.+2      	; 0x730 <ExpTick+0xe4>
     72e:	47 c0       	rjmp	.+142    	; 0x7be <ExpTick+0x172>
		displayBlank = 1;
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	90 93 06 01 	sts	0x0106, r25
		explosions.displayIndex++;
     736:	8f 5f       	subi	r24, 0xFF	; 255
     738:	c0 54       	subi	r28, 0x40	; 64
     73a:	df 4f       	sbci	r29, 0xFF	; 255
     73c:	88 83       	st	Y, r24
     73e:	c0 5c       	subi	r28, 0xC0	; 192
     740:	d0 40       	sbci	r29, 0x00	; 0
		contClock = 0;
     742:	10 92 07 01 	sts	0x0107, r1
     746:	10 92 08 01 	sts	0x0108, r1
     74a:	10 92 09 01 	sts	0x0109, r1
     74e:	10 92 0a 01 	sts	0x010A, r1
     752:	35 c0       	rjmp	.+106    	; 0x7be <ExpTick+0x172>
	} else if (displayBlank == 1 && contClock >= (explosions.timeBetween[explosions.displayIndex] * 10)) {
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	99 f5       	brne	.+102    	; 0x7be <ExpTick+0x172>
     758:	c0 54       	subi	r28, 0x40	; 64
     75a:	df 4f       	sbci	r29, 0xFF	; 255
     75c:	88 81       	ld	r24, Y
     75e:	c0 5c       	subi	r28, 0xC0	; 192
     760:	d0 40       	sbci	r29, 0x00	; 0
     762:	eb e9       	ldi	r30, 0x9B	; 155
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	ec 0f       	add	r30, r28
     768:	fd 1f       	adc	r31, r29
     76a:	e8 0f       	add	r30, r24
     76c:	f1 1d       	adc	r31, r1
     76e:	20 81       	ld	r18, Z
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	c9 01       	movw	r24, r18
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	22 0f       	add	r18, r18
     77a:	33 1f       	adc	r19, r19
     77c:	22 0f       	add	r18, r18
     77e:	33 1f       	adc	r19, r19
     780:	22 0f       	add	r18, r18
     782:	33 1f       	adc	r19, r19
     784:	82 0f       	add	r24, r18
     786:	93 1f       	adc	r25, r19
     788:	09 2e       	mov	r0, r25
     78a:	00 0c       	add	r0, r0
     78c:	aa 0b       	sbc	r26, r26
     78e:	bb 0b       	sbc	r27, r27
     790:	40 91 07 01 	lds	r20, 0x0107
     794:	50 91 08 01 	lds	r21, 0x0108
     798:	60 91 09 01 	lds	r22, 0x0109
     79c:	70 91 0a 01 	lds	r23, 0x010A
     7a0:	48 17       	cp	r20, r24
     7a2:	59 07       	cpc	r21, r25
     7a4:	6a 07       	cpc	r22, r26
     7a6:	7b 07       	cpc	r23, r27
     7a8:	50 f0       	brcs	.+20     	; 0x7be <ExpTick+0x172>
		displayBlank = 0;
     7aa:	10 92 06 01 	sts	0x0106, r1
		contClock = 0;
     7ae:	10 92 07 01 	sts	0x0107, r1
     7b2:	10 92 08 01 	sts	0x0108, r1
     7b6:	10 92 09 01 	sts	0x0109, r1
     7ba:	10 92 0a 01 	sts	0x010A, r1
	}
	
	return explosions;
     7be:	86 eb       	ldi	r24, 0xB6	; 182
     7c0:	fe 01       	movw	r30, r28
     7c2:	3b 96       	adiw	r30, 0x0b	; 11
     7c4:	d8 01       	movw	r26, r16
     7c6:	01 90       	ld	r0, Z+
     7c8:	0d 92       	st	X+, r0
     7ca:	8a 95       	dec	r24
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <ExpTick+0x17a>
     7ce:	c8 01       	movw	r24, r16
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	df 90       	pop	r13
     7de:	cf 90       	pop	r12
     7e0:	08 95       	ret

000007e2 <LCD_Tick>:
		// nothing
		return 0;
	}
}

void LCD_Tick() {
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	c0 5c       	subi	r28, 0xC0	; 192
     7f4:	d1 09       	sbc	r29, r1
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
	switch (LCD_State) {
     800:	80 91 ec 01 	lds	r24, 0x01EC
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	51 f0       	breq	.+20     	; 0x81c <LCD_Tick+0x3a>
     808:	18 f0       	brcs	.+6      	; 0x810 <LCD_Tick+0x2e>
     80a:	82 30       	cpi	r24, 0x02	; 2
     80c:	81 f1       	breq	.+96     	; 0x86e <LCD_Tick+0x8c>
     80e:	42 c0       	rjmp	.+132    	; 0x894 <LCD_Tick+0xb2>
		case LCD_SMStart:
			LCD_State = LCD_Wait;
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	80 93 ec 01 	sts	0x01EC, r24
			displayLCD = 0;
     816:	10 92 fd 01 	sts	0x01FD, r1
			break;
     81a:	3c c0       	rjmp	.+120    	; 0x894 <LCD_Tick+0xb2>
		
		case LCD_Wait:
			if (displayLCD) {
     81c:	80 91 fd 01 	lds	r24, 0x01FD
     820:	88 23       	and	r24, r24
     822:	09 f4       	brne	.+2      	; 0x826 <LCD_Tick+0x44>
     824:	68 c0       	rjmp	.+208    	; 0x8f6 <LCD_Tick+0x114>
				LCD_State = LCD_Display;
     826:	82 e0       	ldi	r24, 0x02	; 2
     828:	80 93 ec 01 	sts	0x01EC, r24
				userMatrix = initSingleUserMatrix(userMatrix);
     82c:	e0 90 e2 01 	lds	r14, 0x01E2
     830:	f0 90 e3 01 	lds	r15, 0x01E3
     834:	00 91 e4 01 	lds	r16, 0x01E4
     838:	10 91 e5 01 	lds	r17, 0x01E5
     83c:	20 91 e6 01 	lds	r18, 0x01E6
     840:	30 91 e7 01 	lds	r19, 0x01E7
     844:	40 91 e8 01 	lds	r20, 0x01E8
     848:	50 91 e9 01 	lds	r21, 0x01E9
     84c:	60 91 ea 01 	lds	r22, 0x01EA
     850:	70 91 eb 01 	lds	r23, 0x01EB
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	53 dd       	rcall	.-1370   	; 0x300 <initSingleUserMatrix>
     85a:	8a e0       	ldi	r24, 0x0A	; 10
     85c:	fe 01       	movw	r30, r28
     85e:	31 96       	adiw	r30, 0x01	; 1
     860:	a2 ee       	ldi	r26, 0xE2	; 226
     862:	b1 e0       	ldi	r27, 0x01	; 1
     864:	01 90       	ld	r0, Z+
     866:	0d 92       	st	X+, r0
     868:	8a 95       	dec	r24
     86a:	e1 f7       	brne	.-8      	; 0x864 <LCD_Tick+0x82>
     86c:	13 c0       	rjmp	.+38     	; 0x894 <LCD_Tick+0xb2>
				LCD_State = LCD_Wait;
			}
			break;
		
		case LCD_Display:
			if (displayLCD) {
     86e:	80 91 fd 01 	lds	r24, 0x01FD
     872:	81 11       	cpse	r24, r1
     874:	13 c0       	rjmp	.+38     	; 0x89c <LCD_Tick+0xba>
				LCD_State = LCD_Display;
				} else if (!displayLCD) {
				LCD_State = LCD_Wait; 
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	80 93 ec 01 	sts	0x01EC, r24
				d3_setMatrixColor(blankMatrix.m, RED);
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	8c e1       	ldi	r24, 0x1C	; 28
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	f1 dd       	rcall	.-1054   	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, GREEN);
     884:	62 e0       	ldi	r22, 0x02	; 2
     886:	8c e1       	ldi	r24, 0x1C	; 28
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	ed dd       	rcall	.-1062   	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, BLUE);
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	8c e1       	ldi	r24, 0x1C	; 28
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	e9 dd       	rcall	.-1070   	; 0x466 <d3_setMatrixColor>
		
		default:
			break;
	}
	
	switch (LCD_State) {
     894:	80 91 ec 01 	lds	r24, 0x01EC
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	69 f5       	brne	.+90     	; 0x8f6 <LCD_Tick+0x114>
		
		case LCD_Wait:
			break;
		
		case LCD_Display:
			explosions = ExpTick(explosions);
     89c:	8d b7       	in	r24, 0x3d	; 61
     89e:	9e b7       	in	r25, 0x3e	; 62
     8a0:	86 5b       	subi	r24, 0xB6	; 182
     8a2:	91 09       	sbc	r25, r1
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	9e bf       	out	0x3e, r25	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	8d bf       	out	0x3d, r24	; 61
     8ae:	ad b7       	in	r26, 0x3d	; 61
     8b0:	be b7       	in	r27, 0x3e	; 62
     8b2:	11 96       	adiw	r26, 0x01	; 1
     8b4:	86 eb       	ldi	r24, 0xB6	; 182
     8b6:	ec e2       	ldi	r30, 0x2C	; 44
     8b8:	f1 e0       	ldi	r31, 0x01	; 1
     8ba:	01 90       	ld	r0, Z+
     8bc:	0d 92       	st	X+, r0
     8be:	8a 95       	dec	r24
     8c0:	e1 f7       	brne	.-8      	; 0x8ba <LCD_Tick+0xd8>
     8c2:	ce 01       	movw	r24, r28
     8c4:	0b 96       	adiw	r24, 0x0b	; 11
     8c6:	c2 de       	rcall	.-636    	; 0x64c <ExpTick>
     8c8:	86 eb       	ldi	r24, 0xB6	; 182
     8ca:	fe 01       	movw	r30, r28
     8cc:	3b 96       	adiw	r30, 0x0b	; 11
     8ce:	ac e2       	ldi	r26, 0x2C	; 44
     8d0:	b1 e0       	ldi	r27, 0x01	; 1
     8d2:	01 90       	ld	r0, Z+
     8d4:	0d 92       	st	X+, r0
     8d6:	8a 95       	dec	r24
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <LCD_Tick+0xf0>
			DeathTick();
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	50 de       	rcall	.-864    	; 0x586 <DeathTick>
			d3_setMatrixColor(userMatrix.m, GREEN);
     8e6:	62 e0       	ldi	r22, 0x02	; 2
     8e8:	82 ee       	ldi	r24, 0xE2	; 226
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	bc dd       	rcall	.-1160   	; 0x466 <d3_setMatrixColor>
			d3_setMatrixColor(wallMatrix.m, BLUE);
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	8d ee       	ldi	r24, 0xED	; 237
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	b8 dd       	rcall	.-1168   	; 0x466 <d3_setMatrixColor>
			break;
		
		default:
			break;
	}	
}
     8f6:	c0 54       	subi	r28, 0x40	; 64
     8f8:	df 4f       	sbci	r29, 0xFF	; 255
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	08 95       	ret

00000912 <main>:

enum LCD_States {LCD_SMStart, LCD_Wait, LCD_Display} LCD_State;
void LCD_Tick();


int main(void) {
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	ca 56       	subi	r28, 0x6A	; 106
     91c:	d9 41       	sbci	r29, 0x19	; 25
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00;
     928:	8f ef       	ldi	r24, 0xFF	; 255
     92a:	84 b9       	out	0x04, r24	; 4
     92c:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
     92e:	8a b9       	out	0x0a, r24	; 10
     930:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xFF; PORTC = 0x00;
     932:	87 b9       	out	0x07, r24	; 7
     934:	18 b8       	out	0x08, r1	; 8
	
	initUSART(0);
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	e0 dd       	rcall	.-1088   	; 0x4fa <initUSART>
	
	initTasks();
     93a:	f4 db       	rcall	.-2072   	; 0x124 <initTasks>
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	a0 e0       	ldi	r26, 0x00	; 0
     942:	b0 e0       	ldi	r27, 0x00	; 0
     944:	80 93 00 01 	sts	0x0100, r24
     948:	90 93 01 01 	sts	0x0101, r25
     94c:	a0 93 02 01 	sts	0x0102, r26
     950:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
     954:	80 93 0b 01 	sts	0x010B, r24
     958:	90 93 0c 01 	sts	0x010C, r25
     95c:	a0 93 0d 01 	sts	0x010D, r26
     960:	b0 93 0e 01 	sts	0x010E, r27
	
	TimerSet(1);
	TimerOn();
     964:	f4 db       	rcall	.-2072   	; 0x14e <TimerOn>
	
	LCD_State = LCD_SMStart;
     966:	10 92 ec 01 	sts	0x01EC, r1
	
	blankMatrix = clearSingleMatrix(blankMatrix);
     96a:	20 91 1c 01 	lds	r18, 0x011C
     96e:	30 91 1d 01 	lds	r19, 0x011D
     972:	40 91 1e 01 	lds	r20, 0x011E
     976:	50 91 1f 01 	lds	r21, 0x011F
     97a:	60 91 20 01 	lds	r22, 0x0120
     97e:	70 91 21 01 	lds	r23, 0x0121
     982:	80 91 22 01 	lds	r24, 0x0122
     986:	90 91 23 01 	lds	r25, 0x0123
     98a:	84 dc       	rcall	.-1784   	; 0x294 <clearSingleMatrix>
     98c:	ec e1       	ldi	r30, 0x1C	; 28
     98e:	f1 e0       	ldi	r31, 0x01	; 1
     990:	20 83       	st	Z, r18
     992:	31 83       	std	Z+1, r19	; 0x01
     994:	42 83       	std	Z+2, r20	; 0x02
     996:	53 83       	std	Z+3, r21	; 0x03
     998:	64 83       	std	Z+4, r22	; 0x04
     99a:	75 83       	std	Z+5, r23	; 0x05
     99c:	86 83       	std	Z+6, r24	; 0x06
     99e:	97 83       	std	Z+7, r25	; 0x07
	
	explosions = initExplosions(explosions);
     9a0:	8d b7       	in	r24, 0x3d	; 61
     9a2:	9e b7       	in	r25, 0x3e	; 62
     9a4:	86 5b       	subi	r24, 0xB6	; 182
     9a6:	91 09       	sbc	r25, r1
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	9e bf       	out	0x3e, r25	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	8d bf       	out	0x3d, r24	; 61
     9b2:	ad b7       	in	r26, 0x3d	; 61
     9b4:	be b7       	in	r27, 0x3e	; 62
     9b6:	11 96       	adiw	r26, 0x01	; 1
     9b8:	86 eb       	ldi	r24, 0xB6	; 182
     9ba:	ec e2       	ldi	r30, 0x2C	; 44
     9bc:	f1 e0       	ldi	r31, 0x01	; 1
     9be:	01 90       	ld	r0, Z+
     9c0:	0d 92       	st	X+, r0
     9c2:	8a 95       	dec	r24
     9c4:	e1 f7       	brne	.-8      	; 0x9be <main+0xac>
     9c6:	ce 01       	movw	r24, r28
     9c8:	8b 54       	subi	r24, 0x4B	; 75
     9ca:	97 4e       	sbci	r25, 0xE7	; 231
     9cc:	78 dd       	rcall	.-1296   	; 0x4be <initExplosions>
     9ce:	86 eb       	ldi	r24, 0xB6	; 182
     9d0:	fe 01       	movw	r30, r28
     9d2:	eb 54       	subi	r30, 0x4B	; 75
     9d4:	f7 4e       	sbci	r31, 0xE7	; 231
     9d6:	ac e2       	ldi	r26, 0x2C	; 44
     9d8:	b1 e0       	ldi	r27, 0x01	; 1
     9da:	01 90       	ld	r0, Z+
     9dc:	0d 92       	st	X+, r0
     9de:	8a 95       	dec	r24
     9e0:	e1 f7       	brne	.-8      	; 0x9da <main+0xc8>
	
	matrix = clearSingleMatrix(matrix);
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	20 91 24 01 	lds	r18, 0x0124
     9f0:	30 91 25 01 	lds	r19, 0x0125
     9f4:	40 91 26 01 	lds	r20, 0x0126
     9f8:	50 91 27 01 	lds	r21, 0x0127
     9fc:	60 91 28 01 	lds	r22, 0x0128
     a00:	70 91 29 01 	lds	r23, 0x0129
     a04:	80 91 2a 01 	lds	r24, 0x012A
     a08:	90 91 2b 01 	lds	r25, 0x012B
     a0c:	43 dc       	rcall	.-1914   	; 0x294 <clearSingleMatrix>
     a0e:	04 e2       	ldi	r16, 0x24	; 36
     a10:	11 e0       	ldi	r17, 0x01	; 1
     a12:	f8 01       	movw	r30, r16
     a14:	20 83       	st	Z, r18
     a16:	42 83       	std	Z+2, r20	; 0x02
     a18:	53 83       	std	Z+3, r21	; 0x03
     a1a:	64 83       	std	Z+4, r22	; 0x04
     a1c:	75 83       	std	Z+5, r23	; 0x05
     a1e:	97 83       	std	Z+7, r25	; 0x07
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
     a20:	3e 7f       	andi	r19, 0xFE	; 254
	matrix.m[1] = SetBit(matrix.m[1], 0, 0);
     a22:	31 83       	std	Z+1, r19	; 0x01
     a24:	8e 7f       	andi	r24, 0xFE	; 254
	matrix.m[6] = SetBit(matrix.m[6], 0, 0);
     a26:	86 83       	std	Z+6, r24	; 0x06
     a28:	86 eb       	ldi	r24, 0xB6	; 182
     a2a:	ec e2       	ldi	r30, 0x2C	; 44
     a2c:	f1 e0       	ldi	r31, 0x01	; 1
     a2e:	de 01       	movw	r26, r28
     a30:	a9 58       	subi	r26, 0x89	; 137
     a32:	b8 4e       	sbci	r27, 0xE8	; 232
     a34:	01 90       	ld	r0, Z+
     a36:	0d 92       	st	X+, r0
     a38:	8a 95       	dec	r24
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <main+0x122>
     a3c:	0f 2e       	mov	r0, r31
     a3e:	f0 ee       	ldi	r31, 0xE0	; 224
     a40:	cf 2e       	mov	r12, r31
     a42:	f1 e0       	ldi	r31, 0x01	; 1
     a44:	df 2e       	mov	r13, r31
     a46:	f0 2d       	mov	r31, r0
     a48:	d6 01       	movw	r26, r12
     a4a:	8c 91       	ld	r24, X
     a4c:	98 e0       	ldi	r25, 0x08	; 8
     a4e:	f8 01       	movw	r30, r16
     a50:	de 01       	movw	r26, r28
     a52:	a3 55       	subi	r26, 0x53	; 83
     a54:	b7 4e       	sbci	r27, 0xE7	; 231
     a56:	01 90       	ld	r0, Z+
     a58:	0d 92       	st	X+, r0
     a5a:	9a 95       	dec	r25
     a5c:	e1 f7       	brne	.-8      	; 0xa56 <main+0x144>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     a5e:	a7 e7       	ldi	r26, 0x77	; 119
     a60:	b7 e1       	ldi	r27, 0x17	; 23
     a62:	ac 0f       	add	r26, r28
     a64:	bd 1f       	adc	r27, r29
     a66:	e8 e0       	ldi	r30, 0x08	; 8
     a68:	8e 9f       	mul	r24, r30
     a6a:	a0 0d       	add	r26, r0
     a6c:	b1 1d       	adc	r27, r1
     a6e:	11 24       	eor	r1, r1
     a70:	98 e0       	ldi	r25, 0x08	; 8
     a72:	fe 01       	movw	r30, r28
     a74:	e3 55       	subi	r30, 0x53	; 83
     a76:	f7 4e       	sbci	r31, 0xE7	; 231
     a78:	01 90       	ld	r0, Z+
     a7a:	0d 92       	st	X+, r0
     a7c:	9a 95       	dec	r25
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <main+0x166>
	explosions.timeBetween[explosions.index] = a;
     a80:	27 e7       	ldi	r18, 0x77	; 119
     a82:	37 e1       	ldi	r19, 0x17	; 23
     a84:	2c 0f       	add	r18, r28
     a86:	3d 1f       	adc	r19, r29
     a88:	28 0f       	add	r18, r24
     a8a:	31 1d       	adc	r19, r1
     a8c:	f9 01       	movw	r30, r18
     a8e:	e0 57       	subi	r30, 0x70	; 112
     a90:	ff 4f       	sbci	r31, 0xFF	; 255
     a92:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     a94:	72 96       	adiw	r30, 0x12	; 18
     a96:	68 94       	set
     a98:	ff 24       	eor	r15, r15
     a9a:	f1 f8       	bld	r15, 1
     a9c:	f0 82       	st	Z, r15
	explosions.index++;
     a9e:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     aa0:	c5 5d       	subi	r28, 0xD5	; 213
     aa2:	d7 4e       	sbci	r29, 0xE7	; 231
     aa4:	88 83       	st	Y, r24
     aa6:	cb 52       	subi	r28, 0x2B	; 43
     aa8:	d8 41       	sbci	r29, 0x18	; 24
     aaa:	96 eb       	ldi	r25, 0xB6	; 182
     aac:	fe 01       	movw	r30, r28
     aae:	e9 58       	subi	r30, 0x89	; 137
     ab0:	f8 4e       	sbci	r31, 0xE8	; 232
     ab2:	de 01       	movw	r26, r28
     ab4:	af 53       	subi	r26, 0x3F	; 63
     ab6:	b9 4e       	sbci	r27, 0xE9	; 233
     ab8:	01 90       	ld	r0, Z+
     aba:	0d 92       	st	X+, r0
     abc:	9a 95       	dec	r25
     abe:	e1 f7       	brne	.-8      	; 0xab8 <main+0x1a6>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     ac0:	cb 58       	subi	r28, 0x8B	; 139
     ac2:	d8 4e       	sbci	r29, 0xE8	; 232
     ac4:	88 83       	st	Y, r24
     ac6:	c5 57       	subi	r28, 0x75	; 117
     ac8:	d7 41       	sbci	r29, 0x17	; 23
     aca:	86 eb       	ldi	r24, 0xB6	; 182
     acc:	fe 01       	movw	r30, r28
     ace:	ef 53       	subi	r30, 0x3F	; 63
     ad0:	f9 4e       	sbci	r31, 0xE9	; 233
     ad2:	ac e2       	ldi	r26, 0x2C	; 44
     ad4:	b1 e0       	ldi	r27, 0x01	; 1
     ad6:	01 90       	ld	r0, Z+
     ad8:	0d 92       	st	X+, r0
     ada:	8a 95       	dec	r24
     adc:	e1 f7       	brne	.-8      	; 0xad6 <main+0x1c4>
	
	matrix = clearSingleMatrix(matrix);
     ade:	20 91 24 01 	lds	r18, 0x0124
     ae2:	30 91 25 01 	lds	r19, 0x0125
     ae6:	40 91 26 01 	lds	r20, 0x0126
     aea:	50 91 27 01 	lds	r21, 0x0127
     aee:	60 91 28 01 	lds	r22, 0x0128
     af2:	70 91 29 01 	lds	r23, 0x0129
     af6:	80 91 2a 01 	lds	r24, 0x012A
     afa:	90 91 2b 01 	lds	r25, 0x012B
     afe:	ca db       	rcall	.-2156   	; 0x294 <clearSingleMatrix>
     b00:	d8 01       	movw	r26, r16
     b02:	2c 93       	st	X, r18
     b04:	12 96       	adiw	r26, 0x02	; 2
     b06:	4c 93       	st	X, r20
     b08:	12 97       	sbiw	r26, 0x02	; 2
     b0a:	13 96       	adiw	r26, 0x03	; 3
     b0c:	5c 93       	st	X, r21
     b0e:	13 97       	sbiw	r26, 0x03	; 3
     b10:	14 96       	adiw	r26, 0x04	; 4
     b12:	6c 93       	st	X, r22
     b14:	14 97       	sbiw	r26, 0x04	; 4
     b16:	15 96       	adiw	r26, 0x05	; 5
     b18:	7c 93       	st	X, r23
     b1a:	15 97       	sbiw	r26, 0x05	; 5
     b1c:	17 96       	adiw	r26, 0x07	; 7
     b1e:	9c 93       	st	X, r25
     b20:	17 97       	sbiw	r26, 0x07	; 7
     b22:	3d 7f       	andi	r19, 0xFD	; 253
	matrix.m[1] = SetBit(matrix.m[1], 1, 0);
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	3c 93       	st	X, r19
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	8d 7f       	andi	r24, 0xFD	; 253
	matrix.m[6] = SetBit(matrix.m[6], 1, 0);
     b2c:	16 96       	adiw	r26, 0x06	; 6
     b2e:	8c 93       	st	X, r24
     b30:	86 eb       	ldi	r24, 0xB6	; 182
     b32:	ec e2       	ldi	r30, 0x2C	; 44
     b34:	f1 e0       	ldi	r31, 0x01	; 1
     b36:	de 01       	movw	r26, r28
     b38:	a5 5f       	subi	r26, 0xF5	; 245
     b3a:	b9 4e       	sbci	r27, 0xE9	; 233
     b3c:	01 90       	ld	r0, Z+
     b3e:	0d 92       	st	X+, r0
     b40:	8a 95       	dec	r24
     b42:	e1 f7       	brne	.-8      	; 0xb3c <main+0x22a>
     b44:	f6 01       	movw	r30, r12
     b46:	80 81       	ld	r24, Z
     b48:	98 e0       	ldi	r25, 0x08	; 8
     b4a:	f8 01       	movw	r30, r16
     b4c:	de 01       	movw	r26, r28
     b4e:	ab 55       	subi	r26, 0x5B	; 91
     b50:	b7 4e       	sbci	r27, 0xE7	; 231
     b52:	01 90       	ld	r0, Z+
     b54:	0d 92       	st	X+, r0
     b56:	9a 95       	dec	r25
     b58:	e1 f7       	brne	.-8      	; 0xb52 <main+0x240>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     b5a:	ab e0       	ldi	r26, 0x0B	; 11
     b5c:	b6 e1       	ldi	r27, 0x16	; 22
     b5e:	ac 0f       	add	r26, r28
     b60:	bd 1f       	adc	r27, r29
     b62:	f8 e0       	ldi	r31, 0x08	; 8
     b64:	8f 9f       	mul	r24, r31
     b66:	a0 0d       	add	r26, r0
     b68:	b1 1d       	adc	r27, r1
     b6a:	11 24       	eor	r1, r1
     b6c:	98 e0       	ldi	r25, 0x08	; 8
     b6e:	fe 01       	movw	r30, r28
     b70:	eb 55       	subi	r30, 0x5B	; 91
     b72:	f7 4e       	sbci	r31, 0xE7	; 231
     b74:	01 90       	ld	r0, Z+
     b76:	0d 92       	st	X+, r0
     b78:	9a 95       	dec	r25
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <main+0x262>
	explosions.timeBetween[explosions.index] = a;
     b7c:	2b e0       	ldi	r18, 0x0B	; 11
     b7e:	36 e1       	ldi	r19, 0x16	; 22
     b80:	2c 0f       	add	r18, r28
     b82:	3d 1f       	adc	r19, r29
     b84:	28 0f       	add	r18, r24
     b86:	31 1d       	adc	r19, r1
     b88:	f9 01       	movw	r30, r18
     b8a:	e0 57       	subi	r30, 0x70	; 112
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     b90:	72 96       	adiw	r30, 0x12	; 18
     b92:	f0 82       	st	Z, r15
	explosions.index++;
     b94:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     b96:	c1 54       	subi	r28, 0x41	; 65
     b98:	d9 4e       	sbci	r29, 0xE9	; 233
     b9a:	88 83       	st	Y, r24
     b9c:	cf 5b       	subi	r28, 0xBF	; 191
     b9e:	d6 41       	sbci	r29, 0x16	; 22
     ba0:	96 eb       	ldi	r25, 0xB6	; 182
     ba2:	fe 01       	movw	r30, r28
     ba4:	e5 5f       	subi	r30, 0xF5	; 245
     ba6:	f9 4e       	sbci	r31, 0xE9	; 233
     ba8:	de 01       	movw	r26, r28
     baa:	ab 5a       	subi	r26, 0xAB	; 171
     bac:	ba 4e       	sbci	r27, 0xEA	; 234
     bae:	01 90       	ld	r0, Z+
     bb0:	0d 92       	st	X+, r0
     bb2:	9a 95       	dec	r25
     bb4:	e1 f7       	brne	.-8      	; 0xbae <main+0x29c>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     bb6:	c7 5f       	subi	r28, 0xF7	; 247
     bb8:	d9 4e       	sbci	r29, 0xE9	; 233
     bba:	88 83       	st	Y, r24
     bbc:	c9 50       	subi	r28, 0x09	; 9
     bbe:	d6 41       	sbci	r29, 0x16	; 22
     bc0:	86 eb       	ldi	r24, 0xB6	; 182
     bc2:	fe 01       	movw	r30, r28
     bc4:	eb 5a       	subi	r30, 0xAB	; 171
     bc6:	fa 4e       	sbci	r31, 0xEA	; 234
     bc8:	ac e2       	ldi	r26, 0x2C	; 44
     bca:	b1 e0       	ldi	r27, 0x01	; 1
     bcc:	01 90       	ld	r0, Z+
     bce:	0d 92       	st	X+, r0
     bd0:	8a 95       	dec	r24
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <main+0x2ba>
	
	matrix = clearSingleMatrix(matrix);
     bd4:	20 91 24 01 	lds	r18, 0x0124
     bd8:	30 91 25 01 	lds	r19, 0x0125
     bdc:	40 91 26 01 	lds	r20, 0x0126
     be0:	50 91 27 01 	lds	r21, 0x0127
     be4:	60 91 28 01 	lds	r22, 0x0128
     be8:	70 91 29 01 	lds	r23, 0x0129
     bec:	80 91 2a 01 	lds	r24, 0x012A
     bf0:	90 91 2b 01 	lds	r25, 0x012B
     bf4:	4f db       	rcall	.-2402   	; 0x294 <clearSingleMatrix>
     bf6:	d8 01       	movw	r26, r16
     bf8:	2c 93       	st	X, r18
     bfa:	12 96       	adiw	r26, 0x02	; 2
     bfc:	4c 93       	st	X, r20
     bfe:	12 97       	sbiw	r26, 0x02	; 2
     c00:	13 96       	adiw	r26, 0x03	; 3
     c02:	5c 93       	st	X, r21
     c04:	13 97       	sbiw	r26, 0x03	; 3
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	6c 93       	st	X, r22
     c0a:	14 97       	sbiw	r26, 0x04	; 4
     c0c:	15 96       	adiw	r26, 0x05	; 5
     c0e:	7c 93       	st	X, r23
     c10:	15 97       	sbiw	r26, 0x05	; 5
     c12:	17 96       	adiw	r26, 0x07	; 7
     c14:	9c 93       	st	X, r25
     c16:	17 97       	sbiw	r26, 0x07	; 7
     c18:	3b 7f       	andi	r19, 0xFB	; 251
	matrix.m[1] = SetBit(matrix.m[1], 2, 0);
     c1a:	11 96       	adiw	r26, 0x01	; 1
     c1c:	3c 93       	st	X, r19
     c1e:	11 97       	sbiw	r26, 0x01	; 1
     c20:	8b 7f       	andi	r24, 0xFB	; 251
	matrix.m[6] = SetBit(matrix.m[6], 2, 0);
     c22:	16 96       	adiw	r26, 0x06	; 6
     c24:	8c 93       	st	X, r24
     c26:	86 eb       	ldi	r24, 0xB6	; 182
     c28:	ec e2       	ldi	r30, 0x2C	; 44
     c2a:	f1 e0       	ldi	r31, 0x01	; 1
     c2c:	de 01       	movw	r26, r28
     c2e:	a1 56       	subi	r26, 0x61	; 97
     c30:	bb 4e       	sbci	r27, 0xEB	; 235
     c32:	01 90       	ld	r0, Z+
     c34:	0d 92       	st	X+, r0
     c36:	8a 95       	dec	r24
     c38:	e1 f7       	brne	.-8      	; 0xc32 <main+0x320>
     c3a:	f6 01       	movw	r30, r12
     c3c:	80 81       	ld	r24, Z
     c3e:	98 e0       	ldi	r25, 0x08	; 8
     c40:	f8 01       	movw	r30, r16
     c42:	de 01       	movw	r26, r28
     c44:	a3 56       	subi	r26, 0x63	; 99
     c46:	b7 4e       	sbci	r27, 0xE7	; 231
     c48:	01 90       	ld	r0, Z+
     c4a:	0d 92       	st	X+, r0
     c4c:	9a 95       	dec	r25
     c4e:	e1 f7       	brne	.-8      	; 0xc48 <main+0x336>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     c50:	af e9       	ldi	r26, 0x9F	; 159
     c52:	b4 e1       	ldi	r27, 0x14	; 20
     c54:	ac 0f       	add	r26, r28
     c56:	bd 1f       	adc	r27, r29
     c58:	f8 e0       	ldi	r31, 0x08	; 8
     c5a:	8f 9f       	mul	r24, r31
     c5c:	a0 0d       	add	r26, r0
     c5e:	b1 1d       	adc	r27, r1
     c60:	11 24       	eor	r1, r1
     c62:	98 e0       	ldi	r25, 0x08	; 8
     c64:	fe 01       	movw	r30, r28
     c66:	e3 56       	subi	r30, 0x63	; 99
     c68:	f7 4e       	sbci	r31, 0xE7	; 231
     c6a:	01 90       	ld	r0, Z+
     c6c:	0d 92       	st	X+, r0
     c6e:	9a 95       	dec	r25
     c70:	e1 f7       	brne	.-8      	; 0xc6a <main+0x358>
	explosions.timeBetween[explosions.index] = a;
     c72:	2f e9       	ldi	r18, 0x9F	; 159
     c74:	34 e1       	ldi	r19, 0x14	; 20
     c76:	2c 0f       	add	r18, r28
     c78:	3d 1f       	adc	r19, r29
     c7a:	28 0f       	add	r18, r24
     c7c:	31 1d       	adc	r19, r1
     c7e:	f9 01       	movw	r30, r18
     c80:	e0 57       	subi	r30, 0x70	; 112
     c82:	ff 4f       	sbci	r31, 0xFF	; 255
     c84:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     c86:	72 96       	adiw	r30, 0x12	; 18
     c88:	f0 82       	st	Z, r15
	explosions.index++;
     c8a:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     c8c:	cd 5a       	subi	r28, 0xAD	; 173
     c8e:	da 4e       	sbci	r29, 0xEA	; 234
     c90:	88 83       	st	Y, r24
     c92:	c3 55       	subi	r28, 0x53	; 83
     c94:	d5 41       	sbci	r29, 0x15	; 21
     c96:	96 eb       	ldi	r25, 0xB6	; 182
     c98:	fe 01       	movw	r30, r28
     c9a:	e1 56       	subi	r30, 0x61	; 97
     c9c:	fb 4e       	sbci	r31, 0xEB	; 235
     c9e:	de 01       	movw	r26, r28
     ca0:	a7 51       	subi	r26, 0x17	; 23
     ca2:	bc 4e       	sbci	r27, 0xEC	; 236
     ca4:	01 90       	ld	r0, Z+
     ca6:	0d 92       	st	X+, r0
     ca8:	9a 95       	dec	r25
     caa:	e1 f7       	brne	.-8      	; 0xca4 <main+0x392>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     cac:	c3 56       	subi	r28, 0x63	; 99
     cae:	db 4e       	sbci	r29, 0xEB	; 235
     cb0:	88 83       	st	Y, r24
     cb2:	cd 59       	subi	r28, 0x9D	; 157
     cb4:	d4 41       	sbci	r29, 0x14	; 20
     cb6:	86 eb       	ldi	r24, 0xB6	; 182
     cb8:	fe 01       	movw	r30, r28
     cba:	e7 51       	subi	r30, 0x17	; 23
     cbc:	fc 4e       	sbci	r31, 0xEC	; 236
     cbe:	ac e2       	ldi	r26, 0x2C	; 44
     cc0:	b1 e0       	ldi	r27, 0x01	; 1
     cc2:	01 90       	ld	r0, Z+
     cc4:	0d 92       	st	X+, r0
     cc6:	8a 95       	dec	r24
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <main+0x3b0>
	
	matrix = clearSingleMatrix(matrix);
     cca:	20 91 24 01 	lds	r18, 0x0124
     cce:	30 91 25 01 	lds	r19, 0x0125
     cd2:	40 91 26 01 	lds	r20, 0x0126
     cd6:	50 91 27 01 	lds	r21, 0x0127
     cda:	60 91 28 01 	lds	r22, 0x0128
     cde:	70 91 29 01 	lds	r23, 0x0129
     ce2:	80 91 2a 01 	lds	r24, 0x012A
     ce6:	90 91 2b 01 	lds	r25, 0x012B
     cea:	d4 da       	rcall	.-2648   	; 0x294 <clearSingleMatrix>
     cec:	d8 01       	movw	r26, r16
     cee:	2c 93       	st	X, r18
     cf0:	12 96       	adiw	r26, 0x02	; 2
     cf2:	4c 93       	st	X, r20
     cf4:	12 97       	sbiw	r26, 0x02	; 2
     cf6:	13 96       	adiw	r26, 0x03	; 3
     cf8:	5c 93       	st	X, r21
     cfa:	13 97       	sbiw	r26, 0x03	; 3
     cfc:	14 96       	adiw	r26, 0x04	; 4
     cfe:	6c 93       	st	X, r22
     d00:	14 97       	sbiw	r26, 0x04	; 4
     d02:	15 96       	adiw	r26, 0x05	; 5
     d04:	7c 93       	st	X, r23
     d06:	15 97       	sbiw	r26, 0x05	; 5
     d08:	17 96       	adiw	r26, 0x07	; 7
     d0a:	9c 93       	st	X, r25
     d0c:	17 97       	sbiw	r26, 0x07	; 7
     d0e:	37 7f       	andi	r19, 0xF7	; 247
	matrix.m[1] = SetBit(matrix.m[1], 3, 0);
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	3c 93       	st	X, r19
     d14:	11 97       	sbiw	r26, 0x01	; 1
     d16:	87 7f       	andi	r24, 0xF7	; 247
	matrix.m[6] = SetBit(matrix.m[6], 3, 0);
     d18:	16 96       	adiw	r26, 0x06	; 6
     d1a:	8c 93       	st	X, r24
     d1c:	86 eb       	ldi	r24, 0xB6	; 182
     d1e:	ec e2       	ldi	r30, 0x2C	; 44
     d20:	f1 e0       	ldi	r31, 0x01	; 1
     d22:	de 01       	movw	r26, r28
     d24:	ad 5c       	subi	r26, 0xCD	; 205
     d26:	bc 4e       	sbci	r27, 0xEC	; 236
     d28:	01 90       	ld	r0, Z+
     d2a:	0d 92       	st	X+, r0
     d2c:	8a 95       	dec	r24
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <main+0x416>
     d30:	f6 01       	movw	r30, r12
     d32:	80 81       	ld	r24, Z
     d34:	98 e0       	ldi	r25, 0x08	; 8
     d36:	f8 01       	movw	r30, r16
     d38:	de 01       	movw	r26, r28
     d3a:	ab 56       	subi	r26, 0x6B	; 107
     d3c:	b7 4e       	sbci	r27, 0xE7	; 231
     d3e:	01 90       	ld	r0, Z+
     d40:	0d 92       	st	X+, r0
     d42:	9a 95       	dec	r25
     d44:	e1 f7       	brne	.-8      	; 0xd3e <main+0x42c>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     d46:	a3 e3       	ldi	r26, 0x33	; 51
     d48:	b3 e1       	ldi	r27, 0x13	; 19
     d4a:	ac 0f       	add	r26, r28
     d4c:	bd 1f       	adc	r27, r29
     d4e:	f8 e0       	ldi	r31, 0x08	; 8
     d50:	8f 9f       	mul	r24, r31
     d52:	a0 0d       	add	r26, r0
     d54:	b1 1d       	adc	r27, r1
     d56:	11 24       	eor	r1, r1
     d58:	98 e0       	ldi	r25, 0x08	; 8
     d5a:	fe 01       	movw	r30, r28
     d5c:	eb 56       	subi	r30, 0x6B	; 107
     d5e:	f7 4e       	sbci	r31, 0xE7	; 231
     d60:	01 90       	ld	r0, Z+
     d62:	0d 92       	st	X+, r0
     d64:	9a 95       	dec	r25
     d66:	e1 f7       	brne	.-8      	; 0xd60 <main+0x44e>
	explosions.timeBetween[explosions.index] = a;
     d68:	23 e3       	ldi	r18, 0x33	; 51
     d6a:	33 e1       	ldi	r19, 0x13	; 19
     d6c:	2c 0f       	add	r18, r28
     d6e:	3d 1f       	adc	r19, r29
     d70:	28 0f       	add	r18, r24
     d72:	31 1d       	adc	r19, r1
     d74:	f9 01       	movw	r30, r18
     d76:	e0 57       	subi	r30, 0x70	; 112
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     d7c:	72 96       	adiw	r30, 0x12	; 18
     d7e:	f0 82       	st	Z, r15
	explosions.index++;
     d80:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     d82:	c9 51       	subi	r28, 0x19	; 25
     d84:	dc 4e       	sbci	r29, 0xEC	; 236
     d86:	88 83       	st	Y, r24
     d88:	c7 5e       	subi	r28, 0xE7	; 231
     d8a:	d3 41       	sbci	r29, 0x13	; 19
     d8c:	96 eb       	ldi	r25, 0xB6	; 182
     d8e:	fe 01       	movw	r30, r28
     d90:	ed 5c       	subi	r30, 0xCD	; 205
     d92:	fc 4e       	sbci	r31, 0xEC	; 236
     d94:	de 01       	movw	r26, r28
     d96:	a3 58       	subi	r26, 0x83	; 131
     d98:	bd 4e       	sbci	r27, 0xED	; 237
     d9a:	01 90       	ld	r0, Z+
     d9c:	0d 92       	st	X+, r0
     d9e:	9a 95       	dec	r25
     da0:	e1 f7       	brne	.-8      	; 0xd9a <main+0x488>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     da2:	cf 5c       	subi	r28, 0xCF	; 207
     da4:	dc 4e       	sbci	r29, 0xEC	; 236
     da6:	88 83       	st	Y, r24
     da8:	c1 53       	subi	r28, 0x31	; 49
     daa:	d3 41       	sbci	r29, 0x13	; 19
     dac:	86 eb       	ldi	r24, 0xB6	; 182
     dae:	fe 01       	movw	r30, r28
     db0:	e3 58       	subi	r30, 0x83	; 131
     db2:	fd 4e       	sbci	r31, 0xED	; 237
     db4:	ac e2       	ldi	r26, 0x2C	; 44
     db6:	b1 e0       	ldi	r27, 0x01	; 1
     db8:	01 90       	ld	r0, Z+
     dba:	0d 92       	st	X+, r0
     dbc:	8a 95       	dec	r24
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <main+0x4a6>
	
	matrix = clearSingleMatrix(matrix);
     dc0:	20 91 24 01 	lds	r18, 0x0124
     dc4:	30 91 25 01 	lds	r19, 0x0125
     dc8:	40 91 26 01 	lds	r20, 0x0126
     dcc:	50 91 27 01 	lds	r21, 0x0127
     dd0:	60 91 28 01 	lds	r22, 0x0128
     dd4:	70 91 29 01 	lds	r23, 0x0129
     dd8:	80 91 2a 01 	lds	r24, 0x012A
     ddc:	90 91 2b 01 	lds	r25, 0x012B
     de0:	59 da       	rcall	.-2894   	; 0x294 <clearSingleMatrix>
     de2:	d8 01       	movw	r26, r16
     de4:	2c 93       	st	X, r18
     de6:	12 96       	adiw	r26, 0x02	; 2
     de8:	4c 93       	st	X, r20
     dea:	12 97       	sbiw	r26, 0x02	; 2
     dec:	13 96       	adiw	r26, 0x03	; 3
     dee:	5c 93       	st	X, r21
     df0:	13 97       	sbiw	r26, 0x03	; 3
     df2:	14 96       	adiw	r26, 0x04	; 4
     df4:	6c 93       	st	X, r22
     df6:	14 97       	sbiw	r26, 0x04	; 4
     df8:	15 96       	adiw	r26, 0x05	; 5
     dfa:	7c 93       	st	X, r23
     dfc:	15 97       	sbiw	r26, 0x05	; 5
     dfe:	17 96       	adiw	r26, 0x07	; 7
     e00:	9c 93       	st	X, r25
     e02:	17 97       	sbiw	r26, 0x07	; 7
     e04:	3f 7e       	andi	r19, 0xEF	; 239
	matrix.m[1] = SetBit(matrix.m[1], 4, 0);
     e06:	11 96       	adiw	r26, 0x01	; 1
     e08:	3c 93       	st	X, r19
     e0a:	11 97       	sbiw	r26, 0x01	; 1
     e0c:	8f 7e       	andi	r24, 0xEF	; 239
	matrix.m[6] = SetBit(matrix.m[6], 4, 0);
     e0e:	16 96       	adiw	r26, 0x06	; 6
     e10:	8c 93       	st	X, r24
     e12:	86 eb       	ldi	r24, 0xB6	; 182
     e14:	ec e2       	ldi	r30, 0x2C	; 44
     e16:	f1 e0       	ldi	r31, 0x01	; 1
     e18:	de 01       	movw	r26, r28
     e1a:	a9 53       	subi	r26, 0x39	; 57
     e1c:	be 4e       	sbci	r27, 0xEE	; 238
     e1e:	01 90       	ld	r0, Z+
     e20:	0d 92       	st	X+, r0
     e22:	8a 95       	dec	r24
     e24:	e1 f7       	brne	.-8      	; 0xe1e <main+0x50c>
     e26:	f6 01       	movw	r30, r12
     e28:	80 81       	ld	r24, Z
     e2a:	98 e0       	ldi	r25, 0x08	; 8
     e2c:	f8 01       	movw	r30, r16
     e2e:	de 01       	movw	r26, r28
     e30:	a3 57       	subi	r26, 0x73	; 115
     e32:	b7 4e       	sbci	r27, 0xE7	; 231
     e34:	01 90       	ld	r0, Z+
     e36:	0d 92       	st	X+, r0
     e38:	9a 95       	dec	r25
     e3a:	e1 f7       	brne	.-8      	; 0xe34 <main+0x522>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     e3c:	a7 ec       	ldi	r26, 0xC7	; 199
     e3e:	b1 e1       	ldi	r27, 0x11	; 17
     e40:	ac 0f       	add	r26, r28
     e42:	bd 1f       	adc	r27, r29
     e44:	f8 e0       	ldi	r31, 0x08	; 8
     e46:	8f 9f       	mul	r24, r31
     e48:	a0 0d       	add	r26, r0
     e4a:	b1 1d       	adc	r27, r1
     e4c:	11 24       	eor	r1, r1
     e4e:	98 e0       	ldi	r25, 0x08	; 8
     e50:	fe 01       	movw	r30, r28
     e52:	e3 57       	subi	r30, 0x73	; 115
     e54:	f7 4e       	sbci	r31, 0xE7	; 231
     e56:	01 90       	ld	r0, Z+
     e58:	0d 92       	st	X+, r0
     e5a:	9a 95       	dec	r25
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <main+0x544>
	explosions.timeBetween[explosions.index] = a;
     e5e:	27 ec       	ldi	r18, 0xC7	; 199
     e60:	31 e1       	ldi	r19, 0x11	; 17
     e62:	2c 0f       	add	r18, r28
     e64:	3d 1f       	adc	r19, r29
     e66:	28 0f       	add	r18, r24
     e68:	31 1d       	adc	r19, r1
     e6a:	f9 01       	movw	r30, r18
     e6c:	e0 57       	subi	r30, 0x70	; 112
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     e72:	72 96       	adiw	r30, 0x12	; 18
     e74:	f0 82       	st	Z, r15
	explosions.index++;
     e76:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     e78:	c5 58       	subi	r28, 0x85	; 133
     e7a:	dd 4e       	sbci	r29, 0xED	; 237
     e7c:	88 83       	st	Y, r24
     e7e:	cb 57       	subi	r28, 0x7B	; 123
     e80:	d2 41       	sbci	r29, 0x12	; 18
     e82:	96 eb       	ldi	r25, 0xB6	; 182
     e84:	fe 01       	movw	r30, r28
     e86:	e9 53       	subi	r30, 0x39	; 57
     e88:	fe 4e       	sbci	r31, 0xEE	; 238
     e8a:	de 01       	movw	r26, r28
     e8c:	af 5e       	subi	r26, 0xEF	; 239
     e8e:	be 4e       	sbci	r27, 0xEE	; 238
     e90:	01 90       	ld	r0, Z+
     e92:	0d 92       	st	X+, r0
     e94:	9a 95       	dec	r25
     e96:	e1 f7       	brne	.-8      	; 0xe90 <main+0x57e>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     e98:	cb 53       	subi	r28, 0x3B	; 59
     e9a:	de 4e       	sbci	r29, 0xEE	; 238
     e9c:	88 83       	st	Y, r24
     e9e:	c5 5c       	subi	r28, 0xC5	; 197
     ea0:	d1 41       	sbci	r29, 0x11	; 17
     ea2:	86 eb       	ldi	r24, 0xB6	; 182
     ea4:	fe 01       	movw	r30, r28
     ea6:	ef 5e       	subi	r30, 0xEF	; 239
     ea8:	fe 4e       	sbci	r31, 0xEE	; 238
     eaa:	ac e2       	ldi	r26, 0x2C	; 44
     eac:	b1 e0       	ldi	r27, 0x01	; 1
     eae:	01 90       	ld	r0, Z+
     eb0:	0d 92       	st	X+, r0
     eb2:	8a 95       	dec	r24
     eb4:	e1 f7       	brne	.-8      	; 0xeae <main+0x59c>
	
	matrix = clearSingleMatrix(matrix);
     eb6:	20 91 24 01 	lds	r18, 0x0124
     eba:	30 91 25 01 	lds	r19, 0x0125
     ebe:	40 91 26 01 	lds	r20, 0x0126
     ec2:	50 91 27 01 	lds	r21, 0x0127
     ec6:	60 91 28 01 	lds	r22, 0x0128
     eca:	70 91 29 01 	lds	r23, 0x0129
     ece:	80 91 2a 01 	lds	r24, 0x012A
     ed2:	90 91 2b 01 	lds	r25, 0x012B
     ed6:	de d9       	rcall	.-3140   	; 0x294 <clearSingleMatrix>
     ed8:	d8 01       	movw	r26, r16
     eda:	2c 93       	st	X, r18
     edc:	12 96       	adiw	r26, 0x02	; 2
     ede:	4c 93       	st	X, r20
     ee0:	12 97       	sbiw	r26, 0x02	; 2
     ee2:	13 96       	adiw	r26, 0x03	; 3
     ee4:	5c 93       	st	X, r21
     ee6:	13 97       	sbiw	r26, 0x03	; 3
     ee8:	14 96       	adiw	r26, 0x04	; 4
     eea:	6c 93       	st	X, r22
     eec:	14 97       	sbiw	r26, 0x04	; 4
     eee:	15 96       	adiw	r26, 0x05	; 5
     ef0:	7c 93       	st	X, r23
     ef2:	15 97       	sbiw	r26, 0x05	; 5
     ef4:	17 96       	adiw	r26, 0x07	; 7
     ef6:	9c 93       	st	X, r25
     ef8:	17 97       	sbiw	r26, 0x07	; 7
     efa:	3f 7d       	andi	r19, 0xDF	; 223
	matrix.m[1] = SetBit(matrix.m[1], 5, 0);
     efc:	11 96       	adiw	r26, 0x01	; 1
     efe:	3c 93       	st	X, r19
     f00:	11 97       	sbiw	r26, 0x01	; 1
     f02:	8f 7d       	andi	r24, 0xDF	; 223
	matrix.m[6] = SetBit(matrix.m[6], 5, 0);
     f04:	16 96       	adiw	r26, 0x06	; 6
     f06:	8c 93       	st	X, r24
     f08:	86 eb       	ldi	r24, 0xB6	; 182
     f0a:	ec e2       	ldi	r30, 0x2C	; 44
     f0c:	f1 e0       	ldi	r31, 0x01	; 1
     f0e:	de 01       	movw	r26, r28
     f10:	a5 5a       	subi	r26, 0xA5	; 165
     f12:	bf 4e       	sbci	r27, 0xEF	; 239
     f14:	01 90       	ld	r0, Z+
     f16:	0d 92       	st	X+, r0
     f18:	8a 95       	dec	r24
     f1a:	e1 f7       	brne	.-8      	; 0xf14 <main+0x602>
     f1c:	f6 01       	movw	r30, r12
     f1e:	80 81       	ld	r24, Z
     f20:	98 e0       	ldi	r25, 0x08	; 8
     f22:	f8 01       	movw	r30, r16
     f24:	de 01       	movw	r26, r28
     f26:	ab 57       	subi	r26, 0x7B	; 123
     f28:	b7 4e       	sbci	r27, 0xE7	; 231
     f2a:	01 90       	ld	r0, Z+
     f2c:	0d 92       	st	X+, r0
     f2e:	9a 95       	dec	r25
     f30:	e1 f7       	brne	.-8      	; 0xf2a <main+0x618>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     f32:	ab e5       	ldi	r26, 0x5B	; 91
     f34:	b0 e1       	ldi	r27, 0x10	; 16
     f36:	ac 0f       	add	r26, r28
     f38:	bd 1f       	adc	r27, r29
     f3a:	f8 e0       	ldi	r31, 0x08	; 8
     f3c:	8f 9f       	mul	r24, r31
     f3e:	a0 0d       	add	r26, r0
     f40:	b1 1d       	adc	r27, r1
     f42:	11 24       	eor	r1, r1
     f44:	98 e0       	ldi	r25, 0x08	; 8
     f46:	fe 01       	movw	r30, r28
     f48:	eb 57       	subi	r30, 0x7B	; 123
     f4a:	f7 4e       	sbci	r31, 0xE7	; 231
     f4c:	01 90       	ld	r0, Z+
     f4e:	0d 92       	st	X+, r0
     f50:	9a 95       	dec	r25
     f52:	e1 f7       	brne	.-8      	; 0xf4c <main+0x63a>
	explosions.timeBetween[explosions.index] = a;
     f54:	2b e5       	ldi	r18, 0x5B	; 91
     f56:	30 e1       	ldi	r19, 0x10	; 16
     f58:	2c 0f       	add	r18, r28
     f5a:	3d 1f       	adc	r19, r29
     f5c:	28 0f       	add	r18, r24
     f5e:	31 1d       	adc	r19, r1
     f60:	f9 01       	movw	r30, r18
     f62:	e0 57       	subi	r30, 0x70	; 112
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     f68:	72 96       	adiw	r30, 0x12	; 18
     f6a:	f0 82       	st	Z, r15
	explosions.index++;
     f6c:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     f6e:	c1 5f       	subi	r28, 0xF1	; 241
     f70:	de 4e       	sbci	r29, 0xEE	; 238
     f72:	88 83       	st	Y, r24
     f74:	cf 50       	subi	r28, 0x0F	; 15
     f76:	d1 41       	sbci	r29, 0x11	; 17
     f78:	96 eb       	ldi	r25, 0xB6	; 182
     f7a:	fe 01       	movw	r30, r28
     f7c:	e5 5a       	subi	r30, 0xA5	; 165
     f7e:	ff 4e       	sbci	r31, 0xEF	; 239
     f80:	de 01       	movw	r26, r28
     f82:	ab 55       	subi	r26, 0x5B	; 91
     f84:	b0 4f       	sbci	r27, 0xF0	; 240
     f86:	01 90       	ld	r0, Z+
     f88:	0d 92       	st	X+, r0
     f8a:	9a 95       	dec	r25
     f8c:	e1 f7       	brne	.-8      	; 0xf86 <main+0x674>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     f8e:	c7 5a       	subi	r28, 0xA7	; 167
     f90:	df 4e       	sbci	r29, 0xEF	; 239
     f92:	88 83       	st	Y, r24
     f94:	c9 55       	subi	r28, 0x59	; 89
     f96:	d0 41       	sbci	r29, 0x10	; 16
     f98:	86 eb       	ldi	r24, 0xB6	; 182
     f9a:	fe 01       	movw	r30, r28
     f9c:	eb 55       	subi	r30, 0x5B	; 91
     f9e:	f0 4f       	sbci	r31, 0xF0	; 240
     fa0:	ac e2       	ldi	r26, 0x2C	; 44
     fa2:	b1 e0       	ldi	r27, 0x01	; 1
     fa4:	01 90       	ld	r0, Z+
     fa6:	0d 92       	st	X+, r0
     fa8:	8a 95       	dec	r24
     faa:	e1 f7       	brne	.-8      	; 0xfa4 <main+0x692>
	
	matrix = clearSingleMatrix(matrix);
     fac:	20 91 24 01 	lds	r18, 0x0124
     fb0:	30 91 25 01 	lds	r19, 0x0125
     fb4:	40 91 26 01 	lds	r20, 0x0126
     fb8:	50 91 27 01 	lds	r21, 0x0127
     fbc:	60 91 28 01 	lds	r22, 0x0128
     fc0:	70 91 29 01 	lds	r23, 0x0129
     fc4:	80 91 2a 01 	lds	r24, 0x012A
     fc8:	90 91 2b 01 	lds	r25, 0x012B
     fcc:	63 d9       	rcall	.-3386   	; 0x294 <clearSingleMatrix>
     fce:	d8 01       	movw	r26, r16
     fd0:	2c 93       	st	X, r18
     fd2:	12 96       	adiw	r26, 0x02	; 2
     fd4:	4c 93       	st	X, r20
     fd6:	12 97       	sbiw	r26, 0x02	; 2
     fd8:	13 96       	adiw	r26, 0x03	; 3
     fda:	5c 93       	st	X, r21
     fdc:	13 97       	sbiw	r26, 0x03	; 3
     fde:	14 96       	adiw	r26, 0x04	; 4
     fe0:	6c 93       	st	X, r22
     fe2:	14 97       	sbiw	r26, 0x04	; 4
     fe4:	15 96       	adiw	r26, 0x05	; 5
     fe6:	7c 93       	st	X, r23
     fe8:	15 97       	sbiw	r26, 0x05	; 5
     fea:	17 96       	adiw	r26, 0x07	; 7
     fec:	9c 93       	st	X, r25
     fee:	17 97       	sbiw	r26, 0x07	; 7
     ff0:	3f 7b       	andi	r19, 0xBF	; 191
	matrix.m[1] = SetBit(matrix.m[1], 6, 0);
     ff2:	11 96       	adiw	r26, 0x01	; 1
     ff4:	3c 93       	st	X, r19
     ff6:	11 97       	sbiw	r26, 0x01	; 1
     ff8:	8f 7b       	andi	r24, 0xBF	; 191
	matrix.m[6] = SetBit(matrix.m[6], 6, 0);
     ffa:	16 96       	adiw	r26, 0x06	; 6
     ffc:	8c 93       	st	X, r24
     ffe:	86 eb       	ldi	r24, 0xB6	; 182
    1000:	ec e2       	ldi	r30, 0x2C	; 44
    1002:	f1 e0       	ldi	r31, 0x01	; 1
    1004:	de 01       	movw	r26, r28
    1006:	a1 51       	subi	r26, 0x11	; 17
    1008:	b1 4f       	sbci	r27, 0xF1	; 241
    100a:	01 90       	ld	r0, Z+
    100c:	0d 92       	st	X+, r0
    100e:	8a 95       	dec	r24
    1010:	e1 f7       	brne	.-8      	; 0x100a <main+0x6f8>
    1012:	f6 01       	movw	r30, r12
    1014:	80 81       	ld	r24, Z
    1016:	98 e0       	ldi	r25, 0x08	; 8
    1018:	f8 01       	movw	r30, r16
    101a:	de 01       	movw	r26, r28
    101c:	a3 58       	subi	r26, 0x83	; 131
    101e:	b7 4e       	sbci	r27, 0xE7	; 231
    1020:	01 90       	ld	r0, Z+
    1022:	0d 92       	st	X+, r0
    1024:	9a 95       	dec	r25
    1026:	e1 f7       	brne	.-8      	; 0x1020 <main+0x70e>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1028:	af ee       	ldi	r26, 0xEF	; 239
    102a:	be e0       	ldi	r27, 0x0E	; 14
    102c:	ac 0f       	add	r26, r28
    102e:	bd 1f       	adc	r27, r29
    1030:	f8 e0       	ldi	r31, 0x08	; 8
    1032:	8f 9f       	mul	r24, r31
    1034:	a0 0d       	add	r26, r0
    1036:	b1 1d       	adc	r27, r1
    1038:	11 24       	eor	r1, r1
    103a:	98 e0       	ldi	r25, 0x08	; 8
    103c:	fe 01       	movw	r30, r28
    103e:	e3 58       	subi	r30, 0x83	; 131
    1040:	f7 4e       	sbci	r31, 0xE7	; 231
    1042:	01 90       	ld	r0, Z+
    1044:	0d 92       	st	X+, r0
    1046:	9a 95       	dec	r25
    1048:	e1 f7       	brne	.-8      	; 0x1042 <main+0x730>
	explosions.timeBetween[explosions.index] = a;
    104a:	2f ee       	ldi	r18, 0xEF	; 239
    104c:	3e e0       	ldi	r19, 0x0E	; 14
    104e:	2c 0f       	add	r18, r28
    1050:	3d 1f       	adc	r19, r29
    1052:	28 0f       	add	r18, r24
    1054:	31 1d       	adc	r19, r1
    1056:	f9 01       	movw	r30, r18
    1058:	e0 57       	subi	r30, 0x70	; 112
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    105e:	72 96       	adiw	r30, 0x12	; 18
    1060:	f0 82       	st	Z, r15
	explosions.index++;
    1062:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1064:	cd 55       	subi	r28, 0x5D	; 93
    1066:	d0 4f       	sbci	r29, 0xF0	; 240
    1068:	88 83       	st	Y, r24
    106a:	c3 5a       	subi	r28, 0xA3	; 163
    106c:	df 40       	sbci	r29, 0x0F	; 15
    106e:	96 eb       	ldi	r25, 0xB6	; 182
    1070:	fe 01       	movw	r30, r28
    1072:	e1 51       	subi	r30, 0x11	; 17
    1074:	f1 4f       	sbci	r31, 0xF1	; 241
    1076:	de 01       	movw	r26, r28
    1078:	a7 5c       	subi	r26, 0xC7	; 199
    107a:	b1 4f       	sbci	r27, 0xF1	; 241
    107c:	01 90       	ld	r0, Z+
    107e:	0d 92       	st	X+, r0
    1080:	9a 95       	dec	r25
    1082:	e1 f7       	brne	.-8      	; 0x107c <main+0x76a>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1084:	c3 51       	subi	r28, 0x13	; 19
    1086:	d1 4f       	sbci	r29, 0xF1	; 241
    1088:	88 83       	st	Y, r24
    108a:	cd 5e       	subi	r28, 0xED	; 237
    108c:	de 40       	sbci	r29, 0x0E	; 14
    108e:	86 eb       	ldi	r24, 0xB6	; 182
    1090:	fe 01       	movw	r30, r28
    1092:	e7 5c       	subi	r30, 0xC7	; 199
    1094:	f1 4f       	sbci	r31, 0xF1	; 241
    1096:	ac e2       	ldi	r26, 0x2C	; 44
    1098:	b1 e0       	ldi	r27, 0x01	; 1
    109a:	01 90       	ld	r0, Z+
    109c:	0d 92       	st	X+, r0
    109e:	8a 95       	dec	r24
    10a0:	e1 f7       	brne	.-8      	; 0x109a <main+0x788>
	
	matrix = clearSingleMatrix(matrix);
    10a2:	20 91 24 01 	lds	r18, 0x0124
    10a6:	30 91 25 01 	lds	r19, 0x0125
    10aa:	40 91 26 01 	lds	r20, 0x0126
    10ae:	50 91 27 01 	lds	r21, 0x0127
    10b2:	60 91 28 01 	lds	r22, 0x0128
    10b6:	70 91 29 01 	lds	r23, 0x0129
    10ba:	80 91 2a 01 	lds	r24, 0x012A
    10be:	90 91 2b 01 	lds	r25, 0x012B
    10c2:	e8 d8       	rcall	.-3632   	; 0x294 <clearSingleMatrix>
    10c4:	d8 01       	movw	r26, r16
    10c6:	2c 93       	st	X, r18
    10c8:	12 96       	adiw	r26, 0x02	; 2
    10ca:	4c 93       	st	X, r20
    10cc:	12 97       	sbiw	r26, 0x02	; 2
    10ce:	13 96       	adiw	r26, 0x03	; 3
    10d0:	5c 93       	st	X, r21
    10d2:	13 97       	sbiw	r26, 0x03	; 3
    10d4:	14 96       	adiw	r26, 0x04	; 4
    10d6:	6c 93       	st	X, r22
    10d8:	14 97       	sbiw	r26, 0x04	; 4
    10da:	15 96       	adiw	r26, 0x05	; 5
    10dc:	7c 93       	st	X, r23
    10de:	15 97       	sbiw	r26, 0x05	; 5
    10e0:	17 96       	adiw	r26, 0x07	; 7
    10e2:	9c 93       	st	X, r25
    10e4:	17 97       	sbiw	r26, 0x07	; 7
    10e6:	3f 77       	andi	r19, 0x7F	; 127
	matrix.m[1] = SetBit(matrix.m[1], 7, 0);
    10e8:	11 96       	adiw	r26, 0x01	; 1
    10ea:	3c 93       	st	X, r19
    10ec:	11 97       	sbiw	r26, 0x01	; 1
    10ee:	8f 77       	andi	r24, 0x7F	; 127
	matrix.m[6] = SetBit(matrix.m[6], 7, 0);
    10f0:	16 96       	adiw	r26, 0x06	; 6
    10f2:	8c 93       	st	X, r24
    10f4:	86 eb       	ldi	r24, 0xB6	; 182
    10f6:	ec e2       	ldi	r30, 0x2C	; 44
    10f8:	f1 e0       	ldi	r31, 0x01	; 1
    10fa:	de 01       	movw	r26, r28
    10fc:	ad 57       	subi	r26, 0x7D	; 125
    10fe:	b2 4f       	sbci	r27, 0xF2	; 242
    1100:	01 90       	ld	r0, Z+
    1102:	0d 92       	st	X+, r0
    1104:	8a 95       	dec	r24
    1106:	e1 f7       	brne	.-8      	; 0x1100 <main+0x7ee>
    1108:	f6 01       	movw	r30, r12
    110a:	80 81       	ld	r24, Z
    110c:	98 e0       	ldi	r25, 0x08	; 8
    110e:	f8 01       	movw	r30, r16
    1110:	de 01       	movw	r26, r28
    1112:	ab 58       	subi	r26, 0x8B	; 139
    1114:	b7 4e       	sbci	r27, 0xE7	; 231
    1116:	01 90       	ld	r0, Z+
    1118:	0d 92       	st	X+, r0
    111a:	9a 95       	dec	r25
    111c:	e1 f7       	brne	.-8      	; 0x1116 <main+0x804>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    111e:	a3 e8       	ldi	r26, 0x83	; 131
    1120:	bd e0       	ldi	r27, 0x0D	; 13
    1122:	ac 0f       	add	r26, r28
    1124:	bd 1f       	adc	r27, r29
    1126:	f8 e0       	ldi	r31, 0x08	; 8
    1128:	8f 9f       	mul	r24, r31
    112a:	a0 0d       	add	r26, r0
    112c:	b1 1d       	adc	r27, r1
    112e:	11 24       	eor	r1, r1
    1130:	98 e0       	ldi	r25, 0x08	; 8
    1132:	fe 01       	movw	r30, r28
    1134:	eb 58       	subi	r30, 0x8B	; 139
    1136:	f7 4e       	sbci	r31, 0xE7	; 231
    1138:	01 90       	ld	r0, Z+
    113a:	0d 92       	st	X+, r0
    113c:	9a 95       	dec	r25
    113e:	e1 f7       	brne	.-8      	; 0x1138 <main+0x826>
	explosions.timeBetween[explosions.index] = a;
    1140:	23 e8       	ldi	r18, 0x83	; 131
    1142:	3d e0       	ldi	r19, 0x0D	; 13
    1144:	2c 0f       	add	r18, r28
    1146:	3d 1f       	adc	r19, r29
    1148:	28 0f       	add	r18, r24
    114a:	31 1d       	adc	r19, r1
    114c:	f9 01       	movw	r30, r18
    114e:	e0 57       	subi	r30, 0x70	; 112
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1154:	72 96       	adiw	r30, 0x12	; 18
    1156:	f0 82       	st	Z, r15
	explosions.index++;
    1158:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    115a:	c9 5c       	subi	r28, 0xC9	; 201
    115c:	d1 4f       	sbci	r29, 0xF1	; 241
    115e:	88 83       	st	Y, r24
    1160:	c7 53       	subi	r28, 0x37	; 55
    1162:	de 40       	sbci	r29, 0x0E	; 14
    1164:	96 eb       	ldi	r25, 0xB6	; 182
    1166:	fe 01       	movw	r30, r28
    1168:	ed 57       	subi	r30, 0x7D	; 125
    116a:	f2 4f       	sbci	r31, 0xF2	; 242
    116c:	de 01       	movw	r26, r28
    116e:	a3 53       	subi	r26, 0x33	; 51
    1170:	b3 4f       	sbci	r27, 0xF3	; 243
    1172:	01 90       	ld	r0, Z+
    1174:	0d 92       	st	X+, r0
    1176:	9a 95       	dec	r25
    1178:	e1 f7       	brne	.-8      	; 0x1172 <main+0x860>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    117a:	cf 57       	subi	r28, 0x7F	; 127
    117c:	d2 4f       	sbci	r29, 0xF2	; 242
    117e:	88 83       	st	Y, r24
    1180:	c1 58       	subi	r28, 0x81	; 129
    1182:	dd 40       	sbci	r29, 0x0D	; 13
    1184:	86 eb       	ldi	r24, 0xB6	; 182
    1186:	fe 01       	movw	r30, r28
    1188:	e3 53       	subi	r30, 0x33	; 51
    118a:	f3 4f       	sbci	r31, 0xF3	; 243
    118c:	ac e2       	ldi	r26, 0x2C	; 44
    118e:	b1 e0       	ldi	r27, 0x01	; 1
    1190:	01 90       	ld	r0, Z+
    1192:	0d 92       	st	X+, r0
    1194:	8a 95       	dec	r24
    1196:	e1 f7       	brne	.-8      	; 0x1190 <main+0x87e>
	
	matrix = clearSingleMatrix(matrix);
    1198:	20 91 24 01 	lds	r18, 0x0124
    119c:	30 91 25 01 	lds	r19, 0x0125
    11a0:	40 91 26 01 	lds	r20, 0x0126
    11a4:	50 91 27 01 	lds	r21, 0x0127
    11a8:	60 91 28 01 	lds	r22, 0x0128
    11ac:	70 91 29 01 	lds	r23, 0x0129
    11b0:	80 91 2a 01 	lds	r24, 0x012A
    11b4:	90 91 2b 01 	lds	r25, 0x012B
    11b8:	6d d8       	rcall	.-3878   	; 0x294 <clearSingleMatrix>
    11ba:	d8 01       	movw	r26, r16
    11bc:	2c 93       	st	X, r18
    11be:	11 96       	adiw	r26, 0x01	; 1
    11c0:	3c 93       	st	X, r19
    11c2:	11 97       	sbiw	r26, 0x01	; 1
    11c4:	13 96       	adiw	r26, 0x03	; 3
    11c6:	5c 93       	st	X, r21
    11c8:	13 97       	sbiw	r26, 0x03	; 3
    11ca:	14 96       	adiw	r26, 0x04	; 4
    11cc:	6c 93       	st	X, r22
    11ce:	14 97       	sbiw	r26, 0x04	; 4
    11d0:	16 96       	adiw	r26, 0x06	; 6
    11d2:	8c 93       	st	X, r24
    11d4:	16 97       	sbiw	r26, 0x06	; 6
    11d6:	17 96       	adiw	r26, 0x07	; 7
    11d8:	9c 93       	st	X, r25
    11da:	17 97       	sbiw	r26, 0x07	; 7
    11dc:	4f 77       	andi	r20, 0x7F	; 127
	matrix.m[2] = SetBit(matrix.m[2], 7, 0);
    11de:	12 96       	adiw	r26, 0x02	; 2
    11e0:	4c 93       	st	X, r20
    11e2:	12 97       	sbiw	r26, 0x02	; 2
    11e4:	7f 77       	andi	r23, 0x7F	; 127
	matrix.m[5] = SetBit(matrix.m[5], 7, 0);
    11e6:	15 96       	adiw	r26, 0x05	; 5
    11e8:	7c 93       	st	X, r23
    11ea:	86 eb       	ldi	r24, 0xB6	; 182
    11ec:	ec e2       	ldi	r30, 0x2C	; 44
    11ee:	f1 e0       	ldi	r31, 0x01	; 1
    11f0:	de 01       	movw	r26, r28
    11f2:	a9 5e       	subi	r26, 0xE9	; 233
    11f4:	b3 4f       	sbci	r27, 0xF3	; 243
    11f6:	01 90       	ld	r0, Z+
    11f8:	0d 92       	st	X+, r0
    11fa:	8a 95       	dec	r24
    11fc:	e1 f7       	brne	.-8      	; 0x11f6 <main+0x8e4>
    11fe:	f6 01       	movw	r30, r12
    1200:	80 81       	ld	r24, Z
    1202:	98 e0       	ldi	r25, 0x08	; 8
    1204:	f8 01       	movw	r30, r16
    1206:	de 01       	movw	r26, r28
    1208:	a3 59       	subi	r26, 0x93	; 147
    120a:	b7 4e       	sbci	r27, 0xE7	; 231
    120c:	01 90       	ld	r0, Z+
    120e:	0d 92       	st	X+, r0
    1210:	9a 95       	dec	r25
    1212:	e1 f7       	brne	.-8      	; 0x120c <main+0x8fa>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1214:	a7 e1       	ldi	r26, 0x17	; 23
    1216:	bc e0       	ldi	r27, 0x0C	; 12
    1218:	ac 0f       	add	r26, r28
    121a:	bd 1f       	adc	r27, r29
    121c:	f8 e0       	ldi	r31, 0x08	; 8
    121e:	8f 9f       	mul	r24, r31
    1220:	a0 0d       	add	r26, r0
    1222:	b1 1d       	adc	r27, r1
    1224:	11 24       	eor	r1, r1
    1226:	98 e0       	ldi	r25, 0x08	; 8
    1228:	fe 01       	movw	r30, r28
    122a:	e3 59       	subi	r30, 0x93	; 147
    122c:	f7 4e       	sbci	r31, 0xE7	; 231
    122e:	01 90       	ld	r0, Z+
    1230:	0d 92       	st	X+, r0
    1232:	9a 95       	dec	r25
    1234:	e1 f7       	brne	.-8      	; 0x122e <main+0x91c>
	explosions.timeBetween[explosions.index] = a;
    1236:	27 e1       	ldi	r18, 0x17	; 23
    1238:	3c e0       	ldi	r19, 0x0C	; 12
    123a:	2c 0f       	add	r18, r28
    123c:	3d 1f       	adc	r19, r29
    123e:	28 0f       	add	r18, r24
    1240:	31 1d       	adc	r19, r1
    1242:	f9 01       	movw	r30, r18
    1244:	e0 57       	subi	r30, 0x70	; 112
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    124a:	72 96       	adiw	r30, 0x12	; 18
    124c:	f0 82       	st	Z, r15
	explosions.index++;
    124e:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1250:	c5 53       	subi	r28, 0x35	; 53
    1252:	d3 4f       	sbci	r29, 0xF3	; 243
    1254:	88 83       	st	Y, r24
    1256:	cb 5c       	subi	r28, 0xCB	; 203
    1258:	dc 40       	sbci	r29, 0x0C	; 12
    125a:	96 eb       	ldi	r25, 0xB6	; 182
    125c:	fe 01       	movw	r30, r28
    125e:	e9 5e       	subi	r30, 0xE9	; 233
    1260:	f3 4f       	sbci	r31, 0xF3	; 243
    1262:	de 01       	movw	r26, r28
    1264:	af 59       	subi	r26, 0x9F	; 159
    1266:	b4 4f       	sbci	r27, 0xF4	; 244
    1268:	01 90       	ld	r0, Z+
    126a:	0d 92       	st	X+, r0
    126c:	9a 95       	dec	r25
    126e:	e1 f7       	brne	.-8      	; 0x1268 <main+0x956>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1270:	cb 5e       	subi	r28, 0xEB	; 235
    1272:	d3 4f       	sbci	r29, 0xF3	; 243
    1274:	88 83       	st	Y, r24
    1276:	c5 51       	subi	r28, 0x15	; 21
    1278:	dc 40       	sbci	r29, 0x0C	; 12
    127a:	86 eb       	ldi	r24, 0xB6	; 182
    127c:	fe 01       	movw	r30, r28
    127e:	ef 59       	subi	r30, 0x9F	; 159
    1280:	f4 4f       	sbci	r31, 0xF4	; 244
    1282:	ac e2       	ldi	r26, 0x2C	; 44
    1284:	b1 e0       	ldi	r27, 0x01	; 1
    1286:	01 90       	ld	r0, Z+
    1288:	0d 92       	st	X+, r0
    128a:	8a 95       	dec	r24
    128c:	e1 f7       	brne	.-8      	; 0x1286 <main+0x974>
	
	matrix = clearSingleMatrix(matrix);
    128e:	20 91 24 01 	lds	r18, 0x0124
    1292:	30 91 25 01 	lds	r19, 0x0125
    1296:	40 91 26 01 	lds	r20, 0x0126
    129a:	50 91 27 01 	lds	r21, 0x0127
    129e:	60 91 28 01 	lds	r22, 0x0128
    12a2:	70 91 29 01 	lds	r23, 0x0129
    12a6:	80 91 2a 01 	lds	r24, 0x012A
    12aa:	90 91 2b 01 	lds	r25, 0x012B
    12ae:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    12b2:	d8 01       	movw	r26, r16
    12b4:	2c 93       	st	X, r18
    12b6:	11 96       	adiw	r26, 0x01	; 1
    12b8:	3c 93       	st	X, r19
    12ba:	11 97       	sbiw	r26, 0x01	; 1
    12bc:	13 96       	adiw	r26, 0x03	; 3
    12be:	5c 93       	st	X, r21
    12c0:	13 97       	sbiw	r26, 0x03	; 3
    12c2:	14 96       	adiw	r26, 0x04	; 4
    12c4:	6c 93       	st	X, r22
    12c6:	14 97       	sbiw	r26, 0x04	; 4
    12c8:	16 96       	adiw	r26, 0x06	; 6
    12ca:	8c 93       	st	X, r24
    12cc:	16 97       	sbiw	r26, 0x06	; 6
    12ce:	17 96       	adiw	r26, 0x07	; 7
    12d0:	9c 93       	st	X, r25
    12d2:	17 97       	sbiw	r26, 0x07	; 7
    12d4:	4f 7b       	andi	r20, 0xBF	; 191
	matrix.m[2] = SetBit(matrix.m[2], 6, 0);
    12d6:	12 96       	adiw	r26, 0x02	; 2
    12d8:	4c 93       	st	X, r20
    12da:	12 97       	sbiw	r26, 0x02	; 2
    12dc:	7f 7b       	andi	r23, 0xBF	; 191
	matrix.m[5] = SetBit(matrix.m[5], 6, 0);
    12de:	15 96       	adiw	r26, 0x05	; 5
    12e0:	7c 93       	st	X, r23
    12e2:	86 eb       	ldi	r24, 0xB6	; 182
    12e4:	ec e2       	ldi	r30, 0x2C	; 44
    12e6:	f1 e0       	ldi	r31, 0x01	; 1
    12e8:	de 01       	movw	r26, r28
    12ea:	a5 55       	subi	r26, 0x55	; 85
    12ec:	b5 4f       	sbci	r27, 0xF5	; 245
    12ee:	01 90       	ld	r0, Z+
    12f0:	0d 92       	st	X+, r0
    12f2:	8a 95       	dec	r24
    12f4:	e1 f7       	brne	.-8      	; 0x12ee <main+0x9dc>
    12f6:	f6 01       	movw	r30, r12
    12f8:	80 81       	ld	r24, Z
    12fa:	98 e0       	ldi	r25, 0x08	; 8
    12fc:	f8 01       	movw	r30, r16
    12fe:	de 01       	movw	r26, r28
    1300:	ab 59       	subi	r26, 0x9B	; 155
    1302:	b7 4e       	sbci	r27, 0xE7	; 231
    1304:	01 90       	ld	r0, Z+
    1306:	0d 92       	st	X+, r0
    1308:	9a 95       	dec	r25
    130a:	e1 f7       	brne	.-8      	; 0x1304 <main+0x9f2>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    130c:	ab ea       	ldi	r26, 0xAB	; 171
    130e:	ba e0       	ldi	r27, 0x0A	; 10
    1310:	ac 0f       	add	r26, r28
    1312:	bd 1f       	adc	r27, r29
    1314:	f8 e0       	ldi	r31, 0x08	; 8
    1316:	8f 9f       	mul	r24, r31
    1318:	a0 0d       	add	r26, r0
    131a:	b1 1d       	adc	r27, r1
    131c:	11 24       	eor	r1, r1
    131e:	98 e0       	ldi	r25, 0x08	; 8
    1320:	fe 01       	movw	r30, r28
    1322:	eb 59       	subi	r30, 0x9B	; 155
    1324:	f7 4e       	sbci	r31, 0xE7	; 231
    1326:	01 90       	ld	r0, Z+
    1328:	0d 92       	st	X+, r0
    132a:	9a 95       	dec	r25
    132c:	e1 f7       	brne	.-8      	; 0x1326 <main+0xa14>
	explosions.timeBetween[explosions.index] = a;
    132e:	2b ea       	ldi	r18, 0xAB	; 171
    1330:	3a e0       	ldi	r19, 0x0A	; 10
    1332:	2c 0f       	add	r18, r28
    1334:	3d 1f       	adc	r19, r29
    1336:	28 0f       	add	r18, r24
    1338:	31 1d       	adc	r19, r1
    133a:	f9 01       	movw	r30, r18
    133c:	e0 57       	subi	r30, 0x70	; 112
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1342:	72 96       	adiw	r30, 0x12	; 18
    1344:	f0 82       	st	Z, r15
	explosions.index++;
    1346:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1348:	c1 5a       	subi	r28, 0xA1	; 161
    134a:	d4 4f       	sbci	r29, 0xF4	; 244
    134c:	88 83       	st	Y, r24
    134e:	cf 55       	subi	r28, 0x5F	; 95
    1350:	db 40       	sbci	r29, 0x0B	; 11
    1352:	96 eb       	ldi	r25, 0xB6	; 182
    1354:	fe 01       	movw	r30, r28
    1356:	e5 55       	subi	r30, 0x55	; 85
    1358:	f5 4f       	sbci	r31, 0xF5	; 245
    135a:	de 01       	movw	r26, r28
    135c:	ab 50       	subi	r26, 0x0B	; 11
    135e:	b6 4f       	sbci	r27, 0xF6	; 246
    1360:	01 90       	ld	r0, Z+
    1362:	0d 92       	st	X+, r0
    1364:	9a 95       	dec	r25
    1366:	e1 f7       	brne	.-8      	; 0x1360 <main+0xa4e>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1368:	c7 55       	subi	r28, 0x57	; 87
    136a:	d5 4f       	sbci	r29, 0xF5	; 245
    136c:	88 83       	st	Y, r24
    136e:	c9 5a       	subi	r28, 0xA9	; 169
    1370:	da 40       	sbci	r29, 0x0A	; 10
    1372:	86 eb       	ldi	r24, 0xB6	; 182
    1374:	fe 01       	movw	r30, r28
    1376:	eb 50       	subi	r30, 0x0B	; 11
    1378:	f6 4f       	sbci	r31, 0xF6	; 246
    137a:	ac e2       	ldi	r26, 0x2C	; 44
    137c:	b1 e0       	ldi	r27, 0x01	; 1
    137e:	01 90       	ld	r0, Z+
    1380:	0d 92       	st	X+, r0
    1382:	8a 95       	dec	r24
    1384:	e1 f7       	brne	.-8      	; 0x137e <main+0xa6c>
	
	matrix = clearSingleMatrix(matrix);
    1386:	20 91 24 01 	lds	r18, 0x0124
    138a:	30 91 25 01 	lds	r19, 0x0125
    138e:	40 91 26 01 	lds	r20, 0x0126
    1392:	50 91 27 01 	lds	r21, 0x0127
    1396:	60 91 28 01 	lds	r22, 0x0128
    139a:	70 91 29 01 	lds	r23, 0x0129
    139e:	80 91 2a 01 	lds	r24, 0x012A
    13a2:	90 91 2b 01 	lds	r25, 0x012B
    13a6:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    13aa:	d8 01       	movw	r26, r16
    13ac:	2c 93       	st	X, r18
    13ae:	11 96       	adiw	r26, 0x01	; 1
    13b0:	3c 93       	st	X, r19
    13b2:	11 97       	sbiw	r26, 0x01	; 1
    13b4:	13 96       	adiw	r26, 0x03	; 3
    13b6:	5c 93       	st	X, r21
    13b8:	13 97       	sbiw	r26, 0x03	; 3
    13ba:	14 96       	adiw	r26, 0x04	; 4
    13bc:	6c 93       	st	X, r22
    13be:	14 97       	sbiw	r26, 0x04	; 4
    13c0:	16 96       	adiw	r26, 0x06	; 6
    13c2:	8c 93       	st	X, r24
    13c4:	16 97       	sbiw	r26, 0x06	; 6
    13c6:	17 96       	adiw	r26, 0x07	; 7
    13c8:	9c 93       	st	X, r25
    13ca:	17 97       	sbiw	r26, 0x07	; 7
    13cc:	4f 7d       	andi	r20, 0xDF	; 223
	matrix.m[2] = SetBit(matrix.m[2], 5, 0);
    13ce:	12 96       	adiw	r26, 0x02	; 2
    13d0:	4c 93       	st	X, r20
    13d2:	12 97       	sbiw	r26, 0x02	; 2
    13d4:	7f 7d       	andi	r23, 0xDF	; 223
	matrix.m[5] = SetBit(matrix.m[5], 5, 0);
    13d6:	15 96       	adiw	r26, 0x05	; 5
    13d8:	7c 93       	st	X, r23
    13da:	86 eb       	ldi	r24, 0xB6	; 182
    13dc:	ec e2       	ldi	r30, 0x2C	; 44
    13de:	f1 e0       	ldi	r31, 0x01	; 1
    13e0:	de 01       	movw	r26, r28
    13e2:	a1 5c       	subi	r26, 0xC1	; 193
    13e4:	b6 4f       	sbci	r27, 0xF6	; 246
    13e6:	01 90       	ld	r0, Z+
    13e8:	0d 92       	st	X+, r0
    13ea:	8a 95       	dec	r24
    13ec:	e1 f7       	brne	.-8      	; 0x13e6 <main+0xad4>
    13ee:	f6 01       	movw	r30, r12
    13f0:	80 81       	ld	r24, Z
    13f2:	98 e0       	ldi	r25, 0x08	; 8
    13f4:	f8 01       	movw	r30, r16
    13f6:	de 01       	movw	r26, r28
    13f8:	a3 5a       	subi	r26, 0xA3	; 163
    13fa:	b7 4e       	sbci	r27, 0xE7	; 231
    13fc:	01 90       	ld	r0, Z+
    13fe:	0d 92       	st	X+, r0
    1400:	9a 95       	dec	r25
    1402:	e1 f7       	brne	.-8      	; 0x13fc <main+0xaea>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1404:	af e3       	ldi	r26, 0x3F	; 63
    1406:	b9 e0       	ldi	r27, 0x09	; 9
    1408:	ac 0f       	add	r26, r28
    140a:	bd 1f       	adc	r27, r29
    140c:	f8 e0       	ldi	r31, 0x08	; 8
    140e:	8f 9f       	mul	r24, r31
    1410:	a0 0d       	add	r26, r0
    1412:	b1 1d       	adc	r27, r1
    1414:	11 24       	eor	r1, r1
    1416:	98 e0       	ldi	r25, 0x08	; 8
    1418:	fe 01       	movw	r30, r28
    141a:	e3 5a       	subi	r30, 0xA3	; 163
    141c:	f7 4e       	sbci	r31, 0xE7	; 231
    141e:	01 90       	ld	r0, Z+
    1420:	0d 92       	st	X+, r0
    1422:	9a 95       	dec	r25
    1424:	e1 f7       	brne	.-8      	; 0x141e <main+0xb0c>
	explosions.timeBetween[explosions.index] = a;
    1426:	2f e3       	ldi	r18, 0x3F	; 63
    1428:	39 e0       	ldi	r19, 0x09	; 9
    142a:	2c 0f       	add	r18, r28
    142c:	3d 1f       	adc	r19, r29
    142e:	28 0f       	add	r18, r24
    1430:	31 1d       	adc	r19, r1
    1432:	f9 01       	movw	r30, r18
    1434:	e0 57       	subi	r30, 0x70	; 112
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    143a:	72 96       	adiw	r30, 0x12	; 18
    143c:	f0 82       	st	Z, r15
	explosions.index++;
    143e:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1440:	cd 50       	subi	r28, 0x0D	; 13
    1442:	d6 4f       	sbci	r29, 0xF6	; 246
    1444:	88 83       	st	Y, r24
    1446:	c3 5f       	subi	r28, 0xF3	; 243
    1448:	d9 40       	sbci	r29, 0x09	; 9
    144a:	96 eb       	ldi	r25, 0xB6	; 182
    144c:	fe 01       	movw	r30, r28
    144e:	e1 5c       	subi	r30, 0xC1	; 193
    1450:	f6 4f       	sbci	r31, 0xF6	; 246
    1452:	de 01       	movw	r26, r28
    1454:	a7 57       	subi	r26, 0x77	; 119
    1456:	b7 4f       	sbci	r27, 0xF7	; 247
    1458:	01 90       	ld	r0, Z+
    145a:	0d 92       	st	X+, r0
    145c:	9a 95       	dec	r25
    145e:	e1 f7       	brne	.-8      	; 0x1458 <main+0xb46>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1460:	c3 5c       	subi	r28, 0xC3	; 195
    1462:	d6 4f       	sbci	r29, 0xF6	; 246
    1464:	88 83       	st	Y, r24
    1466:	cd 53       	subi	r28, 0x3D	; 61
    1468:	d9 40       	sbci	r29, 0x09	; 9
    146a:	86 eb       	ldi	r24, 0xB6	; 182
    146c:	fe 01       	movw	r30, r28
    146e:	e7 57       	subi	r30, 0x77	; 119
    1470:	f7 4f       	sbci	r31, 0xF7	; 247
    1472:	ac e2       	ldi	r26, 0x2C	; 44
    1474:	b1 e0       	ldi	r27, 0x01	; 1
    1476:	01 90       	ld	r0, Z+
    1478:	0d 92       	st	X+, r0
    147a:	8a 95       	dec	r24
    147c:	e1 f7       	brne	.-8      	; 0x1476 <main+0xb64>
	
	matrix = clearSingleMatrix(matrix);
    147e:	20 91 24 01 	lds	r18, 0x0124
    1482:	30 91 25 01 	lds	r19, 0x0125
    1486:	40 91 26 01 	lds	r20, 0x0126
    148a:	50 91 27 01 	lds	r21, 0x0127
    148e:	60 91 28 01 	lds	r22, 0x0128
    1492:	70 91 29 01 	lds	r23, 0x0129
    1496:	80 91 2a 01 	lds	r24, 0x012A
    149a:	90 91 2b 01 	lds	r25, 0x012B
    149e:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    14a2:	d8 01       	movw	r26, r16
    14a4:	2c 93       	st	X, r18
    14a6:	11 96       	adiw	r26, 0x01	; 1
    14a8:	3c 93       	st	X, r19
    14aa:	11 97       	sbiw	r26, 0x01	; 1
    14ac:	13 96       	adiw	r26, 0x03	; 3
    14ae:	5c 93       	st	X, r21
    14b0:	13 97       	sbiw	r26, 0x03	; 3
    14b2:	14 96       	adiw	r26, 0x04	; 4
    14b4:	6c 93       	st	X, r22
    14b6:	14 97       	sbiw	r26, 0x04	; 4
    14b8:	16 96       	adiw	r26, 0x06	; 6
    14ba:	8c 93       	st	X, r24
    14bc:	16 97       	sbiw	r26, 0x06	; 6
    14be:	17 96       	adiw	r26, 0x07	; 7
    14c0:	9c 93       	st	X, r25
    14c2:	17 97       	sbiw	r26, 0x07	; 7
    14c4:	4f 7e       	andi	r20, 0xEF	; 239
	matrix.m[2] = SetBit(matrix.m[2], 4, 0);
    14c6:	12 96       	adiw	r26, 0x02	; 2
    14c8:	4c 93       	st	X, r20
    14ca:	12 97       	sbiw	r26, 0x02	; 2
    14cc:	7f 7e       	andi	r23, 0xEF	; 239
	matrix.m[5] = SetBit(matrix.m[5], 4, 0);
    14ce:	15 96       	adiw	r26, 0x05	; 5
    14d0:	7c 93       	st	X, r23
    14d2:	86 eb       	ldi	r24, 0xB6	; 182
    14d4:	ec e2       	ldi	r30, 0x2C	; 44
    14d6:	f1 e0       	ldi	r31, 0x01	; 1
    14d8:	de 01       	movw	r26, r28
    14da:	ad 52       	subi	r26, 0x2D	; 45
    14dc:	b8 4f       	sbci	r27, 0xF8	; 248
    14de:	01 90       	ld	r0, Z+
    14e0:	0d 92       	st	X+, r0
    14e2:	8a 95       	dec	r24
    14e4:	e1 f7       	brne	.-8      	; 0x14de <main+0xbcc>
    14e6:	f6 01       	movw	r30, r12
    14e8:	80 81       	ld	r24, Z
    14ea:	98 e0       	ldi	r25, 0x08	; 8
    14ec:	f8 01       	movw	r30, r16
    14ee:	de 01       	movw	r26, r28
    14f0:	ab 5a       	subi	r26, 0xAB	; 171
    14f2:	b7 4e       	sbci	r27, 0xE7	; 231
    14f4:	01 90       	ld	r0, Z+
    14f6:	0d 92       	st	X+, r0
    14f8:	9a 95       	dec	r25
    14fa:	e1 f7       	brne	.-8      	; 0x14f4 <main+0xbe2>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    14fc:	a3 ed       	ldi	r26, 0xD3	; 211
    14fe:	b7 e0       	ldi	r27, 0x07	; 7
    1500:	ac 0f       	add	r26, r28
    1502:	bd 1f       	adc	r27, r29
    1504:	f8 e0       	ldi	r31, 0x08	; 8
    1506:	8f 9f       	mul	r24, r31
    1508:	a0 0d       	add	r26, r0
    150a:	b1 1d       	adc	r27, r1
    150c:	11 24       	eor	r1, r1
    150e:	98 e0       	ldi	r25, 0x08	; 8
    1510:	fe 01       	movw	r30, r28
    1512:	eb 5a       	subi	r30, 0xAB	; 171
    1514:	f7 4e       	sbci	r31, 0xE7	; 231
    1516:	01 90       	ld	r0, Z+
    1518:	0d 92       	st	X+, r0
    151a:	9a 95       	dec	r25
    151c:	e1 f7       	brne	.-8      	; 0x1516 <main+0xc04>
	explosions.timeBetween[explosions.index] = a;
    151e:	23 ed       	ldi	r18, 0xD3	; 211
    1520:	37 e0       	ldi	r19, 0x07	; 7
    1522:	2c 0f       	add	r18, r28
    1524:	3d 1f       	adc	r19, r29
    1526:	28 0f       	add	r18, r24
    1528:	31 1d       	adc	r19, r1
    152a:	f9 01       	movw	r30, r18
    152c:	e0 57       	subi	r30, 0x70	; 112
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1532:	72 96       	adiw	r30, 0x12	; 18
    1534:	f0 82       	st	Z, r15
	explosions.index++;
    1536:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1538:	c9 57       	subi	r28, 0x79	; 121
    153a:	d7 4f       	sbci	r29, 0xF7	; 247
    153c:	88 83       	st	Y, r24
    153e:	c7 58       	subi	r28, 0x87	; 135
    1540:	d8 40       	sbci	r29, 0x08	; 8
    1542:	96 eb       	ldi	r25, 0xB6	; 182
    1544:	fe 01       	movw	r30, r28
    1546:	ed 52       	subi	r30, 0x2D	; 45
    1548:	f8 4f       	sbci	r31, 0xF8	; 248
    154a:	de 01       	movw	r26, r28
    154c:	a3 5e       	subi	r26, 0xE3	; 227
    154e:	b8 4f       	sbci	r27, 0xF8	; 248
    1550:	01 90       	ld	r0, Z+
    1552:	0d 92       	st	X+, r0
    1554:	9a 95       	dec	r25
    1556:	e1 f7       	brne	.-8      	; 0x1550 <main+0xc3e>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1558:	cf 52       	subi	r28, 0x2F	; 47
    155a:	d8 4f       	sbci	r29, 0xF8	; 248
    155c:	88 83       	st	Y, r24
    155e:	c1 5d       	subi	r28, 0xD1	; 209
    1560:	d7 40       	sbci	r29, 0x07	; 7
    1562:	86 eb       	ldi	r24, 0xB6	; 182
    1564:	fe 01       	movw	r30, r28
    1566:	e3 5e       	subi	r30, 0xE3	; 227
    1568:	f8 4f       	sbci	r31, 0xF8	; 248
    156a:	ac e2       	ldi	r26, 0x2C	; 44
    156c:	b1 e0       	ldi	r27, 0x01	; 1
    156e:	01 90       	ld	r0, Z+
    1570:	0d 92       	st	X+, r0
    1572:	8a 95       	dec	r24
    1574:	e1 f7       	brne	.-8      	; 0x156e <main+0xc5c>
	
	matrix = clearSingleMatrix(matrix);
    1576:	20 91 24 01 	lds	r18, 0x0124
    157a:	30 91 25 01 	lds	r19, 0x0125
    157e:	40 91 26 01 	lds	r20, 0x0126
    1582:	50 91 27 01 	lds	r21, 0x0127
    1586:	60 91 28 01 	lds	r22, 0x0128
    158a:	70 91 29 01 	lds	r23, 0x0129
    158e:	80 91 2a 01 	lds	r24, 0x012A
    1592:	90 91 2b 01 	lds	r25, 0x012B
    1596:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    159a:	d8 01       	movw	r26, r16
    159c:	2c 93       	st	X, r18
    159e:	11 96       	adiw	r26, 0x01	; 1
    15a0:	3c 93       	st	X, r19
    15a2:	11 97       	sbiw	r26, 0x01	; 1
    15a4:	13 96       	adiw	r26, 0x03	; 3
    15a6:	5c 93       	st	X, r21
    15a8:	13 97       	sbiw	r26, 0x03	; 3
    15aa:	14 96       	adiw	r26, 0x04	; 4
    15ac:	6c 93       	st	X, r22
    15ae:	14 97       	sbiw	r26, 0x04	; 4
    15b0:	16 96       	adiw	r26, 0x06	; 6
    15b2:	8c 93       	st	X, r24
    15b4:	16 97       	sbiw	r26, 0x06	; 6
    15b6:	17 96       	adiw	r26, 0x07	; 7
    15b8:	9c 93       	st	X, r25
    15ba:	17 97       	sbiw	r26, 0x07	; 7
    15bc:	47 7f       	andi	r20, 0xF7	; 247
	matrix.m[2] = SetBit(matrix.m[2], 3, 0);
    15be:	12 96       	adiw	r26, 0x02	; 2
    15c0:	4c 93       	st	X, r20
    15c2:	12 97       	sbiw	r26, 0x02	; 2
    15c4:	77 7f       	andi	r23, 0xF7	; 247
	matrix.m[5] = SetBit(matrix.m[5], 3, 0);
    15c6:	15 96       	adiw	r26, 0x05	; 5
    15c8:	7c 93       	st	X, r23
    15ca:	86 eb       	ldi	r24, 0xB6	; 182
    15cc:	ec e2       	ldi	r30, 0x2C	; 44
    15ce:	f1 e0       	ldi	r31, 0x01	; 1
    15d0:	de 01       	movw	r26, r28
    15d2:	a9 59       	subi	r26, 0x99	; 153
    15d4:	b9 4f       	sbci	r27, 0xF9	; 249
    15d6:	01 90       	ld	r0, Z+
    15d8:	0d 92       	st	X+, r0
    15da:	8a 95       	dec	r24
    15dc:	e1 f7       	brne	.-8      	; 0x15d6 <main+0xcc4>
    15de:	f6 01       	movw	r30, r12
    15e0:	80 81       	ld	r24, Z
    15e2:	98 e0       	ldi	r25, 0x08	; 8
    15e4:	f8 01       	movw	r30, r16
    15e6:	de 01       	movw	r26, r28
    15e8:	a3 5b       	subi	r26, 0xB3	; 179
    15ea:	b7 4e       	sbci	r27, 0xE7	; 231
    15ec:	01 90       	ld	r0, Z+
    15ee:	0d 92       	st	X+, r0
    15f0:	9a 95       	dec	r25
    15f2:	e1 f7       	brne	.-8      	; 0x15ec <main+0xcda>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    15f4:	a7 e6       	ldi	r26, 0x67	; 103
    15f6:	b6 e0       	ldi	r27, 0x06	; 6
    15f8:	ac 0f       	add	r26, r28
    15fa:	bd 1f       	adc	r27, r29
    15fc:	f8 e0       	ldi	r31, 0x08	; 8
    15fe:	8f 9f       	mul	r24, r31
    1600:	a0 0d       	add	r26, r0
    1602:	b1 1d       	adc	r27, r1
    1604:	11 24       	eor	r1, r1
    1606:	98 e0       	ldi	r25, 0x08	; 8
    1608:	fe 01       	movw	r30, r28
    160a:	e3 5b       	subi	r30, 0xB3	; 179
    160c:	f7 4e       	sbci	r31, 0xE7	; 231
    160e:	01 90       	ld	r0, Z+
    1610:	0d 92       	st	X+, r0
    1612:	9a 95       	dec	r25
    1614:	e1 f7       	brne	.-8      	; 0x160e <main+0xcfc>
	explosions.timeBetween[explosions.index] = a;
    1616:	27 e6       	ldi	r18, 0x67	; 103
    1618:	36 e0       	ldi	r19, 0x06	; 6
    161a:	2c 0f       	add	r18, r28
    161c:	3d 1f       	adc	r19, r29
    161e:	28 0f       	add	r18, r24
    1620:	31 1d       	adc	r19, r1
    1622:	f9 01       	movw	r30, r18
    1624:	e0 57       	subi	r30, 0x70	; 112
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    162a:	72 96       	adiw	r30, 0x12	; 18
    162c:	f0 82       	st	Z, r15
	explosions.index++;
    162e:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1630:	c5 5e       	subi	r28, 0xE5	; 229
    1632:	d8 4f       	sbci	r29, 0xF8	; 248
    1634:	88 83       	st	Y, r24
    1636:	cb 51       	subi	r28, 0x1B	; 27
    1638:	d7 40       	sbci	r29, 0x07	; 7
    163a:	96 eb       	ldi	r25, 0xB6	; 182
    163c:	fe 01       	movw	r30, r28
    163e:	e9 59       	subi	r30, 0x99	; 153
    1640:	f9 4f       	sbci	r31, 0xF9	; 249
    1642:	de 01       	movw	r26, r28
    1644:	af 54       	subi	r26, 0x4F	; 79
    1646:	ba 4f       	sbci	r27, 0xFA	; 250
    1648:	01 90       	ld	r0, Z+
    164a:	0d 92       	st	X+, r0
    164c:	9a 95       	dec	r25
    164e:	e1 f7       	brne	.-8      	; 0x1648 <main+0xd36>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1650:	cb 59       	subi	r28, 0x9B	; 155
    1652:	d9 4f       	sbci	r29, 0xF9	; 249
    1654:	88 83       	st	Y, r24
    1656:	c5 56       	subi	r28, 0x65	; 101
    1658:	d6 40       	sbci	r29, 0x06	; 6
    165a:	86 eb       	ldi	r24, 0xB6	; 182
    165c:	fe 01       	movw	r30, r28
    165e:	ef 54       	subi	r30, 0x4F	; 79
    1660:	fa 4f       	sbci	r31, 0xFA	; 250
    1662:	ac e2       	ldi	r26, 0x2C	; 44
    1664:	b1 e0       	ldi	r27, 0x01	; 1
    1666:	01 90       	ld	r0, Z+
    1668:	0d 92       	st	X+, r0
    166a:	8a 95       	dec	r24
    166c:	e1 f7       	brne	.-8      	; 0x1666 <main+0xd54>
	
	matrix = clearSingleMatrix(matrix);
    166e:	20 91 24 01 	lds	r18, 0x0124
    1672:	30 91 25 01 	lds	r19, 0x0125
    1676:	40 91 26 01 	lds	r20, 0x0126
    167a:	50 91 27 01 	lds	r21, 0x0127
    167e:	60 91 28 01 	lds	r22, 0x0128
    1682:	70 91 29 01 	lds	r23, 0x0129
    1686:	80 91 2a 01 	lds	r24, 0x012A
    168a:	90 91 2b 01 	lds	r25, 0x012B
    168e:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    1692:	d8 01       	movw	r26, r16
    1694:	2c 93       	st	X, r18
    1696:	11 96       	adiw	r26, 0x01	; 1
    1698:	3c 93       	st	X, r19
    169a:	11 97       	sbiw	r26, 0x01	; 1
    169c:	13 96       	adiw	r26, 0x03	; 3
    169e:	5c 93       	st	X, r21
    16a0:	13 97       	sbiw	r26, 0x03	; 3
    16a2:	14 96       	adiw	r26, 0x04	; 4
    16a4:	6c 93       	st	X, r22
    16a6:	14 97       	sbiw	r26, 0x04	; 4
    16a8:	16 96       	adiw	r26, 0x06	; 6
    16aa:	8c 93       	st	X, r24
    16ac:	16 97       	sbiw	r26, 0x06	; 6
    16ae:	17 96       	adiw	r26, 0x07	; 7
    16b0:	9c 93       	st	X, r25
    16b2:	17 97       	sbiw	r26, 0x07	; 7
    16b4:	4b 7f       	andi	r20, 0xFB	; 251
	matrix.m[2] = SetBit(matrix.m[2], 2, 0);
    16b6:	12 96       	adiw	r26, 0x02	; 2
    16b8:	4c 93       	st	X, r20
    16ba:	12 97       	sbiw	r26, 0x02	; 2
    16bc:	7b 7f       	andi	r23, 0xFB	; 251
	matrix.m[5] = SetBit(matrix.m[5], 2, 0);
    16be:	15 96       	adiw	r26, 0x05	; 5
    16c0:	7c 93       	st	X, r23
    16c2:	86 eb       	ldi	r24, 0xB6	; 182
    16c4:	ec e2       	ldi	r30, 0x2C	; 44
    16c6:	f1 e0       	ldi	r31, 0x01	; 1
    16c8:	de 01       	movw	r26, r28
    16ca:	a5 50       	subi	r26, 0x05	; 5
    16cc:	bb 4f       	sbci	r27, 0xFB	; 251
    16ce:	01 90       	ld	r0, Z+
    16d0:	0d 92       	st	X+, r0
    16d2:	8a 95       	dec	r24
    16d4:	e1 f7       	brne	.-8      	; 0x16ce <main+0xdbc>
    16d6:	f6 01       	movw	r30, r12
    16d8:	80 81       	ld	r24, Z
    16da:	98 e0       	ldi	r25, 0x08	; 8
    16dc:	f8 01       	movw	r30, r16
    16de:	de 01       	movw	r26, r28
    16e0:	ab 5b       	subi	r26, 0xBB	; 187
    16e2:	b7 4e       	sbci	r27, 0xE7	; 231
    16e4:	01 90       	ld	r0, Z+
    16e6:	0d 92       	st	X+, r0
    16e8:	9a 95       	dec	r25
    16ea:	e1 f7       	brne	.-8      	; 0x16e4 <main+0xdd2>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    16ec:	ab ef       	ldi	r26, 0xFB	; 251
    16ee:	b4 e0       	ldi	r27, 0x04	; 4
    16f0:	ac 0f       	add	r26, r28
    16f2:	bd 1f       	adc	r27, r29
    16f4:	f8 e0       	ldi	r31, 0x08	; 8
    16f6:	8f 9f       	mul	r24, r31
    16f8:	a0 0d       	add	r26, r0
    16fa:	b1 1d       	adc	r27, r1
    16fc:	11 24       	eor	r1, r1
    16fe:	98 e0       	ldi	r25, 0x08	; 8
    1700:	fe 01       	movw	r30, r28
    1702:	eb 5b       	subi	r30, 0xBB	; 187
    1704:	f7 4e       	sbci	r31, 0xE7	; 231
    1706:	01 90       	ld	r0, Z+
    1708:	0d 92       	st	X+, r0
    170a:	9a 95       	dec	r25
    170c:	e1 f7       	brne	.-8      	; 0x1706 <main+0xdf4>
	explosions.timeBetween[explosions.index] = a;
    170e:	2b ef       	ldi	r18, 0xFB	; 251
    1710:	34 e0       	ldi	r19, 0x04	; 4
    1712:	2c 0f       	add	r18, r28
    1714:	3d 1f       	adc	r19, r29
    1716:	28 0f       	add	r18, r24
    1718:	31 1d       	adc	r19, r1
    171a:	f9 01       	movw	r30, r18
    171c:	e0 57       	subi	r30, 0x70	; 112
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1722:	72 96       	adiw	r30, 0x12	; 18
    1724:	f0 82       	st	Z, r15
	explosions.index++;
    1726:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1728:	c1 55       	subi	r28, 0x51	; 81
    172a:	da 4f       	sbci	r29, 0xFA	; 250
    172c:	88 83       	st	Y, r24
    172e:	cf 5a       	subi	r28, 0xAF	; 175
    1730:	d5 40       	sbci	r29, 0x05	; 5
    1732:	96 eb       	ldi	r25, 0xB6	; 182
    1734:	fe 01       	movw	r30, r28
    1736:	e5 50       	subi	r30, 0x05	; 5
    1738:	fb 4f       	sbci	r31, 0xFB	; 251
    173a:	de 01       	movw	r26, r28
    173c:	ab 5b       	subi	r26, 0xBB	; 187
    173e:	bb 4f       	sbci	r27, 0xFB	; 251
    1740:	01 90       	ld	r0, Z+
    1742:	0d 92       	st	X+, r0
    1744:	9a 95       	dec	r25
    1746:	e1 f7       	brne	.-8      	; 0x1740 <main+0xe2e>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1748:	c7 50       	subi	r28, 0x07	; 7
    174a:	db 4f       	sbci	r29, 0xFB	; 251
    174c:	88 83       	st	Y, r24
    174e:	c9 5f       	subi	r28, 0xF9	; 249
    1750:	d4 40       	sbci	r29, 0x04	; 4
    1752:	86 eb       	ldi	r24, 0xB6	; 182
    1754:	fe 01       	movw	r30, r28
    1756:	eb 5b       	subi	r30, 0xBB	; 187
    1758:	fb 4f       	sbci	r31, 0xFB	; 251
    175a:	ac e2       	ldi	r26, 0x2C	; 44
    175c:	b1 e0       	ldi	r27, 0x01	; 1
    175e:	01 90       	ld	r0, Z+
    1760:	0d 92       	st	X+, r0
    1762:	8a 95       	dec	r24
    1764:	e1 f7       	brne	.-8      	; 0x175e <main+0xe4c>
	
	matrix = clearSingleMatrix(matrix);
    1766:	20 91 24 01 	lds	r18, 0x0124
    176a:	30 91 25 01 	lds	r19, 0x0125
    176e:	40 91 26 01 	lds	r20, 0x0126
    1772:	50 91 27 01 	lds	r21, 0x0127
    1776:	60 91 28 01 	lds	r22, 0x0128
    177a:	70 91 29 01 	lds	r23, 0x0129
    177e:	80 91 2a 01 	lds	r24, 0x012A
    1782:	90 91 2b 01 	lds	r25, 0x012B
    1786:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    178a:	d8 01       	movw	r26, r16
    178c:	2c 93       	st	X, r18
    178e:	11 96       	adiw	r26, 0x01	; 1
    1790:	3c 93       	st	X, r19
    1792:	11 97       	sbiw	r26, 0x01	; 1
    1794:	13 96       	adiw	r26, 0x03	; 3
    1796:	5c 93       	st	X, r21
    1798:	13 97       	sbiw	r26, 0x03	; 3
    179a:	14 96       	adiw	r26, 0x04	; 4
    179c:	6c 93       	st	X, r22
    179e:	14 97       	sbiw	r26, 0x04	; 4
    17a0:	16 96       	adiw	r26, 0x06	; 6
    17a2:	8c 93       	st	X, r24
    17a4:	16 97       	sbiw	r26, 0x06	; 6
    17a6:	17 96       	adiw	r26, 0x07	; 7
    17a8:	9c 93       	st	X, r25
    17aa:	17 97       	sbiw	r26, 0x07	; 7
    17ac:	4d 7f       	andi	r20, 0xFD	; 253
	matrix.m[2] = SetBit(matrix.m[2], 1, 0);
    17ae:	12 96       	adiw	r26, 0x02	; 2
    17b0:	4c 93       	st	X, r20
    17b2:	12 97       	sbiw	r26, 0x02	; 2
    17b4:	7d 7f       	andi	r23, 0xFD	; 253
	matrix.m[5] = SetBit(matrix.m[5], 1, 0);
    17b6:	15 96       	adiw	r26, 0x05	; 5
    17b8:	7c 93       	st	X, r23
    17ba:	86 eb       	ldi	r24, 0xB6	; 182
    17bc:	ec e2       	ldi	r30, 0x2C	; 44
    17be:	f1 e0       	ldi	r31, 0x01	; 1
    17c0:	de 01       	movw	r26, r28
    17c2:	a1 57       	subi	r26, 0x71	; 113
    17c4:	bc 4f       	sbci	r27, 0xFC	; 252
    17c6:	01 90       	ld	r0, Z+
    17c8:	0d 92       	st	X+, r0
    17ca:	8a 95       	dec	r24
    17cc:	e1 f7       	brne	.-8      	; 0x17c6 <main+0xeb4>
    17ce:	f6 01       	movw	r30, r12
    17d0:	80 81       	ld	r24, Z
    17d2:	98 e0       	ldi	r25, 0x08	; 8
    17d4:	f8 01       	movw	r30, r16
    17d6:	de 01       	movw	r26, r28
    17d8:	a3 5c       	subi	r26, 0xC3	; 195
    17da:	b7 4e       	sbci	r27, 0xE7	; 231
    17dc:	01 90       	ld	r0, Z+
    17de:	0d 92       	st	X+, r0
    17e0:	9a 95       	dec	r25
    17e2:	e1 f7       	brne	.-8      	; 0x17dc <main+0xeca>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    17e4:	af e8       	ldi	r26, 0x8F	; 143
    17e6:	b3 e0       	ldi	r27, 0x03	; 3
    17e8:	ac 0f       	add	r26, r28
    17ea:	bd 1f       	adc	r27, r29
    17ec:	f8 e0       	ldi	r31, 0x08	; 8
    17ee:	8f 9f       	mul	r24, r31
    17f0:	a0 0d       	add	r26, r0
    17f2:	b1 1d       	adc	r27, r1
    17f4:	11 24       	eor	r1, r1
    17f6:	98 e0       	ldi	r25, 0x08	; 8
    17f8:	fe 01       	movw	r30, r28
    17fa:	e3 5c       	subi	r30, 0xC3	; 195
    17fc:	f7 4e       	sbci	r31, 0xE7	; 231
    17fe:	01 90       	ld	r0, Z+
    1800:	0d 92       	st	X+, r0
    1802:	9a 95       	dec	r25
    1804:	e1 f7       	brne	.-8      	; 0x17fe <main+0xeec>
	explosions.timeBetween[explosions.index] = a;
    1806:	2f e8       	ldi	r18, 0x8F	; 143
    1808:	33 e0       	ldi	r19, 0x03	; 3
    180a:	2c 0f       	add	r18, r28
    180c:	3d 1f       	adc	r19, r29
    180e:	28 0f       	add	r18, r24
    1810:	31 1d       	adc	r19, r1
    1812:	f9 01       	movw	r30, r18
    1814:	e0 57       	subi	r30, 0x70	; 112
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    181a:	72 96       	adiw	r30, 0x12	; 18
    181c:	f0 82       	st	Z, r15
	explosions.index++;
    181e:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1820:	cd 5b       	subi	r28, 0xBD	; 189
    1822:	db 4f       	sbci	r29, 0xFB	; 251
    1824:	88 83       	st	Y, r24
    1826:	c3 54       	subi	r28, 0x43	; 67
    1828:	d4 40       	sbci	r29, 0x04	; 4
    182a:	96 eb       	ldi	r25, 0xB6	; 182
    182c:	fe 01       	movw	r30, r28
    182e:	e1 57       	subi	r30, 0x71	; 113
    1830:	fc 4f       	sbci	r31, 0xFC	; 252
    1832:	de 01       	movw	r26, r28
    1834:	a7 52       	subi	r26, 0x27	; 39
    1836:	bd 4f       	sbci	r27, 0xFD	; 253
    1838:	01 90       	ld	r0, Z+
    183a:	0d 92       	st	X+, r0
    183c:	9a 95       	dec	r25
    183e:	e1 f7       	brne	.-8      	; 0x1838 <main+0xf26>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1840:	c3 57       	subi	r28, 0x73	; 115
    1842:	dc 4f       	sbci	r29, 0xFC	; 252
    1844:	88 83       	st	Y, r24
    1846:	cd 58       	subi	r28, 0x8D	; 141
    1848:	d3 40       	sbci	r29, 0x03	; 3
    184a:	86 eb       	ldi	r24, 0xB6	; 182
    184c:	fe 01       	movw	r30, r28
    184e:	e7 52       	subi	r30, 0x27	; 39
    1850:	fd 4f       	sbci	r31, 0xFD	; 253
    1852:	ac e2       	ldi	r26, 0x2C	; 44
    1854:	b1 e0       	ldi	r27, 0x01	; 1
    1856:	01 90       	ld	r0, Z+
    1858:	0d 92       	st	X+, r0
    185a:	8a 95       	dec	r24
    185c:	e1 f7       	brne	.-8      	; 0x1856 <main+0xf44>
	
	matrix = clearSingleMatrix(matrix);
    185e:	20 91 24 01 	lds	r18, 0x0124
    1862:	30 91 25 01 	lds	r19, 0x0125
    1866:	40 91 26 01 	lds	r20, 0x0126
    186a:	50 91 27 01 	lds	r21, 0x0127
    186e:	60 91 28 01 	lds	r22, 0x0128
    1872:	70 91 29 01 	lds	r23, 0x0129
    1876:	80 91 2a 01 	lds	r24, 0x012A
    187a:	90 91 2b 01 	lds	r25, 0x012B
    187e:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    1882:	d8 01       	movw	r26, r16
    1884:	2c 93       	st	X, r18
    1886:	11 96       	adiw	r26, 0x01	; 1
    1888:	3c 93       	st	X, r19
    188a:	11 97       	sbiw	r26, 0x01	; 1
    188c:	13 96       	adiw	r26, 0x03	; 3
    188e:	5c 93       	st	X, r21
    1890:	13 97       	sbiw	r26, 0x03	; 3
    1892:	14 96       	adiw	r26, 0x04	; 4
    1894:	6c 93       	st	X, r22
    1896:	14 97       	sbiw	r26, 0x04	; 4
    1898:	16 96       	adiw	r26, 0x06	; 6
    189a:	8c 93       	st	X, r24
    189c:	16 97       	sbiw	r26, 0x06	; 6
    189e:	17 96       	adiw	r26, 0x07	; 7
    18a0:	9c 93       	st	X, r25
    18a2:	17 97       	sbiw	r26, 0x07	; 7
    18a4:	4e 7f       	andi	r20, 0xFE	; 254
	matrix.m[2] = SetBit(matrix.m[2], 0, 0);
    18a6:	12 96       	adiw	r26, 0x02	; 2
    18a8:	4c 93       	st	X, r20
    18aa:	12 97       	sbiw	r26, 0x02	; 2
    18ac:	7e 7f       	andi	r23, 0xFE	; 254
	matrix.m[5] = SetBit(matrix.m[5], 0, 0);
    18ae:	15 96       	adiw	r26, 0x05	; 5
    18b0:	7c 93       	st	X, r23
    18b2:	86 eb       	ldi	r24, 0xB6	; 182
    18b4:	ec e2       	ldi	r30, 0x2C	; 44
    18b6:	f1 e0       	ldi	r31, 0x01	; 1
    18b8:	de 01       	movw	r26, r28
    18ba:	ad 5d       	subi	r26, 0xDD	; 221
    18bc:	bd 4f       	sbci	r27, 0xFD	; 253
    18be:	01 90       	ld	r0, Z+
    18c0:	0d 92       	st	X+, r0
    18c2:	8a 95       	dec	r24
    18c4:	e1 f7       	brne	.-8      	; 0x18be <main+0xfac>
    18c6:	f6 01       	movw	r30, r12
    18c8:	80 81       	ld	r24, Z
    18ca:	98 e0       	ldi	r25, 0x08	; 8
    18cc:	f8 01       	movw	r30, r16
    18ce:	de 01       	movw	r26, r28
    18d0:	ab 5c       	subi	r26, 0xCB	; 203
    18d2:	b7 4e       	sbci	r27, 0xE7	; 231
    18d4:	01 90       	ld	r0, Z+
    18d6:	0d 92       	st	X+, r0
    18d8:	9a 95       	dec	r25
    18da:	e1 f7       	brne	.-8      	; 0x18d4 <main+0xfc2>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    18dc:	a3 e2       	ldi	r26, 0x23	; 35
    18de:	b2 e0       	ldi	r27, 0x02	; 2
    18e0:	ac 0f       	add	r26, r28
    18e2:	bd 1f       	adc	r27, r29
    18e4:	f8 e0       	ldi	r31, 0x08	; 8
    18e6:	8f 9f       	mul	r24, r31
    18e8:	a0 0d       	add	r26, r0
    18ea:	b1 1d       	adc	r27, r1
    18ec:	11 24       	eor	r1, r1
    18ee:	98 e0       	ldi	r25, 0x08	; 8
    18f0:	fe 01       	movw	r30, r28
    18f2:	eb 5c       	subi	r30, 0xCB	; 203
    18f4:	f7 4e       	sbci	r31, 0xE7	; 231
    18f6:	01 90       	ld	r0, Z+
    18f8:	0d 92       	st	X+, r0
    18fa:	9a 95       	dec	r25
    18fc:	e1 f7       	brne	.-8      	; 0x18f6 <main+0xfe4>
	explosions.timeBetween[explosions.index] = a;
    18fe:	23 e2       	ldi	r18, 0x23	; 35
    1900:	32 e0       	ldi	r19, 0x02	; 2
    1902:	2c 0f       	add	r18, r28
    1904:	3d 1f       	adc	r19, r29
    1906:	28 0f       	add	r18, r24
    1908:	31 1d       	adc	r19, r1
    190a:	f9 01       	movw	r30, r18
    190c:	e0 57       	subi	r30, 0x70	; 112
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1912:	72 96       	adiw	r30, 0x12	; 18
    1914:	f0 82       	st	Z, r15
	explosions.index++;
    1916:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1918:	c9 52       	subi	r28, 0x29	; 41
    191a:	dd 4f       	sbci	r29, 0xFD	; 253
    191c:	88 83       	st	Y, r24
    191e:	c7 5d       	subi	r28, 0xD7	; 215
    1920:	d2 40       	sbci	r29, 0x02	; 2
    1922:	96 eb       	ldi	r25, 0xB6	; 182
    1924:	fe 01       	movw	r30, r28
    1926:	ed 5d       	subi	r30, 0xDD	; 221
    1928:	fd 4f       	sbci	r31, 0xFD	; 253
    192a:	de 01       	movw	r26, r28
    192c:	a3 59       	subi	r26, 0x93	; 147
    192e:	be 4f       	sbci	r27, 0xFE	; 254
    1930:	01 90       	ld	r0, Z+
    1932:	0d 92       	st	X+, r0
    1934:	9a 95       	dec	r25
    1936:	e1 f7       	brne	.-8      	; 0x1930 <main+0x101e>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1938:	cf 5d       	subi	r28, 0xDF	; 223
    193a:	dd 4f       	sbci	r29, 0xFD	; 253
    193c:	88 83       	st	Y, r24
    193e:	c1 52       	subi	r28, 0x21	; 33
    1940:	d2 40       	sbci	r29, 0x02	; 2
    1942:	86 eb       	ldi	r24, 0xB6	; 182
    1944:	fe 01       	movw	r30, r28
    1946:	e3 59       	subi	r30, 0x93	; 147
    1948:	fe 4f       	sbci	r31, 0xFE	; 254
    194a:	ac e2       	ldi	r26, 0x2C	; 44
    194c:	b1 e0       	ldi	r27, 0x01	; 1
    194e:	01 90       	ld	r0, Z+
    1950:	0d 92       	st	X+, r0
    1952:	8a 95       	dec	r24
    1954:	e1 f7       	brne	.-8      	; 0x194e <main+0x103c>
	
	matrix = clearSingleMatrix(matrix);
    1956:	20 91 24 01 	lds	r18, 0x0124
    195a:	30 91 25 01 	lds	r19, 0x0125
    195e:	40 91 26 01 	lds	r20, 0x0126
    1962:	50 91 27 01 	lds	r21, 0x0127
    1966:	60 91 28 01 	lds	r22, 0x0128
    196a:	70 91 29 01 	lds	r23, 0x0129
    196e:	80 91 2a 01 	lds	r24, 0x012A
    1972:	90 91 2b 01 	lds	r25, 0x012B
    1976:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    197a:	d8 01       	movw	r26, r16
    197c:	2c 93       	st	X, r18
    197e:	11 96       	adiw	r26, 0x01	; 1
    1980:	3c 93       	st	X, r19
    1982:	11 97       	sbiw	r26, 0x01	; 1
    1984:	12 96       	adiw	r26, 0x02	; 2
    1986:	4c 93       	st	X, r20
    1988:	12 97       	sbiw	r26, 0x02	; 2
    198a:	15 96       	adiw	r26, 0x05	; 5
    198c:	7c 93       	st	X, r23
    198e:	15 97       	sbiw	r26, 0x05	; 5
    1990:	16 96       	adiw	r26, 0x06	; 6
    1992:	8c 93       	st	X, r24
    1994:	16 97       	sbiw	r26, 0x06	; 6
    1996:	17 96       	adiw	r26, 0x07	; 7
    1998:	9c 93       	st	X, r25
    199a:	17 97       	sbiw	r26, 0x07	; 7
	matrix.m[3] = 0x00;
    199c:	13 96       	adiw	r26, 0x03	; 3
    199e:	1c 92       	st	X, r1
    19a0:	13 97       	sbiw	r26, 0x03	; 3
	matrix.m[4] = 0x00;
    19a2:	14 96       	adiw	r26, 0x04	; 4
    19a4:	1c 92       	st	X, r1
    19a6:	86 eb       	ldi	r24, 0xB6	; 182
    19a8:	ec e2       	ldi	r30, 0x2C	; 44
    19aa:	f1 e0       	ldi	r31, 0x01	; 1
    19ac:	de 01       	movw	r26, r28
    19ae:	a9 54       	subi	r26, 0x49	; 73
    19b0:	bf 4f       	sbci	r27, 0xFF	; 255
    19b2:	01 90       	ld	r0, Z+
    19b4:	0d 92       	st	X+, r0
    19b6:	8a 95       	dec	r24
    19b8:	e1 f7       	brne	.-8      	; 0x19b2 <main+0x10a0>
    19ba:	f6 01       	movw	r30, r12
    19bc:	80 81       	ld	r24, Z
    19be:	98 e0       	ldi	r25, 0x08	; 8
    19c0:	f8 01       	movw	r30, r16
    19c2:	de 01       	movw	r26, r28
    19c4:	a3 5d       	subi	r26, 0xD3	; 211
    19c6:	b7 4e       	sbci	r27, 0xE7	; 231
    19c8:	01 90       	ld	r0, Z+
    19ca:	0d 92       	st	X+, r0
    19cc:	9a 95       	dec	r25
    19ce:	e1 f7       	brne	.-8      	; 0x19c8 <main+0x10b6>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    19d0:	a7 eb       	ldi	r26, 0xB7	; 183
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	ac 0f       	add	r26, r28
    19d6:	bd 1f       	adc	r27, r29
    19d8:	f8 e0       	ldi	r31, 0x08	; 8
    19da:	8f 9f       	mul	r24, r31
    19dc:	a0 0d       	add	r26, r0
    19de:	b1 1d       	adc	r27, r1
    19e0:	11 24       	eor	r1, r1
    19e2:	98 e0       	ldi	r25, 0x08	; 8
    19e4:	fe 01       	movw	r30, r28
    19e6:	e3 5d       	subi	r30, 0xD3	; 211
    19e8:	f7 4e       	sbci	r31, 0xE7	; 231
    19ea:	01 90       	ld	r0, Z+
    19ec:	0d 92       	st	X+, r0
    19ee:	9a 95       	dec	r25
    19f0:	e1 f7       	brne	.-8      	; 0x19ea <main+0x10d8>
	explosions.timeBetween[explosions.index] = a;
    19f2:	27 eb       	ldi	r18, 0xB7	; 183
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	2c 0f       	add	r18, r28
    19f8:	3d 1f       	adc	r19, r29
    19fa:	28 0f       	add	r18, r24
    19fc:	31 1d       	adc	r19, r1
    19fe:	f9 01       	movw	r30, r18
    1a00:	e0 57       	subi	r30, 0x70	; 112
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1a06:	72 96       	adiw	r30, 0x12	; 18
    1a08:	f0 82       	st	Z, r15
	explosions.index++;
    1a0a:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1a0c:	c5 59       	subi	r28, 0x95	; 149
    1a0e:	de 4f       	sbci	r29, 0xFE	; 254
    1a10:	88 83       	st	Y, r24
    1a12:	cb 56       	subi	r28, 0x6B	; 107
    1a14:	d1 40       	sbci	r29, 0x01	; 1
    1a16:	96 eb       	ldi	r25, 0xB6	; 182
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e9 54       	subi	r30, 0x49	; 73
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	de 01       	movw	r26, r28
    1a20:	11 96       	adiw	r26, 0x01	; 1
    1a22:	01 90       	ld	r0, Z+
    1a24:	0d 92       	st	X+, r0
    1a26:	9a 95       	dec	r25
    1a28:	e1 f7       	brne	.-8      	; 0x1a22 <main+0x1110>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1a2a:	cb 54       	subi	r28, 0x4B	; 75
    1a2c:	df 4f       	sbci	r29, 0xFF	; 255
    1a2e:	88 83       	st	Y, r24
    1a30:	c5 5b       	subi	r28, 0xB5	; 181
    1a32:	d0 40       	sbci	r29, 0x00	; 0
    1a34:	86 eb       	ldi	r24, 0xB6	; 182
    1a36:	fe 01       	movw	r30, r28
    1a38:	31 96       	adiw	r30, 0x01	; 1
    1a3a:	ac e2       	ldi	r26, 0x2C	; 44
    1a3c:	b1 e0       	ldi	r27, 0x01	; 1
    1a3e:	01 90       	ld	r0, Z+
    1a40:	0d 92       	st	X+, r0
    1a42:	8a 95       	dec	r24
    1a44:	e1 f7       	brne	.-8      	; 0x1a3e <main+0x112c>
	
	userMatrix = initSingleUserMatrix(userMatrix);
    1a46:	e0 90 e2 01 	lds	r14, 0x01E2
    1a4a:	f0 90 e3 01 	lds	r15, 0x01E3
    1a4e:	00 91 e4 01 	lds	r16, 0x01E4
    1a52:	10 91 e5 01 	lds	r17, 0x01E5
    1a56:	20 91 e6 01 	lds	r18, 0x01E6
    1a5a:	30 91 e7 01 	lds	r19, 0x01E7
    1a5e:	40 91 e8 01 	lds	r20, 0x01E8
    1a62:	50 91 e9 01 	lds	r21, 0x01E9
    1a66:	60 91 ea 01 	lds	r22, 0x01EA
    1a6a:	70 91 eb 01 	lds	r23, 0x01EB
    1a6e:	ce 01       	movw	r24, r28
    1a70:	8b 54       	subi	r24, 0x4B	; 75
    1a72:	97 4e       	sbci	r25, 0xE7	; 231
    1a74:	0e 94 80 01 	call	0x300	; 0x300 <initSingleUserMatrix>
    1a78:	8a e0       	ldi	r24, 0x0A	; 10
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	eb 54       	subi	r30, 0x4B	; 75
    1a7e:	f7 4e       	sbci	r31, 0xE7	; 231
    1a80:	a2 ee       	ldi	r26, 0xE2	; 226
    1a82:	b1 e0       	ldi	r27, 0x01	; 1
    1a84:	01 90       	ld	r0, Z+
    1a86:	0d 92       	st	X+, r0
    1a88:	8a 95       	dec	r24
    1a8a:	e1 f7       	brne	.-8      	; 0x1a84 <main+0x1172>
	wallMatrix = clearSingleMatrix(wallMatrix);
    1a8c:	20 91 ed 01 	lds	r18, 0x01ED
    1a90:	30 91 ee 01 	lds	r19, 0x01EE
    1a94:	40 91 ef 01 	lds	r20, 0x01EF
    1a98:	50 91 f0 01 	lds	r21, 0x01F0
    1a9c:	60 91 f1 01 	lds	r22, 0x01F1
    1aa0:	70 91 f2 01 	lds	r23, 0x01F2
    1aa4:	80 91 f3 01 	lds	r24, 0x01F3
    1aa8:	90 91 f4 01 	lds	r25, 0x01F4
    1aac:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    1ab0:	ed ee       	ldi	r30, 0xED	; 237
    1ab2:	f1 e0       	ldi	r31, 0x01	; 1
    1ab4:	20 83       	st	Z, r18
    1ab6:	31 83       	std	Z+1, r19	; 0x01
    1ab8:	42 83       	std	Z+2, r20	; 0x02
    1aba:	53 83       	std	Z+3, r21	; 0x03
    1abc:	75 83       	std	Z+5, r23	; 0x05
    1abe:	86 83       	std	Z+6, r24	; 0x06
    1ac0:	97 83       	std	Z+7, r25	; 0x07
	wallMatrix.m[4] = 0xCC;
    1ac2:	8c ec       	ldi	r24, 0xCC	; 204
    1ac4:	84 83       	std	Z+4, r24	; 0x04
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
    1ac6:	00 ec       	ldi	r16, 0xC0	; 192
    1ac8:	10 e0       	ldi	r17, 0x00	; 0
					userMatrix.column--;
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column + 1, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
				}
			} else if (USARTReceiver == 0x04) { // Game start
				displayLCD = 1;
    1aca:	bb 24       	eor	r11, r11
    1acc:	b3 94       	inc	r11
					userMatrix.row--;
					userMatrix.m[userMatrix.row + 1] = SetBit(userMatrix.m[userMatrix.row + 1], userMatrix.column, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
				}
			} else if (USARTReceiver == 0x03) { // left
				if (userMatrix.column > 0 &&  GetBit(wallMatrix.m[userMatrix.row], userMatrix.column - 1)) {
    1ace:	0f 2e       	mov	r0, r31
    1ad0:	f2 ee       	ldi	r31, 0xE2	; 226
    1ad2:	ef 2e       	mov	r14, r31
    1ad4:	f1 e0       	ldi	r31, 0x01	; 1
    1ad6:	ff 2e       	mov	r15, r31
    1ad8:	f0 2d       	mov	r31, r0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
    1ada:	cc 24       	eor	r12, r12
    1adc:	c3 94       	inc	r12
    1ade:	d1 2c       	mov	r13, r1
	userMatrix = initSingleUserMatrix(userMatrix);
	wallMatrix = clearSingleMatrix(wallMatrix);
	wallMatrix.m[4] = 0xCC;
	
	while (1) {
		LCD_Tick();
    1ae0:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_Tick>
    1ae4:	d8 01       	movw	r26, r16
    1ae6:	8c 91       	ld	r24, X
		
		if (USART_HasReceived(0)) {
    1ae8:	88 23       	and	r24, r24
    1aea:	d4 f7       	brge	.-12     	; 0x1ae0 <main+0x11ce>
			USARTReceiver = USART_Receive(0);
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	0e 94 b1 02 	call	0x562	; 0x562 <USART_Receive>
    1af2:	80 93 1b 01 	sts	0x011B, r24
			
			if (USARTReceiver == 0x00) { // up
    1af6:	81 11       	cpse	r24, r1
    1af8:	28 c0       	rjmp	.+80     	; 0x1b4a <main+0x1238>
				if (userMatrix.row < 7 && GetBit(wallMatrix.m[userMatrix.row + 1], userMatrix.column)) {
    1afa:	d7 01       	movw	r26, r14
    1afc:	18 96       	adiw	r26, 0x08	; 8
    1afe:	ec 91       	ld	r30, X
    1b00:	18 97       	sbiw	r26, 0x08	; 8
    1b02:	e7 30       	cpi	r30, 0x07	; 7
    1b04:	68 f7       	brcc	.-38     	; 0x1ae0 <main+0x11ce>
    1b06:	c6 01       	movw	r24, r12
    1b08:	19 96       	adiw	r26, 0x09	; 9
    1b0a:	0c 90       	ld	r0, X
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <main+0x1200>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <main+0x11fc>
    1b16:	ae 2f       	mov	r26, r30
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	a3 51       	subi	r26, 0x13	; 19
    1b1c:	be 4f       	sbci	r27, 0xFE	; 254
	return ((bits & mask) != 0);
    1b1e:	11 96       	adiw	r26, 0x01	; 1
    1b20:	2c 91       	ld	r18, X
    1b22:	28 23       	and	r18, r24
    1b24:	e9 f2       	breq	.-70     	; 0x1ae0 <main+0x11ce>
					userMatrix.row++;
    1b26:	ef 5f       	subi	r30, 0xFF	; 255
    1b28:	d7 01       	movw	r26, r14
    1b2a:	18 96       	adiw	r26, 0x08	; 8
    1b2c:	ec 93       	st	X, r30
					userMatrix.m[userMatrix.row - 1] = SetBit(userMatrix.m[userMatrix.row - 1], userMatrix.column, 1);
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	df 01       	movw	r26, r30
    1b32:	af 51       	subi	r26, 0x1F	; 31
    1b34:	be 4f       	sbci	r27, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
    1b36:	9c 91       	ld	r25, X
    1b38:	98 2b       	or	r25, r24
    1b3a:	9c 93       	st	X, r25
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
    1b3c:	ee 51       	subi	r30, 0x1E	; 30
    1b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b40:	80 95       	com	r24
    1b42:	90 81       	ld	r25, Z
    1b44:	89 23       	and	r24, r25
    1b46:	80 83       	st	Z, r24
    1b48:	cb cf       	rjmp	.-106    	; 0x1ae0 <main+0x11ce>
				}
			} else if (USARTReceiver == 0x01) { // right
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	41 f5       	brne	.+80     	; 0x1b9e <main+0x128c>
				if (userMatrix.column  < 7 && GetBit(wallMatrix.m[userMatrix.row], userMatrix.column + 1)) {
    1b4e:	f7 01       	movw	r30, r14
    1b50:	21 85       	ldd	r18, Z+9	; 0x09
    1b52:	27 30       	cpi	r18, 0x07	; 7
    1b54:	28 f6       	brcc	.-118    	; 0x1ae0 <main+0x11ce>
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	62 0f       	add	r22, r18
    1b5a:	80 85       	ldd	r24, Z+8	; 0x08
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
    1b5e:	a6 01       	movw	r20, r12
    1b60:	06 2e       	mov	r0, r22
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <main+0x1256>
    1b64:	44 0f       	add	r20, r20
    1b66:	55 1f       	adc	r21, r21
    1b68:	0a 94       	dec	r0
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <main+0x1252>
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	e3 51       	subi	r30, 0x13	; 19
    1b70:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
    1b72:	30 81       	ld	r19, Z
    1b74:	34 23       	and	r19, r20
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <main+0x1268>
    1b78:	b3 cf       	rjmp	.-154    	; 0x1ae0 <main+0x11ce>
					userMatrix.column++;
    1b7a:	d7 01       	movw	r26, r14
    1b7c:	19 96       	adiw	r26, 0x09	; 9
    1b7e:	6c 93       	st	X, r22
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column - 1, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
    1b80:	fc 01       	movw	r30, r24
    1b82:	ee 51       	subi	r30, 0x1E	; 30
    1b84:	fe 4f       	sbci	r31, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
    1b86:	40 95       	com	r20
    1b88:	c6 01       	movw	r24, r12
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <main+0x127e>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	2a 95       	dec	r18
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <main+0x127a>
    1b94:	90 81       	ld	r25, Z
    1b96:	89 2b       	or	r24, r25
    1b98:	48 23       	and	r20, r24
    1b9a:	40 83       	st	Z, r20
    1b9c:	a1 cf       	rjmp	.-190    	; 0x1ae0 <main+0x11ce>
				}
			} else if (USARTReceiver == 0x02) { // down
    1b9e:	82 30       	cpi	r24, 0x02	; 2
    1ba0:	49 f5       	brne	.+82     	; 0x1bf4 <main+0x12e2>
				if (userMatrix.row > 0  && GetBit(wallMatrix.m[userMatrix.row - 1], userMatrix.column)) {
    1ba2:	d7 01       	movw	r26, r14
    1ba4:	18 96       	adiw	r26, 0x08	; 8
    1ba6:	ec 91       	ld	r30, X
    1ba8:	18 97       	sbiw	r26, 0x08	; 8
    1baa:	ee 23       	and	r30, r30
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <main+0x129e>
    1bae:	98 cf       	rjmp	.-208    	; 0x1ae0 <main+0x11ce>
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
    1bb0:	c6 01       	movw	r24, r12
    1bb2:	19 96       	adiw	r26, 0x09	; 9
    1bb4:	0c 90       	ld	r0, X
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <main+0x12aa>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	0a 94       	dec	r0
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <main+0x12a6>
    1bc0:	ae 2f       	mov	r26, r30
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	a4 51       	subi	r26, 0x14	; 20
    1bc6:	be 4f       	sbci	r27, 0xFE	; 254
	return ((bits & mask) != 0);
    1bc8:	2c 91       	ld	r18, X
    1bca:	28 23       	and	r18, r24
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <main+0x12be>
    1bce:	88 cf       	rjmp	.-240    	; 0x1ae0 <main+0x11ce>
					userMatrix.row--;
    1bd0:	e1 50       	subi	r30, 0x01	; 1
    1bd2:	d7 01       	movw	r26, r14
    1bd4:	18 96       	adiw	r26, 0x08	; 8
    1bd6:	ec 93       	st	X, r30
					userMatrix.m[userMatrix.row + 1] = SetBit(userMatrix.m[userMatrix.row + 1], userMatrix.column, 1);
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	df 01       	movw	r26, r30
    1bdc:	ad 51       	subi	r26, 0x1D	; 29
    1bde:	be 4f       	sbci	r27, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
    1be0:	9c 91       	ld	r25, X
    1be2:	98 2b       	or	r25, r24
    1be4:	9c 93       	st	X, r25
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
    1be6:	ee 51       	subi	r30, 0x1E	; 30
    1be8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bea:	80 95       	com	r24
    1bec:	90 81       	ld	r25, Z
    1bee:	89 23       	and	r24, r25
    1bf0:	80 83       	st	Z, r24
    1bf2:	76 cf       	rjmp	.-276    	; 0x1ae0 <main+0x11ce>
				}
			} else if (USARTReceiver == 0x03) { // left
    1bf4:	83 30       	cpi	r24, 0x03	; 3
    1bf6:	49 f5       	brne	.+82     	; 0x1c4a <main+0x1338>
				if (userMatrix.column > 0 &&  GetBit(wallMatrix.m[userMatrix.row], userMatrix.column - 1)) {
    1bf8:	f7 01       	movw	r30, r14
    1bfa:	21 85       	ldd	r18, Z+9	; 0x09
    1bfc:	22 23       	and	r18, r18
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <main+0x12f0>
    1c00:	6f cf       	rjmp	.-290    	; 0x1ae0 <main+0x11ce>
    1c02:	6f ef       	ldi	r22, 0xFF	; 255
    1c04:	62 0f       	add	r22, r18
    1c06:	80 85       	ldd	r24, Z+8	; 0x08
    1c08:	90 e0       	ldi	r25, 0x00	; 0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
    1c0a:	a6 01       	movw	r20, r12
    1c0c:	06 2e       	mov	r0, r22
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <main+0x1302>
    1c10:	44 0f       	add	r20, r20
    1c12:	55 1f       	adc	r21, r21
    1c14:	0a 94       	dec	r0
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <main+0x12fe>
    1c18:	fc 01       	movw	r30, r24
    1c1a:	e3 51       	subi	r30, 0x13	; 19
    1c1c:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
    1c1e:	30 81       	ld	r19, Z
    1c20:	34 23       	and	r19, r20
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <main+0x1314>
    1c24:	5d cf       	rjmp	.-326    	; 0x1ae0 <main+0x11ce>
					userMatrix.column--;
    1c26:	d7 01       	movw	r26, r14
    1c28:	19 96       	adiw	r26, 0x09	; 9
    1c2a:	6c 93       	st	X, r22
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column + 1, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	ee 51       	subi	r30, 0x1E	; 30
    1c30:	fe 4f       	sbci	r31, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
    1c32:	40 95       	com	r20
    1c34:	c6 01       	movw	r24, r12
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <main+0x132a>
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	2a 95       	dec	r18
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <main+0x1326>
    1c40:	90 81       	ld	r25, Z
    1c42:	89 2b       	or	r24, r25
    1c44:	48 23       	and	r20, r24
    1c46:	40 83       	st	Z, r20
    1c48:	4b cf       	rjmp	.-362    	; 0x1ae0 <main+0x11ce>
				}
			} else if (USARTReceiver == 0x04) { // Game start
    1c4a:	84 30       	cpi	r24, 0x04	; 4
    1c4c:	19 f4       	brne	.+6      	; 0x1c54 <main+0x1342>
				displayLCD = 1;
    1c4e:	b0 92 fd 01 	sts	0x01FD, r11
    1c52:	46 cf       	rjmp	.-372    	; 0x1ae0 <main+0x11ce>
			} else if (USARTReceiver == 0x05) {
    1c54:	85 30       	cpi	r24, 0x05	; 5
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <main+0x1348>
    1c58:	43 cf       	rjmp	.-378    	; 0x1ae0 <main+0x11ce>
				displayLCD = 0;
    1c5a:	10 92 fd 01 	sts	0x01FD, r1
    1c5e:	40 cf       	rjmp	.-384    	; 0x1ae0 <main+0x11ce>

00001c60 <_exit>:
    1c60:	f8 94       	cli

00001c62 <__stop_program>:
    1c62:	ff cf       	rjmp	.-2      	; 0x1c62 <__stop_program>
