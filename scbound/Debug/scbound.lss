
scbound.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001202  00001296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001202  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f7  00800104  00800104  0000129a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000129a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017fe  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a8  00000000  00000000  00002c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f7c  00000000  00000000  000030ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  00004068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000597  00000000  00000000  00004484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018d3  00000000  00000000  00004a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  000062ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	e1 c0       	rjmp	.+450    	; 0x1f8 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e0       	ldi	r30, 0x02	; 2
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 30       	cpi	r26, 0x04	; 4
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a4 e0       	ldi	r26, 0x04	; 4
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 3f       	cpi	r26, 0xFB	; 251
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	92 d4       	rcall	.+2340   	; 0x9e8 <main>
      c4:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <ETIMERTick>:
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
      ca:	00 97       	sbiw	r24, 0x00	; 0
      cc:	21 f0       	breq	.+8      	; 0xd6 <ETIMERTick+0xc>
      ce:	81 30       	cpi	r24, 0x01	; 1
      d0:	91 05       	cpc	r25, r1
      d2:	49 f0       	breq	.+18     	; 0xe6 <ETIMERTick+0x1c>
      d4:	05 c0       	rjmp	.+10     	; 0xe0 <ETIMERTick+0x16>
      d6:	10 92 05 01 	sts	0x0105, r1
      da:	10 92 04 01 	sts	0x0104, r1
      de:	03 c0       	rjmp	.+6      	; 0xe6 <ETIMERTick+0x1c>
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	91 05       	cpc	r25, r1
      e4:	f1 f4       	brne	.+60     	; 0x122 <ETIMERTick+0x58>
      e6:	80 91 04 01 	lds	r24, 0x0104
      ea:	90 91 05 01 	lds	r25, 0x0105
      ee:	01 96       	adiw	r24, 0x01	; 1
      f0:	90 93 05 01 	sts	0x0105, r25
      f4:	80 93 04 01 	sts	0x0104, r24
      f8:	80 91 08 01 	lds	r24, 0x0108
      fc:	90 91 09 01 	lds	r25, 0x0109
     100:	a0 91 0a 01 	lds	r26, 0x010A
     104:	b0 91 0b 01 	lds	r27, 0x010B
     108:	01 96       	adiw	r24, 0x01	; 1
     10a:	a1 1d       	adc	r26, r1
     10c:	b1 1d       	adc	r27, r1
     10e:	80 93 08 01 	sts	0x0108, r24
     112:	90 93 09 01 	sts	0x0109, r25
     116:	a0 93 0a 01 	sts	0x010A, r26
     11a:	b0 93 0b 01 	sts	0x010B, r27
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	08 95       	ret

00000124 <initTasks>:
     124:	e0 e1       	ldi	r30, 0x10	; 16
     126:	f1 e0       	ldi	r31, 0x01	; 1
     128:	11 82       	std	Z+1, r1	; 0x01
     12a:	10 82       	st	Z, r1
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	82 83       	std	Z+2, r24	; 0x02
     136:	93 83       	std	Z+3, r25	; 0x03
     138:	a4 83       	std	Z+4, r26	; 0x04
     13a:	b5 83       	std	Z+5, r27	; 0x05
     13c:	86 83       	std	Z+6, r24	; 0x06
     13e:	97 83       	std	Z+7, r25	; 0x07
     140:	a0 87       	std	Z+8, r26	; 0x08
     142:	b1 87       	std	Z+9, r27	; 0x09
     144:	85 e6       	ldi	r24, 0x65	; 101
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	93 87       	std	Z+11, r25	; 0x0b
     14a:	82 87       	std	Z+10, r24	; 0x0a
     14c:	08 95       	ret

0000014e <TimerOn>:
     14e:	8b e0       	ldi	r24, 0x0B	; 11
     150:	80 93 81 00 	sts	0x0081, r24
     154:	8d e7       	ldi	r24, 0x7D	; 125
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	90 93 89 00 	sts	0x0089, r25
     15c:	80 93 88 00 	sts	0x0088, r24
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	80 93 6f 00 	sts	0x006F, r24
     166:	10 92 85 00 	sts	0x0085, r1
     16a:	10 92 84 00 	sts	0x0084, r1
     16e:	80 91 00 01 	lds	r24, 0x0100
     172:	90 91 01 01 	lds	r25, 0x0101
     176:	a0 91 02 01 	lds	r26, 0x0102
     17a:	b0 91 03 01 	lds	r27, 0x0103
     17e:	80 93 0c 01 	sts	0x010C, r24
     182:	90 93 0d 01 	sts	0x010D, r25
     186:	a0 93 0e 01 	sts	0x010E, r26
     18a:	b0 93 0f 01 	sts	0x010F, r27
     18e:	8f b7       	in	r24, 0x3f	; 63
     190:	80 68       	ori	r24, 0x80	; 128
     192:	8f bf       	out	0x3f, r24	; 63
     194:	08 95       	ret

00000196 <TimerISR>:
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	e0 e1       	ldi	r30, 0x10	; 16
     19c:	f1 e0       	ldi	r31, 0x01	; 1
     19e:	86 81       	ldd	r24, Z+6	; 0x06
     1a0:	97 81       	ldd	r25, Z+7	; 0x07
     1a2:	a0 85       	ldd	r26, Z+8	; 0x08
     1a4:	b1 85       	ldd	r27, Z+9	; 0x09
     1a6:	42 81       	ldd	r20, Z+2	; 0x02
     1a8:	53 81       	ldd	r21, Z+3	; 0x03
     1aa:	64 81       	ldd	r22, Z+4	; 0x04
     1ac:	75 81       	ldd	r23, Z+5	; 0x05
     1ae:	84 17       	cp	r24, r20
     1b0:	95 07       	cpc	r25, r21
     1b2:	a6 07       	cpc	r26, r22
     1b4:	b7 07       	cpc	r27, r23
     1b6:	90 f0       	brcs	.+36     	; 0x1dc <TimerISR+0x46>
     1b8:	ef 01       	movw	r28, r30
     1ba:	02 84       	ldd	r0, Z+10	; 0x0a
     1bc:	f3 85       	ldd	r31, Z+11	; 0x0b
     1be:	e0 2d       	mov	r30, r0
     1c0:	88 81       	ld	r24, Y
     1c2:	99 81       	ldd	r25, Y+1	; 0x01
     1c4:	09 95       	icall
     1c6:	99 83       	std	Y+1, r25	; 0x01
     1c8:	88 83       	st	Y, r24
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	a0 e0       	ldi	r26, 0x00	; 0
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	8e 83       	std	Y+6, r24	; 0x06
     1d4:	9f 83       	std	Y+7, r25	; 0x07
     1d6:	a8 87       	std	Y+8, r26	; 0x08
     1d8:	b9 87       	std	Y+9, r27	; 0x09
     1da:	0b c0       	rjmp	.+22     	; 0x1f2 <TimerISR+0x5c>
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	a1 1d       	adc	r26, r1
     1e0:	b1 1d       	adc	r27, r1
     1e2:	80 93 16 01 	sts	0x0116, r24
     1e6:	90 93 17 01 	sts	0x0117, r25
     1ea:	a0 93 18 01 	sts	0x0118, r26
     1ee:	b0 93 19 01 	sts	0x0119, r27
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <__vector_13>:
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	0b b6       	in	r0, 0x3b	; 59
     204:	0f 92       	push	r0
     206:	2f 93       	push	r18
     208:	3f 93       	push	r19
     20a:	4f 93       	push	r20
     20c:	5f 93       	push	r21
     20e:	6f 93       	push	r22
     210:	7f 93       	push	r23
     212:	8f 93       	push	r24
     214:	9f 93       	push	r25
     216:	af 93       	push	r26
     218:	bf 93       	push	r27
     21a:	ef 93       	push	r30
     21c:	ff 93       	push	r31
     21e:	80 91 0c 01 	lds	r24, 0x010C
     222:	90 91 0d 01 	lds	r25, 0x010D
     226:	a0 91 0e 01 	lds	r26, 0x010E
     22a:	b0 91 0f 01 	lds	r27, 0x010F
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	a1 09       	sbc	r26, r1
     232:	b1 09       	sbc	r27, r1
     234:	80 93 0c 01 	sts	0x010C, r24
     238:	90 93 0d 01 	sts	0x010D, r25
     23c:	a0 93 0e 01 	sts	0x010E, r26
     240:	b0 93 0f 01 	sts	0x010F, r27
     244:	89 2b       	or	r24, r25
     246:	8a 2b       	or	r24, r26
     248:	8b 2b       	or	r24, r27
     24a:	89 f4       	brne	.+34     	; 0x26e <__vector_13+0x76>
     24c:	a4 df       	rcall	.-184    	; 0x196 <TimerISR>
     24e:	80 91 00 01 	lds	r24, 0x0100
     252:	90 91 01 01 	lds	r25, 0x0101
     256:	a0 91 02 01 	lds	r26, 0x0102
     25a:	b0 91 03 01 	lds	r27, 0x0103
     25e:	80 93 0c 01 	sts	0x010C, r24
     262:	90 93 0d 01 	sts	0x010D, r25
     266:	a0 93 0e 01 	sts	0x010E, r26
     26a:	b0 93 0f 01 	sts	0x010F, r27
     26e:	ff 91       	pop	r31
     270:	ef 91       	pop	r30
     272:	bf 91       	pop	r27
     274:	af 91       	pop	r26
     276:	9f 91       	pop	r25
     278:	8f 91       	pop	r24
     27a:	7f 91       	pop	r23
     27c:	6f 91       	pop	r22
     27e:	5f 91       	pop	r21
     280:	4f 91       	pop	r20
     282:	3f 91       	pop	r19
     284:	2f 91       	pop	r18
     286:	0f 90       	pop	r0
     288:	0b be       	out	0x3b, r0	; 59
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <clearSingleMatrix>:
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	60 97       	sbiw	r28, 0x10	; 16
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	29 87       	std	Y+9, r18	; 0x09
     2aa:	3a 87       	std	Y+10, r19	; 0x0a
     2ac:	4b 87       	std	Y+11, r20	; 0x0b
     2ae:	5c 87       	std	Y+12, r21	; 0x0c
     2b0:	6d 87       	std	Y+13, r22	; 0x0d
     2b2:	7e 87       	std	Y+14, r23	; 0x0e
     2b4:	8f 87       	std	Y+15, r24	; 0x0f
     2b6:	98 8b       	std	Y+16, r25	; 0x10
     2b8:	fe 01       	movw	r30, r28
     2ba:	39 96       	adiw	r30, 0x09	; 9
     2bc:	9e 01       	movw	r18, r28
     2be:	2f 5e       	subi	r18, 0xEF	; 239
     2c0:	3f 4f       	sbci	r19, 0xFF	; 255
     2c2:	8f ef       	ldi	r24, 0xFF	; 255
     2c4:	81 93       	st	Z+, r24
     2c6:	e2 17       	cp	r30, r18
     2c8:	f3 07       	cpc	r31, r19
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <clearSingleMatrix+0x30>
     2cc:	88 e0       	ldi	r24, 0x08	; 8
     2ce:	fe 01       	movw	r30, r28
     2d0:	39 96       	adiw	r30, 0x09	; 9
     2d2:	de 01       	movw	r26, r28
     2d4:	11 96       	adiw	r26, 0x01	; 1
     2d6:	01 90       	ld	r0, Z+
     2d8:	0d 92       	st	X+, r0
     2da:	8a 95       	dec	r24
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <clearSingleMatrix+0x42>
     2de:	29 81       	ldd	r18, Y+1	; 0x01
     2e0:	3a 81       	ldd	r19, Y+2	; 0x02
     2e2:	4b 81       	ldd	r20, Y+3	; 0x03
     2e4:	5c 81       	ldd	r21, Y+4	; 0x04
     2e6:	6d 81       	ldd	r22, Y+5	; 0x05
     2e8:	7e 81       	ldd	r23, Y+6	; 0x06
     2ea:	8f 81       	ldd	r24, Y+7	; 0x07
     2ec:	98 85       	ldd	r25, Y+8	; 0x08
     2ee:	60 96       	adiw	r28, 0x10	; 16
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <initSingleUserMatrix>:
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	2a 97       	sbiw	r28, 0x0a	; 10
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	bc 01       	movw	r22, r24
     31e:	e9 82       	std	Y+1, r14	; 0x01
     320:	fa 82       	std	Y+2, r15	; 0x02
     322:	0b 83       	std	Y+3, r16	; 0x03
     324:	1c 83       	std	Y+4, r17	; 0x04
     326:	2d 83       	std	Y+5, r18	; 0x05
     328:	3e 83       	std	Y+6, r19	; 0x06
     32a:	4f 83       	std	Y+7, r20	; 0x07
     32c:	58 87       	std	Y+8, r21	; 0x08
     32e:	fe 01       	movw	r30, r28
     330:	31 96       	adiw	r30, 0x01	; 1
     332:	9e 01       	movw	r18, r28
     334:	27 5f       	subi	r18, 0xF7	; 247
     336:	3f 4f       	sbci	r19, 0xFF	; 255
     338:	9f ef       	ldi	r25, 0xFF	; 255
     33a:	91 93       	st	Z+, r25
     33c:	e2 17       	cp	r30, r18
     33e:	f3 07       	cpc	r31, r19
     340:	e1 f7       	brne	.-8      	; 0x33a <initSingleUserMatrix+0x3a>
     342:	99 81       	ldd	r25, Y+1	; 0x01
     344:	97 7f       	andi	r25, 0xF7	; 247
     346:	99 83       	std	Y+1, r25	; 0x01
     348:	19 86       	std	Y+9, r1	; 0x09
     34a:	83 e0       	ldi	r24, 0x03	; 3
     34c:	8a 87       	std	Y+10, r24	; 0x0a
     34e:	8a e0       	ldi	r24, 0x0A	; 10
     350:	fe 01       	movw	r30, r28
     352:	31 96       	adiw	r30, 0x01	; 1
     354:	db 01       	movw	r26, r22
     356:	01 90       	ld	r0, Z+
     358:	0d 92       	st	X+, r0
     35a:	8a 95       	dec	r24
     35c:	e1 f7       	brne	.-8      	; 0x356 <initSingleUserMatrix+0x56>
     35e:	cb 01       	movw	r24, r22
     360:	2a 96       	adiw	r28, 0x0a	; 10
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	de bf       	out	0x3e, r29	; 62
     368:	0f be       	out	0x3f, r0	; 63
     36a:	cd bf       	out	0x3d, r28	; 61
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	ff 90       	pop	r15
     376:	ef 90       	pop	r14
     378:	08 95       	ret

0000037a <shiftSR>:
     37a:	85 b9       	out	0x05, r24	; 5
     37c:	29 9a       	sbi	0x05, 1	; 5
     37e:	15 b8       	out	0x05, r1	; 5
     380:	08 95       	ret

00000382 <shiftWhole>:
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	e1 e0       	ldi	r30, 0x01	; 1
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	71 e0       	ldi	r23, 0x01	; 1
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	af 01       	movw	r20, r30
     390:	02 2e       	mov	r0, r18
     392:	02 c0       	rjmp	.+4      	; 0x398 <shiftWhole+0x16>
     394:	44 0f       	add	r20, r20
     396:	55 1f       	adc	r21, r21
     398:	0a 94       	dec	r0
     39a:	e2 f7       	brpl	.-8      	; 0x394 <shiftWhole+0x12>
     39c:	48 23       	and	r20, r24
     39e:	97 2f       	mov	r25, r23
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <shiftWhole+0x22>
     3a2:	96 2f       	mov	r25, r22
     3a4:	95 b9       	out	0x05, r25	; 5
     3a6:	29 9a       	sbi	0x05, 1	; 5
     3a8:	65 b9       	out	0x05, r22	; 5
     3aa:	2f 5f       	subi	r18, 0xFF	; 255
     3ac:	3f 4f       	sbci	r19, 0xFF	; 255
     3ae:	28 30       	cpi	r18, 0x08	; 8
     3b0:	31 05       	cpc	r19, r1
     3b2:	69 f7       	brne	.-38     	; 0x38e <shiftWhole+0xc>
     3b4:	84 e0       	ldi	r24, 0x04	; 4
     3b6:	85 b9       	out	0x05, r24	; 5
     3b8:	08 95       	ret

000003ba <clearSR>:
     3ba:	cf 93       	push	r28
     3bc:	c8 e0       	ldi	r28, 0x08	; 8
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	dc df       	rcall	.-72     	; 0x37a <shiftSR>
     3c2:	c1 50       	subi	r28, 0x01	; 1
     3c4:	e1 f7       	brne	.-8      	; 0x3be <clearSR+0x4>
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	85 b9       	out	0x05, r24	; 5
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <d3_clearSR>:
     3ce:	f5 df       	rcall	.-22     	; 0x3ba <clearSR>
     3d0:	f4 df       	rcall	.-24     	; 0x3ba <clearSR>
     3d2:	f3 cf       	rjmp	.-26     	; 0x3ba <clearSR>
     3d4:	08 95       	ret

000003d6 <d3_setRowMatrixColor>:
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	18 2f       	mov	r17, r24
     3e0:	c9 2f       	mov	r28, r25
     3e2:	06 2f       	mov	r16, r22
     3e4:	d4 2f       	mov	r29, r20
     3e6:	f3 df       	rcall	.-26     	; 0x3ce <d3_clearSR>
     3e8:	51 e0       	ldi	r21, 0x01	; 1
     3ea:	01 c0       	rjmp	.+2      	; 0x3ee <d3_setRowMatrixColor+0x18>
     3ec:	55 0f       	add	r21, r21
     3ee:	0a 95       	dec	r16
     3f0:	ea f7       	brpl	.-6      	; 0x3ec <d3_setRowMatrixColor+0x16>
     3f2:	e1 2f       	mov	r30, r17
     3f4:	fc 2f       	mov	r31, r28
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	c0 e0       	ldi	r28, 0x00	; 0
     3fc:	a1 e0       	ldi	r26, 0x01	; 1
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	91 91       	ld	r25, Z+
     402:	95 23       	and	r25, r21
     404:	49 f0       	breq	.+18     	; 0x418 <d3_setRowMatrixColor+0x42>
     406:	cd 01       	movw	r24, r26
     408:	02 2e       	mov	r0, r18
     40a:	02 c0       	rjmp	.+4      	; 0x410 <d3_setRowMatrixColor+0x3a>
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	0a 94       	dec	r0
     412:	e2 f7       	brpl	.-8      	; 0x40c <d3_setRowMatrixColor+0x36>
     414:	c8 2b       	or	r28, r24
     416:	09 c0       	rjmp	.+18     	; 0x42a <d3_setRowMatrixColor+0x54>
     418:	bd 01       	movw	r22, r26
     41a:	02 2e       	mov	r0, r18
     41c:	02 c0       	rjmp	.+4      	; 0x422 <d3_setRowMatrixColor+0x4c>
     41e:	66 0f       	add	r22, r22
     420:	77 1f       	adc	r23, r23
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <d3_setRowMatrixColor+0x48>
     426:	60 95       	com	r22
     428:	c6 23       	and	r28, r22
     42a:	2f 5f       	subi	r18, 0xFF	; 255
     42c:	3f 4f       	sbci	r19, 0xFF	; 255
     42e:	28 30       	cpi	r18, 0x08	; 8
     430:	31 05       	cpc	r19, r1
     432:	31 f7       	brne	.-52     	; 0x400 <d3_setRowMatrixColor+0x2a>
     434:	d1 30       	cpi	r29, 0x01	; 1
     436:	71 f0       	breq	.+28     	; 0x454 <d3_setRowMatrixColor+0x7e>
     438:	18 f0       	brcs	.+6      	; 0x440 <d3_setRowMatrixColor+0x6a>
     43a:	d2 30       	cpi	r29, 0x02	; 2
     43c:	31 f0       	breq	.+12     	; 0x44a <d3_setRowMatrixColor+0x74>
     43e:	0e c0       	rjmp	.+28     	; 0x45c <d3_setRowMatrixColor+0x86>
     440:	bc df       	rcall	.-136    	; 0x3ba <clearSR>
     442:	8c 2f       	mov	r24, r28
     444:	9e df       	rcall	.-196    	; 0x382 <shiftWhole>
     446:	b9 df       	rcall	.-142    	; 0x3ba <clearSR>
     448:	09 c0       	rjmp	.+18     	; 0x45c <d3_setRowMatrixColor+0x86>
     44a:	8c 2f       	mov	r24, r28
     44c:	9a df       	rcall	.-204    	; 0x382 <shiftWhole>
     44e:	b5 df       	rcall	.-150    	; 0x3ba <clearSR>
     450:	b4 df       	rcall	.-152    	; 0x3ba <clearSR>
     452:	04 c0       	rjmp	.+8      	; 0x45c <d3_setRowMatrixColor+0x86>
     454:	b2 df       	rcall	.-156    	; 0x3ba <clearSR>
     456:	b1 df       	rcall	.-158    	; 0x3ba <clearSR>
     458:	8c 2f       	mov	r24, r28
     45a:	93 df       	rcall	.-218    	; 0x382 <shiftWhole>
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	08 95       	ret

00000466 <d3_setMatrixColor>:
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	6c 01       	movw	r12, r24
     476:	f6 2e       	mov	r15, r22
     478:	c0 e0       	ldi	r28, 0x00	; 0
     47a:	d0 e0       	ldi	r29, 0x00	; 0
     47c:	01 e0       	ldi	r16, 0x01	; 1
     47e:	10 e0       	ldi	r17, 0x00	; 0
     480:	98 01       	movw	r18, r16
     482:	0c 2e       	mov	r0, r28
     484:	02 c0       	rjmp	.+4      	; 0x48a <d3_setMatrixColor+0x24>
     486:	22 0f       	add	r18, r18
     488:	33 1f       	adc	r19, r19
     48a:	0a 94       	dec	r0
     48c:	e2 f7       	brpl	.-8      	; 0x486 <d3_setMatrixColor+0x20>
     48e:	28 b9       	out	0x08, r18	; 8
     490:	4f 2d       	mov	r20, r15
     492:	6c 2f       	mov	r22, r28
     494:	c6 01       	movw	r24, r12
     496:	9f df       	rcall	.-194    	; 0x3d6 <d3_setRowMatrixColor>
     498:	8f e8       	ldi	r24, 0x8F	; 143
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <d3_setMatrixColor+0x36>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <d3_setMatrixColor+0x3c>
     4a2:	00 00       	nop
     4a4:	94 df       	rcall	.-216    	; 0x3ce <d3_clearSR>
     4a6:	21 96       	adiw	r28, 0x01	; 1
     4a8:	c8 30       	cpi	r28, 0x08	; 8
     4aa:	d1 05       	cpc	r29, r1
     4ac:	49 f7       	brne	.-46     	; 0x480 <d3_setMatrixColor+0x1a>
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	08 95       	ret

000004be <initExplosions>:
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	9c 01       	movw	r18, r24
     4c8:	92 e1       	ldi	r25, 0x12	; 18
     4ca:	91 50       	subi	r25, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <initExplosions+0xc>
     4ce:	c7 54       	subi	r28, 0x47	; 71
     4d0:	df 4f       	sbci	r29, 0xFF	; 255
     4d2:	18 82       	st	Y, r1
     4d4:	c9 5b       	subi	r28, 0xB9	; 185
     4d6:	d0 40       	sbci	r29, 0x00	; 0
     4d8:	c6 54       	subi	r28, 0x46	; 70
     4da:	df 4f       	sbci	r29, 0xFF	; 255
     4dc:	18 82       	st	Y, r1
     4de:	ca 5b       	subi	r28, 0xBA	; 186
     4e0:	d0 40       	sbci	r29, 0x00	; 0
     4e2:	86 eb       	ldi	r24, 0xB6	; 182
     4e4:	fe 01       	movw	r30, r28
     4e6:	35 96       	adiw	r30, 0x05	; 5
     4e8:	d9 01       	movw	r26, r18
     4ea:	01 90       	ld	r0, Z+
     4ec:	0d 92       	st	X+, r0
     4ee:	8a 95       	dec	r24
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <initExplosions+0x2c>
     4f2:	c9 01       	movw	r24, r18
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <initUSART>:
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	81 f0       	breq	.+32     	; 0x51e <initUSART+0x24>
     4fe:	e1 ec       	ldi	r30, 0xC1	; 193
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	88 61       	ori	r24, 0x18	; 24
     506:	80 83       	st	Z, r24
     508:	e2 ec       	ldi	r30, 0xC2	; 194
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	86 60       	ori	r24, 0x06	; 6
     510:	80 83       	st	Z, r24
     512:	83 e3       	ldi	r24, 0x33	; 51
     514:	80 93 c4 00 	sts	0x00C4, r24
     518:	10 92 c5 00 	sts	0x00C5, r1
     51c:	08 95       	ret
     51e:	e9 ec       	ldi	r30, 0xC9	; 201
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	88 61       	ori	r24, 0x18	; 24
     526:	80 83       	st	Z, r24
     528:	ea ec       	ldi	r30, 0xCA	; 202
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	86 60       	ori	r24, 0x06	; 6
     530:	80 83       	st	Z, r24
     532:	83 e3       	ldi	r24, 0x33	; 51
     534:	80 93 cc 00 	sts	0x00CC, r24
     538:	10 92 cd 00 	sts	0x00CD, r1
     53c:	08 95       	ret

0000053e <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
     53e:	61 30       	cpi	r22, 0x01	; 1
     540:	41 f0       	breq	.+16     	; 0x552 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
     542:	e0 ec       	ldi	r30, 0xC0	; 192
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	90 81       	ld	r25, Z
     548:	95 ff       	sbrs	r25, 5
     54a:	fd cf       	rjmp	.-6      	; 0x546 <USART_Send+0x8>
		UDR0 = sendMe;
     54c:	80 93 c6 00 	sts	0x00C6, r24
     550:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
     552:	e8 ec       	ldi	r30, 0xC8	; 200
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	90 81       	ld	r25, Z
     558:	95 ff       	sbrs	r25, 5
     55a:	fd cf       	rjmp	.-6      	; 0x556 <USART_Send+0x18>
		UDR1 = sendMe;
     55c:	80 93 ce 00 	sts	0x00CE, r24
     560:	08 95       	ret

00000562 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	41 f0       	breq	.+16     	; 0x576 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
     566:	e0 ec       	ldi	r30, 0xC0	; 192
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	88 23       	and	r24, r24
     56e:	ec f7       	brge	.-6      	; 0x56a <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
     570:	80 91 c6 00 	lds	r24, 0x00C6
     574:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
     576:	e8 ec       	ldi	r30, 0xC8	; 200
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	88 23       	and	r24, r24
     57e:	ec f7       	brge	.-6      	; 0x57a <USART_Receive+0x18>
		return UDR1;
     580:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
     584:	08 95       	ret

00000586 <DeathTick>:
			contClock++;
	}
	return state;
}

unsigned char DeathTick() {	
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	2a 97       	sbiw	r28, 0x0a	; 10
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
	if ((displayBlank == 0) && GetBit(explosions.matricies[explosions.displayIndex].m[userMatrix.row], userMatrix.column) == 0) {
     5a2:	80 91 07 01 	lds	r24, 0x0107
     5a6:	81 11       	cpse	r24, r1
     5a8:	41 c0       	rjmp	.+130    	; 0x62c <DeathTick+0xa6>
     5aa:	e8 ee       	ldi	r30, 0xE8	; 232
     5ac:	f1 e0       	ldi	r31, 0x01	; 1
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	01 84       	ldd	r0, Z+9	; 0x09
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DeathTick+0x34>
     5b6:	22 0f       	add	r18, r18
     5b8:	33 1f       	adc	r19, r19
     5ba:	0a 94       	dec	r0
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DeathTick+0x30>
     5be:	90 91 e7 01 	lds	r25, 0x01E7
     5c2:	e0 85       	ldd	r30, Z+8	; 0x08
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	48 e0       	ldi	r20, 0x08	; 8
     5c8:	94 9f       	mul	r25, r20
     5ca:	e0 0d       	add	r30, r0
     5cc:	f1 1d       	adc	r31, r1
     5ce:	11 24       	eor	r1, r1
     5d0:	ee 5c       	subi	r30, 0xCE	; 206
     5d2:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
     5d4:	90 81       	ld	r25, Z
     5d6:	29 23       	and	r18, r25
     5d8:	61 f5       	brne	.+88     	; 0x632 <DeathTick+0xac>
		userMatrix = initSingleUserMatrix(userMatrix);
     5da:	e0 90 e8 01 	lds	r14, 0x01E8
     5de:	f0 90 e9 01 	lds	r15, 0x01E9
     5e2:	00 91 ea 01 	lds	r16, 0x01EA
     5e6:	10 91 eb 01 	lds	r17, 0x01EB
     5ea:	20 91 ec 01 	lds	r18, 0x01EC
     5ee:	30 91 ed 01 	lds	r19, 0x01ED
     5f2:	40 91 ee 01 	lds	r20, 0x01EE
     5f6:	50 91 ef 01 	lds	r21, 0x01EF
     5fa:	60 91 f0 01 	lds	r22, 0x01F0
     5fe:	70 91 f1 01 	lds	r23, 0x01F1
     602:	ce 01       	movw	r24, r28
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	7c de       	rcall	.-776    	; 0x300 <initSingleUserMatrix>
     608:	8a e0       	ldi	r24, 0x0A	; 10
     60a:	fe 01       	movw	r30, r28
     60c:	31 96       	adiw	r30, 0x01	; 1
     60e:	a8 ee       	ldi	r26, 0xE8	; 232
     610:	b1 e0       	ldi	r27, 0x01	; 1
     612:	01 90       	ld	r0, Z+
     614:	0d 92       	st	X+, r0
     616:	8a 95       	dec	r24
     618:	e1 f7       	brne	.-8      	; 0x612 <DeathTick+0x8c>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
     61a:	80 91 c0 00 	lds	r24, 0x00C0
		if (USART_IsSendReady(0)) {
     61e:	85 ff       	sbrs	r24, 5
     620:	07 c0       	rjmp	.+14     	; 0x630 <DeathTick+0xaa>
			USART_Send(0x00, 0);
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	8b df       	rcall	.-234    	; 0x53e <USART_Send>
		}
		return 1;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	03 c0       	rjmp	.+6      	; 0x632 <DeathTick+0xac>
	} else {
		// nothing
		return 0;
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	01 c0       	rjmp	.+2      	; 0x632 <DeathTick+0xac>
	if ((displayBlank == 0) && GetBit(explosions.matricies[explosions.displayIndex].m[userMatrix.row], userMatrix.column) == 0) {
		userMatrix = initSingleUserMatrix(userMatrix);
		if (USART_IsSendReady(0)) {
			USART_Send(0x00, 0);
		}
		return 1;
     630:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		// nothing
		return 0;
	}
}
     632:	2a 96       	adiw	r28, 0x0a	; 10
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	08 95       	ret

0000064c <ExpTick>:
		default:
			break;
	}	
}

Explosions ExpTick(Explosions explosions) {	
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	8c 01       	movw	r16, r24
	// Return if empty (Protection code)
	if (explosions.index == 0) {
     662:	c1 54       	subi	r28, 0x41	; 65
     664:	df 4f       	sbci	r29, 0xFF	; 255
     666:	88 81       	ld	r24, Y
     668:	cf 5b       	subi	r28, 0xBF	; 191
     66a:	d0 40       	sbci	r29, 0x00	; 0
     66c:	81 11       	cpse	r24, r1
     66e:	09 c0       	rjmp	.+18     	; 0x682 <ExpTick+0x36>
		return explosions;
     670:	86 eb       	ldi	r24, 0xB6	; 182
     672:	fe 01       	movw	r30, r28
     674:	3b 96       	adiw	r30, 0x0b	; 11
     676:	d8 01       	movw	r26, r16
     678:	01 90       	ld	r0, Z+
     67a:	0d 92       	st	X+, r0
     67c:	8a 95       	dec	r24
     67e:	e1 f7       	brne	.-8      	; 0x678 <ExpTick+0x2c>
     680:	a6 c0       	rjmp	.+332    	; 0x7ce <ExpTick+0x182>
	} 
	
	if (explosions.displayIndex >= explosions.index) {
     682:	c0 54       	subi	r28, 0x40	; 64
     684:	df 4f       	sbci	r29, 0xFF	; 255
     686:	98 81       	ld	r25, Y
     688:	c0 5c       	subi	r28, 0xC0	; 192
     68a:	d0 40       	sbci	r29, 0x00	; 0
     68c:	98 17       	cp	r25, r24
     68e:	28 f0       	brcs	.+10     	; 0x69a <ExpTick+0x4e>
		explosions.displayIndex = 0;
     690:	c0 54       	subi	r28, 0x40	; 64
     692:	df 4f       	sbci	r29, 0xFF	; 255
     694:	18 82       	st	Y, r1
     696:	c0 5c       	subi	r28, 0xC0	; 192
     698:	d0 40       	sbci	r29, 0x00	; 0
	}
	
	if (displayBlank == 0)
     69a:	80 91 07 01 	lds	r24, 0x0107
     69e:	81 11       	cpse	r24, r1
     6a0:	12 c0       	rjmp	.+36     	; 0x6c6 <ExpTick+0x7a>
		d3_setMatrixColor(explosions.matricies[explosions.displayIndex].m, RED);
     6a2:	c0 54       	subi	r28, 0x40	; 64
     6a4:	df 4f       	sbci	r29, 0xFF	; 255
     6a6:	88 81       	ld	r24, Y
     6a8:	c0 5c       	subi	r28, 0xC0	; 192
     6aa:	d0 40       	sbci	r29, 0x00	; 0
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	2b e0       	ldi	r18, 0x0B	; 11
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	2c 0f       	add	r18, r28
     6b4:	3d 1f       	adc	r19, r29
     6b6:	48 e0       	ldi	r20, 0x08	; 8
     6b8:	84 9f       	mul	r24, r20
     6ba:	20 0d       	add	r18, r0
     6bc:	31 1d       	adc	r19, r1
     6be:	11 24       	eor	r1, r1
     6c0:	c9 01       	movw	r24, r18
     6c2:	d1 de       	rcall	.-606    	; 0x466 <d3_setMatrixColor>
     6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <ExpTick+0x88>
	else if (displayBlank == 1)
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	09 f0       	breq	.+2      	; 0x6cc <ExpTick+0x80>
     6ca:	79 c0       	rjmp	.+242    	; 0x7be <ExpTick+0x172>
		d3_setMatrixColor(blankMatrix.m, RED);
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	8f e1       	ldi	r24, 0x1F	; 31
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	c9 de       	rcall	.-622    	; 0x466 <d3_setMatrixColor>
	
	if (displayBlank == 0 && contClock >= (explosions.timeDuration[explosions.displayIndex] * 10)) {
     6d4:	80 91 07 01 	lds	r24, 0x0107
     6d8:	81 11       	cpse	r24, r1
     6da:	3c c0       	rjmp	.+120    	; 0x754 <ExpTick+0x108>
     6dc:	c0 54       	subi	r28, 0x40	; 64
     6de:	df 4f       	sbci	r29, 0xFF	; 255
     6e0:	88 81       	ld	r24, Y
     6e2:	c0 5c       	subi	r28, 0xC0	; 192
     6e4:	d0 40       	sbci	r29, 0x00	; 0
     6e6:	ed ea       	ldi	r30, 0xAD	; 173
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	ec 0f       	add	r30, r28
     6ec:	fd 1f       	adc	r31, r29
     6ee:	e8 0f       	add	r30, r24
     6f0:	f1 1d       	adc	r31, r1
     6f2:	20 81       	ld	r18, Z
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	a9 01       	movw	r20, r18
     6f8:	44 0f       	add	r20, r20
     6fa:	55 1f       	adc	r21, r21
     6fc:	22 0f       	add	r18, r18
     6fe:	33 1f       	adc	r19, r19
     700:	22 0f       	add	r18, r18
     702:	33 1f       	adc	r19, r19
     704:	22 0f       	add	r18, r18
     706:	33 1f       	adc	r19, r19
     708:	42 0f       	add	r20, r18
     70a:	53 1f       	adc	r21, r19
     70c:	05 2e       	mov	r0, r21
     70e:	00 0c       	add	r0, r0
     710:	66 0b       	sbc	r22, r22
     712:	77 0b       	sbc	r23, r23
     714:	c0 90 08 01 	lds	r12, 0x0108
     718:	d0 90 09 01 	lds	r13, 0x0109
     71c:	e0 90 0a 01 	lds	r14, 0x010A
     720:	f0 90 0b 01 	lds	r15, 0x010B
     724:	c4 16       	cp	r12, r20
     726:	d5 06       	cpc	r13, r21
     728:	e6 06       	cpc	r14, r22
     72a:	f7 06       	cpc	r15, r23
     72c:	08 f4       	brcc	.+2      	; 0x730 <ExpTick+0xe4>
     72e:	47 c0       	rjmp	.+142    	; 0x7be <ExpTick+0x172>
		displayBlank = 1;
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	90 93 07 01 	sts	0x0107, r25
		explosions.displayIndex++;
     736:	8f 5f       	subi	r24, 0xFF	; 255
     738:	c0 54       	subi	r28, 0x40	; 64
     73a:	df 4f       	sbci	r29, 0xFF	; 255
     73c:	88 83       	st	Y, r24
     73e:	c0 5c       	subi	r28, 0xC0	; 192
     740:	d0 40       	sbci	r29, 0x00	; 0
		contClock = 0;
     742:	10 92 08 01 	sts	0x0108, r1
     746:	10 92 09 01 	sts	0x0109, r1
     74a:	10 92 0a 01 	sts	0x010A, r1
     74e:	10 92 0b 01 	sts	0x010B, r1
     752:	35 c0       	rjmp	.+106    	; 0x7be <ExpTick+0x172>
	} else if (displayBlank == 1 && contClock >= (explosions.timeBetween[explosions.displayIndex] * 10)) {
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	99 f5       	brne	.+102    	; 0x7be <ExpTick+0x172>
     758:	c0 54       	subi	r28, 0x40	; 64
     75a:	df 4f       	sbci	r29, 0xFF	; 255
     75c:	88 81       	ld	r24, Y
     75e:	c0 5c       	subi	r28, 0xC0	; 192
     760:	d0 40       	sbci	r29, 0x00	; 0
     762:	eb e9       	ldi	r30, 0x9B	; 155
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	ec 0f       	add	r30, r28
     768:	fd 1f       	adc	r31, r29
     76a:	e8 0f       	add	r30, r24
     76c:	f1 1d       	adc	r31, r1
     76e:	20 81       	ld	r18, Z
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	c9 01       	movw	r24, r18
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	22 0f       	add	r18, r18
     77a:	33 1f       	adc	r19, r19
     77c:	22 0f       	add	r18, r18
     77e:	33 1f       	adc	r19, r19
     780:	22 0f       	add	r18, r18
     782:	33 1f       	adc	r19, r19
     784:	82 0f       	add	r24, r18
     786:	93 1f       	adc	r25, r19
     788:	09 2e       	mov	r0, r25
     78a:	00 0c       	add	r0, r0
     78c:	aa 0b       	sbc	r26, r26
     78e:	bb 0b       	sbc	r27, r27
     790:	40 91 08 01 	lds	r20, 0x0108
     794:	50 91 09 01 	lds	r21, 0x0109
     798:	60 91 0a 01 	lds	r22, 0x010A
     79c:	70 91 0b 01 	lds	r23, 0x010B
     7a0:	48 17       	cp	r20, r24
     7a2:	59 07       	cpc	r21, r25
     7a4:	6a 07       	cpc	r22, r26
     7a6:	7b 07       	cpc	r23, r27
     7a8:	50 f0       	brcs	.+20     	; 0x7be <ExpTick+0x172>
		displayBlank = 0;
     7aa:	10 92 07 01 	sts	0x0107, r1
		contClock = 0;
     7ae:	10 92 08 01 	sts	0x0108, r1
     7b2:	10 92 09 01 	sts	0x0109, r1
     7b6:	10 92 0a 01 	sts	0x010A, r1
     7ba:	10 92 0b 01 	sts	0x010B, r1
	}
	
	return explosions;
     7be:	86 eb       	ldi	r24, 0xB6	; 182
     7c0:	fe 01       	movw	r30, r28
     7c2:	3b 96       	adiw	r30, 0x0b	; 11
     7c4:	d8 01       	movw	r26, r16
     7c6:	01 90       	ld	r0, Z+
     7c8:	0d 92       	st	X+, r0
     7ca:	8a 95       	dec	r24
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <ExpTick+0x17a>
}
     7ce:	c8 01       	movw	r24, r16
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	df 90       	pop	r13
     7de:	cf 90       	pop	r12
     7e0:	08 95       	ret

000007e2 <Edit_Tick>:
		// nothing
		return 0;
	}
}

void Edit_Tick() {
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	c6 5b       	subi	r28, 0xB6	; 182
     7ec:	d1 09       	sbc	r29, r1
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
	switch (Edit_State) {
     7f8:	80 91 fa 01 	lds	r24, 0x01FA
     7fc:	81 30       	cpi	r24, 0x01	; 1
     7fe:	41 f0       	breq	.+16     	; 0x810 <Edit_Tick+0x2e>
     800:	18 f0       	brcs	.+6      	; 0x808 <Edit_Tick+0x26>
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	71 f0       	breq	.+28     	; 0x822 <Edit_Tick+0x40>
     806:	20 c0       	rjmp	.+64     	; 0x848 <Edit_Tick+0x66>
		case Edit_SMStart:
			Edit_State = Edit_Wait;
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 fa 01 	sts	0x01FA, r24
			break;
     80e:	48 c0       	rjmp	.+144    	; 0x8a0 <Edit_Tick+0xbe>
			
		case Edit_Wait:
			if (!displayEDIT) {
     810:	80 91 29 01 	lds	r24, 0x0129
     814:	88 23       	and	r24, r24
     816:	09 f4       	brne	.+2      	; 0x81a <Edit_Tick+0x38>
     818:	43 c0       	rjmp	.+134    	; 0x8a0 <Edit_Tick+0xbe>
				Edit_State = Edit_Wait;
			} else if (displayEDIT) {
				Edit_State = Edit_Display;
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	80 93 fa 01 	sts	0x01FA, r24
     820:	17 c0       	rjmp	.+46     	; 0x850 <Edit_Tick+0x6e>
			} 
			break;
			
		case Edit_Display:
			if (!displayEDIT) {
     822:	80 91 29 01 	lds	r24, 0x0129
     826:	81 11       	cpse	r24, r1
     828:	13 c0       	rjmp	.+38     	; 0x850 <Edit_Tick+0x6e>
				Edit_State = Edit_Wait;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	80 93 fa 01 	sts	0x01FA, r24
				d3_setMatrixColor(blankMatrix.m, RED);
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	8f e1       	ldi	r24, 0x1F	; 31
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	17 de       	rcall	.-978    	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, GREEN);
     838:	62 e0       	ldi	r22, 0x02	; 2
     83a:	8f e1       	ldi	r24, 0x1F	; 31
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	13 de       	rcall	.-986    	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, BLUE);
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	8f e1       	ldi	r24, 0x1F	; 31
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0f de       	rcall	.-994    	; 0x466 <d3_setMatrixColor>
			
		default:
			break;
	}
	
	switch (Edit_State) {
     848:	80 91 fa 01 	lds	r24, 0x01FA
     84c:	82 30       	cpi	r24, 0x02	; 2
     84e:	41 f5       	brne	.+80     	; 0x8a0 <Edit_Tick+0xbe>
		
		case Edit_Wait:
			break;
		
		case Edit_Display:
			explosions = ExpTick(explosions);
     850:	8d b7       	in	r24, 0x3d	; 61
     852:	9e b7       	in	r25, 0x3e	; 62
     854:	86 5b       	subi	r24, 0xB6	; 182
     856:	91 09       	sbc	r25, r1
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	9e bf       	out	0x3e, r25	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	8d bf       	out	0x3d, r24	; 61
     862:	ad b7       	in	r26, 0x3d	; 61
     864:	be b7       	in	r27, 0x3e	; 62
     866:	11 96       	adiw	r26, 0x01	; 1
     868:	86 eb       	ldi	r24, 0xB6	; 182
     86a:	e2 e3       	ldi	r30, 0x32	; 50
     86c:	f1 e0       	ldi	r31, 0x01	; 1
     86e:	01 90       	ld	r0, Z+
     870:	0d 92       	st	X+, r0
     872:	8a 95       	dec	r24
     874:	e1 f7       	brne	.-8      	; 0x86e <Edit_Tick+0x8c>
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	e8 de       	rcall	.-560    	; 0x64c <ExpTick>
     87c:	86 eb       	ldi	r24, 0xB6	; 182
     87e:	fe 01       	movw	r30, r28
     880:	31 96       	adiw	r30, 0x01	; 1
     882:	a2 e3       	ldi	r26, 0x32	; 50
     884:	b1 e0       	ldi	r27, 0x01	; 1
     886:	01 90       	ld	r0, Z+
     888:	0d 92       	st	X+, r0
     88a:	8a 95       	dec	r24
     88c:	e1 f7       	brne	.-8      	; 0x886 <Edit_Tick+0xa4>
			d3_setMatrixColor(wallMatrix.m, BLUE);
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	de bf       	out	0x3e, r29	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	cd bf       	out	0x3d, r28	; 61
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	82 ef       	ldi	r24, 0xF2	; 242
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	e3 dd       	rcall	.-1082   	; 0x466 <d3_setMatrixColor>
			break;
			
		default:
			break;
	}
}
     8a0:	ca 54       	subi	r28, 0x4A	; 74
     8a2:	df 4f       	sbci	r29, 0xFF	; 255
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <LED_Tick>:

void LED_Tick() {
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	c0 5c       	subi	r28, 0xC0	; 192
     8c6:	d1 09       	sbc	r29, r1
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
	switch (LED_State) {
     8d2:	80 91 1c 01 	lds	r24, 0x011C
     8d6:	81 30       	cpi	r24, 0x01	; 1
     8d8:	51 f0       	breq	.+20     	; 0x8ee <LED_Tick+0x3a>
     8da:	18 f0       	brcs	.+6      	; 0x8e2 <LED_Tick+0x2e>
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	91 f1       	breq	.+100    	; 0x944 <LED_Tick+0x90>
     8e0:	44 c0       	rjmp	.+136    	; 0x96a <LED_Tick+0xb6>
		case LED_SMStart:
			LED_State = LED_Wait;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	80 93 1c 01 	sts	0x011C, r24
			displayLED = 0;
     8e8:	10 92 1e 01 	sts	0x011E, r1
			break;
     8ec:	3e c0       	rjmp	.+124    	; 0x96a <LED_Tick+0xb6>
		
		case LED_Wait:
			if (displayLED) {
     8ee:	80 91 1e 01 	lds	r24, 0x011E
     8f2:	88 23       	and	r24, r24
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <LED_Tick+0x44>
     8f6:	6a c0       	rjmp	.+212    	; 0x9cc <LED_Tick+0x118>
				LED_State = LED_Display;
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	80 93 1c 01 	sts	0x011C, r24
				userMatrix = initSingleUserMatrix(userMatrix);
     8fe:	e0 90 e8 01 	lds	r14, 0x01E8
     902:	f0 90 e9 01 	lds	r15, 0x01E9
     906:	00 91 ea 01 	lds	r16, 0x01EA
     90a:	10 91 eb 01 	lds	r17, 0x01EB
     90e:	20 91 ec 01 	lds	r18, 0x01EC
     912:	30 91 ed 01 	lds	r19, 0x01ED
     916:	40 91 ee 01 	lds	r20, 0x01EE
     91a:	50 91 ef 01 	lds	r21, 0x01EF
     91e:	60 91 f0 01 	lds	r22, 0x01F0
     922:	70 91 f1 01 	lds	r23, 0x01F1
     926:	ce 01       	movw	r24, r28
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	ea dc       	rcall	.-1580   	; 0x300 <initSingleUserMatrix>
     92c:	8a e0       	ldi	r24, 0x0A	; 10
     92e:	fe 01       	movw	r30, r28
     930:	31 96       	adiw	r30, 0x01	; 1
     932:	a8 ee       	ldi	r26, 0xE8	; 232
     934:	b1 e0       	ldi	r27, 0x01	; 1
     936:	01 90       	ld	r0, Z+
     938:	0d 92       	st	X+, r0
     93a:	8a 95       	dec	r24
     93c:	e1 f7       	brne	.-8      	; 0x936 <LED_Tick+0x82>
				explosions.displayIndex = 0;
     93e:	10 92 e7 01 	sts	0x01E7, r1
     942:	13 c0       	rjmp	.+38     	; 0x96a <LED_Tick+0xb6>
				LED_State = LED_Wait;
			}
			break;
		
		case LED_Display:
			if (displayLED) {
     944:	80 91 1e 01 	lds	r24, 0x011E
     948:	81 11       	cpse	r24, r1
     94a:	13 c0       	rjmp	.+38     	; 0x972 <LED_Tick+0xbe>
				LED_State = LED_Display;
				} else if (!displayLED) {
				LED_State = LED_Wait; 
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	80 93 1c 01 	sts	0x011C, r24
				d3_setMatrixColor(blankMatrix.m, RED);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	8f e1       	ldi	r24, 0x1F	; 31
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	86 dd       	rcall	.-1268   	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, GREEN);
     95a:	62 e0       	ldi	r22, 0x02	; 2
     95c:	8f e1       	ldi	r24, 0x1F	; 31
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	82 dd       	rcall	.-1276   	; 0x466 <d3_setMatrixColor>
				d3_setMatrixColor(blankMatrix.m, BLUE);
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	8f e1       	ldi	r24, 0x1F	; 31
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	7e dd       	rcall	.-1284   	; 0x466 <d3_setMatrixColor>
		
		default:
			break;
	}
	
	switch (LED_State) {
     96a:	80 91 1c 01 	lds	r24, 0x011C
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	69 f5       	brne	.+90     	; 0x9cc <LED_Tick+0x118>
		
		case LED_Wait:
			break;
		
		case LED_Display:
			explosions = ExpTick(explosions);
     972:	8d b7       	in	r24, 0x3d	; 61
     974:	9e b7       	in	r25, 0x3e	; 62
     976:	86 5b       	subi	r24, 0xB6	; 182
     978:	91 09       	sbc	r25, r1
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	9e bf       	out	0x3e, r25	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	8d bf       	out	0x3d, r24	; 61
     984:	ad b7       	in	r26, 0x3d	; 61
     986:	be b7       	in	r27, 0x3e	; 62
     988:	11 96       	adiw	r26, 0x01	; 1
     98a:	86 eb       	ldi	r24, 0xB6	; 182
     98c:	e2 e3       	ldi	r30, 0x32	; 50
     98e:	f1 e0       	ldi	r31, 0x01	; 1
     990:	01 90       	ld	r0, Z+
     992:	0d 92       	st	X+, r0
     994:	8a 95       	dec	r24
     996:	e1 f7       	brne	.-8      	; 0x990 <LED_Tick+0xdc>
     998:	ce 01       	movw	r24, r28
     99a:	0b 96       	adiw	r24, 0x0b	; 11
     99c:	57 de       	rcall	.-850    	; 0x64c <ExpTick>
     99e:	86 eb       	ldi	r24, 0xB6	; 182
     9a0:	fe 01       	movw	r30, r28
     9a2:	3b 96       	adiw	r30, 0x0b	; 11
     9a4:	a2 e3       	ldi	r26, 0x32	; 50
     9a6:	b1 e0       	ldi	r27, 0x01	; 1
     9a8:	01 90       	ld	r0, Z+
     9aa:	0d 92       	st	X+, r0
     9ac:	8a 95       	dec	r24
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <LED_Tick+0xf4>
			DeathTick();
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	e5 dd       	rcall	.-1078   	; 0x586 <DeathTick>
			d3_setMatrixColor(userMatrix.m, GREEN);
     9bc:	62 e0       	ldi	r22, 0x02	; 2
     9be:	88 ee       	ldi	r24, 0xE8	; 232
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	51 dd       	rcall	.-1374   	; 0x466 <d3_setMatrixColor>
			d3_setMatrixColor(wallMatrix.m, BLUE);
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	82 ef       	ldi	r24, 0xF2	; 242
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	4d dd       	rcall	.-1382   	; 0x466 <d3_setMatrixColor>
			break;
		
		default:
			break;
	}	
}
     9cc:	c0 54       	subi	r28, 0x40	; 64
     9ce:	df 4f       	sbci	r29, 0xFF	; 255
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	08 95       	ret

000009e8 <main>:
void Edit_Tick();

void fetchLevels();


int main(void) {
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	c7 51       	subi	r28, 0x17	; 23
     9f2:	d5 40       	sbci	r29, 0x05	; 5
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00;
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	84 b9       	out	0x04, r24	; 4
     a02:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
     a04:	8a b9       	out	0x0a, r24	; 10
     a06:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xFF; PORTC = 0x00;
     a08:	87 b9       	out	0x07, r24	; 7
     a0a:	18 b8       	out	0x08, r1	; 8
	
	initUSART(0);
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	75 dd       	rcall	.-1302   	; 0x4fa <initUSART>
	
	initTasks();
     a10:	89 db       	rcall	.-2286   	; 0x124 <initTasks>
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	a0 e0       	ldi	r26, 0x00	; 0
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	80 93 00 01 	sts	0x0100, r24
     a1e:	90 93 01 01 	sts	0x0101, r25
     a22:	a0 93 02 01 	sts	0x0102, r26
     a26:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
     a2a:	80 93 0c 01 	sts	0x010C, r24
     a2e:	90 93 0d 01 	sts	0x010D, r25
     a32:	a0 93 0e 01 	sts	0x010E, r26
     a36:	b0 93 0f 01 	sts	0x010F, r27
	
	TimerSet(1);
	TimerOn();
     a3a:	89 db       	rcall	.-2286   	; 0x14e <TimerOn>
	
	LED_State = LED_SMStart;
     a3c:	10 92 1c 01 	sts	0x011C, r1
	
	blankMatrix = clearSingleMatrix(blankMatrix);
     a40:	20 91 1f 01 	lds	r18, 0x011F
     a44:	30 91 20 01 	lds	r19, 0x0120
     a48:	40 91 21 01 	lds	r20, 0x0121
     a4c:	50 91 22 01 	lds	r21, 0x0122
     a50:	60 91 23 01 	lds	r22, 0x0123
     a54:	70 91 24 01 	lds	r23, 0x0124
     a58:	80 91 25 01 	lds	r24, 0x0125
     a5c:	90 91 26 01 	lds	r25, 0x0126
     a60:	19 dc       	rcall	.-1998   	; 0x294 <clearSingleMatrix>
     a62:	ef e1       	ldi	r30, 0x1F	; 31
     a64:	f1 e0       	ldi	r31, 0x01	; 1
     a66:	20 83       	st	Z, r18
     a68:	31 83       	std	Z+1, r19	; 0x01
     a6a:	42 83       	std	Z+2, r20	; 0x02
     a6c:	53 83       	std	Z+3, r21	; 0x03
     a6e:	64 83       	std	Z+4, r22	; 0x04
     a70:	75 83       	std	Z+5, r23	; 0x05
     a72:	86 83       	std	Z+6, r24	; 0x06
     a74:	97 83       	std	Z+7, r25	; 0x07
	explosions = initExplosions(explosions);
     a76:	6d b7       	in	r22, 0x3d	; 61
     a78:	7e b7       	in	r23, 0x3e	; 62
     a7a:	66 5b       	subi	r22, 0xB6	; 182
     a7c:	71 09       	sbc	r23, r1
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	7e bf       	out	0x3e, r23	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	6d bf       	out	0x3d, r22	; 61
     a88:	ad b7       	in	r26, 0x3d	; 61
     a8a:	be b7       	in	r27, 0x3e	; 62
     a8c:	11 96       	adiw	r26, 0x01	; 1
     a8e:	86 eb       	ldi	r24, 0xB6	; 182
     a90:	e2 e3       	ldi	r30, 0x32	; 50
     a92:	f1 e0       	ldi	r31, 0x01	; 1
     a94:	01 90       	ld	r0, Z+
     a96:	0d 92       	st	X+, r0
     a98:	8a 95       	dec	r24
     a9a:	e1 f7       	brne	.-8      	; 0xa94 <main+0xac>
     a9c:	ce 01       	movw	r24, r28
     a9e:	83 5a       	subi	r24, 0xA3	; 163
     aa0:	9b 4f       	sbci	r25, 0xFB	; 251
     aa2:	0d dd       	rcall	.-1510   	; 0x4be <initExplosions>
     aa4:	86 eb       	ldi	r24, 0xB6	; 182
     aa6:	fe 01       	movw	r30, r28
     aa8:	e3 5a       	subi	r30, 0xA3	; 163
     aaa:	fb 4f       	sbci	r31, 0xFB	; 251
     aac:	a2 e3       	ldi	r26, 0x32	; 50
     aae:	b1 e0       	ldi	r27, 0x01	; 1
     ab0:	01 90       	ld	r0, Z+
     ab2:	0d 92       	st	X+, r0
     ab4:	8a 95       	dec	r24
     ab6:	e1 f7       	brne	.-8      	; 0xab0 <main+0xc8>
	wallMatrix = clearSingleMatrix(wallMatrix);
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
     ac2:	20 91 f2 01 	lds	r18, 0x01F2
     ac6:	30 91 f3 01 	lds	r19, 0x01F3
     aca:	40 91 f4 01 	lds	r20, 0x01F4
     ace:	50 91 f5 01 	lds	r21, 0x01F5
     ad2:	60 91 f6 01 	lds	r22, 0x01F6
     ad6:	70 91 f7 01 	lds	r23, 0x01F7
     ada:	80 91 f8 01 	lds	r24, 0x01F8
     ade:	90 91 f9 01 	lds	r25, 0x01F9
     ae2:	d8 db       	rcall	.-2128   	; 0x294 <clearSingleMatrix>
     ae4:	e2 ef       	ldi	r30, 0xF2	; 242
     ae6:	f1 e0       	ldi	r31, 0x01	; 1
     ae8:	20 83       	st	Z, r18
     aea:	31 83       	std	Z+1, r19	; 0x01
     aec:	42 83       	std	Z+2, r20	; 0x02
     aee:	53 83       	std	Z+3, r21	; 0x03
     af0:	64 83       	std	Z+4, r22	; 0x04
     af2:	75 83       	std	Z+5, r23	; 0x05
     af4:	86 83       	std	Z+6, r24	; 0x06
     af6:	97 83       	std	Z+7, r25	; 0x07
	
	numPatterns = eeprom_read_byte((uint8_t*)1);
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	78 d3       	rcall	.+1776   	; 0x11ee <eeprom_read_byte>
     afe:	38 2e       	mov	r3, r24
     b00:	80 93 06 01 	sts	0x0106, r24
     b04:	0f 2e       	mov	r0, r31
     b06:	f2 ef       	ldi	r31, 0xF2	; 242
     b08:	ef 2e       	mov	r14, r31
     b0a:	f1 e0       	ldi	r31, 0x01	; 1
     b0c:	ff 2e       	mov	r15, r31
     b0e:	f0 2d       	mov	r31, r0
     b10:	02 e0       	ldi	r16, 0x02	; 2
     b12:	10 e0       	ldi	r17, 0x00	; 0
	
	for (unsigned char i = 0; i < 8; i++) {
		wallMatrix.m[i] = eeprom_read_byte((uint8_t*)(i+2));
     b14:	c8 01       	movw	r24, r16
     b16:	6b d3       	rcall	.+1750   	; 0x11ee <eeprom_read_byte>
     b18:	f7 01       	movw	r30, r14
     b1a:	81 93       	st	Z+, r24
     b1c:	7f 01       	movw	r14, r30
     b1e:	0f 5f       	subi	r16, 0xFF	; 255
     b20:	1f 4f       	sbci	r17, 0xFF	; 255
	explosions = initExplosions(explosions);
	wallMatrix = clearSingleMatrix(wallMatrix);
	
	numPatterns = eeprom_read_byte((uint8_t*)1);
	
	for (unsigned char i = 0; i < 8; i++) {
     b22:	0a 30       	cpi	r16, 0x0A	; 10
     b24:	11 05       	cpc	r17, r1
     b26:	b1 f7       	brne	.-20     	; 0xb14 <main+0x12c>
	}
	
	unsigned char tempCnt = 11;
	unsigned char timeBetween = 0;
	unsigned char timeDuration = 0;
	for (unsigned char i = 0; i < numPatterns; i++) {
     b28:	31 10       	cpse	r3, r1
     b2a:	74 c0       	rjmp	.+232    	; 0xc14 <main+0x22c>
     b2c:	99 c0       	rjmp	.+306    	; 0xc60 <main+0x278>
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[j] = eeprom_read_byte((uint8_t*)(j + tempCnt));	
     b2e:	c4 01       	movw	r24, r8
     b30:	80 0f       	add	r24, r16
     b32:	91 1f       	adc	r25, r17
     b34:	5c d3       	rcall	.+1720   	; 0x11ee <eeprom_read_byte>
     b36:	f8 01       	movw	r30, r16
     b38:	81 93       	st	Z+, r24
     b3a:	8f 01       	movw	r16, r30
	
	unsigned char tempCnt = 11;
	unsigned char timeBetween = 0;
	unsigned char timeDuration = 0;
	for (unsigned char i = 0; i < numPatterns; i++) {
		for (unsigned char j = 0; j < 8; j++) {
     b3c:	e6 15       	cp	r30, r6
     b3e:	f7 05       	cpc	r31, r7
     b40:	b1 f7       	brne	.-20     	; 0xb2e <main+0x146>
			matrix.m[j] = eeprom_read_byte((uint8_t*)(j + tempCnt));	
		}
		timeBetween = eeprom_read_byte((uint8_t*)(tempCnt + 8));
     b42:	c6 01       	movw	r24, r12
     b44:	08 96       	adiw	r24, 0x08	; 8
     b46:	53 d3       	rcall	.+1702   	; 0x11ee <eeprom_read_byte>
     b48:	18 2f       	mov	r17, r24
		timeDuration = eeprom_read_byte((uint8_t*)(tempCnt + 9));
     b4a:	c6 01       	movw	r24, r12
     b4c:	09 96       	adiw	r24, 0x09	; 9
     b4e:	4f d3       	rcall	.+1694   	; 0x11ee <eeprom_read_byte>
     b50:	e2 e3       	ldi	r30, 0x32	; 50
     b52:	f1 e0       	ldi	r31, 0x01	; 1
     b54:	de 01       	movw	r26, r28
     b56:	a1 57       	subi	r26, 0x71	; 113
     b58:	bc 4f       	sbci	r27, 0xFC	; 252
     b5a:	95 2d       	mov	r25, r5
     b5c:	01 90       	ld	r0, Z+
     b5e:	0d 92       	st	X+, r0
     b60:	9a 95       	dec	r25
     b62:	e1 f7       	brne	.-8      	; 0xb5c <main+0x174>
     b64:	e6 ee       	ldi	r30, 0xE6	; 230
     b66:	f1 e0       	ldi	r31, 0x01	; 1
     b68:	90 81       	ld	r25, Z
     b6a:	f7 01       	movw	r30, r14
     b6c:	de 01       	movw	r26, r28
     b6e:	ab 5a       	subi	r26, 0xAB	; 171
     b70:	bb 4f       	sbci	r27, 0xFB	; 251
     b72:	22 2d       	mov	r18, r2
     b74:	01 90       	ld	r0, Z+
     b76:	0d 92       	st	X+, r0
     b78:	2a 95       	dec	r18
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <main+0x18c>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     b7c:	af e8       	ldi	r26, 0x8F	; 143
     b7e:	b3 e0       	ldi	r27, 0x03	; 3
     b80:	ac 0f       	add	r26, r28
     b82:	bd 1f       	adc	r27, r29
     b84:	f8 e0       	ldi	r31, 0x08	; 8
     b86:	9f 9f       	mul	r25, r31
     b88:	a0 0d       	add	r26, r0
     b8a:	b1 1d       	adc	r27, r1
     b8c:	11 24       	eor	r1, r1
     b8e:	fe 01       	movw	r30, r28
     b90:	eb 5a       	subi	r30, 0xAB	; 171
     b92:	fb 4f       	sbci	r31, 0xFB	; 251
     b94:	22 2d       	mov	r18, r2
     b96:	01 90       	ld	r0, Z+
     b98:	0d 92       	st	X+, r0
     b9a:	2a 95       	dec	r18
     b9c:	e1 f7       	brne	.-8      	; 0xb96 <main+0x1ae>
	explosions.timeBetween[explosions.index] = a;
     b9e:	2f e8       	ldi	r18, 0x8F	; 143
     ba0:	33 e0       	ldi	r19, 0x03	; 3
     ba2:	2c 0f       	add	r18, r28
     ba4:	3d 1f       	adc	r19, r29
     ba6:	29 0f       	add	r18, r25
     ba8:	31 1d       	adc	r19, r1
     baa:	f9 01       	movw	r30, r18
     bac:	e0 57       	subi	r30, 0x70	; 112
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	10 83       	st	Z, r17
	explosions.timeDuration[explosions.index] = b;
     bb2:	72 96       	adiw	r30, 0x12	; 18
     bb4:	80 83       	st	Z, r24
	explosions.index++;
     bb6:	9f 5f       	subi	r25, 0xFF	; 255
	
	return explosions;
     bb8:	cd 5b       	subi	r28, 0xBD	; 189
     bba:	db 4f       	sbci	r29, 0xFB	; 251
     bbc:	98 83       	st	Y, r25
     bbe:	c3 54       	subi	r28, 0x43	; 67
     bc0:	d4 40       	sbci	r29, 0x04	; 4
     bc2:	fe 01       	movw	r30, r28
     bc4:	e1 57       	subi	r30, 0x71	; 113
     bc6:	fc 4f       	sbci	r31, 0xFC	; 252
     bc8:	de 01       	movw	r26, r28
     bca:	a7 52       	subi	r26, 0x27	; 39
     bcc:	bd 4f       	sbci	r27, 0xFD	; 253
     bce:	85 2d       	mov	r24, r5
     bd0:	01 90       	ld	r0, Z+
     bd2:	0d 92       	st	X+, r0
     bd4:	8a 95       	dec	r24
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <main+0x1e8>
		explosions = pushExplosion(explosions, matrix, timeBetween, timeDuration);
     bd8:	c3 57       	subi	r28, 0x73	; 115
     bda:	dc 4f       	sbci	r29, 0xFC	; 252
     bdc:	98 83       	st	Y, r25
     bde:	cd 58       	subi	r28, 0x8D	; 141
     be0:	d3 40       	sbci	r29, 0x03	; 3
     be2:	fe 01       	movw	r30, r28
     be4:	e7 52       	subi	r30, 0x27	; 39
     be6:	fd 4f       	sbci	r31, 0xFD	; 253
     be8:	a2 e3       	ldi	r26, 0x32	; 50
     bea:	b1 e0       	ldi	r27, 0x01	; 1
     bec:	85 2d       	mov	r24, r5
     bee:	01 90       	ld	r0, Z+
     bf0:	0d 92       	st	X+, r0
     bf2:	8a 95       	dec	r24
     bf4:	e1 f7       	brne	.-8      	; 0xbee <main+0x206>
		
		tempCnt += 10;
     bf6:	cb 5e       	subi	r28, 0xEB	; 235
     bf8:	da 4f       	sbci	r29, 0xFA	; 250
     bfa:	28 81       	ld	r18, Y
     bfc:	c5 51       	subi	r28, 0x15	; 21
     bfe:	d5 40       	sbci	r29, 0x05	; 5
     c00:	26 5f       	subi	r18, 0xF6	; 246
     c02:	cb 5e       	subi	r28, 0xEB	; 235
     c04:	da 4f       	sbci	r29, 0xFA	; 250
     c06:	28 83       	st	Y, r18
     c08:	c5 51       	subi	r28, 0x15	; 21
     c0a:	d5 40       	sbci	r29, 0x05	; 5
	}
	
	unsigned char tempCnt = 11;
	unsigned char timeBetween = 0;
	unsigned char timeDuration = 0;
	for (unsigned char i = 0; i < numPatterns; i++) {
     c0c:	43 94       	inc	r4
     c0e:	43 10       	cpse	r4, r3
     c10:	1b c0       	rjmp	.+54     	; 0xc48 <main+0x260>
     c12:	26 c0       	rjmp	.+76     	; 0xc60 <main+0x278>
     c14:	41 2c       	mov	r4, r1
     c16:	6b e0       	ldi	r22, 0x0B	; 11
     c18:	cb 5e       	subi	r28, 0xEB	; 235
     c1a:	da 4f       	sbci	r29, 0xFA	; 250
     c1c:	68 83       	st	Y, r22
     c1e:	c5 51       	subi	r28, 0x15	; 21
     c20:	d5 40       	sbci	r29, 0x05	; 5
     c22:	0f 2e       	mov	r0, r31
     c24:	fa e2       	ldi	r31, 0x2A	; 42
     c26:	ef 2e       	mov	r14, r31
     c28:	f1 e0       	ldi	r31, 0x01	; 1
     c2a:	ff 2e       	mov	r15, r31
     c2c:	f0 2d       	mov	r31, r0
     c2e:	0f 2e       	mov	r0, r31
     c30:	f2 e3       	ldi	r31, 0x32	; 50
     c32:	6f 2e       	mov	r6, r31
     c34:	f1 e0       	ldi	r31, 0x01	; 1
     c36:	7f 2e       	mov	r7, r31
     c38:	f0 2d       	mov	r31, r0
     c3a:	0f 2e       	mov	r0, r31
     c3c:	f6 eb       	ldi	r31, 0xB6	; 182
     c3e:	5f 2e       	mov	r5, r31
     c40:	f0 2d       	mov	r31, r0
     c42:	68 94       	set
     c44:	22 24       	eor	r2, r2
     c46:	23 f8       	bld	r2, 3
	
	blankMatrix = clearSingleMatrix(blankMatrix);
	explosions = initExplosions(explosions);
	wallMatrix = clearSingleMatrix(wallMatrix);
	
	numPatterns = eeprom_read_byte((uint8_t*)1);
     c48:	87 01       	movw	r16, r14
	unsigned char tempCnt = 11;
	unsigned char timeBetween = 0;
	unsigned char timeDuration = 0;
	for (unsigned char i = 0; i < numPatterns; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[j] = eeprom_read_byte((uint8_t*)(j + tempCnt));	
     c4a:	cb 5e       	subi	r28, 0xEB	; 235
     c4c:	da 4f       	sbci	r29, 0xFA	; 250
     c4e:	78 81       	ld	r23, Y
     c50:	c5 51       	subi	r28, 0x15	; 21
     c52:	d5 40       	sbci	r29, 0x05	; 5
     c54:	c7 2e       	mov	r12, r23
     c56:	d1 2c       	mov	r13, r1
     c58:	46 01       	movw	r8, r12
     c5a:	8e 18       	sub	r8, r14
     c5c:	9f 08       	sbc	r9, r15
     c5e:	67 cf       	rjmp	.-306    	; 0xb2e <main+0x146>
	matrix.m[3] = 0x00;
	matrix.m[4] = 0x00;
	explosions = pushExplosion(explosions, matrix, 0, 2);
	*/
	
	userMatrix = initSingleUserMatrix(userMatrix);
     c60:	e0 90 e8 01 	lds	r14, 0x01E8
     c64:	f0 90 e9 01 	lds	r15, 0x01E9
     c68:	00 91 ea 01 	lds	r16, 0x01EA
     c6c:	10 91 eb 01 	lds	r17, 0x01EB
     c70:	20 91 ec 01 	lds	r18, 0x01EC
     c74:	30 91 ed 01 	lds	r19, 0x01ED
     c78:	40 91 ee 01 	lds	r20, 0x01EE
     c7c:	50 91 ef 01 	lds	r21, 0x01EF
     c80:	60 91 f0 01 	lds	r22, 0x01F0
     c84:	70 91 f1 01 	lds	r23, 0x01F1
     c88:	ce 01       	movw	r24, r28
     c8a:	83 5a       	subi	r24, 0xA3	; 163
     c8c:	9b 4f       	sbci	r25, 0xFB	; 251
     c8e:	38 db       	rcall	.-2448   	; 0x300 <initSingleUserMatrix>
     c90:	8a e0       	ldi	r24, 0x0A	; 10
     c92:	fe 01       	movw	r30, r28
     c94:	e3 5a       	subi	r30, 0xA3	; 163
     c96:	fb 4f       	sbci	r31, 0xFB	; 251
     c98:	a8 ee       	ldi	r26, 0xE8	; 232
     c9a:	b1 e0       	ldi	r27, 0x01	; 1
     c9c:	01 90       	ld	r0, Z+
     c9e:	0d 92       	st	X+, r0
     ca0:	8a 95       	dec	r24
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <main+0x2b4>
     ca4:	4e 01       	movw	r8, r28
     ca6:	87 eb       	ldi	r24, 0xB7	; 183
     ca8:	88 0e       	add	r8, r24
     caa:	91 1c       	adc	r9, r1
     cac:	28 2c       	mov	r2, r8
     cae:	cb 5e       	subi	r28, 0xEB	; 235
     cb0:	da 4f       	sbci	r29, 0xFA	; 250
     cb2:	98 82       	st	Y, r9
     cb4:	c5 51       	subi	r28, 0x15	; 21
     cb6:	d5 40       	sbci	r29, 0x05	; 5
     cb8:	fe 01       	movw	r30, r28
     cba:	ed 5d       	subi	r30, 0xDD	; 221
     cbc:	fd 4f       	sbci	r31, 0xFD	; 253
     cbe:	cd 5e       	subi	r28, 0xED	; 237
     cc0:	da 4f       	sbci	r29, 0xFA	; 250
     cc2:	f9 83       	std	Y+1, r31	; 0x01
     cc4:	e8 83       	st	Y, r30
     cc6:	c3 51       	subi	r28, 0x13	; 19
     cc8:	d5 40       	sbci	r29, 0x05	; 5
     cca:	cd 5e       	subi	r28, 0xED	; 237
     ccc:	da 4f       	sbci	r29, 0xFA	; 250
     cce:	f8 81       	ld	r31, Y
     cd0:	c3 51       	subi	r28, 0x13	; 19
     cd2:	d5 40       	sbci	r29, 0x05	; 5
     cd4:	ca 5e       	subi	r28, 0xEA	; 234
     cd6:	da 4f       	sbci	r29, 0xFA	; 250
     cd8:	f8 83       	st	Y, r31
     cda:	c6 51       	subi	r28, 0x16	; 22
     cdc:	d5 40       	sbci	r29, 0x05	; 5
     cde:	cc 5e       	subi	r28, 0xEC	; 236
     ce0:	da 4f       	sbci	r29, 0xFA	; 250
     ce2:	28 81       	ld	r18, Y
     ce4:	c4 51       	subi	r28, 0x14	; 20
     ce6:	d5 40       	sbci	r29, 0x05	; 5
     ce8:	c9 5e       	subi	r28, 0xE9	; 233
     cea:	da 4f       	sbci	r29, 0xFA	; 250
     cec:	28 83       	st	Y, r18
     cee:	c7 51       	subi	r28, 0x17	; 23
     cf0:	d5 40       	sbci	r29, 0x05	; 5
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     cf2:	00 ec       	ldi	r16, 0xC0	; 192
     cf4:	10 e0       	ldi	r17, 0x00	; 0
	
	while (1) {
		LED_Tick();
     cf6:	de dd       	rcall	.-1092   	; 0x8b4 <LED_Tick>
		Edit_Tick();
     cf8:	74 dd       	rcall	.-1304   	; 0x7e2 <Edit_Tick>
     cfa:	f8 01       	movw	r30, r16
     cfc:	80 81       	ld	r24, Z
		
		if (USART_HasReceived(0)) {
     cfe:	88 23       	and	r24, r24
     d00:	d4 f7       	brge	.-12     	; 0xcf6 <main+0x30e>
			USARTReceiver = USART_Receive(0);
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	2e dc       	rcall	.-1956   	; 0x562 <USART_Receive>
     d06:	80 93 1d 01 	sts	0x011D, r24
			
			if (USARTReceiver == 0x00) { // game up
     d0a:	81 11       	cpse	r24, r1
     d0c:	26 c0       	rjmp	.+76     	; 0xd5a <main+0x372>
				if (userMatrix.row < 7 && GetBit(wallMatrix.m[userMatrix.row + 1], userMatrix.column)) {
     d0e:	e0 91 f0 01 	lds	r30, 0x01F0
     d12:	e7 30       	cpi	r30, 0x07	; 7
     d14:	70 f7       	brcc	.-36     	; 0xcf2 <main+0x30a>
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	00 90 f1 01 	lds	r0, 0x01F1
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <main+0x33c>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	0a 94       	dec	r0
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <main+0x338>
     d28:	ae 2f       	mov	r26, r30
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ae 50       	subi	r26, 0x0E	; 14
     d2e:	be 4f       	sbci	r27, 0xFE	; 254
	return ((bits & mask) != 0);
     d30:	11 96       	adiw	r26, 0x01	; 1
     d32:	2c 91       	ld	r18, X
     d34:	28 23       	and	r18, r24
     d36:	e9 f2       	breq	.-70     	; 0xcf2 <main+0x30a>
					userMatrix.row++;
     d38:	ef 5f       	subi	r30, 0xFF	; 255
     d3a:	e0 93 f0 01 	sts	0x01F0, r30
					userMatrix.m[userMatrix.row - 1] = SetBit(userMatrix.m[userMatrix.row - 1], userMatrix.column, 1);
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	df 01       	movw	r26, r30
     d42:	a9 51       	subi	r26, 0x19	; 25
     d44:	be 4f       	sbci	r27, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
     d46:	9c 91       	ld	r25, X
     d48:	98 2b       	or	r25, r24
     d4a:	9c 93       	st	X, r25
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
     d4c:	e8 51       	subi	r30, 0x18	; 24
     d4e:	fe 4f       	sbci	r31, 0xFE	; 254
     d50:	80 95       	com	r24
     d52:	90 81       	ld	r25, Z
     d54:	89 23       	and	r24, r25
     d56:	80 83       	st	Z, r24
     d58:	cc cf       	rjmp	.-104    	; 0xcf2 <main+0x30a>
				}
			} else if (USARTReceiver == 0x01) { // game right
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	61 f5       	brne	.+88     	; 0xdb6 <main+0x3ce>
				if (userMatrix.column  < 7 && GetBit(wallMatrix.m[userMatrix.row], userMatrix.column + 1)) {
     d5e:	20 91 f1 01 	lds	r18, 0x01F1
     d62:	27 30       	cpi	r18, 0x07	; 7
     d64:	30 f6       	brcc	.-116    	; 0xcf2 <main+0x30a>
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	62 0f       	add	r22, r18
     d6a:	40 91 f0 01 	lds	r20, 0x01F0
     d6e:	50 e0       	ldi	r21, 0x00	; 0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	06 2e       	mov	r0, r22
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <main+0x394>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <main+0x390>
     d80:	fa 01       	movw	r30, r20
     d82:	ee 50       	subi	r30, 0x0E	; 14
     d84:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
     d86:	30 81       	ld	r19, Z
     d88:	38 23       	and	r19, r24
     d8a:	09 f4       	brne	.+2      	; 0xd8e <main+0x3a6>
     d8c:	b2 cf       	rjmp	.-156    	; 0xcf2 <main+0x30a>
					userMatrix.column++;
     d8e:	60 93 f1 01 	sts	0x01F1, r22
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column - 1, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
     d92:	fa 01       	movw	r30, r20
     d94:	e8 51       	subi	r30, 0x18	; 24
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
     d98:	80 95       	com	r24
     d9a:	41 e0       	ldi	r20, 0x01	; 1
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	ba 01       	movw	r22, r20
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <main+0x3be>
     da2:	66 0f       	add	r22, r22
     da4:	77 1f       	adc	r23, r23
     da6:	2a 95       	dec	r18
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <main+0x3ba>
     daa:	9b 01       	movw	r18, r22
     dac:	90 81       	ld	r25, Z
     dae:	29 2b       	or	r18, r25
     db0:	82 23       	and	r24, r18
     db2:	80 83       	st	Z, r24
     db4:	9e cf       	rjmp	.-196    	; 0xcf2 <main+0x30a>
				}
			} else if (USARTReceiver == 0x02) { // game down
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	39 f5       	brne	.+78     	; 0xe08 <main+0x420>
				if (userMatrix.row > 0  && GetBit(wallMatrix.m[userMatrix.row - 1], userMatrix.column)) {
     dba:	e0 91 f0 01 	lds	r30, 0x01F0
     dbe:	ee 23       	and	r30, r30
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <main+0x3dc>
     dc2:	97 cf       	rjmp	.-210    	; 0xcf2 <main+0x30a>
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	00 90 f1 01 	lds	r0, 0x01F1
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <main+0x3ea>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <main+0x3e6>
     dd6:	ae 2f       	mov	r26, r30
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	af 50       	subi	r26, 0x0F	; 15
     ddc:	be 4f       	sbci	r27, 0xFE	; 254
	return ((bits & mask) != 0);
     dde:	2c 91       	ld	r18, X
     de0:	28 23       	and	r18, r24
     de2:	09 f4       	brne	.+2      	; 0xde6 <main+0x3fe>
     de4:	86 cf       	rjmp	.-244    	; 0xcf2 <main+0x30a>
					userMatrix.row--;
     de6:	e1 50       	subi	r30, 0x01	; 1
     de8:	e0 93 f0 01 	sts	0x01F0, r30
					userMatrix.m[userMatrix.row + 1] = SetBit(userMatrix.m[userMatrix.row + 1], userMatrix.column, 1);
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	df 01       	movw	r26, r30
     df0:	a7 51       	subi	r26, 0x17	; 23
     df2:	be 4f       	sbci	r27, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
     df4:	9c 91       	ld	r25, X
     df6:	98 2b       	or	r25, r24
     df8:	9c 93       	st	X, r25
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
     dfa:	e8 51       	subi	r30, 0x18	; 24
     dfc:	fe 4f       	sbci	r31, 0xFE	; 254
     dfe:	80 95       	com	r24
     e00:	90 81       	ld	r25, Z
     e02:	89 23       	and	r24, r25
     e04:	80 83       	st	Z, r24
     e06:	75 cf       	rjmp	.-278    	; 0xcf2 <main+0x30a>
				}
			} else if (USARTReceiver == 0x03) { // game left
     e08:	83 30       	cpi	r24, 0x03	; 3
     e0a:	69 f5       	brne	.+90     	; 0xe66 <main+0x47e>
				if (userMatrix.column > 0 &&  GetBit(wallMatrix.m[userMatrix.row], userMatrix.column - 1)) {
     e0c:	80 91 f1 01 	lds	r24, 0x01F1
     e10:	88 23       	and	r24, r24
     e12:	09 f4       	brne	.+2      	; 0xe16 <main+0x42e>
     e14:	6e cf       	rjmp	.-292    	; 0xcf2 <main+0x30a>
     e16:	6f ef       	ldi	r22, 0xFF	; 255
     e18:	68 0f       	add	r22, r24
     e1a:	20 91 f0 01 	lds	r18, 0x01F0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	06 2e       	mov	r0, r22
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <main+0x444>
     e28:	44 0f       	add	r20, r20
     e2a:	55 1f       	adc	r21, r21
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <main+0x440>
     e30:	f9 01       	movw	r30, r18
     e32:	ee 50       	subi	r30, 0x0E	; 14
     e34:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
     e36:	90 81       	ld	r25, Z
     e38:	94 23       	and	r25, r20
     e3a:	09 f4       	brne	.+2      	; 0xe3e <main+0x456>
     e3c:	5a cf       	rjmp	.-332    	; 0xcf2 <main+0x30a>
					userMatrix.column--;
     e3e:	60 93 f1 01 	sts	0x01F1, r22
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column + 1, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
     e42:	f9 01       	movw	r30, r18
     e44:	e8 51       	subi	r30, 0x18	; 24
     e46:	fe 4f       	sbci	r31, 0xFE	; 254
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
     e48:	40 95       	com	r20
     e4a:	21 e0       	ldi	r18, 0x01	; 1
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	b9 01       	movw	r22, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <main+0x46e>
     e52:	66 0f       	add	r22, r22
     e54:	77 1f       	adc	r23, r23
     e56:	8a 95       	dec	r24
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <main+0x46a>
     e5a:	cb 01       	movw	r24, r22
     e5c:	90 81       	ld	r25, Z
     e5e:	89 2b       	or	r24, r25
     e60:	48 23       	and	r20, r24
     e62:	40 83       	st	Z, r20
     e64:	46 cf       	rjmp	.-372    	; 0xcf2 <main+0x30a>
				}
			} else if (USARTReceiver == 0x04) { // Game start
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f4       	brne	.+8      	; 0xe72 <main+0x48a>
				displayLED = 1;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	80 93 1e 01 	sts	0x011E, r24
     e70:	40 cf       	rjmp	.-384    	; 0xcf2 <main+0x30a>
			} else if (USARTReceiver == 0x05) { // Game end
     e72:	85 30       	cpi	r24, 0x05	; 5
     e74:	19 f4       	brne	.+6      	; 0xe7c <main+0x494>
				displayLED = 0;
     e76:	10 92 1e 01 	sts	0x011E, r1
     e7a:	3b cf       	rjmp	.-394    	; 0xcf2 <main+0x30a>
			} else if (USARTReceiver == 0x06) { // Edit start
     e7c:	86 30       	cpi	r24, 0x06	; 6
     e7e:	21 f4       	brne	.+8      	; 0xe88 <main+0x4a0>
				displayEDIT = 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	80 93 29 01 	sts	0x0129, r24
     e86:	35 cf       	rjmp	.-406    	; 0xcf2 <main+0x30a>
			} else if (USARTReceiver == 0x07) { // Edit end
     e88:	87 30       	cpi	r24, 0x07	; 7
     e8a:	19 f4       	brne	.+6      	; 0xe92 <main+0x4aa>
				displayEDIT = 0;
     e8c:	10 92 29 01 	sts	0x0129, r1
     e90:	30 cf       	rjmp	.-416    	; 0xcf2 <main+0x30a>
			} else if (USARTReceiver == 0x08) { // Edit right
     e92:	88 30       	cpi	r24, 0x08	; 8
     e94:	09 f0       	breq	.+2      	; 0xe98 <main+0x4b0>
     e96:	dd c0       	rjmp	.+442    	; 0x1052 <main+0x66a>
				numPatterns = eeprom_read_byte((uint8_t*)251);
     e98:	8b ef       	ldi	r24, 0xFB	; 251
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	a8 d1       	rcall	.+848    	; 0x11ee <eeprom_read_byte>
     e9e:	80 93 06 01 	sts	0x0106, r24
     ea2:	0f 2e       	mov	r0, r31
     ea4:	f2 ef       	ldi	r31, 0xF2	; 242
     ea6:	ef 2e       	mov	r14, r31
     ea8:	f1 e0       	ldi	r31, 0x01	; 1
     eaa:	ff 2e       	mov	r15, r31
     eac:	f0 2d       	mov	r31, r0
     eae:	0c ef       	ldi	r16, 0xFC	; 252
     eb0:	10 e0       	ldi	r17, 0x00	; 0
				
				for (unsigned char i = 0; i < 8; i++) {
					wallMatrix.m[i] = eeprom_read_byte((uint8_t*)(i+252));
     eb2:	c8 01       	movw	r24, r16
     eb4:	9c d1       	rcall	.+824    	; 0x11ee <eeprom_read_byte>
     eb6:	f7 01       	movw	r30, r14
     eb8:	81 93       	st	Z+, r24
     eba:	7f 01       	movw	r14, r30
     ebc:	0f 5f       	subi	r16, 0xFF	; 255
     ebe:	1f 4f       	sbci	r17, 0xFF	; 255
			} else if (USARTReceiver == 0x07) { // Edit end
				displayEDIT = 0;
			} else if (USARTReceiver == 0x08) { // Edit right
				numPatterns = eeprom_read_byte((uint8_t*)251);
				
				for (unsigned char i = 0; i < 8; i++) {
     ec0:	04 30       	cpi	r16, 0x04	; 4
     ec2:	f1 e0       	ldi	r31, 0x01	; 1
     ec4:	1f 07       	cpc	r17, r31
     ec6:	a9 f7       	brne	.-22     	; 0xeb2 <main+0x4ca>
					wallMatrix.m[i] = eeprom_read_byte((uint8_t*)(i+252));
				}
				
				explosions = initExplosions(explosions);
     ec8:	6d b7       	in	r22, 0x3d	; 61
     eca:	7e b7       	in	r23, 0x3e	; 62
     ecc:	66 5b       	subi	r22, 0xB6	; 182
     ece:	71 09       	sbc	r23, r1
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	7e bf       	out	0x3e, r23	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	6d bf       	out	0x3d, r22	; 61
     eda:	ad b7       	in	r26, 0x3d	; 61
     edc:	be b7       	in	r27, 0x3e	; 62
     ede:	11 96       	adiw	r26, 0x01	; 1
     ee0:	86 eb       	ldi	r24, 0xB6	; 182
     ee2:	e2 e3       	ldi	r30, 0x32	; 50
     ee4:	f1 e0       	ldi	r31, 0x01	; 1
     ee6:	01 90       	ld	r0, Z+
     ee8:	0d 92       	st	X+, r0
     eea:	8a 95       	dec	r24
     eec:	e1 f7       	brne	.-8      	; 0xee6 <main+0x4fe>
     eee:	ce 01       	movw	r24, r28
     ef0:	83 5a       	subi	r24, 0xA3	; 163
     ef2:	9b 4f       	sbci	r25, 0xFB	; 251
     ef4:	e4 da       	rcall	.-2616   	; 0x4be <initExplosions>
     ef6:	86 eb       	ldi	r24, 0xB6	; 182
     ef8:	fe 01       	movw	r30, r28
     efa:	e3 5a       	subi	r30, 0xA3	; 163
     efc:	fb 4f       	sbci	r31, 0xFB	; 251
     efe:	a2 e3       	ldi	r26, 0x32	; 50
     f00:	b1 e0       	ldi	r27, 0x01	; 1
     f02:	01 90       	ld	r0, Z+
     f04:	0d 92       	st	X+, r0
     f06:	8a 95       	dec	r24
     f08:	e1 f7       	brne	.-8      	; 0xf02 <main+0x51a>
				
				unsigned short tempCnt = 261;
				unsigned char timeBetween;
				unsigned char timeDuration;
				for (unsigned char i = 0; i < numPatterns; i++) {
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	80 91 06 01 	lds	r24, 0x0106
     f18:	81 11       	cpse	r24, r1
     f1a:	7c c0       	rjmp	.+248    	; 0x1014 <main+0x62c>
     f1c:	ea ce       	rjmp	.-556    	; 0xcf2 <main+0x30a>
					for (unsigned char j = 0; j < 8; j++) {
						matrix.m[j] = eeprom_read_byte((uint8_t*)(j + tempCnt));
     f1e:	c7 01       	movw	r24, r14
     f20:	80 0f       	add	r24, r16
     f22:	91 1f       	adc	r25, r17
     f24:	64 d1       	rcall	.+712    	; 0x11ee <eeprom_read_byte>
     f26:	f8 01       	movw	r30, r16
     f28:	81 93       	st	Z+, r24
     f2a:	8f 01       	movw	r16, r30
				
				unsigned short tempCnt = 261;
				unsigned char timeBetween;
				unsigned char timeDuration;
				for (unsigned char i = 0; i < numPatterns; i++) {
					for (unsigned char j = 0; j < 8; j++) {
     f2c:	ec 15       	cp	r30, r12
     f2e:	fd 05       	cpc	r31, r13
     f30:	b1 f7       	brne	.-20     	; 0xf1e <main+0x536>
						matrix.m[j] = eeprom_read_byte((uint8_t*)(j + tempCnt));
					}
					timeBetween = eeprom_read_byte((uint8_t*)(tempCnt + 8));
     f32:	c5 01       	movw	r24, r10
     f34:	08 96       	adiw	r24, 0x08	; 8
     f36:	5b d1       	rcall	.+694    	; 0x11ee <eeprom_read_byte>
     f38:	18 2f       	mov	r17, r24
					timeDuration = eeprom_read_byte((uint8_t*)(tempCnt + 9));
     f3a:	c5 01       	movw	r24, r10
     f3c:	09 96       	adiw	r24, 0x09	; 9
     f3e:	57 d1       	rcall	.+686    	; 0x11ee <eeprom_read_byte>
     f40:	e2 e3       	ldi	r30, 0x32	; 50
     f42:	f1 e0       	ldi	r31, 0x01	; 1
     f44:	ca 5e       	subi	r28, 0xEA	; 234
     f46:	da 4f       	sbci	r29, 0xFA	; 250
     f48:	a8 81       	ld	r26, Y
     f4a:	c6 51       	subi	r28, 0x16	; 22
     f4c:	d5 40       	sbci	r29, 0x05	; 5
     f4e:	c9 5e       	subi	r28, 0xE9	; 233
     f50:	da 4f       	sbci	r29, 0xFA	; 250
     f52:	b8 81       	ld	r27, Y
     f54:	c7 51       	subi	r28, 0x17	; 23
     f56:	d5 40       	sbci	r29, 0x05	; 5
     f58:	95 2d       	mov	r25, r5
     f5a:	01 90       	ld	r0, Z+
     f5c:	0d 92       	st	X+, r0
     f5e:	9a 95       	dec	r25
     f60:	e1 f7       	brne	.-8      	; 0xf5a <main+0x572>
     f62:	e6 ee       	ldi	r30, 0xE6	; 230
     f64:	f1 e0       	ldi	r31, 0x01	; 1
     f66:	90 81       	ld	r25, Z
     f68:	f3 01       	movw	r30, r6
     f6a:	de 01       	movw	r26, r28
     f6c:	a3 5b       	subi	r26, 0xB3	; 179
     f6e:	bb 4f       	sbci	r27, 0xFB	; 251
     f70:	24 2d       	mov	r18, r4
     f72:	01 90       	ld	r0, Z+
     f74:	0d 92       	st	X+, r0
     f76:	2a 95       	dec	r18
     f78:	e1 f7       	brne	.-8      	; 0xf72 <main+0x58a>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     f7a:	a3 e2       	ldi	r26, 0x23	; 35
     f7c:	b2 e0       	ldi	r27, 0x02	; 2
     f7e:	ac 0f       	add	r26, r28
     f80:	bd 1f       	adc	r27, r29
     f82:	f8 e0       	ldi	r31, 0x08	; 8
     f84:	9f 9f       	mul	r25, r31
     f86:	a0 0d       	add	r26, r0
     f88:	b1 1d       	adc	r27, r1
     f8a:	11 24       	eor	r1, r1
     f8c:	fe 01       	movw	r30, r28
     f8e:	e3 5b       	subi	r30, 0xB3	; 179
     f90:	fb 4f       	sbci	r31, 0xFB	; 251
     f92:	24 2d       	mov	r18, r4
     f94:	01 90       	ld	r0, Z+
     f96:	0d 92       	st	X+, r0
     f98:	2a 95       	dec	r18
     f9a:	e1 f7       	brne	.-8      	; 0xf94 <main+0x5ac>
	explosions.timeBetween[explosions.index] = a;
     f9c:	23 e2       	ldi	r18, 0x23	; 35
     f9e:	32 e0       	ldi	r19, 0x02	; 2
     fa0:	2c 0f       	add	r18, r28
     fa2:	3d 1f       	adc	r19, r29
     fa4:	29 0f       	add	r18, r25
     fa6:	31 1d       	adc	r19, r1
     fa8:	f9 01       	movw	r30, r18
     faa:	e0 57       	subi	r30, 0x70	; 112
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	10 83       	st	Z, r17
	explosions.timeDuration[explosions.index] = b;
     fb0:	72 96       	adiw	r30, 0x12	; 18
     fb2:	80 83       	st	Z, r24
	explosions.index++;
     fb4:	9f 5f       	subi	r25, 0xFF	; 255
	
	return explosions;
     fb6:	c9 52       	subi	r28, 0x29	; 41
     fb8:	dd 4f       	sbci	r29, 0xFD	; 253
     fba:	98 83       	st	Y, r25
     fbc:	c7 5d       	subi	r28, 0xD7	; 215
     fbe:	d2 40       	sbci	r29, 0x02	; 2
     fc0:	ca 5e       	subi	r28, 0xEA	; 234
     fc2:	da 4f       	sbci	r29, 0xFA	; 250
     fc4:	e8 81       	ld	r30, Y
     fc6:	c6 51       	subi	r28, 0x16	; 22
     fc8:	d5 40       	sbci	r29, 0x05	; 5
     fca:	c9 5e       	subi	r28, 0xE9	; 233
     fcc:	da 4f       	sbci	r29, 0xFA	; 250
     fce:	f8 81       	ld	r31, Y
     fd0:	c7 51       	subi	r28, 0x17	; 23
     fd2:	d5 40       	sbci	r29, 0x05	; 5
     fd4:	de 01       	movw	r26, r28
     fd6:	a3 59       	subi	r26, 0x93	; 147
     fd8:	be 4f       	sbci	r27, 0xFE	; 254
     fda:	85 2d       	mov	r24, r5
     fdc:	01 90       	ld	r0, Z+
     fde:	0d 92       	st	X+, r0
     fe0:	8a 95       	dec	r24
     fe2:	e1 f7       	brne	.-8      	; 0xfdc <main+0x5f4>
					explosions = pushExplosion(explosions, matrix, timeBetween, timeDuration);
     fe4:	cf 5d       	subi	r28, 0xDF	; 223
     fe6:	dd 4f       	sbci	r29, 0xFD	; 253
     fe8:	98 83       	st	Y, r25
     fea:	c1 52       	subi	r28, 0x21	; 33
     fec:	d2 40       	sbci	r29, 0x02	; 2
     fee:	fe 01       	movw	r30, r28
     ff0:	e3 59       	subi	r30, 0x93	; 147
     ff2:	fe 4f       	sbci	r31, 0xFE	; 254
     ff4:	a2 e3       	ldi	r26, 0x32	; 50
     ff6:	b1 e0       	ldi	r27, 0x01	; 1
     ff8:	85 2d       	mov	r24, r5
     ffa:	01 90       	ld	r0, Z+
     ffc:	0d 92       	st	X+, r0
     ffe:	8a 95       	dec	r24
    1000:	e1 f7       	brne	.-8      	; 0xffa <main+0x612>
					
					tempCnt += 10;
    1002:	2a e0       	ldi	r18, 0x0A	; 10
    1004:	a2 0e       	add	r10, r18
    1006:	b1 1c       	adc	r11, r1
				explosions = initExplosions(explosions);
				
				unsigned short tempCnt = 261;
				unsigned char timeBetween;
				unsigned char timeDuration;
				for (unsigned char i = 0; i < numPatterns; i++) {
    1008:	33 94       	inc	r3
    100a:	80 91 06 01 	lds	r24, 0x0106
    100e:	38 16       	cp	r3, r24
    1010:	d8 f0       	brcs	.+54     	; 0x1048 <main+0x660>
    1012:	6f ce       	rjmp	.-802    	; 0xcf2 <main+0x30a>
    1014:	31 2c       	mov	r3, r1
    1016:	0f 2e       	mov	r0, r31
    1018:	f5 e0       	ldi	r31, 0x05	; 5
    101a:	af 2e       	mov	r10, r31
    101c:	bb 24       	eor	r11, r11
    101e:	b3 94       	inc	r11
    1020:	f0 2d       	mov	r31, r0
    1022:	0f 2e       	mov	r0, r31
    1024:	fa e2       	ldi	r31, 0x2A	; 42
    1026:	6f 2e       	mov	r6, r31
    1028:	f1 e0       	ldi	r31, 0x01	; 1
    102a:	7f 2e       	mov	r7, r31
    102c:	f0 2d       	mov	r31, r0
    102e:	0f 2e       	mov	r0, r31
    1030:	f2 e3       	ldi	r31, 0x32	; 50
    1032:	cf 2e       	mov	r12, r31
    1034:	f1 e0       	ldi	r31, 0x01	; 1
    1036:	df 2e       	mov	r13, r31
    1038:	f0 2d       	mov	r31, r0
    103a:	0f 2e       	mov	r0, r31
    103c:	f6 eb       	ldi	r31, 0xB6	; 182
    103e:	5f 2e       	mov	r5, r31
    1040:	f0 2d       	mov	r31, r0
    1042:	68 94       	set
    1044:	44 24       	eor	r4, r4
    1046:	43 f8       	bld	r4, 3
			} else if (USARTReceiver == 0x06) { // Edit start
				displayEDIT = 1;
			} else if (USARTReceiver == 0x07) { // Edit end
				displayEDIT = 0;
			} else if (USARTReceiver == 0x08) { // Edit right
				numPatterns = eeprom_read_byte((uint8_t*)251);
    1048:	83 01       	movw	r16, r6
    104a:	75 01       	movw	r14, r10
    104c:	e6 18       	sub	r14, r6
    104e:	f7 08       	sbc	r15, r7
    1050:	66 cf       	rjmp	.-308    	; 0xf1e <main+0x536>
					timeDuration = eeprom_read_byte((uint8_t*)(tempCnt + 9));
					explosions = pushExplosion(explosions, matrix, timeBetween, timeDuration);
					
					tempCnt += 10;
				}
			} else if (USARTReceiver == 0x09) { // Edit left
    1052:	89 30       	cpi	r24, 0x09	; 9
    1054:	09 f0       	breq	.+2      	; 0x1058 <main+0x670>
    1056:	4d ce       	rjmp	.-870    	; 0xcf2 <main+0x30a>
				numPatterns = eeprom_read_byte((uint8_t*)1);
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	c8 d0       	rcall	.+400    	; 0x11ee <eeprom_read_byte>
    105e:	80 93 06 01 	sts	0x0106, r24
    1062:	0f 2e       	mov	r0, r31
    1064:	f2 ef       	ldi	r31, 0xF2	; 242
    1066:	ef 2e       	mov	r14, r31
    1068:	f1 e0       	ldi	r31, 0x01	; 1
    106a:	ff 2e       	mov	r15, r31
    106c:	f0 2d       	mov	r31, r0
    106e:	02 e0       	ldi	r16, 0x02	; 2
    1070:	10 e0       	ldi	r17, 0x00	; 0
				
				for (unsigned char i = 0; i < 8; i++) {
					wallMatrix.m[i] = eeprom_read_byte((uint8_t*)(i+2));
    1072:	c8 01       	movw	r24, r16
    1074:	bc d0       	rcall	.+376    	; 0x11ee <eeprom_read_byte>
    1076:	f7 01       	movw	r30, r14
    1078:	81 93       	st	Z+, r24
    107a:	7f 01       	movw	r14, r30
    107c:	0f 5f       	subi	r16, 0xFF	; 255
    107e:	1f 4f       	sbci	r17, 0xFF	; 255
					tempCnt += 10;
				}
			} else if (USARTReceiver == 0x09) { // Edit left
				numPatterns = eeprom_read_byte((uint8_t*)1);
				
				for (unsigned char i = 0; i < 8; i++) {
    1080:	0a 30       	cpi	r16, 0x0A	; 10
    1082:	11 05       	cpc	r17, r1
    1084:	b1 f7       	brne	.-20     	; 0x1072 <main+0x68a>
					wallMatrix.m[i] = eeprom_read_byte((uint8_t*)(i+2));
				}
				
				explosions = initExplosions(explosions);
    1086:	6d b7       	in	r22, 0x3d	; 61
    1088:	7e b7       	in	r23, 0x3e	; 62
    108a:	66 5b       	subi	r22, 0xB6	; 182
    108c:	71 09       	sbc	r23, r1
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	7e bf       	out	0x3e, r23	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	6d bf       	out	0x3d, r22	; 61
    1098:	ad b7       	in	r26, 0x3d	; 61
    109a:	be b7       	in	r27, 0x3e	; 62
    109c:	11 96       	adiw	r26, 0x01	; 1
    109e:	86 eb       	ldi	r24, 0xB6	; 182
    10a0:	e2 e3       	ldi	r30, 0x32	; 50
    10a2:	f1 e0       	ldi	r31, 0x01	; 1
    10a4:	01 90       	ld	r0, Z+
    10a6:	0d 92       	st	X+, r0
    10a8:	8a 95       	dec	r24
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <main+0x6bc>
    10ac:	ce 01       	movw	r24, r28
    10ae:	83 5a       	subi	r24, 0xA3	; 163
    10b0:	9b 4f       	sbci	r25, 0xFB	; 251
    10b2:	05 da       	rcall	.-3062   	; 0x4be <initExplosions>
    10b4:	86 eb       	ldi	r24, 0xB6	; 182
    10b6:	fe 01       	movw	r30, r28
    10b8:	e3 5a       	subi	r30, 0xA3	; 163
    10ba:	fb 4f       	sbci	r31, 0xFB	; 251
    10bc:	a2 e3       	ldi	r26, 0x32	; 50
    10be:	b1 e0       	ldi	r27, 0x01	; 1
    10c0:	01 90       	ld	r0, Z+
    10c2:	0d 92       	st	X+, r0
    10c4:	8a 95       	dec	r24
    10c6:	e1 f7       	brne	.-8      	; 0x10c0 <main+0x6d8>
				
				unsigned short tempCnt = 11;
				unsigned char timeBetween;
				unsigned char timeDuration;
				for (unsigned char i = 0; i < numPatterns; i++) {
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	80 91 06 01 	lds	r24, 0x0106
    10d6:	81 11       	cpse	r24, r1
    10d8:	6c c0       	rjmp	.+216    	; 0x11b2 <main+0x7ca>
    10da:	0b ce       	rjmp	.-1002   	; 0xcf2 <main+0x30a>
					for (unsigned char j = 0; j < 8; j++) {
						matrix.m[j] = eeprom_read_byte((uint8_t*)(j + tempCnt));
    10dc:	c7 01       	movw	r24, r14
    10de:	80 0f       	add	r24, r16
    10e0:	91 1f       	adc	r25, r17
    10e2:	85 d0       	rcall	.+266    	; 0x11ee <eeprom_read_byte>
    10e4:	f8 01       	movw	r30, r16
    10e6:	81 93       	st	Z+, r24
    10e8:	8f 01       	movw	r16, r30
				
				unsigned short tempCnt = 11;
				unsigned char timeBetween;
				unsigned char timeDuration;
				for (unsigned char i = 0; i < numPatterns; i++) {
					for (unsigned char j = 0; j < 8; j++) {
    10ea:	ec 15       	cp	r30, r12
    10ec:	fd 05       	cpc	r31, r13
    10ee:	b1 f7       	brne	.-20     	; 0x10dc <main+0x6f4>
						matrix.m[j] = eeprom_read_byte((uint8_t*)(j + tempCnt));
					}
					timeBetween = eeprom_read_byte((uint8_t*)(tempCnt + 8));
    10f0:	c5 01       	movw	r24, r10
    10f2:	08 96       	adiw	r24, 0x08	; 8
    10f4:	7c d0       	rcall	.+248    	; 0x11ee <eeprom_read_byte>
    10f6:	18 2f       	mov	r17, r24
					timeDuration = eeprom_read_byte((uint8_t*)(tempCnt + 9));
    10f8:	c5 01       	movw	r24, r10
    10fa:	09 96       	adiw	r24, 0x09	; 9
    10fc:	78 d0       	rcall	.+240    	; 0x11ee <eeprom_read_byte>
    10fe:	e2 e3       	ldi	r30, 0x32	; 50
    1100:	f1 e0       	ldi	r31, 0x01	; 1
    1102:	a2 2d       	mov	r26, r2
    1104:	cb 5e       	subi	r28, 0xEB	; 235
    1106:	da 4f       	sbci	r29, 0xFA	; 250
    1108:	b8 81       	ld	r27, Y
    110a:	c5 51       	subi	r28, 0x15	; 21
    110c:	d5 40       	sbci	r29, 0x05	; 5
    110e:	95 2d       	mov	r25, r5
    1110:	01 90       	ld	r0, Z+
    1112:	0d 92       	st	X+, r0
    1114:	9a 95       	dec	r25
    1116:	e1 f7       	brne	.-8      	; 0x1110 <main+0x728>
    1118:	e6 ee       	ldi	r30, 0xE6	; 230
    111a:	f1 e0       	ldi	r31, 0x01	; 1
    111c:	90 81       	ld	r25, Z
    111e:	f3 01       	movw	r30, r6
    1120:	de 01       	movw	r26, r28
    1122:	ab 5b       	subi	r26, 0xBB	; 187
    1124:	bb 4f       	sbci	r27, 0xFB	; 251
    1126:	23 2d       	mov	r18, r3
    1128:	01 90       	ld	r0, Z+
    112a:	0d 92       	st	X+, r0
    112c:	2a 95       	dec	r18
    112e:	e1 f7       	brne	.-8      	; 0x1128 <main+0x740>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1130:	d4 01       	movw	r26, r8
    1132:	f8 e0       	ldi	r31, 0x08	; 8
    1134:	9f 9f       	mul	r25, r31
    1136:	a0 0d       	add	r26, r0
    1138:	b1 1d       	adc	r27, r1
    113a:	11 24       	eor	r1, r1
    113c:	fe 01       	movw	r30, r28
    113e:	eb 5b       	subi	r30, 0xBB	; 187
    1140:	fb 4f       	sbci	r31, 0xFB	; 251
    1142:	23 2d       	mov	r18, r3
    1144:	01 90       	ld	r0, Z+
    1146:	0d 92       	st	X+, r0
    1148:	2a 95       	dec	r18
    114a:	e1 f7       	brne	.-8      	; 0x1144 <main+0x75c>
	explosions.timeBetween[explosions.index] = a;
    114c:	94 01       	movw	r18, r8
    114e:	29 0f       	add	r18, r25
    1150:	31 1d       	adc	r19, r1
    1152:	f9 01       	movw	r30, r18
    1154:	e0 57       	subi	r30, 0x70	; 112
    1156:	ff 4f       	sbci	r31, 0xFF	; 255
    1158:	10 83       	st	Z, r17
	explosions.timeDuration[explosions.index] = b;
    115a:	72 96       	adiw	r30, 0x12	; 18
    115c:	80 83       	st	Z, r24
	explosions.index++;
    115e:	9f 5f       	subi	r25, 0xFF	; 255
	
	return explosions;
    1160:	c5 59       	subi	r28, 0x95	; 149
    1162:	de 4f       	sbci	r29, 0xFE	; 254
    1164:	98 83       	st	Y, r25
    1166:	cb 56       	subi	r28, 0x6B	; 107
    1168:	d1 40       	sbci	r29, 0x01	; 1
    116a:	e2 2d       	mov	r30, r2
    116c:	cb 5e       	subi	r28, 0xEB	; 235
    116e:	da 4f       	sbci	r29, 0xFA	; 250
    1170:	f8 81       	ld	r31, Y
    1172:	c5 51       	subi	r28, 0x15	; 21
    1174:	d5 40       	sbci	r29, 0x05	; 5
    1176:	de 01       	movw	r26, r28
    1178:	11 96       	adiw	r26, 0x01	; 1
    117a:	85 2d       	mov	r24, r5
    117c:	01 90       	ld	r0, Z+
    117e:	0d 92       	st	X+, r0
    1180:	8a 95       	dec	r24
    1182:	e1 f7       	brne	.-8      	; 0x117c <main+0x794>
					explosions = pushExplosion(explosions, matrix, timeBetween, timeDuration);
    1184:	cb 54       	subi	r28, 0x4B	; 75
    1186:	df 4f       	sbci	r29, 0xFF	; 255
    1188:	98 83       	st	Y, r25
    118a:	c5 5b       	subi	r28, 0xB5	; 181
    118c:	d0 40       	sbci	r29, 0x00	; 0
    118e:	fe 01       	movw	r30, r28
    1190:	31 96       	adiw	r30, 0x01	; 1
    1192:	a2 e3       	ldi	r26, 0x32	; 50
    1194:	b1 e0       	ldi	r27, 0x01	; 1
    1196:	85 2d       	mov	r24, r5
    1198:	01 90       	ld	r0, Z+
    119a:	0d 92       	st	X+, r0
    119c:	8a 95       	dec	r24
    119e:	e1 f7       	brne	.-8      	; 0x1198 <main+0x7b0>
					
					tempCnt += 10;
    11a0:	2a e0       	ldi	r18, 0x0A	; 10
    11a2:	a2 0e       	add	r10, r18
    11a4:	b1 1c       	adc	r11, r1
				explosions = initExplosions(explosions);
				
				unsigned short tempCnt = 11;
				unsigned char timeBetween;
				unsigned char timeDuration;
				for (unsigned char i = 0; i < numPatterns; i++) {
    11a6:	43 94       	inc	r4
    11a8:	80 91 06 01 	lds	r24, 0x0106
    11ac:	48 16       	cp	r4, r24
    11ae:	d0 f0       	brcs	.+52     	; 0x11e4 <main+0x7fc>
    11b0:	a0 cd       	rjmp	.-1216   	; 0xcf2 <main+0x30a>
    11b2:	41 2c       	mov	r4, r1
    11b4:	0f 2e       	mov	r0, r31
    11b6:	fb e0       	ldi	r31, 0x0B	; 11
    11b8:	af 2e       	mov	r10, r31
    11ba:	b1 2c       	mov	r11, r1
    11bc:	f0 2d       	mov	r31, r0
    11be:	0f 2e       	mov	r0, r31
    11c0:	fa e2       	ldi	r31, 0x2A	; 42
    11c2:	6f 2e       	mov	r6, r31
    11c4:	f1 e0       	ldi	r31, 0x01	; 1
    11c6:	7f 2e       	mov	r7, r31
    11c8:	f0 2d       	mov	r31, r0
    11ca:	0f 2e       	mov	r0, r31
    11cc:	f2 e3       	ldi	r31, 0x32	; 50
    11ce:	cf 2e       	mov	r12, r31
    11d0:	f1 e0       	ldi	r31, 0x01	; 1
    11d2:	df 2e       	mov	r13, r31
    11d4:	f0 2d       	mov	r31, r0
    11d6:	0f 2e       	mov	r0, r31
    11d8:	f6 eb       	ldi	r31, 0xB6	; 182
    11da:	5f 2e       	mov	r5, r31
    11dc:	f0 2d       	mov	r31, r0
    11de:	68 94       	set
    11e0:	33 24       	eor	r3, r3
    11e2:	33 f8       	bld	r3, 3
					explosions = pushExplosion(explosions, matrix, timeBetween, timeDuration);
					
					tempCnt += 10;
				}
			} else if (USARTReceiver == 0x09) { // Edit left
				numPatterns = eeprom_read_byte((uint8_t*)1);
    11e4:	83 01       	movw	r16, r6
    11e6:	75 01       	movw	r14, r10
    11e8:	e6 18       	sub	r14, r6
    11ea:	f7 08       	sbc	r15, r7
    11ec:	77 cf       	rjmp	.-274    	; 0x10dc <main+0x6f4>

000011ee <eeprom_read_byte>:
    11ee:	f9 99       	sbic	0x1f, 1	; 31
    11f0:	fe cf       	rjmp	.-4      	; 0x11ee <eeprom_read_byte>
    11f2:	92 bd       	out	0x22, r25	; 34
    11f4:	81 bd       	out	0x21, r24	; 33
    11f6:	f8 9a       	sbi	0x1f, 0	; 31
    11f8:	99 27       	eor	r25, r25
    11fa:	80 b5       	in	r24, 0x20	; 32
    11fc:	08 95       	ret

000011fe <_exit>:
    11fe:	f8 94       	cli

00001200 <__stop_program>:
    1200:	ff cf       	rjmp	.-2      	; 0x1200 <__stop_program>
