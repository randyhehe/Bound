
scbound.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000e1e  00000eb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b1  00800106  00800106  00000eb8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb2  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000408  00000000  00000000  00001fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be8  00000000  00000000  000023da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00002fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000477  00000000  00000000  0000331c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001169  00000000  00000000  00003793  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  000048fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	1a c1       	rjmp	.+564    	; 0x26a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e1       	ldi	r30, 0x1E	; 30
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 3b       	cpi	r26, 0xB7	; 183
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	78 d4       	rcall	.+2288   	; 0x9b4 <main>
  c4:	aa c6       	rjmp	.+3412   	; 0xe1a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ETIMERTick>:
	}
	
	// Display explosion
	d3_setMatrixColor(explosions.matricies[explosions.displayIndex].m, RED);
	explosions.displayIndex++;
}
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	21 f0       	breq	.+8      	; 0xd4 <ETIMERTick+0xc>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	49 f0       	breq	.+18     	; 0xe4 <ETIMERTick+0x1c>
  d2:	05 c0       	rjmp	.+10     	; 0xde <ETIMERTick+0x16>
  d4:	10 92 07 01 	sts	0x0107, r1
  d8:	10 92 06 01 	sts	0x0106, r1
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <ETIMERTick+0x1c>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 05       	cpc	r25, r1
  e2:	c9 f5       	brne	.+114    	; 0x156 <ETIMERTick+0x8e>
  e4:	80 91 06 01 	lds	r24, 0x0106
  e8:	90 91 07 01 	lds	r25, 0x0107
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 07 01 	sts	0x0107, r25
  f2:	80 93 06 01 	sts	0x0106, r24
  f6:	40 91 0b 01 	lds	r20, 0x010B
  fa:	50 91 0c 01 	lds	r21, 0x010C
  fe:	60 91 0d 01 	lds	r22, 0x010D
 102:	70 91 0e 01 	lds	r23, 0x010E
 106:	4f 5f       	subi	r20, 0xFF	; 255
 108:	5f 4f       	sbci	r21, 0xFF	; 255
 10a:	6f 4f       	sbci	r22, 0xFF	; 255
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	40 93 0b 01 	sts	0x010B, r20
 112:	50 93 0c 01 	sts	0x010C, r21
 116:	60 93 0d 01 	sts	0x010D, r22
 11a:	70 93 0e 01 	sts	0x010E, r23
 11e:	20 91 00 01 	lds	r18, 0x0100
 122:	30 91 01 01 	lds	r19, 0x0101
 126:	28 17       	cp	r18, r24
 128:	39 07       	cpc	r19, r25
 12a:	98 f4       	brcc	.+38     	; 0x152 <ETIMERTick+0x8a>
 12c:	80 91 0a 01 	lds	r24, 0x010A
 130:	81 11       	cpse	r24, r1
 132:	04 c0       	rjmp	.+8      	; 0x13c <ETIMERTick+0x74>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 0a 01 	sts	0x010A, r24
 13a:	04 c0       	rjmp	.+8      	; 0x144 <ETIMERTick+0x7c>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	11 f4       	brne	.+4      	; 0x144 <ETIMERTick+0x7c>
 140:	10 92 0a 01 	sts	0x010A, r1
 144:	10 92 07 01 	sts	0x0107, r1
 148:	10 92 06 01 	sts	0x0106, r1
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret

00000158 <initTasks>:
 158:	e3 e1       	ldi	r30, 0x13	; 19
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	11 82       	std	Z+1, r1	; 0x01
 15e:	10 82       	st	Z, r1
 160:	84 e1       	ldi	r24, 0x14	; 20
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	a0 e0       	ldi	r26, 0x00	; 0
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	82 83       	std	Z+2, r24	; 0x02
 16a:	93 83       	std	Z+3, r25	; 0x03
 16c:	a4 83       	std	Z+4, r26	; 0x04
 16e:	b5 83       	std	Z+5, r27	; 0x05
 170:	86 83       	std	Z+6, r24	; 0x06
 172:	97 83       	std	Z+7, r25	; 0x07
 174:	a0 87       	std	Z+8, r26	; 0x08
 176:	b1 87       	std	Z+9, r27	; 0x09
 178:	86 ee       	ldi	r24, 0xE6	; 230
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	93 87       	std	Z+11, r25	; 0x0b
 17e:	82 87       	std	Z+10, r24	; 0x0a
 180:	15 86       	std	Z+13, r1	; 0x0d
 182:	14 86       	std	Z+12, r1	; 0x0c
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	a0 e0       	ldi	r26, 0x00	; 0
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	86 87       	std	Z+14, r24	; 0x0e
 18e:	97 87       	std	Z+15, r25	; 0x0f
 190:	a0 8b       	std	Z+16, r26	; 0x10
 192:	b1 8b       	std	Z+17, r27	; 0x11
 194:	82 8b       	std	Z+18, r24	; 0x12
 196:	93 8b       	std	Z+19, r25	; 0x13
 198:	a4 8b       	std	Z+20, r26	; 0x14
 19a:	b5 8b       	std	Z+21, r27	; 0x15
 19c:	84 e6       	ldi	r24, 0x64	; 100
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	97 8b       	std	Z+23, r25	; 0x17
 1a2:	86 8b       	std	Z+22, r24	; 0x16
 1a4:	08 95       	ret

000001a6 <TimerOn>:
 1a6:	8b e0       	ldi	r24, 0x0B	; 11
 1a8:	80 93 81 00 	sts	0x0081, r24
 1ac:	8d e7       	ldi	r24, 0x7D	; 125
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 89 00 	sts	0x0089, r25
 1b4:	80 93 88 00 	sts	0x0088, r24
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	80 93 6f 00 	sts	0x006F, r24
 1be:	10 92 85 00 	sts	0x0085, r1
 1c2:	10 92 84 00 	sts	0x0084, r1
 1c6:	80 91 02 01 	lds	r24, 0x0102
 1ca:	90 91 03 01 	lds	r25, 0x0103
 1ce:	a0 91 04 01 	lds	r26, 0x0104
 1d2:	b0 91 05 01 	lds	r27, 0x0105
 1d6:	80 93 0f 01 	sts	0x010F, r24
 1da:	90 93 10 01 	sts	0x0110, r25
 1de:	a0 93 11 01 	sts	0x0111, r26
 1e2:	b0 93 12 01 	sts	0x0112, r27
 1e6:	8f b7       	in	r24, 0x3f	; 63
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	8f bf       	out	0x3f, r24	; 63
 1ec:	08 95       	ret

000001ee <TimerISR>:
 1ee:	ef 92       	push	r14
 1f0:	ff 92       	push	r15
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	c3 e1       	ldi	r28, 0x13	; 19
 1fc:	d1 e0       	ldi	r29, 0x01	; 1
 1fe:	0f 2e       	mov	r0, r31
 200:	fb e2       	ldi	r31, 0x2B	; 43
 202:	ef 2e       	mov	r14, r31
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	ff 2e       	mov	r15, r31
 208:	f0 2d       	mov	r31, r0
 20a:	8e 01       	movw	r16, r28
 20c:	4e 81       	ldd	r20, Y+6	; 0x06
 20e:	5f 81       	ldd	r21, Y+7	; 0x07
 210:	68 85       	ldd	r22, Y+8	; 0x08
 212:	79 85       	ldd	r23, Y+9	; 0x09
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	9b 81       	ldd	r25, Y+3	; 0x03
 218:	ac 81       	ldd	r26, Y+4	; 0x04
 21a:	bd 81       	ldd	r27, Y+5	; 0x05
 21c:	48 17       	cp	r20, r24
 21e:	59 07       	cpc	r21, r25
 220:	6a 07       	cpc	r22, r26
 222:	7b 07       	cpc	r23, r27
 224:	58 f0       	brcs	.+22     	; 0x23c <TimerISR+0x4e>
 226:	ea 85       	ldd	r30, Y+10	; 0x0a
 228:	fb 85       	ldd	r31, Y+11	; 0x0b
 22a:	88 81       	ld	r24, Y
 22c:	99 81       	ldd	r25, Y+1	; 0x01
 22e:	09 95       	icall
 230:	99 83       	std	Y+1, r25	; 0x01
 232:	88 83       	st	Y, r24
 234:	1e 82       	std	Y+6, r1	; 0x06
 236:	1f 82       	std	Y+7, r1	; 0x07
 238:	18 86       	std	Y+8, r1	; 0x08
 23a:	19 86       	std	Y+9, r1	; 0x09
 23c:	f8 01       	movw	r30, r16
 23e:	86 81       	ldd	r24, Z+6	; 0x06
 240:	97 81       	ldd	r25, Z+7	; 0x07
 242:	a0 85       	ldd	r26, Z+8	; 0x08
 244:	b1 85       	ldd	r27, Z+9	; 0x09
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	a1 1d       	adc	r26, r1
 24a:	b1 1d       	adc	r27, r1
 24c:	86 83       	std	Z+6, r24	; 0x06
 24e:	97 83       	std	Z+7, r25	; 0x07
 250:	a0 87       	std	Z+8, r26	; 0x08
 252:	b1 87       	std	Z+9, r27	; 0x09
 254:	2c 96       	adiw	r28, 0x0c	; 12
 256:	ce 15       	cp	r28, r14
 258:	df 05       	cpc	r29, r15
 25a:	b9 f6       	brne	.-82     	; 0x20a <TimerISR+0x1c>
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	08 95       	ret

0000026a <__vector_13>:
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	0b b6       	in	r0, 0x3b	; 59
 276:	0f 92       	push	r0
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
 290:	80 91 0f 01 	lds	r24, 0x010F
 294:	90 91 10 01 	lds	r25, 0x0110
 298:	a0 91 11 01 	lds	r26, 0x0111
 29c:	b0 91 12 01 	lds	r27, 0x0112
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	a1 09       	sbc	r26, r1
 2a4:	b1 09       	sbc	r27, r1
 2a6:	80 93 0f 01 	sts	0x010F, r24
 2aa:	90 93 10 01 	sts	0x0110, r25
 2ae:	a0 93 11 01 	sts	0x0111, r26
 2b2:	b0 93 12 01 	sts	0x0112, r27
 2b6:	89 2b       	or	r24, r25
 2b8:	8a 2b       	or	r24, r26
 2ba:	8b 2b       	or	r24, r27
 2bc:	89 f4       	brne	.+34     	; 0x2e0 <__vector_13+0x76>
 2be:	97 df       	rcall	.-210    	; 0x1ee <TimerISR>
 2c0:	80 91 02 01 	lds	r24, 0x0102
 2c4:	90 91 03 01 	lds	r25, 0x0103
 2c8:	a0 91 04 01 	lds	r26, 0x0104
 2cc:	b0 91 05 01 	lds	r27, 0x0105
 2d0:	80 93 0f 01 	sts	0x010F, r24
 2d4:	90 93 10 01 	sts	0x0110, r25
 2d8:	a0 93 11 01 	sts	0x0111, r26
 2dc:	b0 93 12 01 	sts	0x0112, r27
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	7f 91       	pop	r23
 2ee:	6f 91       	pop	r22
 2f0:	5f 91       	pop	r21
 2f2:	4f 91       	pop	r20
 2f4:	3f 91       	pop	r19
 2f6:	2f 91       	pop	r18
 2f8:	0f 90       	pop	r0
 2fa:	0b be       	out	0x3b, r0	; 59
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <clearSingleMatrix>:
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	60 97       	sbiw	r28, 0x10	; 16
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	f8 94       	cli
 314:	de bf       	out	0x3e, r29	; 62
 316:	0f be       	out	0x3f, r0	; 63
 318:	cd bf       	out	0x3d, r28	; 61
 31a:	29 87       	std	Y+9, r18	; 0x09
 31c:	3a 87       	std	Y+10, r19	; 0x0a
 31e:	4b 87       	std	Y+11, r20	; 0x0b
 320:	5c 87       	std	Y+12, r21	; 0x0c
 322:	6d 87       	std	Y+13, r22	; 0x0d
 324:	7e 87       	std	Y+14, r23	; 0x0e
 326:	8f 87       	std	Y+15, r24	; 0x0f
 328:	98 8b       	std	Y+16, r25	; 0x10
 32a:	fe 01       	movw	r30, r28
 32c:	39 96       	adiw	r30, 0x09	; 9
 32e:	9e 01       	movw	r18, r28
 330:	2f 5e       	subi	r18, 0xEF	; 239
 332:	3f 4f       	sbci	r19, 0xFF	; 255
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	81 93       	st	Z+, r24
 338:	e2 17       	cp	r30, r18
 33a:	f3 07       	cpc	r31, r19
 33c:	e1 f7       	brne	.-8      	; 0x336 <clearSingleMatrix+0x30>
 33e:	88 e0       	ldi	r24, 0x08	; 8
 340:	fe 01       	movw	r30, r28
 342:	39 96       	adiw	r30, 0x09	; 9
 344:	de 01       	movw	r26, r28
 346:	11 96       	adiw	r26, 0x01	; 1
 348:	01 90       	ld	r0, Z+
 34a:	0d 92       	st	X+, r0
 34c:	8a 95       	dec	r24
 34e:	e1 f7       	brne	.-8      	; 0x348 <clearSingleMatrix+0x42>
 350:	29 81       	ldd	r18, Y+1	; 0x01
 352:	3a 81       	ldd	r19, Y+2	; 0x02
 354:	4b 81       	ldd	r20, Y+3	; 0x03
 356:	5c 81       	ldd	r21, Y+4	; 0x04
 358:	6d 81       	ldd	r22, Y+5	; 0x05
 35a:	7e 81       	ldd	r23, Y+6	; 0x06
 35c:	8f 81       	ldd	r24, Y+7	; 0x07
 35e:	98 85       	ldd	r25, Y+8	; 0x08
 360:	60 96       	adiw	r28, 0x10	; 16
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	de bf       	out	0x3e, r29	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <initSingleUserMatrix>:
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	2a 97       	sbiw	r28, 0x0a	; 10
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61
 38e:	bc 01       	movw	r22, r24
 390:	e9 82       	std	Y+1, r14	; 0x01
 392:	fa 82       	std	Y+2, r15	; 0x02
 394:	0b 83       	std	Y+3, r16	; 0x03
 396:	1c 83       	std	Y+4, r17	; 0x04
 398:	2d 83       	std	Y+5, r18	; 0x05
 39a:	3e 83       	std	Y+6, r19	; 0x06
 39c:	4f 83       	std	Y+7, r20	; 0x07
 39e:	58 87       	std	Y+8, r21	; 0x08
 3a0:	fe 01       	movw	r30, r28
 3a2:	31 96       	adiw	r30, 0x01	; 1
 3a4:	9e 01       	movw	r18, r28
 3a6:	27 5f       	subi	r18, 0xF7	; 247
 3a8:	3f 4f       	sbci	r19, 0xFF	; 255
 3aa:	9f ef       	ldi	r25, 0xFF	; 255
 3ac:	91 93       	st	Z+, r25
 3ae:	e2 17       	cp	r30, r18
 3b0:	f3 07       	cpc	r31, r19
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <initSingleUserMatrix+0x3a>
 3b4:	99 81       	ldd	r25, Y+1	; 0x01
 3b6:	97 7f       	andi	r25, 0xF7	; 247
 3b8:	99 83       	std	Y+1, r25	; 0x01
 3ba:	19 86       	std	Y+9, r1	; 0x09
 3bc:	83 e0       	ldi	r24, 0x03	; 3
 3be:	8a 87       	std	Y+10, r24	; 0x0a
 3c0:	8a e0       	ldi	r24, 0x0A	; 10
 3c2:	fe 01       	movw	r30, r28
 3c4:	31 96       	adiw	r30, 0x01	; 1
 3c6:	db 01       	movw	r26, r22
 3c8:	01 90       	ld	r0, Z+
 3ca:	0d 92       	st	X+, r0
 3cc:	8a 95       	dec	r24
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <initSingleUserMatrix+0x56>
 3d0:	cb 01       	movw	r24, r22
 3d2:	2a 96       	adiw	r28, 0x0a	; 10
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	f8 94       	cli
 3d8:	de bf       	out	0x3e, r29	; 62
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	cd bf       	out	0x3d, r28	; 61
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	ff 90       	pop	r15
 3e8:	ef 90       	pop	r14
 3ea:	08 95       	ret

000003ec <shiftSR>:
 3ec:	85 b9       	out	0x05, r24	; 5
 3ee:	29 9a       	sbi	0x05, 1	; 5
 3f0:	15 b8       	out	0x05, r1	; 5
 3f2:	08 95       	ret

000003f4 <shiftWhole>:
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	e1 e0       	ldi	r30, 0x01	; 1
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	71 e0       	ldi	r23, 0x01	; 1
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	af 01       	movw	r20, r30
 402:	02 2e       	mov	r0, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <shiftWhole+0x16>
 406:	44 0f       	add	r20, r20
 408:	55 1f       	adc	r21, r21
 40a:	0a 94       	dec	r0
 40c:	e2 f7       	brpl	.-8      	; 0x406 <shiftWhole+0x12>
 40e:	48 23       	and	r20, r24
 410:	97 2f       	mov	r25, r23
 412:	09 f4       	brne	.+2      	; 0x416 <shiftWhole+0x22>
 414:	96 2f       	mov	r25, r22
 416:	95 b9       	out	0x05, r25	; 5
 418:	29 9a       	sbi	0x05, 1	; 5
 41a:	65 b9       	out	0x05, r22	; 5
 41c:	2f 5f       	subi	r18, 0xFF	; 255
 41e:	3f 4f       	sbci	r19, 0xFF	; 255
 420:	28 30       	cpi	r18, 0x08	; 8
 422:	31 05       	cpc	r19, r1
 424:	69 f7       	brne	.-38     	; 0x400 <shiftWhole+0xc>
 426:	84 e0       	ldi	r24, 0x04	; 4
 428:	85 b9       	out	0x05, r24	; 5
 42a:	08 95       	ret

0000042c <clearSR>:
 42c:	cf 93       	push	r28
 42e:	c8 e0       	ldi	r28, 0x08	; 8
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	dc df       	rcall	.-72     	; 0x3ec <shiftSR>
 434:	c1 50       	subi	r28, 0x01	; 1
 436:	e1 f7       	brne	.-8      	; 0x430 <clearSR+0x4>
 438:	84 e0       	ldi	r24, 0x04	; 4
 43a:	85 b9       	out	0x05, r24	; 5
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <d3_clearSR>:
 440:	f5 df       	rcall	.-22     	; 0x42c <clearSR>
 442:	f4 df       	rcall	.-24     	; 0x42c <clearSR>
 444:	f3 cf       	rjmp	.-26     	; 0x42c <clearSR>
 446:	08 95       	ret

00000448 <d3_setRowMatrixColor>:
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	18 2f       	mov	r17, r24
 452:	c9 2f       	mov	r28, r25
 454:	06 2f       	mov	r16, r22
 456:	d4 2f       	mov	r29, r20
 458:	f3 df       	rcall	.-26     	; 0x440 <d3_clearSR>
 45a:	51 e0       	ldi	r21, 0x01	; 1
 45c:	01 c0       	rjmp	.+2      	; 0x460 <d3_setRowMatrixColor+0x18>
 45e:	55 0f       	add	r21, r21
 460:	0a 95       	dec	r16
 462:	ea f7       	brpl	.-6      	; 0x45e <d3_setRowMatrixColor+0x16>
 464:	e1 2f       	mov	r30, r17
 466:	fc 2f       	mov	r31, r28
 468:	20 e0       	ldi	r18, 0x00	; 0
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	c0 e0       	ldi	r28, 0x00	; 0
 46e:	a1 e0       	ldi	r26, 0x01	; 1
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	91 91       	ld	r25, Z+
 474:	95 23       	and	r25, r21
 476:	49 f0       	breq	.+18     	; 0x48a <d3_setRowMatrixColor+0x42>
 478:	cd 01       	movw	r24, r26
 47a:	02 2e       	mov	r0, r18
 47c:	02 c0       	rjmp	.+4      	; 0x482 <d3_setRowMatrixColor+0x3a>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	0a 94       	dec	r0
 484:	e2 f7       	brpl	.-8      	; 0x47e <d3_setRowMatrixColor+0x36>
 486:	c8 2b       	or	r28, r24
 488:	09 c0       	rjmp	.+18     	; 0x49c <d3_setRowMatrixColor+0x54>
 48a:	bd 01       	movw	r22, r26
 48c:	02 2e       	mov	r0, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <d3_setRowMatrixColor+0x4c>
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	0a 94       	dec	r0
 496:	e2 f7       	brpl	.-8      	; 0x490 <d3_setRowMatrixColor+0x48>
 498:	60 95       	com	r22
 49a:	c6 23       	and	r28, r22
 49c:	2f 5f       	subi	r18, 0xFF	; 255
 49e:	3f 4f       	sbci	r19, 0xFF	; 255
 4a0:	28 30       	cpi	r18, 0x08	; 8
 4a2:	31 05       	cpc	r19, r1
 4a4:	31 f7       	brne	.-52     	; 0x472 <d3_setRowMatrixColor+0x2a>
 4a6:	d1 30       	cpi	r29, 0x01	; 1
 4a8:	71 f0       	breq	.+28     	; 0x4c6 <d3_setRowMatrixColor+0x7e>
 4aa:	18 f0       	brcs	.+6      	; 0x4b2 <d3_setRowMatrixColor+0x6a>
 4ac:	d2 30       	cpi	r29, 0x02	; 2
 4ae:	31 f0       	breq	.+12     	; 0x4bc <d3_setRowMatrixColor+0x74>
 4b0:	0e c0       	rjmp	.+28     	; 0x4ce <d3_setRowMatrixColor+0x86>
 4b2:	bc df       	rcall	.-136    	; 0x42c <clearSR>
 4b4:	8c 2f       	mov	r24, r28
 4b6:	9e df       	rcall	.-196    	; 0x3f4 <shiftWhole>
 4b8:	b9 df       	rcall	.-142    	; 0x42c <clearSR>
 4ba:	09 c0       	rjmp	.+18     	; 0x4ce <d3_setRowMatrixColor+0x86>
 4bc:	8c 2f       	mov	r24, r28
 4be:	9a df       	rcall	.-204    	; 0x3f4 <shiftWhole>
 4c0:	b5 df       	rcall	.-150    	; 0x42c <clearSR>
 4c2:	b4 df       	rcall	.-152    	; 0x42c <clearSR>
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <d3_setRowMatrixColor+0x86>
 4c6:	b2 df       	rcall	.-156    	; 0x42c <clearSR>
 4c8:	b1 df       	rcall	.-158    	; 0x42c <clearSR>
 4ca:	8c 2f       	mov	r24, r28
 4cc:	93 df       	rcall	.-218    	; 0x3f4 <shiftWhole>
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	08 95       	ret

000004d8 <d3_setMatrixColor>:
 4d8:	cf 92       	push	r12
 4da:	df 92       	push	r13
 4dc:	ff 92       	push	r15
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	6c 01       	movw	r12, r24
 4e8:	f6 2e       	mov	r15, r22
 4ea:	c0 e0       	ldi	r28, 0x00	; 0
 4ec:	d0 e0       	ldi	r29, 0x00	; 0
 4ee:	01 e0       	ldi	r16, 0x01	; 1
 4f0:	10 e0       	ldi	r17, 0x00	; 0
 4f2:	98 01       	movw	r18, r16
 4f4:	0c 2e       	mov	r0, r28
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <d3_setMatrixColor+0x24>
 4f8:	22 0f       	add	r18, r18
 4fa:	33 1f       	adc	r19, r19
 4fc:	0a 94       	dec	r0
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <d3_setMatrixColor+0x20>
 500:	2b b9       	out	0x0b, r18	; 11
 502:	4f 2d       	mov	r20, r15
 504:	6c 2f       	mov	r22, r28
 506:	c6 01       	movw	r24, r12
 508:	9f df       	rcall	.-194    	; 0x448 <d3_setRowMatrixColor>
 50a:	8f ea       	ldi	r24, 0xAF	; 175
 50c:	94 e0       	ldi	r25, 0x04	; 4
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <d3_setMatrixColor+0x36>
 512:	00 c0       	rjmp	.+0      	; 0x514 <d3_setMatrixColor+0x3c>
 514:	00 00       	nop
 516:	94 df       	rcall	.-216    	; 0x440 <d3_clearSR>
 518:	21 96       	adiw	r28, 0x01	; 1
 51a:	c8 30       	cpi	r28, 0x08	; 8
 51c:	d1 05       	cpc	r29, r1
 51e:	49 f7       	brne	.-46     	; 0x4f2 <d3_setMatrixColor+0x1a>
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	ff 90       	pop	r15
 52a:	df 90       	pop	r13
 52c:	cf 90       	pop	r12
 52e:	08 95       	ret

00000530 <GetKeypadKey>:
 530:	8f ee       	ldi	r24, 0xEF	; 239
 532:	88 b9       	out	0x08, r24	; 8
 534:	00 00       	nop
 536:	30 9b       	sbis	0x06, 0	; 6
 538:	29 c0       	rjmp	.+82     	; 0x58c <GetKeypadKey+0x5c>
 53a:	31 9b       	sbis	0x06, 1	; 6
 53c:	29 c0       	rjmp	.+82     	; 0x590 <GetKeypadKey+0x60>
 53e:	32 9b       	sbis	0x06, 2	; 6
 540:	29 c0       	rjmp	.+82     	; 0x594 <GetKeypadKey+0x64>
 542:	33 9b       	sbis	0x06, 3	; 6
 544:	29 c0       	rjmp	.+82     	; 0x598 <GetKeypadKey+0x68>
 546:	8f ed       	ldi	r24, 0xDF	; 223
 548:	88 b9       	out	0x08, r24	; 8
 54a:	00 00       	nop
 54c:	30 9b       	sbis	0x06, 0	; 6
 54e:	26 c0       	rjmp	.+76     	; 0x59c <GetKeypadKey+0x6c>
 550:	31 9b       	sbis	0x06, 1	; 6
 552:	26 c0       	rjmp	.+76     	; 0x5a0 <GetKeypadKey+0x70>
 554:	32 9b       	sbis	0x06, 2	; 6
 556:	26 c0       	rjmp	.+76     	; 0x5a4 <GetKeypadKey+0x74>
 558:	33 9b       	sbis	0x06, 3	; 6
 55a:	26 c0       	rjmp	.+76     	; 0x5a8 <GetKeypadKey+0x78>
 55c:	8f eb       	ldi	r24, 0xBF	; 191
 55e:	88 b9       	out	0x08, r24	; 8
 560:	00 00       	nop
 562:	30 9b       	sbis	0x06, 0	; 6
 564:	23 c0       	rjmp	.+70     	; 0x5ac <GetKeypadKey+0x7c>
 566:	31 9b       	sbis	0x06, 1	; 6
 568:	23 c0       	rjmp	.+70     	; 0x5b0 <GetKeypadKey+0x80>
 56a:	32 9b       	sbis	0x06, 2	; 6
 56c:	23 c0       	rjmp	.+70     	; 0x5b4 <GetKeypadKey+0x84>
 56e:	33 9b       	sbis	0x06, 3	; 6
 570:	23 c0       	rjmp	.+70     	; 0x5b8 <GetKeypadKey+0x88>
 572:	8f e7       	ldi	r24, 0x7F	; 127
 574:	88 b9       	out	0x08, r24	; 8
 576:	00 00       	nop
 578:	30 9b       	sbis	0x06, 0	; 6
 57a:	20 c0       	rjmp	.+64     	; 0x5bc <GetKeypadKey+0x8c>
 57c:	31 9b       	sbis	0x06, 1	; 6
 57e:	20 c0       	rjmp	.+64     	; 0x5c0 <GetKeypadKey+0x90>
 580:	32 9b       	sbis	0x06, 2	; 6
 582:	20 c0       	rjmp	.+64     	; 0x5c4 <GetKeypadKey+0x94>
 584:	33 9b       	sbis	0x06, 3	; 6
 586:	20 c0       	rjmp	.+64     	; 0x5c8 <GetKeypadKey+0x98>
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	08 95       	ret
 58c:	81 e3       	ldi	r24, 0x31	; 49
 58e:	08 95       	ret
 590:	84 e3       	ldi	r24, 0x34	; 52
 592:	08 95       	ret
 594:	87 e3       	ldi	r24, 0x37	; 55
 596:	08 95       	ret
 598:	8a e2       	ldi	r24, 0x2A	; 42
 59a:	08 95       	ret
 59c:	82 e3       	ldi	r24, 0x32	; 50
 59e:	08 95       	ret
 5a0:	85 e3       	ldi	r24, 0x35	; 53
 5a2:	08 95       	ret
 5a4:	88 e3       	ldi	r24, 0x38	; 56
 5a6:	08 95       	ret
 5a8:	80 e3       	ldi	r24, 0x30	; 48
 5aa:	08 95       	ret
 5ac:	83 e3       	ldi	r24, 0x33	; 51
 5ae:	08 95       	ret
 5b0:	86 e3       	ldi	r24, 0x36	; 54
 5b2:	08 95       	ret
 5b4:	89 e3       	ldi	r24, 0x39	; 57
 5b6:	08 95       	ret
 5b8:	83 e2       	ldi	r24, 0x23	; 35
 5ba:	08 95       	ret
 5bc:	81 e4       	ldi	r24, 0x41	; 65
 5be:	08 95       	ret
 5c0:	82 e4       	ldi	r24, 0x42	; 66
 5c2:	08 95       	ret
 5c4:	83 e4       	ldi	r24, 0x43	; 67
 5c6:	08 95       	ret
 5c8:	84 e4       	ldi	r24, 0x44	; 68
 5ca:	08 95       	ret

000005cc <KPTick>:
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	ec 01       	movw	r28, r24
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	91 05       	cpc	r25, r1
 5d6:	51 f0       	breq	.+20     	; 0x5ec <KPTick+0x20>
 5d8:	82 30       	cpi	r24, 0x02	; 2
 5da:	91 05       	cpc	r25, r1
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <KPTick+0x14>
 5de:	a1 c0       	rjmp	.+322    	; 0x722 <KPTick+0x156>
 5e0:	89 2b       	or	r24, r25
 5e2:	09 f0       	breq	.+2      	; 0x5e6 <KPTick+0x1a>
 5e4:	b4 c0       	rjmp	.+360    	; 0x74e <KPTick+0x182>
 5e6:	c1 e0       	ldi	r28, 0x01	; 1
 5e8:	d0 e0       	ldi	r29, 0x00	; 0
 5ea:	b1 c0       	rjmp	.+354    	; 0x74e <KPTick+0x182>
 5ec:	a1 df       	rcall	.-190    	; 0x530 <GetKeypadKey>
 5ee:	80 93 08 01 	sts	0x0108, r24
 5f2:	88 23       	and	r24, r24
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <KPTick+0x2c>
 5f6:	ab c0       	rjmp	.+342    	; 0x74e <KPTick+0x182>
 5f8:	84 33       	cpi	r24, 0x34	; 52
 5fa:	21 f5       	brne	.+72     	; 0x644 <KPTick+0x78>
 5fc:	e0 91 ad 02 	lds	r30, 0x02AD
 600:	e7 30       	cpi	r30, 0x07	; 7
 602:	08 f0       	brcs	.+2      	; 0x606 <KPTick+0x3a>
 604:	93 c0       	rjmp	.+294    	; 0x72c <KPTick+0x160>
 606:	ef 5f       	subi	r30, 0xFF	; 255
 608:	a5 ea       	ldi	r26, 0xA5	; 165
 60a:	b2 e0       	ldi	r27, 0x02	; 2
 60c:	18 96       	adiw	r26, 0x08	; 8
 60e:	ec 93       	st	X, r30
 610:	18 97       	sbiw	r26, 0x08	; 8
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	19 96       	adiw	r26, 0x09	; 9
 61a:	0c 90       	ld	r0, X
 61c:	02 c0       	rjmp	.+4      	; 0x622 <KPTick+0x56>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	0a 94       	dec	r0
 624:	e2 f7       	brpl	.-8      	; 0x61e <KPTick+0x52>
 626:	df 01       	movw	r26, r30
 628:	ac 55       	subi	r26, 0x5C	; 92
 62a:	bd 4f       	sbci	r27, 0xFD	; 253
 62c:	9c 91       	ld	r25, X
 62e:	98 2b       	or	r25, r24
 630:	9c 93       	st	X, r25
 632:	eb 55       	subi	r30, 0x5B	; 91
 634:	fd 4f       	sbci	r31, 0xFD	; 253
 636:	80 95       	com	r24
 638:	90 81       	ld	r25, Z
 63a:	89 23       	and	r24, r25
 63c:	80 83       	st	Z, r24
 63e:	c2 e0       	ldi	r28, 0x02	; 2
 640:	d0 e0       	ldi	r29, 0x00	; 0
 642:	85 c0       	rjmp	.+266    	; 0x74e <KPTick+0x182>
 644:	82 33       	cpi	r24, 0x32	; 50
 646:	19 f5       	brne	.+70     	; 0x68e <KPTick+0xc2>
 648:	20 91 ae 02 	lds	r18, 0x02AE
 64c:	27 30       	cpi	r18, 0x07	; 7
 64e:	08 f0       	brcs	.+2      	; 0x652 <KPTick+0x86>
 650:	70 c0       	rjmp	.+224    	; 0x732 <KPTick+0x166>
 652:	31 e0       	ldi	r19, 0x01	; 1
 654:	32 0f       	add	r19, r18
 656:	e5 ea       	ldi	r30, 0xA5	; 165
 658:	f2 e0       	ldi	r31, 0x02	; 2
 65a:	31 87       	std	Z+9, r19	; 0x09
 65c:	e0 85       	ldd	r30, Z+8	; 0x08
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	eb 55       	subi	r30, 0x5B	; 91
 662:	fd 4f       	sbci	r31, 0xFD	; 253
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	ac 01       	movw	r20, r24
 66a:	02 c0       	rjmp	.+4      	; 0x670 <KPTick+0xa4>
 66c:	44 0f       	add	r20, r20
 66e:	55 1f       	adc	r21, r21
 670:	3a 95       	dec	r19
 672:	e2 f7       	brpl	.-8      	; 0x66c <KPTick+0xa0>
 674:	40 95       	com	r20
 676:	02 c0       	rjmp	.+4      	; 0x67c <KPTick+0xb0>
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	2a 95       	dec	r18
 67e:	e2 f7       	brpl	.-8      	; 0x678 <KPTick+0xac>
 680:	90 81       	ld	r25, Z
 682:	89 2b       	or	r24, r25
 684:	84 23       	and	r24, r20
 686:	80 83       	st	Z, r24
 688:	c2 e0       	ldi	r28, 0x02	; 2
 68a:	d0 e0       	ldi	r29, 0x00	; 0
 68c:	60 c0       	rjmp	.+192    	; 0x74e <KPTick+0x182>
 68e:	85 33       	cpi	r24, 0x35	; 53
 690:	21 f5       	brne	.+72     	; 0x6da <KPTick+0x10e>
 692:	e0 91 ad 02 	lds	r30, 0x02AD
 696:	ee 23       	and	r30, r30
 698:	09 f4       	brne	.+2      	; 0x69c <KPTick+0xd0>
 69a:	4e c0       	rjmp	.+156    	; 0x738 <KPTick+0x16c>
 69c:	e1 50       	subi	r30, 0x01	; 1
 69e:	a5 ea       	ldi	r26, 0xA5	; 165
 6a0:	b2 e0       	ldi	r27, 0x02	; 2
 6a2:	18 96       	adiw	r26, 0x08	; 8
 6a4:	ec 93       	st	X, r30
 6a6:	18 97       	sbiw	r26, 0x08	; 8
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	19 96       	adiw	r26, 0x09	; 9
 6b0:	0c 90       	ld	r0, X
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <KPTick+0xec>
 6b4:	88 0f       	add	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	0a 94       	dec	r0
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <KPTick+0xe8>
 6bc:	df 01       	movw	r26, r30
 6be:	aa 55       	subi	r26, 0x5A	; 90
 6c0:	bd 4f       	sbci	r27, 0xFD	; 253
 6c2:	9c 91       	ld	r25, X
 6c4:	98 2b       	or	r25, r24
 6c6:	9c 93       	st	X, r25
 6c8:	eb 55       	subi	r30, 0x5B	; 91
 6ca:	fd 4f       	sbci	r31, 0xFD	; 253
 6cc:	80 95       	com	r24
 6ce:	90 81       	ld	r25, Z
 6d0:	89 23       	and	r24, r25
 6d2:	80 83       	st	Z, r24
 6d4:	c2 e0       	ldi	r28, 0x02	; 2
 6d6:	d0 e0       	ldi	r29, 0x00	; 0
 6d8:	3a c0       	rjmp	.+116    	; 0x74e <KPTick+0x182>
 6da:	88 33       	cpi	r24, 0x38	; 56
 6dc:	81 f5       	brne	.+96     	; 0x73e <KPTick+0x172>
 6de:	20 91 ae 02 	lds	r18, 0x02AE
 6e2:	22 23       	and	r18, r18
 6e4:	79 f1       	breq	.+94     	; 0x744 <KPTick+0x178>
 6e6:	3f ef       	ldi	r19, 0xFF	; 255
 6e8:	32 0f       	add	r19, r18
 6ea:	e5 ea       	ldi	r30, 0xA5	; 165
 6ec:	f2 e0       	ldi	r31, 0x02	; 2
 6ee:	31 87       	std	Z+9, r19	; 0x09
 6f0:	e0 85       	ldd	r30, Z+8	; 0x08
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	eb 55       	subi	r30, 0x5B	; 91
 6f6:	fd 4f       	sbci	r31, 0xFD	; 253
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	ac 01       	movw	r20, r24
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <KPTick+0x138>
 700:	44 0f       	add	r20, r20
 702:	55 1f       	adc	r21, r21
 704:	3a 95       	dec	r19
 706:	e2 f7       	brpl	.-8      	; 0x700 <KPTick+0x134>
 708:	40 95       	com	r20
 70a:	02 c0       	rjmp	.+4      	; 0x710 <KPTick+0x144>
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	2a 95       	dec	r18
 712:	e2 f7       	brpl	.-8      	; 0x70c <KPTick+0x140>
 714:	90 81       	ld	r25, Z
 716:	89 2b       	or	r24, r25
 718:	84 23       	and	r24, r20
 71a:	80 83       	st	Z, r24
 71c:	c2 e0       	ldi	r28, 0x02	; 2
 71e:	d0 e0       	ldi	r29, 0x00	; 0
 720:	16 c0       	rjmp	.+44     	; 0x74e <KPTick+0x182>
 722:	06 df       	rcall	.-500    	; 0x530 <GetKeypadKey>
 724:	88 23       	and	r24, r24
 726:	89 f0       	breq	.+34     	; 0x74a <KPTick+0x17e>
 728:	03 df       	rcall	.-506    	; 0x530 <GetKeypadKey>
 72a:	11 c0       	rjmp	.+34     	; 0x74e <KPTick+0x182>
 72c:	c2 e0       	ldi	r28, 0x02	; 2
 72e:	d0 e0       	ldi	r29, 0x00	; 0
 730:	0e c0       	rjmp	.+28     	; 0x74e <KPTick+0x182>
 732:	c2 e0       	ldi	r28, 0x02	; 2
 734:	d0 e0       	ldi	r29, 0x00	; 0
 736:	0b c0       	rjmp	.+22     	; 0x74e <KPTick+0x182>
 738:	c2 e0       	ldi	r28, 0x02	; 2
 73a:	d0 e0       	ldi	r29, 0x00	; 0
 73c:	08 c0       	rjmp	.+16     	; 0x74e <KPTick+0x182>
 73e:	c2 e0       	ldi	r28, 0x02	; 2
 740:	d0 e0       	ldi	r29, 0x00	; 0
 742:	05 c0       	rjmp	.+10     	; 0x74e <KPTick+0x182>
 744:	c2 e0       	ldi	r28, 0x02	; 2
 746:	d0 e0       	ldi	r29, 0x00	; 0
 748:	02 c0       	rjmp	.+4      	; 0x74e <KPTick+0x182>
 74a:	c1 e0       	ldi	r28, 0x01	; 1
 74c:	d0 e0       	ldi	r29, 0x00	; 0
 74e:	ce 01       	movw	r24, r28
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	08 95       	ret

00000756 <initExplosions>:
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
 75e:	9c 01       	movw	r18, r24
 760:	9e e1       	ldi	r25, 0x1E	; 30
 762:	91 50       	subi	r25, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <initExplosions+0xc>
 766:	c3 59       	subi	r28, 0x93	; 147
 768:	de 4f       	sbci	r29, 0xFE	; 254
 76a:	18 82       	st	Y, r1
 76c:	cd 56       	subi	r28, 0x6D	; 109
 76e:	d1 40       	sbci	r29, 0x01	; 1
 770:	c2 59       	subi	r28, 0x92	; 146
 772:	de 4f       	sbci	r29, 0xFE	; 254
 774:	18 82       	st	Y, r1
 776:	ce 56       	subi	r28, 0x6E	; 110
 778:	d1 40       	sbci	r29, 0x01	; 1
 77a:	8a e6       	ldi	r24, 0x6A	; 106
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	fe 01       	movw	r30, r28
 780:	35 96       	adiw	r30, 0x05	; 5
 782:	d9 01       	movw	r26, r18
 784:	01 90       	ld	r0, Z+
 786:	0d 92       	st	X+, r0
 788:	01 97       	sbiw	r24, 0x01	; 1
 78a:	e1 f7       	brne	.-8      	; 0x784 <initExplosions+0x2e>
 78c:	c9 01       	movw	r24, r18
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	08 95       	ret

00000794 <DeathTick>:
			}
		}
	return state;
}

unsigned char DeathTick() {	
 794:	ef 92       	push	r14
 796:	ff 92       	push	r15
 798:	0f 93       	push	r16
 79a:	1f 93       	push	r17
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
 7a0:	cd b7       	in	r28, 0x3d	; 61
 7a2:	de b7       	in	r29, 0x3e	; 62
 7a4:	2a 97       	sbiw	r28, 0x0a	; 10
 7a6:	0f b6       	in	r0, 0x3f	; 63
 7a8:	f8 94       	cli
 7aa:	de bf       	out	0x3e, r29	; 62
 7ac:	0f be       	out	0x3f, r0	; 63
 7ae:	cd bf       	out	0x3d, r28	; 61
	if ((displayBlank == 0) && GetBit(explosions.matricies[explosions.displayIndex].m[userMatrix.row], userMatrix.column) == 0) {
 7b0:	80 91 09 01 	lds	r24, 0x0109
 7b4:	81 11       	cpse	r24, r1
 7b6:	3a c0       	rjmp	.+116    	; 0x82c <DeathTick+0x98>
 7b8:	e5 ea       	ldi	r30, 0xA5	; 165
 7ba:	f2 e0       	ldi	r31, 0x02	; 2
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
 7bc:	21 e0       	ldi	r18, 0x01	; 1
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	01 84       	ldd	r0, Z+9	; 0x09
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DeathTick+0x34>
 7c4:	22 0f       	add	r18, r18
 7c6:	33 1f       	adc	r19, r19
 7c8:	0a 94       	dec	r0
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DeathTick+0x30>
 7cc:	90 91 a4 02 	lds	r25, 0x02A4
 7d0:	e0 85       	ldd	r30, Z+8	; 0x08
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	48 e0       	ldi	r20, 0x08	; 8
 7d6:	94 9f       	mul	r25, r20
 7d8:	e0 0d       	add	r30, r0
 7da:	f1 1d       	adc	r31, r1
 7dc:	11 24       	eor	r1, r1
 7de:	e5 5c       	subi	r30, 0xC5	; 197
 7e0:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
 7e2:	90 81       	ld	r25, Z
 7e4:	29 23       	and	r18, r25
 7e6:	19 f5       	brne	.+70     	; 0x82e <DeathTick+0x9a>
		userMatrix = initSingleUserMatrix(userMatrix);
 7e8:	e0 90 a5 02 	lds	r14, 0x02A5
 7ec:	f0 90 a6 02 	lds	r15, 0x02A6
 7f0:	00 91 a7 02 	lds	r16, 0x02A7
 7f4:	10 91 a8 02 	lds	r17, 0x02A8
 7f8:	20 91 a9 02 	lds	r18, 0x02A9
 7fc:	30 91 aa 02 	lds	r19, 0x02AA
 800:	40 91 ab 02 	lds	r20, 0x02AB
 804:	50 91 ac 02 	lds	r21, 0x02AC
 808:	60 91 ad 02 	lds	r22, 0x02AD
 80c:	70 91 ae 02 	lds	r23, 0x02AE
 810:	ce 01       	movw	r24, r28
 812:	01 96       	adiw	r24, 0x01	; 1
 814:	ae dd       	rcall	.-1188   	; 0x372 <initSingleUserMatrix>
 816:	8a e0       	ldi	r24, 0x0A	; 10
 818:	fe 01       	movw	r30, r28
 81a:	31 96       	adiw	r30, 0x01	; 1
 81c:	a5 ea       	ldi	r26, 0xA5	; 165
 81e:	b2 e0       	ldi	r27, 0x02	; 2
 820:	01 90       	ld	r0, Z+
 822:	0d 92       	st	X+, r0
 824:	8a 95       	dec	r24
 826:	e1 f7       	brne	.-8      	; 0x820 <DeathTick+0x8c>
		return 1;
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	01 c0       	rjmp	.+2      	; 0x82e <DeathTick+0x9a>
	} else {
		// nothing
		return 0;
 82c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 82e:	2a 96       	adiw	r28, 0x0a	; 10
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	f8 94       	cli
 834:	de bf       	out	0x3e, r29	; 62
 836:	0f be       	out	0x3f, r0	; 63
 838:	cd bf       	out	0x3d, r28	; 61
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	1f 91       	pop	r17
 840:	0f 91       	pop	r16
 842:	ff 90       	pop	r15
 844:	ef 90       	pop	r14
 846:	08 95       	ret

00000848 <ExpTick>:

Explosions ExpTick(Explosions explosions) {	
 848:	0f 93       	push	r16
 84a:	1f 93       	push	r17
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	cd b7       	in	r28, 0x3d	; 61
 852:	de b7       	in	r29, 0x3e	; 62
 854:	8c 01       	movw	r16, r24
	// Return if empty (Protection code)
	if (explosions.index == 0) {
 856:	c1 59       	subi	r28, 0x91	; 145
 858:	de 4f       	sbci	r29, 0xFE	; 254
 85a:	88 81       	ld	r24, Y
 85c:	cf 56       	subi	r28, 0x6F	; 111
 85e:	d1 40       	sbci	r29, 0x01	; 1
 860:	81 11       	cpse	r24, r1
 862:	0a c0       	rjmp	.+20     	; 0x878 <ExpTick+0x30>
		return explosions;
 864:	8a e6       	ldi	r24, 0x6A	; 106
 866:	91 e0       	ldi	r25, 0x01	; 1
 868:	fe 01       	movw	r30, r28
 86a:	37 96       	adiw	r30, 0x07	; 7
 86c:	d8 01       	movw	r26, r16
 86e:	01 90       	ld	r0, Z+
 870:	0d 92       	st	X+, r0
 872:	01 97       	sbiw	r24, 0x01	; 1
 874:	e1 f7       	brne	.-8      	; 0x86e <ExpTick+0x26>
 876:	98 c0       	rjmp	.+304    	; 0x9a8 <ExpTick+0x160>
	} 
	
	if (explosions.displayIndex >= explosions.index) {
 878:	c0 59       	subi	r28, 0x90	; 144
 87a:	de 4f       	sbci	r29, 0xFE	; 254
 87c:	98 81       	ld	r25, Y
 87e:	c0 57       	subi	r28, 0x70	; 112
 880:	d1 40       	sbci	r29, 0x01	; 1
 882:	98 17       	cp	r25, r24
 884:	28 f0       	brcs	.+10     	; 0x890 <ExpTick+0x48>
		explosions.displayIndex = 0;
 886:	c0 59       	subi	r28, 0x90	; 144
 888:	de 4f       	sbci	r29, 0xFE	; 254
 88a:	18 82       	st	Y, r1
 88c:	c0 57       	subi	r28, 0x70	; 112
 88e:	d1 40       	sbci	r29, 0x01	; 1
	}
	
	if (displayBlank == 0)
 890:	80 91 09 01 	lds	r24, 0x0109
 894:	81 11       	cpse	r24, r1
 896:	12 c0       	rjmp	.+36     	; 0x8bc <ExpTick+0x74>
		d3_setMatrixColor(explosions.matricies[explosions.displayIndex].m, RED);
 898:	c0 59       	subi	r28, 0x90	; 144
 89a:	de 4f       	sbci	r29, 0xFE	; 254
 89c:	88 81       	ld	r24, Y
 89e:	c0 57       	subi	r28, 0x70	; 112
 8a0:	d1 40       	sbci	r29, 0x01	; 1
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	27 e0       	ldi	r18, 0x07	; 7
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	2c 0f       	add	r18, r28
 8aa:	3d 1f       	adc	r19, r29
 8ac:	48 e0       	ldi	r20, 0x08	; 8
 8ae:	84 9f       	mul	r24, r20
 8b0:	20 0d       	add	r18, r0
 8b2:	31 1d       	adc	r19, r1
 8b4:	11 24       	eor	r1, r1
 8b6:	c9 01       	movw	r24, r18
 8b8:	0f de       	rcall	.-994    	; 0x4d8 <d3_setMatrixColor>
 8ba:	07 c0       	rjmp	.+14     	; 0x8ca <ExpTick+0x82>
	else if (displayBlank == 1)
 8bc:	81 30       	cpi	r24, 0x01	; 1
 8be:	09 f0       	breq	.+2      	; 0x8c2 <ExpTick+0x7a>
 8c0:	6a c0       	rjmp	.+212    	; 0x996 <ExpTick+0x14e>
		d3_setMatrixColor(blankMatrix.m, RED);
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	8b e2       	ldi	r24, 0x2B	; 43
 8c6:	91 e0       	ldi	r25, 0x01	; 1
 8c8:	07 de       	rcall	.-1010   	; 0x4d8 <d3_setMatrixColor>
	
	if (displayBlank == 0 && contClock >= explosions.timeDuration[explosions.displayIndex]) {
 8ca:	80 91 09 01 	lds	r24, 0x0109
 8ce:	81 11       	cpse	r24, r1
 8d0:	35 c0       	rjmp	.+106    	; 0x93c <ExpTick+0xf4>
 8d2:	c0 59       	subi	r28, 0x90	; 144
 8d4:	de 4f       	sbci	r29, 0xFE	; 254
 8d6:	28 81       	ld	r18, Y
 8d8:	c0 57       	subi	r28, 0x70	; 112
 8da:	d1 40       	sbci	r29, 0x01	; 1
 8dc:	e2 2f       	mov	r30, r18
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	ea 56       	subi	r30, 0x6A	; 106
 8e2:	ff 4f       	sbci	r31, 0xFF	; 255
 8e4:	ee 0f       	add	r30, r30
 8e6:	ff 1f       	adc	r31, r31
 8e8:	87 e0       	ldi	r24, 0x07	; 7
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	8c 0f       	add	r24, r28
 8ee:	9d 1f       	adc	r25, r29
 8f0:	e8 0f       	add	r30, r24
 8f2:	f9 1f       	adc	r31, r25
 8f4:	80 81       	ld	r24, Z
 8f6:	91 81       	ldd	r25, Z+1	; 0x01
 8f8:	a0 e0       	ldi	r26, 0x00	; 0
 8fa:	b0 e0       	ldi	r27, 0x00	; 0
 8fc:	40 91 0b 01 	lds	r20, 0x010B
 900:	50 91 0c 01 	lds	r21, 0x010C
 904:	60 91 0d 01 	lds	r22, 0x010D
 908:	70 91 0e 01 	lds	r23, 0x010E
 90c:	48 17       	cp	r20, r24
 90e:	59 07       	cpc	r21, r25
 910:	6a 07       	cpc	r22, r26
 912:	7b 07       	cpc	r23, r27
 914:	08 f4       	brcc	.+2      	; 0x918 <ExpTick+0xd0>
 916:	3f c0       	rjmp	.+126    	; 0x996 <ExpTick+0x14e>
		displayBlank = 1;
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	80 93 09 01 	sts	0x0109, r24
		explosions.displayIndex++;
 91e:	2f 5f       	subi	r18, 0xFF	; 255
 920:	c0 59       	subi	r28, 0x90	; 144
 922:	de 4f       	sbci	r29, 0xFE	; 254
 924:	28 83       	st	Y, r18
 926:	c0 57       	subi	r28, 0x70	; 112
 928:	d1 40       	sbci	r29, 0x01	; 1
		contClock = 0;
 92a:	10 92 0b 01 	sts	0x010B, r1
 92e:	10 92 0c 01 	sts	0x010C, r1
 932:	10 92 0d 01 	sts	0x010D, r1
 936:	10 92 0e 01 	sts	0x010E, r1
 93a:	2d c0       	rjmp	.+90     	; 0x996 <ExpTick+0x14e>
	} else if (displayBlank == 1 && contClock >= explosions.timeBetween[explosions.displayIndex]) {
 93c:	81 30       	cpi	r24, 0x01	; 1
 93e:	59 f5       	brne	.+86     	; 0x996 <ExpTick+0x14e>
 940:	c0 59       	subi	r28, 0x90	; 144
 942:	de 4f       	sbci	r29, 0xFE	; 254
 944:	e8 81       	ld	r30, Y
 946:	c0 57       	subi	r28, 0x70	; 112
 948:	d1 40       	sbci	r29, 0x01	; 1
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	e8 58       	subi	r30, 0x88	; 136
 94e:	ff 4f       	sbci	r31, 0xFF	; 255
 950:	ee 0f       	add	r30, r30
 952:	ff 1f       	adc	r31, r31
 954:	27 e0       	ldi	r18, 0x07	; 7
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	2c 0f       	add	r18, r28
 95a:	3d 1f       	adc	r19, r29
 95c:	e2 0f       	add	r30, r18
 95e:	f3 1f       	adc	r31, r19
 960:	80 81       	ld	r24, Z
 962:	91 81       	ldd	r25, Z+1	; 0x01
 964:	a0 e0       	ldi	r26, 0x00	; 0
 966:	b0 e0       	ldi	r27, 0x00	; 0
 968:	40 91 0b 01 	lds	r20, 0x010B
 96c:	50 91 0c 01 	lds	r21, 0x010C
 970:	60 91 0d 01 	lds	r22, 0x010D
 974:	70 91 0e 01 	lds	r23, 0x010E
 978:	48 17       	cp	r20, r24
 97a:	59 07       	cpc	r21, r25
 97c:	6a 07       	cpc	r22, r26
 97e:	7b 07       	cpc	r23, r27
 980:	50 f0       	brcs	.+20     	; 0x996 <ExpTick+0x14e>
		displayBlank = 0;
 982:	10 92 09 01 	sts	0x0109, r1
		contClock = 0;
 986:	10 92 0b 01 	sts	0x010B, r1
 98a:	10 92 0c 01 	sts	0x010C, r1
 98e:	10 92 0d 01 	sts	0x010D, r1
 992:	10 92 0e 01 	sts	0x010E, r1
	}
	
	return explosions;
 996:	8a e6       	ldi	r24, 0x6A	; 106
 998:	91 e0       	ldi	r25, 0x01	; 1
 99a:	fe 01       	movw	r30, r28
 99c:	37 96       	adiw	r30, 0x07	; 7
 99e:	d8 01       	movw	r26, r16
 9a0:	01 90       	ld	r0, Z+
 9a2:	0d 92       	st	X+, r0
 9a4:	01 97       	sbiw	r24, 0x01	; 1
 9a6:	e1 f7       	brne	.-8      	; 0x9a0 <ExpTick+0x158>
 9a8:	c8 01       	movw	r24, r16
 9aa:	df 91       	pop	r29
 9ac:	cf 91       	pop	r28
 9ae:	1f 91       	pop	r17
 9b0:	0f 91       	pop	r16
 9b2:	08 95       	ret

000009b4 <main>:
SingleMatrix matrix;
SingleMatrix matrix2;
SingleMatrix blankMatrix;


int main(void) {
 9b4:	cf 93       	push	r28
 9b6:	df 93       	push	r29
 9b8:	cd b7       	in	r28, 0x3d	; 61
 9ba:	de b7       	in	r29, 0x3e	; 62
 9bc:	c2 52       	subi	r28, 0x22	; 34
 9be:	d7 40       	sbci	r29, 0x07	; 7
 9c0:	0f b6       	in	r0, 0x3f	; 63
 9c2:	f8 94       	cli
 9c4:	de bf       	out	0x3e, r29	; 62
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00;
 9ca:	8f ef       	ldi	r24, 0xFF	; 255
 9cc:	84 b9       	out	0x04, r24	; 4
 9ce:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 9d0:	8a b9       	out	0x0a, r24	; 10
 9d2:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xF0; PORTC = 0x0F;
 9d4:	80 ef       	ldi	r24, 0xF0	; 240
 9d6:	87 b9       	out	0x07, r24	; 7
 9d8:	8f e0       	ldi	r24, 0x0F	; 15
 9da:	88 b9       	out	0x08, r24	; 8
	
	initTasks();
 9dc:	bd db       	rcall	.-2182   	; 0x158 <initTasks>
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	a0 e0       	ldi	r26, 0x00	; 0
 9e4:	b0 e0       	ldi	r27, 0x00	; 0
 9e6:	80 93 02 01 	sts	0x0102, r24
 9ea:	90 93 03 01 	sts	0x0103, r25
 9ee:	a0 93 04 01 	sts	0x0104, r26
 9f2:	b0 93 05 01 	sts	0x0105, r27
	_avr_timer_cntcurr = _avr_timer_M;
 9f6:	80 93 0f 01 	sts	0x010F, r24
 9fa:	90 93 10 01 	sts	0x0110, r25
 9fe:	a0 93 11 01 	sts	0x0111, r26
 a02:	b0 93 12 01 	sts	0x0112, r27
	
	TimerSet(1);
	TimerOn();
 a06:	cf db       	rcall	.-2146   	; 0x1a6 <TimerOn>
	
	matrix = clearSingleMatrix(matrix);
 a08:	20 91 33 01 	lds	r18, 0x0133
 a0c:	30 91 34 01 	lds	r19, 0x0134
 a10:	40 91 35 01 	lds	r20, 0x0135
 a14:	50 91 36 01 	lds	r21, 0x0136
 a18:	60 91 37 01 	lds	r22, 0x0137
 a1c:	70 91 38 01 	lds	r23, 0x0138
 a20:	80 91 39 01 	lds	r24, 0x0139
 a24:	90 91 3a 01 	lds	r25, 0x013A
 a28:	6e dc       	rcall	.-1828   	; 0x306 <clearSingleMatrix>
 a2a:	e3 e3       	ldi	r30, 0x33	; 51
 a2c:	f1 e0       	ldi	r31, 0x01	; 1
 a2e:	20 83       	st	Z, r18
 a30:	31 83       	std	Z+1, r19	; 0x01
 a32:	42 83       	std	Z+2, r20	; 0x02
 a34:	53 83       	std	Z+3, r21	; 0x03
 a36:	64 83       	std	Z+4, r22	; 0x04
 a38:	75 83       	std	Z+5, r23	; 0x05
 a3a:	86 83       	std	Z+6, r24	; 0x06
 a3c:	97 83       	std	Z+7, r25	; 0x07
 a3e:	e4 e3       	ldi	r30, 0x34	; 52
 a40:	f1 e0       	ldi	r31, 0x01	; 1
 a42:	0a e3       	ldi	r16, 0x3A	; 58
 a44:	11 e0       	ldi	r17, 0x01	; 1

	unsigned char alternate = 0;
 a46:	20 e0       	ldi	r18, 0x00	; 0
SingleMatrix matrix;
SingleMatrix matrix2;
SingleMatrix blankMatrix;


int main(void) {
 a48:	a1 2c       	mov	r10, r1
 a4a:	b1 2c       	mov	r11, r1
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
 a4c:	61 e0       	ldi	r22, 0x01	; 1
 a4e:	70 e0       	ldi	r23, 0x00	; 0
	unsigned char alternate = 0;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[i] = SetBit(matrix.m[i], j, alternate);
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
 a50:	cc 24       	eor	r12, r12
 a52:	c3 94       	inc	r12

	unsigned char alternate = 0;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[i] = SetBit(matrix.m[i], j, alternate);
			if (alternate == 1) alternate = 0;
 a54:	f1 2c       	mov	r15, r1
			else if (alternate == 0) alternate = 1;
 a56:	ec 2c       	mov	r14, r12

	unsigned char alternate = 0;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[i] = SetBit(matrix.m[i], j, alternate);
			if (alternate == 1) alternate = 0;
 a58:	df 2c       	mov	r13, r15
 a5a:	2a c0       	rjmp	.+84     	; 0xab0 <main+0xfc>
	matrix = clearSingleMatrix(matrix);

	unsigned char alternate = 0;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[i] = SetBit(matrix.m[i], j, alternate);
 a5c:	30 81       	ld	r19, Z
 a5e:	22 23       	and	r18, r18
 a60:	69 f0       	breq	.+26     	; 0xa7c <main+0xc8>
 a62:	ab 01       	movw	r20, r22
 a64:	08 2e       	mov	r0, r24
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <main+0xb8>
 a68:	44 0f       	add	r20, r20
 a6a:	55 1f       	adc	r21, r21
 a6c:	0a 94       	dec	r0
 a6e:	e2 f7       	brpl	.-8      	; 0xa68 <main+0xb4>
 a70:	34 2b       	or	r19, r20
 a72:	3c 93       	st	X, r19
			if (alternate == 1) alternate = 0;
 a74:	21 30       	cpi	r18, 0x01	; 1
 a76:	69 f4       	brne	.+26     	; 0xa92 <main+0xde>
 a78:	2d 2d       	mov	r18, r13
 a7a:	0b c0       	rjmp	.+22     	; 0xa92 <main+0xde>
 a7c:	ab 01       	movw	r20, r22
 a7e:	08 2e       	mov	r0, r24
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <main+0xd2>
 a82:	44 0f       	add	r20, r20
 a84:	55 1f       	adc	r21, r21
 a86:	0a 94       	dec	r0
 a88:	e2 f7       	brpl	.-8      	; 0xa82 <main+0xce>
 a8a:	40 95       	com	r20
 a8c:	34 23       	and	r19, r20
	matrix = clearSingleMatrix(matrix);

	unsigned char alternate = 0;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[i] = SetBit(matrix.m[i], j, alternate);
 a8e:	3c 93       	st	X, r19
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
 a90:	2e 2d       	mov	r18, r14
 a92:	01 96       	adiw	r24, 0x01	; 1
	
	matrix = clearSingleMatrix(matrix);

	unsigned char alternate = 0;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
 a94:	88 30       	cpi	r24, 0x08	; 8
 a96:	91 05       	cpc	r25, r1
 a98:	09 f7       	brne	.-62     	; 0xa5c <main+0xa8>
			matrix.m[i] = SetBit(matrix.m[i], j, alternate);
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
		}
		if (alternate == 1) alternate = 0;
 a9a:	21 30       	cpi	r18, 0x01	; 1
 a9c:	21 f0       	breq	.+8      	; 0xaa6 <main+0xf2>
		else if (alternate == 0) alternate = 1;
 a9e:	21 11       	cpse	r18, r1
 aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <main+0xf4>
 aa2:	2c 2d       	mov	r18, r12
 aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <main+0xf4>
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[i] = SetBit(matrix.m[i], j, alternate);
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
		}
		if (alternate == 1) alternate = 0;
 aa6:	2f 2d       	mov	r18, r15
 aa8:	31 96       	adiw	r30, 0x01	; 1
	TimerOn();
	
	matrix = clearSingleMatrix(matrix);

	unsigned char alternate = 0;
	for (unsigned char i = 1; i < 7; i++) {
 aaa:	e0 17       	cp	r30, r16
 aac:	f1 07       	cpc	r31, r17
 aae:	21 f0       	breq	.+8      	; 0xab8 <main+0x104>
SingleMatrix matrix;
SingleMatrix matrix2;
SingleMatrix blankMatrix;


int main(void) {
 ab0:	8a 2d       	mov	r24, r10
 ab2:	9b 2d       	mov	r25, r11
 ab4:	df 01       	movw	r26, r30
 ab6:	d2 cf       	rjmp	.-92     	; 0xa5c <main+0xa8>
		}
		if (alternate == 1) alternate = 0;
		else if (alternate == 0) alternate = 1;
	}
	
	matrix2 = clearSingleMatrix(matrix2);
 ab8:	20 91 af 02 	lds	r18, 0x02AF
 abc:	30 91 b0 02 	lds	r19, 0x02B0
 ac0:	40 91 b1 02 	lds	r20, 0x02B1
 ac4:	50 91 b2 02 	lds	r21, 0x02B2
 ac8:	60 91 b3 02 	lds	r22, 0x02B3
 acc:	70 91 b4 02 	lds	r23, 0x02B4
 ad0:	80 91 b5 02 	lds	r24, 0x02B5
 ad4:	90 91 b6 02 	lds	r25, 0x02B6
 ad8:	16 dc       	rcall	.-2004   	; 0x306 <clearSingleMatrix>
 ada:	ef ea       	ldi	r30, 0xAF	; 175
 adc:	f2 e0       	ldi	r31, 0x02	; 2
 ade:	20 83       	st	Z, r18
 ae0:	31 83       	std	Z+1, r19	; 0x01
 ae2:	42 83       	std	Z+2, r20	; 0x02
 ae4:	53 83       	std	Z+3, r21	; 0x03
 ae6:	64 83       	std	Z+4, r22	; 0x04
 ae8:	75 83       	std	Z+5, r23	; 0x05
 aea:	86 83       	std	Z+6, r24	; 0x06
 aec:	97 83       	std	Z+7, r25	; 0x07
 aee:	e0 eb       	ldi	r30, 0xB0	; 176
 af0:	f2 e0       	ldi	r31, 0x02	; 2
 af2:	06 eb       	ldi	r16, 0xB6	; 182
 af4:	12 e0       	ldi	r17, 0x02	; 2
	alternate = 1;
 af6:	21 e0       	ldi	r18, 0x01	; 1
	TimerSet(1);
	TimerOn();
	
	matrix = clearSingleMatrix(matrix);

	unsigned char alternate = 0;
 af8:	a1 2c       	mov	r10, r1
 afa:	b1 2c       	mov	r11, r1
 afc:	61 e0       	ldi	r22, 0x01	; 1
 afe:	70 e0       	ldi	r23, 0x00	; 0
	alternate = 1;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix2.m[i] = SetBit(matrix2.m[i], j, alternate);
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
 b00:	cc 24       	eor	r12, r12
 b02:	c3 94       	inc	r12
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix2.m[i] = SetBit(matrix2.m[i], j, alternate);
			if (alternate == 1) alternate = 0;
 b04:	f1 2c       	mov	r15, r1
			else if (alternate == 0) alternate = 1;
 b06:	ec 2c       	mov	r14, r12
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix2.m[i] = SetBit(matrix2.m[i], j, alternate);
			if (alternate == 1) alternate = 0;
 b08:	df 2c       	mov	r13, r15
 b0a:	2a c0       	rjmp	.+84     	; 0xb60 <main+0x1ac>
	
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix2.m[i] = SetBit(matrix2.m[i], j, alternate);
 b0c:	30 81       	ld	r19, Z
 b0e:	22 23       	and	r18, r18
 b10:	69 f0       	breq	.+26     	; 0xb2c <main+0x178>
 b12:	ab 01       	movw	r20, r22
 b14:	08 2e       	mov	r0, r24
 b16:	02 c0       	rjmp	.+4      	; 0xb1c <main+0x168>
 b18:	44 0f       	add	r20, r20
 b1a:	55 1f       	adc	r21, r21
 b1c:	0a 94       	dec	r0
 b1e:	e2 f7       	brpl	.-8      	; 0xb18 <main+0x164>
 b20:	34 2b       	or	r19, r20
 b22:	3c 93       	st	X, r19
			if (alternate == 1) alternate = 0;
 b24:	21 30       	cpi	r18, 0x01	; 1
 b26:	69 f4       	brne	.+26     	; 0xb42 <main+0x18e>
 b28:	2d 2d       	mov	r18, r13
 b2a:	0b c0       	rjmp	.+22     	; 0xb42 <main+0x18e>
 b2c:	ab 01       	movw	r20, r22
 b2e:	08 2e       	mov	r0, r24
 b30:	02 c0       	rjmp	.+4      	; 0xb36 <main+0x182>
 b32:	44 0f       	add	r20, r20
 b34:	55 1f       	adc	r21, r21
 b36:	0a 94       	dec	r0
 b38:	e2 f7       	brpl	.-8      	; 0xb32 <main+0x17e>
 b3a:	40 95       	com	r20
 b3c:	34 23       	and	r19, r20
	
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix2.m[i] = SetBit(matrix2.m[i], j, alternate);
 b3e:	3c 93       	st	X, r19
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
 b40:	2e 2d       	mov	r18, r14
 b42:	01 96       	adiw	r24, 0x01	; 1
	}
	
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
 b44:	88 30       	cpi	r24, 0x08	; 8
 b46:	91 05       	cpc	r25, r1
 b48:	09 f7       	brne	.-62     	; 0xb0c <main+0x158>
			matrix2.m[i] = SetBit(matrix2.m[i], j, alternate);
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
		}
		if (alternate == 1) alternate = 0;
 b4a:	21 30       	cpi	r18, 0x01	; 1
 b4c:	21 f0       	breq	.+8      	; 0xb56 <main+0x1a2>
		else if (alternate == 0) alternate = 1;
 b4e:	21 11       	cpse	r18, r1
 b50:	03 c0       	rjmp	.+6      	; 0xb58 <main+0x1a4>
 b52:	2c 2d       	mov	r18, r12
 b54:	01 c0       	rjmp	.+2      	; 0xb58 <main+0x1a4>
		for (unsigned char j = 0; j < 8; j++) {
			matrix2.m[i] = SetBit(matrix2.m[i], j, alternate);
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
		}
		if (alternate == 1) alternate = 0;
 b56:	2f 2d       	mov	r18, r15
 b58:	31 96       	adiw	r30, 0x01	; 1
		else if (alternate == 0) alternate = 1;
	}
	
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (unsigned char i = 1; i < 7; i++) {
 b5a:	e0 17       	cp	r30, r16
 b5c:	f1 07       	cpc	r31, r17
 b5e:	21 f0       	breq	.+8      	; 0xb68 <main+0x1b4>
	TimerSet(1);
	TimerOn();
	
	matrix = clearSingleMatrix(matrix);

	unsigned char alternate = 0;
 b60:	8a 2d       	mov	r24, r10
 b62:	9b 2d       	mov	r25, r11
 b64:	df 01       	movw	r26, r30
 b66:	d2 cf       	rjmp	.-92     	; 0xb0c <main+0x158>
		}
		if (alternate == 1) alternate = 0;
		else if (alternate == 0) alternate = 1;
	}
	
	blankMatrix = clearSingleMatrix(blankMatrix);
 b68:	20 91 2b 01 	lds	r18, 0x012B
 b6c:	30 91 2c 01 	lds	r19, 0x012C
 b70:	40 91 2d 01 	lds	r20, 0x012D
 b74:	50 91 2e 01 	lds	r21, 0x012E
 b78:	60 91 2f 01 	lds	r22, 0x012F
 b7c:	70 91 30 01 	lds	r23, 0x0130
 b80:	80 91 31 01 	lds	r24, 0x0131
 b84:	90 91 32 01 	lds	r25, 0x0132
 b88:	be db       	rcall	.-2180   	; 0x306 <clearSingleMatrix>
 b8a:	eb e2       	ldi	r30, 0x2B	; 43
 b8c:	f1 e0       	ldi	r31, 0x01	; 1
 b8e:	20 83       	st	Z, r18
 b90:	31 83       	std	Z+1, r19	; 0x01
 b92:	42 83       	std	Z+2, r20	; 0x02
 b94:	53 83       	std	Z+3, r21	; 0x03
 b96:	64 83       	std	Z+4, r22	; 0x04
 b98:	75 83       	std	Z+5, r23	; 0x05
 b9a:	86 83       	std	Z+6, r24	; 0x06
 b9c:	97 83       	std	Z+7, r25	; 0x07
	
	explosions = initExplosions(explosions);
 b9e:	4d b7       	in	r20, 0x3d	; 61
 ba0:	5e b7       	in	r21, 0x3e	; 62
 ba2:	4a 56       	subi	r20, 0x6A	; 106
 ba4:	51 40       	sbci	r21, 0x01	; 1
 ba6:	0f b6       	in	r0, 0x3f	; 63
 ba8:	f8 94       	cli
 baa:	5e bf       	out	0x3e, r21	; 62
 bac:	0f be       	out	0x3f, r0	; 63
 bae:	4d bf       	out	0x3d, r20	; 61
 bb0:	ad b7       	in	r26, 0x3d	; 61
 bb2:	be b7       	in	r27, 0x3e	; 62
 bb4:	11 96       	adiw	r26, 0x01	; 1
 bb6:	8a e6       	ldi	r24, 0x6A	; 106
 bb8:	91 e0       	ldi	r25, 0x01	; 1
 bba:	eb e3       	ldi	r30, 0x3B	; 59
 bbc:	f1 e0       	ldi	r31, 0x01	; 1
 bbe:	01 90       	ld	r0, Z+
 bc0:	0d 92       	st	X+, r0
 bc2:	01 97       	sbiw	r24, 0x01	; 1
 bc4:	e1 f7       	brne	.-8      	; 0xbbe <main+0x20a>
 bc6:	ce 01       	movw	r24, r28
 bc8:	87 54       	subi	r24, 0x47	; 71
 bca:	9a 4f       	sbci	r25, 0xFA	; 250
 bcc:	c4 dd       	rcall	.-1144   	; 0x756 <initExplosions>
 bce:	8a e6       	ldi	r24, 0x6A	; 106
 bd0:	91 e0       	ldi	r25, 0x01	; 1
 bd2:	fe 01       	movw	r30, r28
 bd4:	e7 54       	subi	r30, 0x47	; 71
 bd6:	fa 4f       	sbci	r31, 0xFA	; 250
 bd8:	ab e3       	ldi	r26, 0x3B	; 59
 bda:	b1 e0       	ldi	r27, 0x01	; 1
 bdc:	01 90       	ld	r0, Z+
 bde:	0d 92       	st	X+, r0
 be0:	01 97       	sbiw	r24, 0x01	; 1
 be2:	e1 f7       	brne	.-8      	; 0xbdc <main+0x228>
 be4:	8a e6       	ldi	r24, 0x6A	; 106
 be6:	91 e0       	ldi	r25, 0x01	; 1
 be8:	eb e3       	ldi	r30, 0x3B	; 59
 bea:	f1 e0       	ldi	r31, 0x01	; 1
 bec:	de 01       	movw	r26, r28
 bee:	a1 5c       	subi	r26, 0xC1	; 193
 bf0:	bb 4f       	sbci	r27, 0xFB	; 251
 bf2:	01 90       	ld	r0, Z+
 bf4:	0d 92       	st	X+, r0
 bf6:	01 97       	sbiw	r24, 0x01	; 1
 bf8:	e1 f7       	brne	.-8      	; 0xbf2 <main+0x23e>
 bfa:	03 ea       	ldi	r16, 0xA3	; 163
 bfc:	12 e0       	ldi	r17, 0x02	; 2
 bfe:	d8 01       	movw	r26, r16
 c00:	2c 91       	ld	r18, X
 c02:	88 e0       	ldi	r24, 0x08	; 8
 c04:	e3 e3       	ldi	r30, 0x33	; 51
 c06:	f1 e0       	ldi	r31, 0x01	; 1
 c08:	de 01       	movw	r26, r28
 c0a:	af 54       	subi	r26, 0x4F	; 79
 c0c:	ba 4f       	sbci	r27, 0xFA	; 250
 c0e:	01 90       	ld	r0, Z+
 c10:	0d 92       	st	X+, r0
 c12:	8a 95       	dec	r24
 c14:	e1 f7       	brne	.-8      	; 0xc0e <main+0x25a>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned short a, unsigned short b) {
	explosions.matricies[explosions.index] = matrix;
 c16:	82 2f       	mov	r24, r18
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	af e3       	ldi	r26, 0x3F	; 63
 c1c:	b4 e0       	ldi	r27, 0x04	; 4
 c1e:	ac 0f       	add	r26, r28
 c20:	bd 1f       	adc	r27, r29
 c22:	e8 e0       	ldi	r30, 0x08	; 8
 c24:	2e 9f       	mul	r18, r30
 c26:	a0 0d       	add	r26, r0
 c28:	b1 1d       	adc	r27, r1
 c2a:	11 24       	eor	r1, r1
 c2c:	38 e0       	ldi	r19, 0x08	; 8
 c2e:	fe 01       	movw	r30, r28
 c30:	ef 54       	subi	r30, 0x4F	; 79
 c32:	fa 4f       	sbci	r31, 0xFA	; 250
 c34:	01 90       	ld	r0, Z+
 c36:	0d 92       	st	X+, r0
 c38:	3a 95       	dec	r19
 c3a:	e1 f7       	brne	.-8      	; 0xc34 <main+0x280>
	explosions.timeBetween[explosions.index] = a;
 c3c:	fc 01       	movw	r30, r24
 c3e:	e8 58       	subi	r30, 0x88	; 136
 c40:	ff 4f       	sbci	r31, 0xFF	; 255
 c42:	ee 0f       	add	r30, r30
 c44:	ff 1f       	adc	r31, r31
 c46:	4f e3       	ldi	r20, 0x3F	; 63
 c48:	54 e0       	ldi	r21, 0x04	; 4
 c4a:	4c 0f       	add	r20, r28
 c4c:	5d 1f       	adc	r21, r29
 c4e:	e4 0f       	add	r30, r20
 c50:	f5 1f       	adc	r31, r21
 c52:	6e e5       	ldi	r22, 0x5E	; 94
 c54:	71 e0       	ldi	r23, 0x01	; 1
 c56:	71 83       	std	Z+1, r23	; 0x01
 c58:	60 83       	st	Z, r22
	explosions.timeDuration[explosions.index] = b;
 c5a:	fc 01       	movw	r30, r24
 c5c:	ea 56       	subi	r30, 0x6A	; 106
 c5e:	ff 4f       	sbci	r31, 0xFF	; 255
 c60:	ee 0f       	add	r30, r30
 c62:	ff 1f       	adc	r31, r31
 c64:	e4 0f       	add	r30, r20
 c66:	f5 1f       	adc	r31, r21
 c68:	48 ec       	ldi	r20, 0xC8	; 200
 c6a:	50 e0       	ldi	r21, 0x00	; 0
 c6c:	51 83       	std	Z+1, r21	; 0x01
 c6e:	40 83       	st	Z, r20
	explosions.index++;
 c70:	2f 5f       	subi	r18, 0xFF	; 255
	
	return explosions;
 c72:	c9 55       	subi	r28, 0x59	; 89
 c74:	da 4f       	sbci	r29, 0xFA	; 250
 c76:	28 83       	st	Y, r18
 c78:	c7 5a       	subi	r28, 0xA7	; 167
 c7a:	d5 40       	sbci	r29, 0x05	; 5
 c7c:	8a e6       	ldi	r24, 0x6A	; 106
 c7e:	91 e0       	ldi	r25, 0x01	; 1
 c80:	fe 01       	movw	r30, r28
 c82:	e1 5c       	subi	r30, 0xC1	; 193
 c84:	fb 4f       	sbci	r31, 0xFB	; 251
 c86:	de 01       	movw	r26, r28
 c88:	ab 52       	subi	r26, 0x2B	; 43
 c8a:	bd 4f       	sbci	r27, 0xFD	; 253
 c8c:	01 90       	ld	r0, Z+
 c8e:	0d 92       	st	X+, r0
 c90:	01 97       	sbiw	r24, 0x01	; 1
 c92:	e1 f7       	brne	.-8      	; 0xc8c <main+0x2d8>
	explosions = pushExplosion(explosions, matrix, 350, 200);
 c94:	c3 5c       	subi	r28, 0xC3	; 195
 c96:	db 4f       	sbci	r29, 0xFB	; 251
 c98:	28 83       	st	Y, r18
 c9a:	cd 53       	subi	r28, 0x3D	; 61
 c9c:	d4 40       	sbci	r29, 0x04	; 4
 c9e:	8a e6       	ldi	r24, 0x6A	; 106
 ca0:	91 e0       	ldi	r25, 0x01	; 1
 ca2:	fe 01       	movw	r30, r28
 ca4:	eb 52       	subi	r30, 0x2B	; 43
 ca6:	fd 4f       	sbci	r31, 0xFD	; 253
 ca8:	ab e3       	ldi	r26, 0x3B	; 59
 caa:	b1 e0       	ldi	r27, 0x01	; 1
 cac:	01 90       	ld	r0, Z+
 cae:	0d 92       	st	X+, r0
 cb0:	01 97       	sbiw	r24, 0x01	; 1
 cb2:	e1 f7       	brne	.-8      	; 0xcac <main+0x2f8>
 cb4:	8a e6       	ldi	r24, 0x6A	; 106
 cb6:	91 e0       	ldi	r25, 0x01	; 1
 cb8:	eb e3       	ldi	r30, 0x3B	; 59
 cba:	f1 e0       	ldi	r31, 0x01	; 1
 cbc:	de 01       	movw	r26, r28
 cbe:	a5 59       	subi	r26, 0x95	; 149
 cc0:	be 4f       	sbci	r27, 0xFE	; 254
 cc2:	01 90       	ld	r0, Z+
 cc4:	0d 92       	st	X+, r0
 cc6:	01 97       	sbiw	r24, 0x01	; 1
 cc8:	e1 f7       	brne	.-8      	; 0xcc2 <main+0x30e>
 cca:	d8 01       	movw	r26, r16
 ccc:	2c 91       	ld	r18, X
 cce:	88 e0       	ldi	r24, 0x08	; 8
 cd0:	ef ea       	ldi	r30, 0xAF	; 175
 cd2:	f2 e0       	ldi	r31, 0x02	; 2
 cd4:	de 01       	movw	r26, r28
 cd6:	a7 55       	subi	r26, 0x57	; 87
 cd8:	ba 4f       	sbci	r27, 0xFA	; 250
 cda:	01 90       	ld	r0, Z+
 cdc:	0d 92       	st	X+, r0
 cde:	8a 95       	dec	r24
 ce0:	e1 f7       	brne	.-8      	; 0xcda <main+0x326>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned short a, unsigned short b) {
	explosions.matricies[explosions.index] = matrix;
 ce2:	82 2f       	mov	r24, r18
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	ab e6       	ldi	r26, 0x6B	; 107
 ce8:	b1 e0       	ldi	r27, 0x01	; 1
 cea:	ac 0f       	add	r26, r28
 cec:	bd 1f       	adc	r27, r29
 cee:	e8 e0       	ldi	r30, 0x08	; 8
 cf0:	2e 9f       	mul	r18, r30
 cf2:	a0 0d       	add	r26, r0
 cf4:	b1 1d       	adc	r27, r1
 cf6:	11 24       	eor	r1, r1
 cf8:	38 e0       	ldi	r19, 0x08	; 8
 cfa:	fe 01       	movw	r30, r28
 cfc:	e7 55       	subi	r30, 0x57	; 87
 cfe:	fa 4f       	sbci	r31, 0xFA	; 250
 d00:	01 90       	ld	r0, Z+
 d02:	0d 92       	st	X+, r0
 d04:	3a 95       	dec	r19
 d06:	e1 f7       	brne	.-8      	; 0xd00 <main+0x34c>
	explosions.timeBetween[explosions.index] = a;
 d08:	fc 01       	movw	r30, r24
 d0a:	e8 58       	subi	r30, 0x88	; 136
 d0c:	ff 4f       	sbci	r31, 0xFF	; 255
 d0e:	ee 0f       	add	r30, r30
 d10:	ff 1f       	adc	r31, r31
 d12:	ab e6       	ldi	r26, 0x6B	; 107
 d14:	b1 e0       	ldi	r27, 0x01	; 1
 d16:	ac 0f       	add	r26, r28
 d18:	bd 1f       	adc	r27, r29
 d1a:	ea 0f       	add	r30, r26
 d1c:	fb 1f       	adc	r31, r27
 d1e:	71 83       	std	Z+1, r23	; 0x01
 d20:	60 83       	st	Z, r22
	explosions.timeDuration[explosions.index] = b;
 d22:	fc 01       	movw	r30, r24
 d24:	ea 56       	subi	r30, 0x6A	; 106
 d26:	ff 4f       	sbci	r31, 0xFF	; 255
 d28:	ee 0f       	add	r30, r30
 d2a:	ff 1f       	adc	r31, r31
 d2c:	ea 0f       	add	r30, r26
 d2e:	fb 1f       	adc	r31, r27
 d30:	51 83       	std	Z+1, r21	; 0x01
 d32:	40 83       	st	Z, r20
	explosions.index++;
 d34:	2f 5f       	subi	r18, 0xFF	; 255
	
	return explosions;
 d36:	cd 52       	subi	r28, 0x2D	; 45
 d38:	dd 4f       	sbci	r29, 0xFD	; 253
 d3a:	28 83       	st	Y, r18
 d3c:	c3 5d       	subi	r28, 0xD3	; 211
 d3e:	d2 40       	sbci	r29, 0x02	; 2
 d40:	8a e6       	ldi	r24, 0x6A	; 106
 d42:	91 e0       	ldi	r25, 0x01	; 1
 d44:	fd 01       	movw	r30, r26
 d46:	aa 56       	subi	r26, 0x6A	; 106
 d48:	b1 40       	sbci	r27, 0x01	; 1
 d4a:	01 90       	ld	r0, Z+
 d4c:	0d 92       	st	X+, r0
 d4e:	01 97       	sbiw	r24, 0x01	; 1
 d50:	e1 f7       	brne	.-8      	; 0xd4a <main+0x396>
	explosions = pushExplosion(explosions, matrix2, 350, 200);
 d52:	c7 59       	subi	r28, 0x97	; 151
 d54:	de 4f       	sbci	r29, 0xFE	; 254
 d56:	28 83       	st	Y, r18
 d58:	c9 56       	subi	r28, 0x69	; 105
 d5a:	d1 40       	sbci	r29, 0x01	; 1
 d5c:	8a e6       	ldi	r24, 0x6A	; 106
 d5e:	91 e0       	ldi	r25, 0x01	; 1
 d60:	fe 01       	movw	r30, r28
 d62:	31 96       	adiw	r30, 0x01	; 1
 d64:	ab e3       	ldi	r26, 0x3B	; 59
 d66:	b1 e0       	ldi	r27, 0x01	; 1
 d68:	01 90       	ld	r0, Z+
 d6a:	0d 92       	st	X+, r0
 d6c:	01 97       	sbiw	r24, 0x01	; 1
 d6e:	e1 f7       	brne	.-8      	; 0xd68 <main+0x3b4>
	
	userMatrix = initSingleUserMatrix(userMatrix);
 d70:	0f b6       	in	r0, 0x3f	; 63
 d72:	f8 94       	cli
 d74:	de bf       	out	0x3e, r29	; 62
 d76:	0f be       	out	0x3f, r0	; 63
 d78:	cd bf       	out	0x3d, r28	; 61
 d7a:	e0 90 a5 02 	lds	r14, 0x02A5
 d7e:	f0 90 a6 02 	lds	r15, 0x02A6
 d82:	00 91 a7 02 	lds	r16, 0x02A7
 d86:	10 91 a8 02 	lds	r17, 0x02A8
 d8a:	20 91 a9 02 	lds	r18, 0x02A9
 d8e:	30 91 aa 02 	lds	r19, 0x02AA
 d92:	40 91 ab 02 	lds	r20, 0x02AB
 d96:	50 91 ac 02 	lds	r21, 0x02AC
 d9a:	60 91 ad 02 	lds	r22, 0x02AD
 d9e:	70 91 ae 02 	lds	r23, 0x02AE
 da2:	ce 01       	movw	r24, r28
 da4:	87 54       	subi	r24, 0x47	; 71
 da6:	9a 4f       	sbci	r25, 0xFA	; 250
 da8:	e4 da       	rcall	.-2616   	; 0x372 <initSingleUserMatrix>
 daa:	8a e0       	ldi	r24, 0x0A	; 10
 dac:	fe 01       	movw	r30, r28
 dae:	e7 54       	subi	r30, 0x47	; 71
 db0:	fa 4f       	sbci	r31, 0xFA	; 250
 db2:	a5 ea       	ldi	r26, 0xA5	; 165
 db4:	b2 e0       	ldi	r27, 0x02	; 2
 db6:	01 90       	ld	r0, Z+
 db8:	0d 92       	st	X+, r0
 dba:	8a 95       	dec	r24
 dbc:	e1 f7       	brne	.-8      	; 0xdb6 <main+0x402>
	
	while (1) {
		explosions = ExpTick(explosions);
 dbe:	0a e6       	ldi	r16, 0x6A	; 106
 dc0:	11 e0       	ldi	r17, 0x01	; 1
 dc2:	4d b7       	in	r20, 0x3d	; 61
 dc4:	5e b7       	in	r21, 0x3e	; 62
 dc6:	4a 56       	subi	r20, 0x6A	; 106
 dc8:	51 40       	sbci	r21, 0x01	; 1
 dca:	0f b6       	in	r0, 0x3f	; 63
 dcc:	f8 94       	cli
 dce:	5e bf       	out	0x3e, r21	; 62
 dd0:	0f be       	out	0x3f, r0	; 63
 dd2:	4d bf       	out	0x3d, r20	; 61
 dd4:	ad b7       	in	r26, 0x3d	; 61
 dd6:	be b7       	in	r27, 0x3e	; 62
 dd8:	11 96       	adiw	r26, 0x01	; 1
 dda:	eb e3       	ldi	r30, 0x3B	; 59
 ddc:	f1 e0       	ldi	r31, 0x01	; 1
 dde:	c8 01       	movw	r24, r16
 de0:	01 90       	ld	r0, Z+
 de2:	0d 92       	st	X+, r0
 de4:	01 97       	sbiw	r24, 0x01	; 1
 de6:	e1 f7       	brne	.-8      	; 0xde0 <main+0x42c>
 de8:	ce 01       	movw	r24, r28
 dea:	87 54       	subi	r24, 0x47	; 71
 dec:	9a 4f       	sbci	r25, 0xFA	; 250
 dee:	2c dd       	rcall	.-1448   	; 0x848 <ExpTick>
 df0:	fe 01       	movw	r30, r28
 df2:	e7 54       	subi	r30, 0x47	; 71
 df4:	fa 4f       	sbci	r31, 0xFA	; 250
 df6:	ab e3       	ldi	r26, 0x3B	; 59
 df8:	b1 e0       	ldi	r27, 0x01	; 1
 dfa:	c8 01       	movw	r24, r16
 dfc:	01 90       	ld	r0, Z+
 dfe:	0d 92       	st	X+, r0
 e00:	01 97       	sbiw	r24, 0x01	; 1
 e02:	e1 f7       	brne	.-8      	; 0xdfc <main+0x448>
		DeathTick();
 e04:	0f b6       	in	r0, 0x3f	; 63
 e06:	f8 94       	cli
 e08:	de bf       	out	0x3e, r29	; 62
 e0a:	0f be       	out	0x3f, r0	; 63
 e0c:	cd bf       	out	0x3d, r28	; 61
 e0e:	c2 dc       	rcall	.-1660   	; 0x794 <DeathTick>
		d3_setMatrixColor(userMatrix.m, GREEN);
 e10:	62 e0       	ldi	r22, 0x02	; 2
 e12:	85 ea       	ldi	r24, 0xA5	; 165
 e14:	92 e0       	ldi	r25, 0x02	; 2
 e16:	60 db       	rcall	.-2368   	; 0x4d8 <d3_setMatrixColor>
	}
 e18:	d4 cf       	rjmp	.-88     	; 0xdc2 <main+0x40e>

00000e1a <_exit>:
 e1a:	f8 94       	cli

00000e1c <__stop_program>:
 e1c:	ff cf       	rjmp	.-2      	; 0xe1c <__stop_program>
