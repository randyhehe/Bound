
scbound.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001944  000019d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001944  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a6  00800104  00800104  000019dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001529  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000441  00000000  00000000  0000306d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ec4  00000000  00000000  000034ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00004374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000471  00000000  00000000  000046d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012c8  00000000  00000000  00004b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00005e11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	00 c1       	rjmp	.+512    	; 0x236 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e4       	ldi	r30, 0x44	; 68
      a0:	f9 e1       	ldi	r31, 0x19	; 25
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 30       	cpi	r26, 0x04	; 4
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a4 e0       	ldi	r26, 0x04	; 4
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 3a       	cpi	r26, 0xAA	; 170
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	75 d4       	rcall	.+2282   	; 0x9ae <main>
      c4:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <ETIMERTick>:
	}
	
	// Display explosion
	d3_setMatrixColor(explosions.matricies[explosions.displayIndex].m, RED);
	explosions.displayIndex++;
}
      ca:	00 97       	sbiw	r24, 0x00	; 0
      cc:	21 f0       	breq	.+8      	; 0xd6 <ETIMERTick+0xc>
      ce:	81 30       	cpi	r24, 0x01	; 1
      d0:	91 05       	cpc	r25, r1
      d2:	49 f0       	breq	.+18     	; 0xe6 <ETIMERTick+0x1c>
      d4:	05 c0       	rjmp	.+10     	; 0xe0 <ETIMERTick+0x16>
      d6:	10 92 05 01 	sts	0x0105, r1
      da:	10 92 04 01 	sts	0x0104, r1
      de:	03 c0       	rjmp	.+6      	; 0xe6 <ETIMERTick+0x1c>
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	91 05       	cpc	r25, r1
      e4:	f1 f4       	brne	.+60     	; 0x122 <ETIMERTick+0x58>
      e6:	80 91 04 01 	lds	r24, 0x0104
      ea:	90 91 05 01 	lds	r25, 0x0105
      ee:	01 96       	adiw	r24, 0x01	; 1
      f0:	90 93 05 01 	sts	0x0105, r25
      f4:	80 93 04 01 	sts	0x0104, r24
      f8:	80 91 08 01 	lds	r24, 0x0108
      fc:	90 91 09 01 	lds	r25, 0x0109
     100:	a0 91 0a 01 	lds	r26, 0x010A
     104:	b0 91 0b 01 	lds	r27, 0x010B
     108:	01 96       	adiw	r24, 0x01	; 1
     10a:	a1 1d       	adc	r26, r1
     10c:	b1 1d       	adc	r27, r1
     10e:	80 93 08 01 	sts	0x0108, r24
     112:	90 93 09 01 	sts	0x0109, r25
     116:	a0 93 0a 01 	sts	0x010A, r26
     11a:	b0 93 0b 01 	sts	0x010B, r27
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	08 95       	ret

00000124 <initTasks>:
     124:	e0 e1       	ldi	r30, 0x10	; 16
     126:	f1 e0       	ldi	r31, 0x01	; 1
     128:	11 82       	std	Z+1, r1	; 0x01
     12a:	10 82       	st	Z, r1
     12c:	84 e1       	ldi	r24, 0x14	; 20
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	82 83       	std	Z+2, r24	; 0x02
     136:	93 83       	std	Z+3, r25	; 0x03
     138:	a4 83       	std	Z+4, r26	; 0x04
     13a:	b5 83       	std	Z+5, r27	; 0x05
     13c:	86 83       	std	Z+6, r24	; 0x06
     13e:	97 83       	std	Z+7, r25	; 0x07
     140:	a0 87       	std	Z+8, r26	; 0x08
     142:	b1 87       	std	Z+9, r27	; 0x09
     144:	8c ec       	ldi	r24, 0xCC	; 204
     146:	92 e0       	ldi	r25, 0x02	; 2
     148:	93 87       	std	Z+11, r25	; 0x0b
     14a:	82 87       	std	Z+10, r24	; 0x0a
     14c:	15 86       	std	Z+13, r1	; 0x0d
     14e:	14 86       	std	Z+12, r1	; 0x0c
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	a0 e0       	ldi	r26, 0x00	; 0
     156:	b0 e0       	ldi	r27, 0x00	; 0
     158:	86 87       	std	Z+14, r24	; 0x0e
     15a:	97 87       	std	Z+15, r25	; 0x0f
     15c:	a0 8b       	std	Z+16, r26	; 0x10
     15e:	b1 8b       	std	Z+17, r27	; 0x11
     160:	82 8b       	std	Z+18, r24	; 0x12
     162:	93 8b       	std	Z+19, r25	; 0x13
     164:	a4 8b       	std	Z+20, r26	; 0x14
     166:	b5 8b       	std	Z+21, r27	; 0x15
     168:	85 e6       	ldi	r24, 0x65	; 101
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	97 8b       	std	Z+23, r25	; 0x17
     16e:	86 8b       	std	Z+22, r24	; 0x16
     170:	08 95       	ret

00000172 <TimerOn>:
     172:	8b e0       	ldi	r24, 0x0B	; 11
     174:	80 93 81 00 	sts	0x0081, r24
     178:	8d e7       	ldi	r24, 0x7D	; 125
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
     184:	82 e0       	ldi	r24, 0x02	; 2
     186:	80 93 6f 00 	sts	0x006F, r24
     18a:	10 92 85 00 	sts	0x0085, r1
     18e:	10 92 84 00 	sts	0x0084, r1
     192:	80 91 00 01 	lds	r24, 0x0100
     196:	90 91 01 01 	lds	r25, 0x0101
     19a:	a0 91 02 01 	lds	r26, 0x0102
     19e:	b0 91 03 01 	lds	r27, 0x0103
     1a2:	80 93 0c 01 	sts	0x010C, r24
     1a6:	90 93 0d 01 	sts	0x010D, r25
     1aa:	a0 93 0e 01 	sts	0x010E, r26
     1ae:	b0 93 0f 01 	sts	0x010F, r27
     1b2:	8f b7       	in	r24, 0x3f	; 63
     1b4:	80 68       	ori	r24, 0x80	; 128
     1b6:	8f bf       	out	0x3f, r24	; 63
     1b8:	08 95       	ret

000001ba <TimerISR>:
     1ba:	ef 92       	push	r14
     1bc:	ff 92       	push	r15
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	c0 e1       	ldi	r28, 0x10	; 16
     1c8:	d1 e0       	ldi	r29, 0x01	; 1
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f8 e2       	ldi	r31, 0x28	; 40
     1ce:	ef 2e       	mov	r14, r31
     1d0:	f1 e0       	ldi	r31, 0x01	; 1
     1d2:	ff 2e       	mov	r15, r31
     1d4:	f0 2d       	mov	r31, r0
     1d6:	8e 01       	movw	r16, r28
     1d8:	4e 81       	ldd	r20, Y+6	; 0x06
     1da:	5f 81       	ldd	r21, Y+7	; 0x07
     1dc:	68 85       	ldd	r22, Y+8	; 0x08
     1de:	79 85       	ldd	r23, Y+9	; 0x09
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	9b 81       	ldd	r25, Y+3	; 0x03
     1e4:	ac 81       	ldd	r26, Y+4	; 0x04
     1e6:	bd 81       	ldd	r27, Y+5	; 0x05
     1e8:	48 17       	cp	r20, r24
     1ea:	59 07       	cpc	r21, r25
     1ec:	6a 07       	cpc	r22, r26
     1ee:	7b 07       	cpc	r23, r27
     1f0:	58 f0       	brcs	.+22     	; 0x208 <TimerISR+0x4e>
     1f2:	ea 85       	ldd	r30, Y+10	; 0x0a
     1f4:	fb 85       	ldd	r31, Y+11	; 0x0b
     1f6:	88 81       	ld	r24, Y
     1f8:	99 81       	ldd	r25, Y+1	; 0x01
     1fa:	09 95       	icall
     1fc:	99 83       	std	Y+1, r25	; 0x01
     1fe:	88 83       	st	Y, r24
     200:	1e 82       	std	Y+6, r1	; 0x06
     202:	1f 82       	std	Y+7, r1	; 0x07
     204:	18 86       	std	Y+8, r1	; 0x08
     206:	19 86       	std	Y+9, r1	; 0x09
     208:	f8 01       	movw	r30, r16
     20a:	86 81       	ldd	r24, Z+6	; 0x06
     20c:	97 81       	ldd	r25, Z+7	; 0x07
     20e:	a0 85       	ldd	r26, Z+8	; 0x08
     210:	b1 85       	ldd	r27, Z+9	; 0x09
     212:	01 96       	adiw	r24, 0x01	; 1
     214:	a1 1d       	adc	r26, r1
     216:	b1 1d       	adc	r27, r1
     218:	86 83       	std	Z+6, r24	; 0x06
     21a:	97 83       	std	Z+7, r25	; 0x07
     21c:	a0 87       	std	Z+8, r26	; 0x08
     21e:	b1 87       	std	Z+9, r27	; 0x09
     220:	2c 96       	adiw	r28, 0x0c	; 12
     222:	ce 15       	cp	r28, r14
     224:	df 05       	cpc	r29, r15
     226:	b9 f6       	brne	.-82     	; 0x1d6 <TimerISR+0x1c>
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	08 95       	ret

00000236 <__vector_13>:
     236:	1f 92       	push	r1
     238:	0f 92       	push	r0
     23a:	0f b6       	in	r0, 0x3f	; 63
     23c:	0f 92       	push	r0
     23e:	11 24       	eor	r1, r1
     240:	0b b6       	in	r0, 0x3b	; 59
     242:	0f 92       	push	r0
     244:	2f 93       	push	r18
     246:	3f 93       	push	r19
     248:	4f 93       	push	r20
     24a:	5f 93       	push	r21
     24c:	6f 93       	push	r22
     24e:	7f 93       	push	r23
     250:	8f 93       	push	r24
     252:	9f 93       	push	r25
     254:	af 93       	push	r26
     256:	bf 93       	push	r27
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31
     25c:	80 91 0c 01 	lds	r24, 0x010C
     260:	90 91 0d 01 	lds	r25, 0x010D
     264:	a0 91 0e 01 	lds	r26, 0x010E
     268:	b0 91 0f 01 	lds	r27, 0x010F
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	a1 09       	sbc	r26, r1
     270:	b1 09       	sbc	r27, r1
     272:	80 93 0c 01 	sts	0x010C, r24
     276:	90 93 0d 01 	sts	0x010D, r25
     27a:	a0 93 0e 01 	sts	0x010E, r26
     27e:	b0 93 0f 01 	sts	0x010F, r27
     282:	89 2b       	or	r24, r25
     284:	8a 2b       	or	r24, r26
     286:	8b 2b       	or	r24, r27
     288:	89 f4       	brne	.+34     	; 0x2ac <__vector_13+0x76>
     28a:	97 df       	rcall	.-210    	; 0x1ba <TimerISR>
     28c:	80 91 00 01 	lds	r24, 0x0100
     290:	90 91 01 01 	lds	r25, 0x0101
     294:	a0 91 02 01 	lds	r26, 0x0102
     298:	b0 91 03 01 	lds	r27, 0x0103
     29c:	80 93 0c 01 	sts	0x010C, r24
     2a0:	90 93 0d 01 	sts	0x010D, r25
     2a4:	a0 93 0e 01 	sts	0x010E, r26
     2a8:	b0 93 0f 01 	sts	0x010F, r27
     2ac:	ff 91       	pop	r31
     2ae:	ef 91       	pop	r30
     2b0:	bf 91       	pop	r27
     2b2:	af 91       	pop	r26
     2b4:	9f 91       	pop	r25
     2b6:	8f 91       	pop	r24
     2b8:	7f 91       	pop	r23
     2ba:	6f 91       	pop	r22
     2bc:	5f 91       	pop	r21
     2be:	4f 91       	pop	r20
     2c0:	3f 91       	pop	r19
     2c2:	2f 91       	pop	r18
     2c4:	0f 90       	pop	r0
     2c6:	0b be       	out	0x3b, r0	; 59
     2c8:	0f 90       	pop	r0
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	0f 90       	pop	r0
     2ce:	1f 90       	pop	r1
     2d0:	18 95       	reti

000002d2 <clearSingleMatrix>:
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	60 97       	sbiw	r28, 0x10	; 16
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	de bf       	out	0x3e, r29	; 62
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	cd bf       	out	0x3d, r28	; 61
     2e6:	29 87       	std	Y+9, r18	; 0x09
     2e8:	3a 87       	std	Y+10, r19	; 0x0a
     2ea:	4b 87       	std	Y+11, r20	; 0x0b
     2ec:	5c 87       	std	Y+12, r21	; 0x0c
     2ee:	6d 87       	std	Y+13, r22	; 0x0d
     2f0:	7e 87       	std	Y+14, r23	; 0x0e
     2f2:	8f 87       	std	Y+15, r24	; 0x0f
     2f4:	98 8b       	std	Y+16, r25	; 0x10
     2f6:	fe 01       	movw	r30, r28
     2f8:	39 96       	adiw	r30, 0x09	; 9
     2fa:	9e 01       	movw	r18, r28
     2fc:	2f 5e       	subi	r18, 0xEF	; 239
     2fe:	3f 4f       	sbci	r19, 0xFF	; 255
     300:	8f ef       	ldi	r24, 0xFF	; 255
     302:	81 93       	st	Z+, r24
     304:	e2 17       	cp	r30, r18
     306:	f3 07       	cpc	r31, r19
     308:	e1 f7       	brne	.-8      	; 0x302 <clearSingleMatrix+0x30>
     30a:	88 e0       	ldi	r24, 0x08	; 8
     30c:	fe 01       	movw	r30, r28
     30e:	39 96       	adiw	r30, 0x09	; 9
     310:	de 01       	movw	r26, r28
     312:	11 96       	adiw	r26, 0x01	; 1
     314:	01 90       	ld	r0, Z+
     316:	0d 92       	st	X+, r0
     318:	8a 95       	dec	r24
     31a:	e1 f7       	brne	.-8      	; 0x314 <clearSingleMatrix+0x42>
     31c:	29 81       	ldd	r18, Y+1	; 0x01
     31e:	3a 81       	ldd	r19, Y+2	; 0x02
     320:	4b 81       	ldd	r20, Y+3	; 0x03
     322:	5c 81       	ldd	r21, Y+4	; 0x04
     324:	6d 81       	ldd	r22, Y+5	; 0x05
     326:	7e 81       	ldd	r23, Y+6	; 0x06
     328:	8f 81       	ldd	r24, Y+7	; 0x07
     32a:	98 85       	ldd	r25, Y+8	; 0x08
     32c:	60 96       	adiw	r28, 0x10	; 16
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	de bf       	out	0x3e, r29	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	cd bf       	out	0x3d, r28	; 61
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <initSingleUserMatrix>:
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	2a 97       	sbiw	r28, 0x0a	; 10
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	f8 94       	cli
     354:	de bf       	out	0x3e, r29	; 62
     356:	0f be       	out	0x3f, r0	; 63
     358:	cd bf       	out	0x3d, r28	; 61
     35a:	bc 01       	movw	r22, r24
     35c:	e9 82       	std	Y+1, r14	; 0x01
     35e:	fa 82       	std	Y+2, r15	; 0x02
     360:	0b 83       	std	Y+3, r16	; 0x03
     362:	1c 83       	std	Y+4, r17	; 0x04
     364:	2d 83       	std	Y+5, r18	; 0x05
     366:	3e 83       	std	Y+6, r19	; 0x06
     368:	4f 83       	std	Y+7, r20	; 0x07
     36a:	58 87       	std	Y+8, r21	; 0x08
     36c:	fe 01       	movw	r30, r28
     36e:	31 96       	adiw	r30, 0x01	; 1
     370:	9e 01       	movw	r18, r28
     372:	27 5f       	subi	r18, 0xF7	; 247
     374:	3f 4f       	sbci	r19, 0xFF	; 255
     376:	9f ef       	ldi	r25, 0xFF	; 255
     378:	91 93       	st	Z+, r25
     37a:	e2 17       	cp	r30, r18
     37c:	f3 07       	cpc	r31, r19
     37e:	e1 f7       	brne	.-8      	; 0x378 <initSingleUserMatrix+0x3a>
     380:	99 81       	ldd	r25, Y+1	; 0x01
     382:	97 7f       	andi	r25, 0xF7	; 247
     384:	99 83       	std	Y+1, r25	; 0x01
     386:	19 86       	std	Y+9, r1	; 0x09
     388:	83 e0       	ldi	r24, 0x03	; 3
     38a:	8a 87       	std	Y+10, r24	; 0x0a
     38c:	8a e0       	ldi	r24, 0x0A	; 10
     38e:	fe 01       	movw	r30, r28
     390:	31 96       	adiw	r30, 0x01	; 1
     392:	db 01       	movw	r26, r22
     394:	01 90       	ld	r0, Z+
     396:	0d 92       	st	X+, r0
     398:	8a 95       	dec	r24
     39a:	e1 f7       	brne	.-8      	; 0x394 <initSingleUserMatrix+0x56>
     39c:	cb 01       	movw	r24, r22
     39e:	2a 96       	adiw	r28, 0x0a	; 10
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	cd bf       	out	0x3d, r28	; 61
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	08 95       	ret

000003b8 <shiftSR>:
     3b8:	85 b9       	out	0x05, r24	; 5
     3ba:	29 9a       	sbi	0x05, 1	; 5
     3bc:	15 b8       	out	0x05, r1	; 5
     3be:	08 95       	ret

000003c0 <shiftWhole>:
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	e1 e0       	ldi	r30, 0x01	; 1
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	71 e0       	ldi	r23, 0x01	; 1
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	af 01       	movw	r20, r30
     3ce:	02 2e       	mov	r0, r18
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <shiftWhole+0x16>
     3d2:	44 0f       	add	r20, r20
     3d4:	55 1f       	adc	r21, r21
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <shiftWhole+0x12>
     3da:	48 23       	and	r20, r24
     3dc:	97 2f       	mov	r25, r23
     3de:	09 f4       	brne	.+2      	; 0x3e2 <shiftWhole+0x22>
     3e0:	96 2f       	mov	r25, r22
     3e2:	95 b9       	out	0x05, r25	; 5
     3e4:	29 9a       	sbi	0x05, 1	; 5
     3e6:	65 b9       	out	0x05, r22	; 5
     3e8:	2f 5f       	subi	r18, 0xFF	; 255
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
     3ec:	28 30       	cpi	r18, 0x08	; 8
     3ee:	31 05       	cpc	r19, r1
     3f0:	69 f7       	brne	.-38     	; 0x3cc <shiftWhole+0xc>
     3f2:	84 e0       	ldi	r24, 0x04	; 4
     3f4:	85 b9       	out	0x05, r24	; 5
     3f6:	08 95       	ret

000003f8 <clearSR>:
     3f8:	cf 93       	push	r28
     3fa:	c8 e0       	ldi	r28, 0x08	; 8
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	dc df       	rcall	.-72     	; 0x3b8 <shiftSR>
     400:	c1 50       	subi	r28, 0x01	; 1
     402:	e1 f7       	brne	.-8      	; 0x3fc <clearSR+0x4>
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	85 b9       	out	0x05, r24	; 5
     408:	cf 91       	pop	r28
     40a:	08 95       	ret

0000040c <d3_clearSR>:
     40c:	f5 df       	rcall	.-22     	; 0x3f8 <clearSR>
     40e:	f4 df       	rcall	.-24     	; 0x3f8 <clearSR>
     410:	f3 cf       	rjmp	.-26     	; 0x3f8 <clearSR>
     412:	08 95       	ret

00000414 <d3_setRowMatrixColor>:
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	18 2f       	mov	r17, r24
     41e:	c9 2f       	mov	r28, r25
     420:	06 2f       	mov	r16, r22
     422:	d4 2f       	mov	r29, r20
     424:	f3 df       	rcall	.-26     	; 0x40c <d3_clearSR>
     426:	51 e0       	ldi	r21, 0x01	; 1
     428:	01 c0       	rjmp	.+2      	; 0x42c <d3_setRowMatrixColor+0x18>
     42a:	55 0f       	add	r21, r21
     42c:	0a 95       	dec	r16
     42e:	ea f7       	brpl	.-6      	; 0x42a <d3_setRowMatrixColor+0x16>
     430:	e1 2f       	mov	r30, r17
     432:	fc 2f       	mov	r31, r28
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	c0 e0       	ldi	r28, 0x00	; 0
     43a:	a1 e0       	ldi	r26, 0x01	; 1
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	91 91       	ld	r25, Z+
     440:	95 23       	and	r25, r21
     442:	49 f0       	breq	.+18     	; 0x456 <d3_setRowMatrixColor+0x42>
     444:	cd 01       	movw	r24, r26
     446:	02 2e       	mov	r0, r18
     448:	02 c0       	rjmp	.+4      	; 0x44e <d3_setRowMatrixColor+0x3a>
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	0a 94       	dec	r0
     450:	e2 f7       	brpl	.-8      	; 0x44a <d3_setRowMatrixColor+0x36>
     452:	c8 2b       	or	r28, r24
     454:	09 c0       	rjmp	.+18     	; 0x468 <d3_setRowMatrixColor+0x54>
     456:	bd 01       	movw	r22, r26
     458:	02 2e       	mov	r0, r18
     45a:	02 c0       	rjmp	.+4      	; 0x460 <d3_setRowMatrixColor+0x4c>
     45c:	66 0f       	add	r22, r22
     45e:	77 1f       	adc	r23, r23
     460:	0a 94       	dec	r0
     462:	e2 f7       	brpl	.-8      	; 0x45c <d3_setRowMatrixColor+0x48>
     464:	60 95       	com	r22
     466:	c6 23       	and	r28, r22
     468:	2f 5f       	subi	r18, 0xFF	; 255
     46a:	3f 4f       	sbci	r19, 0xFF	; 255
     46c:	28 30       	cpi	r18, 0x08	; 8
     46e:	31 05       	cpc	r19, r1
     470:	31 f7       	brne	.-52     	; 0x43e <d3_setRowMatrixColor+0x2a>
     472:	d1 30       	cpi	r29, 0x01	; 1
     474:	71 f0       	breq	.+28     	; 0x492 <d3_setRowMatrixColor+0x7e>
     476:	18 f0       	brcs	.+6      	; 0x47e <d3_setRowMatrixColor+0x6a>
     478:	d2 30       	cpi	r29, 0x02	; 2
     47a:	31 f0       	breq	.+12     	; 0x488 <d3_setRowMatrixColor+0x74>
     47c:	0e c0       	rjmp	.+28     	; 0x49a <d3_setRowMatrixColor+0x86>
     47e:	bc df       	rcall	.-136    	; 0x3f8 <clearSR>
     480:	8c 2f       	mov	r24, r28
     482:	9e df       	rcall	.-196    	; 0x3c0 <shiftWhole>
     484:	b9 df       	rcall	.-142    	; 0x3f8 <clearSR>
     486:	09 c0       	rjmp	.+18     	; 0x49a <d3_setRowMatrixColor+0x86>
     488:	8c 2f       	mov	r24, r28
     48a:	9a df       	rcall	.-204    	; 0x3c0 <shiftWhole>
     48c:	b5 df       	rcall	.-150    	; 0x3f8 <clearSR>
     48e:	b4 df       	rcall	.-152    	; 0x3f8 <clearSR>
     490:	04 c0       	rjmp	.+8      	; 0x49a <d3_setRowMatrixColor+0x86>
     492:	b2 df       	rcall	.-156    	; 0x3f8 <clearSR>
     494:	b1 df       	rcall	.-158    	; 0x3f8 <clearSR>
     496:	8c 2f       	mov	r24, r28
     498:	93 df       	rcall	.-218    	; 0x3c0 <shiftWhole>
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	08 95       	ret

000004a4 <d3_setMatrixColor>:
     4a4:	cf 92       	push	r12
     4a6:	df 92       	push	r13
     4a8:	ff 92       	push	r15
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	6c 01       	movw	r12, r24
     4b4:	f6 2e       	mov	r15, r22
     4b6:	c0 e0       	ldi	r28, 0x00	; 0
     4b8:	d0 e0       	ldi	r29, 0x00	; 0
     4ba:	01 e0       	ldi	r16, 0x01	; 1
     4bc:	10 e0       	ldi	r17, 0x00	; 0
     4be:	98 01       	movw	r18, r16
     4c0:	0c 2e       	mov	r0, r28
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <d3_setMatrixColor+0x24>
     4c4:	22 0f       	add	r18, r18
     4c6:	33 1f       	adc	r19, r19
     4c8:	0a 94       	dec	r0
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <d3_setMatrixColor+0x20>
     4cc:	2b b9       	out	0x0b, r18	; 11
     4ce:	4f 2d       	mov	r20, r15
     4d0:	6c 2f       	mov	r22, r28
     4d2:	c6 01       	movw	r24, r12
     4d4:	9f df       	rcall	.-194    	; 0x414 <d3_setRowMatrixColor>
     4d6:	8f ea       	ldi	r24, 0xAF	; 175
     4d8:	94 e0       	ldi	r25, 0x04	; 4
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <d3_setMatrixColor+0x36>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <d3_setMatrixColor+0x3c>
     4e0:	00 00       	nop
     4e2:	94 df       	rcall	.-216    	; 0x40c <d3_clearSR>
     4e4:	21 96       	adiw	r28, 0x01	; 1
     4e6:	c8 30       	cpi	r28, 0x08	; 8
     4e8:	d1 05       	cpc	r29, r1
     4ea:	49 f7       	brne	.-46     	; 0x4be <d3_setMatrixColor+0x1a>
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	08 95       	ret

000004fc <GetKeypadKey>:
     4fc:	8f ee       	ldi	r24, 0xEF	; 239
     4fe:	88 b9       	out	0x08, r24	; 8
     500:	00 00       	nop
     502:	30 9b       	sbis	0x06, 0	; 6
     504:	29 c0       	rjmp	.+82     	; 0x558 <GetKeypadKey+0x5c>
     506:	31 9b       	sbis	0x06, 1	; 6
     508:	29 c0       	rjmp	.+82     	; 0x55c <GetKeypadKey+0x60>
     50a:	32 9b       	sbis	0x06, 2	; 6
     50c:	29 c0       	rjmp	.+82     	; 0x560 <GetKeypadKey+0x64>
     50e:	33 9b       	sbis	0x06, 3	; 6
     510:	29 c0       	rjmp	.+82     	; 0x564 <GetKeypadKey+0x68>
     512:	8f ed       	ldi	r24, 0xDF	; 223
     514:	88 b9       	out	0x08, r24	; 8
     516:	00 00       	nop
     518:	30 9b       	sbis	0x06, 0	; 6
     51a:	26 c0       	rjmp	.+76     	; 0x568 <GetKeypadKey+0x6c>
     51c:	31 9b       	sbis	0x06, 1	; 6
     51e:	26 c0       	rjmp	.+76     	; 0x56c <GetKeypadKey+0x70>
     520:	32 9b       	sbis	0x06, 2	; 6
     522:	26 c0       	rjmp	.+76     	; 0x570 <GetKeypadKey+0x74>
     524:	33 9b       	sbis	0x06, 3	; 6
     526:	26 c0       	rjmp	.+76     	; 0x574 <GetKeypadKey+0x78>
     528:	8f eb       	ldi	r24, 0xBF	; 191
     52a:	88 b9       	out	0x08, r24	; 8
     52c:	00 00       	nop
     52e:	30 9b       	sbis	0x06, 0	; 6
     530:	23 c0       	rjmp	.+70     	; 0x578 <GetKeypadKey+0x7c>
     532:	31 9b       	sbis	0x06, 1	; 6
     534:	23 c0       	rjmp	.+70     	; 0x57c <GetKeypadKey+0x80>
     536:	32 9b       	sbis	0x06, 2	; 6
     538:	23 c0       	rjmp	.+70     	; 0x580 <GetKeypadKey+0x84>
     53a:	33 9b       	sbis	0x06, 3	; 6
     53c:	23 c0       	rjmp	.+70     	; 0x584 <GetKeypadKey+0x88>
     53e:	8f e7       	ldi	r24, 0x7F	; 127
     540:	88 b9       	out	0x08, r24	; 8
     542:	00 00       	nop
     544:	30 9b       	sbis	0x06, 0	; 6
     546:	20 c0       	rjmp	.+64     	; 0x588 <GetKeypadKey+0x8c>
     548:	31 9b       	sbis	0x06, 1	; 6
     54a:	20 c0       	rjmp	.+64     	; 0x58c <GetKeypadKey+0x90>
     54c:	32 9b       	sbis	0x06, 2	; 6
     54e:	20 c0       	rjmp	.+64     	; 0x590 <GetKeypadKey+0x94>
     550:	33 9b       	sbis	0x06, 3	; 6
     552:	20 c0       	rjmp	.+64     	; 0x594 <GetKeypadKey+0x98>
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	08 95       	ret
     558:	81 e3       	ldi	r24, 0x31	; 49
     55a:	08 95       	ret
     55c:	84 e3       	ldi	r24, 0x34	; 52
     55e:	08 95       	ret
     560:	87 e3       	ldi	r24, 0x37	; 55
     562:	08 95       	ret
     564:	8a e2       	ldi	r24, 0x2A	; 42
     566:	08 95       	ret
     568:	82 e3       	ldi	r24, 0x32	; 50
     56a:	08 95       	ret
     56c:	85 e3       	ldi	r24, 0x35	; 53
     56e:	08 95       	ret
     570:	88 e3       	ldi	r24, 0x38	; 56
     572:	08 95       	ret
     574:	80 e3       	ldi	r24, 0x30	; 48
     576:	08 95       	ret
     578:	83 e3       	ldi	r24, 0x33	; 51
     57a:	08 95       	ret
     57c:	86 e3       	ldi	r24, 0x36	; 54
     57e:	08 95       	ret
     580:	89 e3       	ldi	r24, 0x39	; 57
     582:	08 95       	ret
     584:	83 e2       	ldi	r24, 0x23	; 35
     586:	08 95       	ret
     588:	81 e4       	ldi	r24, 0x41	; 65
     58a:	08 95       	ret
     58c:	82 e4       	ldi	r24, 0x42	; 66
     58e:	08 95       	ret
     590:	83 e4       	ldi	r24, 0x43	; 67
     592:	08 95       	ret
     594:	84 e4       	ldi	r24, 0x44	; 68
     596:	08 95       	ret

00000598 <KPTick>:
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	ec 01       	movw	r28, r24
     59e:	81 30       	cpi	r24, 0x01	; 1
     5a0:	91 05       	cpc	r25, r1
     5a2:	51 f0       	breq	.+20     	; 0x5b8 <KPTick+0x20>
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	91 05       	cpc	r25, r1
     5a8:	09 f4       	brne	.+2      	; 0x5ac <KPTick+0x14>
     5aa:	a1 c0       	rjmp	.+322    	; 0x6ee <KPTick+0x156>
     5ac:	89 2b       	or	r24, r25
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <KPTick+0x1a>
     5b0:	b4 c0       	rjmp	.+360    	; 0x71a <KPTick+0x182>
     5b2:	c1 e0       	ldi	r28, 0x01	; 1
     5b4:	d0 e0       	ldi	r29, 0x00	; 0
     5b6:	b1 c0       	rjmp	.+354    	; 0x71a <KPTick+0x182>
     5b8:	a1 df       	rcall	.-190    	; 0x4fc <GetKeypadKey>
     5ba:	80 93 06 01 	sts	0x0106, r24
     5be:	88 23       	and	r24, r24
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <KPTick+0x2c>
     5c2:	ab c0       	rjmp	.+342    	; 0x71a <KPTick+0x182>
     5c4:	84 33       	cpi	r24, 0x34	; 52
     5c6:	21 f5       	brne	.+72     	; 0x610 <KPTick+0x78>
     5c8:	e0 91 a0 02 	lds	r30, 0x02A0
     5cc:	e7 30       	cpi	r30, 0x07	; 7
     5ce:	08 f0       	brcs	.+2      	; 0x5d2 <KPTick+0x3a>
     5d0:	93 c0       	rjmp	.+294    	; 0x6f8 <KPTick+0x160>
     5d2:	ef 5f       	subi	r30, 0xFF	; 255
     5d4:	a8 e9       	ldi	r26, 0x98	; 152
     5d6:	b2 e0       	ldi	r27, 0x02	; 2
     5d8:	18 96       	adiw	r26, 0x08	; 8
     5da:	ec 93       	st	X, r30
     5dc:	18 97       	sbiw	r26, 0x08	; 8
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	19 96       	adiw	r26, 0x09	; 9
     5e6:	0c 90       	ld	r0, X
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <KPTick+0x56>
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	0a 94       	dec	r0
     5f0:	e2 f7       	brpl	.-8      	; 0x5ea <KPTick+0x52>
     5f2:	df 01       	movw	r26, r30
     5f4:	a9 56       	subi	r26, 0x69	; 105
     5f6:	bd 4f       	sbci	r27, 0xFD	; 253
     5f8:	9c 91       	ld	r25, X
     5fa:	98 2b       	or	r25, r24
     5fc:	9c 93       	st	X, r25
     5fe:	e8 56       	subi	r30, 0x68	; 104
     600:	fd 4f       	sbci	r31, 0xFD	; 253
     602:	80 95       	com	r24
     604:	90 81       	ld	r25, Z
     606:	89 23       	and	r24, r25
     608:	80 83       	st	Z, r24
     60a:	c2 e0       	ldi	r28, 0x02	; 2
     60c:	d0 e0       	ldi	r29, 0x00	; 0
     60e:	85 c0       	rjmp	.+266    	; 0x71a <KPTick+0x182>
     610:	82 33       	cpi	r24, 0x32	; 50
     612:	19 f5       	brne	.+70     	; 0x65a <KPTick+0xc2>
     614:	20 91 a1 02 	lds	r18, 0x02A1
     618:	27 30       	cpi	r18, 0x07	; 7
     61a:	08 f0       	brcs	.+2      	; 0x61e <KPTick+0x86>
     61c:	70 c0       	rjmp	.+224    	; 0x6fe <KPTick+0x166>
     61e:	31 e0       	ldi	r19, 0x01	; 1
     620:	32 0f       	add	r19, r18
     622:	e8 e9       	ldi	r30, 0x98	; 152
     624:	f2 e0       	ldi	r31, 0x02	; 2
     626:	31 87       	std	Z+9, r19	; 0x09
     628:	e0 85       	ldd	r30, Z+8	; 0x08
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	e8 56       	subi	r30, 0x68	; 104
     62e:	fd 4f       	sbci	r31, 0xFD	; 253
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	ac 01       	movw	r20, r24
     636:	02 c0       	rjmp	.+4      	; 0x63c <KPTick+0xa4>
     638:	44 0f       	add	r20, r20
     63a:	55 1f       	adc	r21, r21
     63c:	3a 95       	dec	r19
     63e:	e2 f7       	brpl	.-8      	; 0x638 <KPTick+0xa0>
     640:	40 95       	com	r20
     642:	02 c0       	rjmp	.+4      	; 0x648 <KPTick+0xb0>
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	2a 95       	dec	r18
     64a:	e2 f7       	brpl	.-8      	; 0x644 <KPTick+0xac>
     64c:	90 81       	ld	r25, Z
     64e:	89 2b       	or	r24, r25
     650:	84 23       	and	r24, r20
     652:	80 83       	st	Z, r24
     654:	c2 e0       	ldi	r28, 0x02	; 2
     656:	d0 e0       	ldi	r29, 0x00	; 0
     658:	60 c0       	rjmp	.+192    	; 0x71a <KPTick+0x182>
     65a:	85 33       	cpi	r24, 0x35	; 53
     65c:	21 f5       	brne	.+72     	; 0x6a6 <KPTick+0x10e>
     65e:	e0 91 a0 02 	lds	r30, 0x02A0
     662:	ee 23       	and	r30, r30
     664:	09 f4       	brne	.+2      	; 0x668 <KPTick+0xd0>
     666:	4e c0       	rjmp	.+156    	; 0x704 <KPTick+0x16c>
     668:	e1 50       	subi	r30, 0x01	; 1
     66a:	a8 e9       	ldi	r26, 0x98	; 152
     66c:	b2 e0       	ldi	r27, 0x02	; 2
     66e:	18 96       	adiw	r26, 0x08	; 8
     670:	ec 93       	st	X, r30
     672:	18 97       	sbiw	r26, 0x08	; 8
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	19 96       	adiw	r26, 0x09	; 9
     67c:	0c 90       	ld	r0, X
     67e:	02 c0       	rjmp	.+4      	; 0x684 <KPTick+0xec>
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	0a 94       	dec	r0
     686:	e2 f7       	brpl	.-8      	; 0x680 <KPTick+0xe8>
     688:	df 01       	movw	r26, r30
     68a:	a7 56       	subi	r26, 0x67	; 103
     68c:	bd 4f       	sbci	r27, 0xFD	; 253
     68e:	9c 91       	ld	r25, X
     690:	98 2b       	or	r25, r24
     692:	9c 93       	st	X, r25
     694:	e8 56       	subi	r30, 0x68	; 104
     696:	fd 4f       	sbci	r31, 0xFD	; 253
     698:	80 95       	com	r24
     69a:	90 81       	ld	r25, Z
     69c:	89 23       	and	r24, r25
     69e:	80 83       	st	Z, r24
     6a0:	c2 e0       	ldi	r28, 0x02	; 2
     6a2:	d0 e0       	ldi	r29, 0x00	; 0
     6a4:	3a c0       	rjmp	.+116    	; 0x71a <KPTick+0x182>
     6a6:	88 33       	cpi	r24, 0x38	; 56
     6a8:	81 f5       	brne	.+96     	; 0x70a <KPTick+0x172>
     6aa:	20 91 a1 02 	lds	r18, 0x02A1
     6ae:	22 23       	and	r18, r18
     6b0:	79 f1       	breq	.+94     	; 0x710 <KPTick+0x178>
     6b2:	3f ef       	ldi	r19, 0xFF	; 255
     6b4:	32 0f       	add	r19, r18
     6b6:	e8 e9       	ldi	r30, 0x98	; 152
     6b8:	f2 e0       	ldi	r31, 0x02	; 2
     6ba:	31 87       	std	Z+9, r19	; 0x09
     6bc:	e0 85       	ldd	r30, Z+8	; 0x08
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	e8 56       	subi	r30, 0x68	; 104
     6c2:	fd 4f       	sbci	r31, 0xFD	; 253
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	ac 01       	movw	r20, r24
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <KPTick+0x138>
     6cc:	44 0f       	add	r20, r20
     6ce:	55 1f       	adc	r21, r21
     6d0:	3a 95       	dec	r19
     6d2:	e2 f7       	brpl	.-8      	; 0x6cc <KPTick+0x134>
     6d4:	40 95       	com	r20
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <KPTick+0x144>
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	2a 95       	dec	r18
     6de:	e2 f7       	brpl	.-8      	; 0x6d8 <KPTick+0x140>
     6e0:	90 81       	ld	r25, Z
     6e2:	89 2b       	or	r24, r25
     6e4:	84 23       	and	r24, r20
     6e6:	80 83       	st	Z, r24
     6e8:	c2 e0       	ldi	r28, 0x02	; 2
     6ea:	d0 e0       	ldi	r29, 0x00	; 0
     6ec:	16 c0       	rjmp	.+44     	; 0x71a <KPTick+0x182>
     6ee:	06 df       	rcall	.-500    	; 0x4fc <GetKeypadKey>
     6f0:	88 23       	and	r24, r24
     6f2:	89 f0       	breq	.+34     	; 0x716 <KPTick+0x17e>
     6f4:	03 df       	rcall	.-506    	; 0x4fc <GetKeypadKey>
     6f6:	11 c0       	rjmp	.+34     	; 0x71a <KPTick+0x182>
     6f8:	c2 e0       	ldi	r28, 0x02	; 2
     6fa:	d0 e0       	ldi	r29, 0x00	; 0
     6fc:	0e c0       	rjmp	.+28     	; 0x71a <KPTick+0x182>
     6fe:	c2 e0       	ldi	r28, 0x02	; 2
     700:	d0 e0       	ldi	r29, 0x00	; 0
     702:	0b c0       	rjmp	.+22     	; 0x71a <KPTick+0x182>
     704:	c2 e0       	ldi	r28, 0x02	; 2
     706:	d0 e0       	ldi	r29, 0x00	; 0
     708:	08 c0       	rjmp	.+16     	; 0x71a <KPTick+0x182>
     70a:	c2 e0       	ldi	r28, 0x02	; 2
     70c:	d0 e0       	ldi	r29, 0x00	; 0
     70e:	05 c0       	rjmp	.+10     	; 0x71a <KPTick+0x182>
     710:	c2 e0       	ldi	r28, 0x02	; 2
     712:	d0 e0       	ldi	r29, 0x00	; 0
     714:	02 c0       	rjmp	.+4      	; 0x71a <KPTick+0x182>
     716:	c1 e0       	ldi	r28, 0x01	; 1
     718:	d0 e0       	ldi	r29, 0x00	; 0
     71a:	ce 01       	movw	r24, r28
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <initExplosions>:
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	9c 01       	movw	r18, r24
     72c:	93 e2       	ldi	r25, 0x23	; 35
     72e:	91 50       	subi	r25, 0x01	; 1
     730:	f1 f7       	brne	.-4      	; 0x72e <initExplosions+0xc>
     732:	cd 59       	subi	r28, 0x9D	; 157
     734:	de 4f       	sbci	r29, 0xFE	; 254
     736:	18 82       	st	Y, r1
     738:	c3 56       	subi	r28, 0x63	; 99
     73a:	d1 40       	sbci	r29, 0x01	; 1
     73c:	cc 59       	subi	r28, 0x9C	; 156
     73e:	de 4f       	sbci	r29, 0xFE	; 254
     740:	18 82       	st	Y, r1
     742:	c4 56       	subi	r28, 0x64	; 100
     744:	d1 40       	sbci	r29, 0x01	; 1
     746:	80 e6       	ldi	r24, 0x60	; 96
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	fe 01       	movw	r30, r28
     74c:	35 96       	adiw	r30, 0x05	; 5
     74e:	d9 01       	movw	r26, r18
     750:	01 90       	ld	r0, Z+
     752:	0d 92       	st	X+, r0
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	e1 f7       	brne	.-8      	; 0x750 <initExplosions+0x2e>
     758:	c9 01       	movw	r24, r18
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <DeathTick>:
			contClock++;
	}
	return state;
}

unsigned char DeathTick() {	
     760:	ef 92       	push	r14
     762:	ff 92       	push	r15
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	2a 97       	sbiw	r28, 0x0a	; 10
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
	if ((displayBlank == 0) && GetBit(explosions.matricies[explosions.displayIndex].m[userMatrix.row], userMatrix.column) == 0) {
     77c:	80 91 07 01 	lds	r24, 0x0107
     780:	81 11       	cpse	r24, r1
     782:	3a c0       	rjmp	.+116    	; 0x7f8 <DeathTick+0x98>
     784:	e8 e9       	ldi	r30, 0x98	; 152
     786:	f2 e0       	ldi	r31, 0x02	; 2
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
     788:	21 e0       	ldi	r18, 0x01	; 1
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	01 84       	ldd	r0, Z+9	; 0x09
     78e:	02 c0       	rjmp	.+4      	; 0x794 <DeathTick+0x34>
     790:	22 0f       	add	r18, r18
     792:	33 1f       	adc	r19, r19
     794:	0a 94       	dec	r0
     796:	e2 f7       	brpl	.-8      	; 0x790 <DeathTick+0x30>
     798:	90 91 97 02 	lds	r25, 0x0297
     79c:	e0 85       	ldd	r30, Z+8	; 0x08
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	48 e0       	ldi	r20, 0x08	; 8
     7a2:	94 9f       	mul	r25, r20
     7a4:	e0 0d       	add	r30, r0
     7a6:	f1 1d       	adc	r31, r1
     7a8:	11 24       	eor	r1, r1
     7aa:	e8 5c       	subi	r30, 0xC8	; 200
     7ac:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
     7ae:	90 81       	ld	r25, Z
     7b0:	29 23       	and	r18, r25
     7b2:	19 f5       	brne	.+70     	; 0x7fa <DeathTick+0x9a>
		userMatrix = initSingleUserMatrix(userMatrix);
     7b4:	e0 90 98 02 	lds	r14, 0x0298
     7b8:	f0 90 99 02 	lds	r15, 0x0299
     7bc:	00 91 9a 02 	lds	r16, 0x029A
     7c0:	10 91 9b 02 	lds	r17, 0x029B
     7c4:	20 91 9c 02 	lds	r18, 0x029C
     7c8:	30 91 9d 02 	lds	r19, 0x029D
     7cc:	40 91 9e 02 	lds	r20, 0x029E
     7d0:	50 91 9f 02 	lds	r21, 0x029F
     7d4:	60 91 a0 02 	lds	r22, 0x02A0
     7d8:	70 91 a1 02 	lds	r23, 0x02A1
     7dc:	ce 01       	movw	r24, r28
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	ae dd       	rcall	.-1188   	; 0x33e <initSingleUserMatrix>
     7e2:	8a e0       	ldi	r24, 0x0A	; 10
     7e4:	fe 01       	movw	r30, r28
     7e6:	31 96       	adiw	r30, 0x01	; 1
     7e8:	a8 e9       	ldi	r26, 0x98	; 152
     7ea:	b2 e0       	ldi	r27, 0x02	; 2
     7ec:	01 90       	ld	r0, Z+
     7ee:	0d 92       	st	X+, r0
     7f0:	8a 95       	dec	r24
     7f2:	e1 f7       	brne	.-8      	; 0x7ec <DeathTick+0x8c>
		return 1;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <DeathTick+0x9a>
	} else {
		// nothing
		return 0;
     7f8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     7fa:	2a 96       	adiw	r28, 0x0a	; 10
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	08 95       	ret

00000814 <ExpTick>:

Explosions ExpTick(Explosions explosions) {	
     814:	cf 92       	push	r12
     816:	df 92       	push	r13
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	8c 01       	movw	r16, r24
	// Return if empty (Protection code)
	if (explosions.index == 0) {
     82a:	c7 59       	subi	r28, 0x97	; 151
     82c:	de 4f       	sbci	r29, 0xFE	; 254
     82e:	88 81       	ld	r24, Y
     830:	c9 56       	subi	r28, 0x69	; 105
     832:	d1 40       	sbci	r29, 0x01	; 1
     834:	81 11       	cpse	r24, r1
     836:	0a c0       	rjmp	.+20     	; 0x84c <ExpTick+0x38>
		return explosions;
     838:	80 e6       	ldi	r24, 0x60	; 96
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	fe 01       	movw	r30, r28
     83e:	3b 96       	adiw	r30, 0x0b	; 11
     840:	d8 01       	movw	r26, r16
     842:	01 90       	ld	r0, Z+
     844:	0d 92       	st	X+, r0
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	e1 f7       	brne	.-8      	; 0x842 <ExpTick+0x2e>
     84a:	a7 c0       	rjmp	.+334    	; 0x99a <ExpTick+0x186>
	} 
	
	if (explosions.displayIndex >= explosions.index) {
     84c:	c6 59       	subi	r28, 0x96	; 150
     84e:	de 4f       	sbci	r29, 0xFE	; 254
     850:	98 81       	ld	r25, Y
     852:	ca 56       	subi	r28, 0x6A	; 106
     854:	d1 40       	sbci	r29, 0x01	; 1
     856:	98 17       	cp	r25, r24
     858:	28 f0       	brcs	.+10     	; 0x864 <ExpTick+0x50>
		explosions.displayIndex = 0;
     85a:	c6 59       	subi	r28, 0x96	; 150
     85c:	de 4f       	sbci	r29, 0xFE	; 254
     85e:	18 82       	st	Y, r1
     860:	ca 56       	subi	r28, 0x6A	; 106
     862:	d1 40       	sbci	r29, 0x01	; 1
	}
	
	if (displayBlank == 0)
     864:	80 91 07 01 	lds	r24, 0x0107
     868:	81 11       	cpse	r24, r1
     86a:	12 c0       	rjmp	.+36     	; 0x890 <ExpTick+0x7c>
		d3_setMatrixColor(explosions.matricies[explosions.displayIndex].m, RED);
     86c:	c6 59       	subi	r28, 0x96	; 150
     86e:	de 4f       	sbci	r29, 0xFE	; 254
     870:	88 81       	ld	r24, Y
     872:	ca 56       	subi	r28, 0x6A	; 106
     874:	d1 40       	sbci	r29, 0x01	; 1
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	2b e0       	ldi	r18, 0x0B	; 11
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	2c 0f       	add	r18, r28
     87e:	3d 1f       	adc	r19, r29
     880:	48 e0       	ldi	r20, 0x08	; 8
     882:	84 9f       	mul	r24, r20
     884:	20 0d       	add	r18, r0
     886:	31 1d       	adc	r19, r1
     888:	11 24       	eor	r1, r1
     88a:	c9 01       	movw	r24, r18
     88c:	0b de       	rcall	.-1002   	; 0x4a4 <d3_setMatrixColor>
     88e:	07 c0       	rjmp	.+14     	; 0x89e <ExpTick+0x8a>
	else if (displayBlank == 1)
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	09 f0       	breq	.+2      	; 0x896 <ExpTick+0x82>
     894:	79 c0       	rjmp	.+242    	; 0x988 <ExpTick+0x174>
		d3_setMatrixColor(blankMatrix.m, RED);
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	88 e2       	ldi	r24, 0x28	; 40
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	03 de       	rcall	.-1018   	; 0x4a4 <d3_setMatrixColor>
	
	if (displayBlank == 0 && contClock >= (explosions.timeDuration[explosions.displayIndex] * 10)) {
     89e:	80 91 07 01 	lds	r24, 0x0107
     8a2:	81 11       	cpse	r24, r1
     8a4:	3c c0       	rjmp	.+120    	; 0x91e <ExpTick+0x10a>
     8a6:	c6 59       	subi	r28, 0x96	; 150
     8a8:	de 4f       	sbci	r29, 0xFE	; 254
     8aa:	88 81       	ld	r24, Y
     8ac:	ca 56       	subi	r28, 0x6A	; 106
     8ae:	d1 40       	sbci	r29, 0x01	; 1
     8b0:	e6 e4       	ldi	r30, 0x46	; 70
     8b2:	f1 e0       	ldi	r31, 0x01	; 1
     8b4:	ec 0f       	add	r30, r28
     8b6:	fd 1f       	adc	r31, r29
     8b8:	e8 0f       	add	r30, r24
     8ba:	f1 1d       	adc	r31, r1
     8bc:	20 81       	ld	r18, Z
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	a9 01       	movw	r20, r18
     8c2:	44 0f       	add	r20, r20
     8c4:	55 1f       	adc	r21, r21
     8c6:	22 0f       	add	r18, r18
     8c8:	33 1f       	adc	r19, r19
     8ca:	22 0f       	add	r18, r18
     8cc:	33 1f       	adc	r19, r19
     8ce:	22 0f       	add	r18, r18
     8d0:	33 1f       	adc	r19, r19
     8d2:	42 0f       	add	r20, r18
     8d4:	53 1f       	adc	r21, r19
     8d6:	05 2e       	mov	r0, r21
     8d8:	00 0c       	add	r0, r0
     8da:	66 0b       	sbc	r22, r22
     8dc:	77 0b       	sbc	r23, r23
     8de:	c0 90 08 01 	lds	r12, 0x0108
     8e2:	d0 90 09 01 	lds	r13, 0x0109
     8e6:	e0 90 0a 01 	lds	r14, 0x010A
     8ea:	f0 90 0b 01 	lds	r15, 0x010B
     8ee:	c4 16       	cp	r12, r20
     8f0:	d5 06       	cpc	r13, r21
     8f2:	e6 06       	cpc	r14, r22
     8f4:	f7 06       	cpc	r15, r23
     8f6:	08 f4       	brcc	.+2      	; 0x8fa <ExpTick+0xe6>
     8f8:	47 c0       	rjmp	.+142    	; 0x988 <ExpTick+0x174>
		displayBlank = 1;
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	90 93 07 01 	sts	0x0107, r25
		explosions.displayIndex++;
     900:	8f 5f       	subi	r24, 0xFF	; 255
     902:	c6 59       	subi	r28, 0x96	; 150
     904:	de 4f       	sbci	r29, 0xFE	; 254
     906:	88 83       	st	Y, r24
     908:	ca 56       	subi	r28, 0x6A	; 106
     90a:	d1 40       	sbci	r29, 0x01	; 1
		contClock = 0;
     90c:	10 92 08 01 	sts	0x0108, r1
     910:	10 92 09 01 	sts	0x0109, r1
     914:	10 92 0a 01 	sts	0x010A, r1
     918:	10 92 0b 01 	sts	0x010B, r1
     91c:	35 c0       	rjmp	.+106    	; 0x988 <ExpTick+0x174>
	} else if (displayBlank == 1 && contClock >= (explosions.timeBetween[explosions.displayIndex] * 10)) {
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	99 f5       	brne	.+102    	; 0x988 <ExpTick+0x174>
     922:	c6 59       	subi	r28, 0x96	; 150
     924:	de 4f       	sbci	r29, 0xFE	; 254
     926:	88 81       	ld	r24, Y
     928:	ca 56       	subi	r28, 0x6A	; 106
     92a:	d1 40       	sbci	r29, 0x01	; 1
     92c:	e3 e2       	ldi	r30, 0x23	; 35
     92e:	f1 e0       	ldi	r31, 0x01	; 1
     930:	ec 0f       	add	r30, r28
     932:	fd 1f       	adc	r31, r29
     934:	e8 0f       	add	r30, r24
     936:	f1 1d       	adc	r31, r1
     938:	20 81       	ld	r18, Z
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	c9 01       	movw	r24, r18
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	22 0f       	add	r18, r18
     944:	33 1f       	adc	r19, r19
     946:	22 0f       	add	r18, r18
     948:	33 1f       	adc	r19, r19
     94a:	22 0f       	add	r18, r18
     94c:	33 1f       	adc	r19, r19
     94e:	82 0f       	add	r24, r18
     950:	93 1f       	adc	r25, r19
     952:	09 2e       	mov	r0, r25
     954:	00 0c       	add	r0, r0
     956:	aa 0b       	sbc	r26, r26
     958:	bb 0b       	sbc	r27, r27
     95a:	40 91 08 01 	lds	r20, 0x0108
     95e:	50 91 09 01 	lds	r21, 0x0109
     962:	60 91 0a 01 	lds	r22, 0x010A
     966:	70 91 0b 01 	lds	r23, 0x010B
     96a:	48 17       	cp	r20, r24
     96c:	59 07       	cpc	r21, r25
     96e:	6a 07       	cpc	r22, r26
     970:	7b 07       	cpc	r23, r27
     972:	50 f0       	brcs	.+20     	; 0x988 <ExpTick+0x174>
		displayBlank = 0;
     974:	10 92 07 01 	sts	0x0107, r1
		contClock = 0;
     978:	10 92 08 01 	sts	0x0108, r1
     97c:	10 92 09 01 	sts	0x0109, r1
     980:	10 92 0a 01 	sts	0x010A, r1
     984:	10 92 0b 01 	sts	0x010B, r1
	}
	
	return explosions;
     988:	80 e6       	ldi	r24, 0x60	; 96
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	fe 01       	movw	r30, r28
     98e:	3b 96       	adiw	r30, 0x0b	; 11
     990:	d8 01       	movw	r26, r16
     992:	01 90       	ld	r0, Z+
     994:	0d 92       	st	X+, r0
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	e1 f7       	brne	.-8      	; 0x992 <ExpTick+0x17e>
     99a:	c8 01       	movw	r24, r16
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ff 90       	pop	r15
     9a6:	ef 90       	pop	r14
     9a8:	df 90       	pop	r13
     9aa:	cf 90       	pop	r12
     9ac:	08 95       	ret

000009ae <main>:
SingleMatrix matrix;
SingleMatrix matrix2;
SingleMatrix blankMatrix;


int main(void) {
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	c8 5a       	subi	r28, 0xA8	; 168
     9b8:	d0 43       	sbci	r29, 0x30	; 48
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00;
     9c4:	8f ef       	ldi	r24, 0xFF	; 255
     9c6:	84 b9       	out	0x04, r24	; 4
     9c8:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
     9ca:	8a b9       	out	0x0a, r24	; 10
     9cc:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xF0; PORTC = 0x0F;
     9ce:	80 ef       	ldi	r24, 0xF0	; 240
     9d0:	87 b9       	out	0x07, r24	; 7
     9d2:	8f e0       	ldi	r24, 0x0F	; 15
     9d4:	88 b9       	out	0x08, r24	; 8
	
	initTasks();
     9d6:	a6 db       	rcall	.-2228   	; 0x124 <initTasks>
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	80 93 00 01 	sts	0x0100, r24
     9e4:	90 93 01 01 	sts	0x0101, r25
     9e8:	a0 93 02 01 	sts	0x0102, r26
     9ec:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
     9f0:	80 93 0c 01 	sts	0x010C, r24
     9f4:	90 93 0d 01 	sts	0x010D, r25
     9f8:	a0 93 0e 01 	sts	0x010E, r26
     9fc:	b0 93 0f 01 	sts	0x010F, r27
	
	TimerSet(1);
	TimerOn();
     a00:	b8 db       	rcall	.-2192   	; 0x172 <TimerOn>
	
	matrix = clearSingleMatrix(matrix);
     a02:	20 91 30 01 	lds	r18, 0x0130
     a06:	30 91 31 01 	lds	r19, 0x0131
     a0a:	40 91 32 01 	lds	r20, 0x0132
     a0e:	50 91 33 01 	lds	r21, 0x0133
     a12:	60 91 34 01 	lds	r22, 0x0134
     a16:	70 91 35 01 	lds	r23, 0x0135
     a1a:	80 91 36 01 	lds	r24, 0x0136
     a1e:	90 91 37 01 	lds	r25, 0x0137
     a22:	57 dc       	rcall	.-1874   	; 0x2d2 <clearSingleMatrix>
     a24:	e0 e3       	ldi	r30, 0x30	; 48
     a26:	f1 e0       	ldi	r31, 0x01	; 1
     a28:	20 83       	st	Z, r18
     a2a:	31 83       	std	Z+1, r19	; 0x01
     a2c:	42 83       	std	Z+2, r20	; 0x02
     a2e:	53 83       	std	Z+3, r21	; 0x03
     a30:	64 83       	std	Z+4, r22	; 0x04
     a32:	75 83       	std	Z+5, r23	; 0x05
     a34:	86 83       	std	Z+6, r24	; 0x06
     a36:	97 83       	std	Z+7, r25	; 0x07
	explosions = initExplosions(explosions);
	explosions = pushExplosion(explosions, matrix, 350, 200);
	explosions = pushExplosion(explosions, matrix2, 350, 200);
	*/
	
	blankMatrix = clearSingleMatrix(blankMatrix);
     a38:	20 91 28 01 	lds	r18, 0x0128
     a3c:	30 91 29 01 	lds	r19, 0x0129
     a40:	40 91 2a 01 	lds	r20, 0x012A
     a44:	50 91 2b 01 	lds	r21, 0x012B
     a48:	60 91 2c 01 	lds	r22, 0x012C
     a4c:	70 91 2d 01 	lds	r23, 0x012D
     a50:	80 91 2e 01 	lds	r24, 0x012E
     a54:	90 91 2f 01 	lds	r25, 0x012F
     a58:	3c dc       	rcall	.-1928   	; 0x2d2 <clearSingleMatrix>
     a5a:	e8 e2       	ldi	r30, 0x28	; 40
     a5c:	f1 e0       	ldi	r31, 0x01	; 1
     a5e:	20 83       	st	Z, r18
     a60:	31 83       	std	Z+1, r19	; 0x01
     a62:	42 83       	std	Z+2, r20	; 0x02
     a64:	53 83       	std	Z+3, r21	; 0x03
     a66:	64 83       	std	Z+4, r22	; 0x04
     a68:	75 83       	std	Z+5, r23	; 0x05
     a6a:	86 83       	std	Z+6, r24	; 0x06
     a6c:	97 83       	std	Z+7, r25	; 0x07
	
	explosions = initExplosions(explosions);
     a6e:	8d b7       	in	r24, 0x3d	; 61
     a70:	9e b7       	in	r25, 0x3e	; 62
     a72:	80 56       	subi	r24, 0x60	; 96
     a74:	91 40       	sbci	r25, 0x01	; 1
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	9e bf       	out	0x3e, r25	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	8d bf       	out	0x3d, r24	; 61
     a80:	ad b7       	in	r26, 0x3d	; 61
     a82:	be b7       	in	r27, 0x3e	; 62
     a84:	11 96       	adiw	r26, 0x01	; 1
     a86:	80 e6       	ldi	r24, 0x60	; 96
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	e8 e3       	ldi	r30, 0x38	; 56
     a8c:	f1 e0       	ldi	r31, 0x01	; 1
     a8e:	01 90       	ld	r0, Z+
     a90:	0d 92       	st	X+, r0
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	e1 f7       	brne	.-8      	; 0xa8e <main+0xe0>
     a96:	ce 01       	movw	r24, r28
     a98:	87 5b       	subi	r24, 0xB7	; 183
     a9a:	90 4d       	sbci	r25, 0xD0	; 208
     a9c:	42 de       	rcall	.-892    	; 0x722 <initExplosions>
     a9e:	80 e6       	ldi	r24, 0x60	; 96
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	fe 01       	movw	r30, r28
     aa4:	e7 5b       	subi	r30, 0xB7	; 183
     aa6:	f0 4d       	sbci	r31, 0xD0	; 208
     aa8:	a8 e3       	ldi	r26, 0x38	; 56
     aaa:	b1 e0       	ldi	r27, 0x01	; 1
     aac:	01 90       	ld	r0, Z+
     aae:	0d 92       	st	X+, r0
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	e1 f7       	brne	.-8      	; 0xaac <main+0xfe>
     ab4:	0f 2e       	mov	r0, r31
     ab6:	f0 e3       	ldi	r31, 0x30	; 48
     ab8:	ef 2e       	mov	r14, r31
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	ff 2e       	mov	r15, r31
     abe:	f0 2d       	mov	r31, r0
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	67 01       	movw	r12, r14
	
	for (int i = 0; i < 8; i++) {
     acc:	00 e0       	ldi	r16, 0x00	; 0
     ace:	10 e0       	ldi	r17, 0x00	; 0
		matrix.m[i] = eeprom_read_byte((uint8_t*)i);
     ad0:	c8 01       	movw	r24, r16
     ad2:	2e d7       	rcall	.+3676   	; 0x1930 <eeprom_read_byte>
     ad4:	f6 01       	movw	r30, r12
     ad6:	81 93       	st	Z+, r24
     ad8:	6f 01       	movw	r12, r30
	
	blankMatrix = clearSingleMatrix(blankMatrix);
	
	explosions = initExplosions(explosions);
	
	for (int i = 0; i < 8; i++) {
     ada:	0f 5f       	subi	r16, 0xFF	; 255
     adc:	1f 4f       	sbci	r17, 0xFF	; 255
     ade:	08 30       	cpi	r16, 0x08	; 8
     ae0:	11 05       	cpc	r17, r1
     ae2:	b1 f7       	brne	.-20     	; 0xad0 <main+0x122>
     ae4:	80 e6       	ldi	r24, 0x60	; 96
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	e8 e3       	ldi	r30, 0x38	; 56
     aea:	f1 e0       	ldi	r31, 0x01	; 1
     aec:	de 01       	movw	r26, r28
     aee:	af 59       	subi	r26, 0x9F	; 159
     af0:	b2 4d       	sbci	r27, 0xD2	; 210
     af2:	01 90       	ld	r0, Z+
     af4:	0d 92       	st	X+, r0
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <main+0x144>
     afa:	80 91 96 02 	lds	r24, 0x0296
     afe:	98 e0       	ldi	r25, 0x08	; 8
     b00:	e0 e3       	ldi	r30, 0x30	; 48
     b02:	f1 e0       	ldi	r31, 0x01	; 1
     b04:	de 01       	movw	r26, r28
     b06:	af 5b       	subi	r26, 0xBF	; 191
     b08:	b0 4d       	sbci	r27, 0xD0	; 208
     b0a:	01 90       	ld	r0, Z+
     b0c:	0d 92       	st	X+, r0
     b0e:	9a 95       	dec	r25
     b10:	e1 f7       	brne	.-8      	; 0xb0a <main+0x15c>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     b12:	a1 e6       	ldi	r26, 0x61	; 97
     b14:	bd e2       	ldi	r27, 0x2D	; 45
     b16:	ac 0f       	add	r26, r28
     b18:	bd 1f       	adc	r27, r29
     b1a:	f8 e0       	ldi	r31, 0x08	; 8
     b1c:	8f 9f       	mul	r24, r31
     b1e:	a0 0d       	add	r26, r0
     b20:	b1 1d       	adc	r27, r1
     b22:	11 24       	eor	r1, r1
     b24:	98 e0       	ldi	r25, 0x08	; 8
     b26:	fe 01       	movw	r30, r28
     b28:	ef 5b       	subi	r30, 0xBF	; 191
     b2a:	f0 4d       	sbci	r31, 0xD0	; 208
     b2c:	01 90       	ld	r0, Z+
     b2e:	0d 92       	st	X+, r0
     b30:	9a 95       	dec	r25
     b32:	e1 f7       	brne	.-8      	; 0xb2c <main+0x17e>
	explosions.timeBetween[explosions.index] = a;
     b34:	21 e6       	ldi	r18, 0x61	; 97
     b36:	3d e2       	ldi	r19, 0x2D	; 45
     b38:	2c 0f       	add	r18, r28
     b3a:	3d 1f       	adc	r19, r29
     b3c:	28 0f       	add	r18, r24
     b3e:	31 1d       	adc	r19, r1
     b40:	f9 01       	movw	r30, r18
     b42:	e8 5e       	subi	r30, 0xE8	; 232
     b44:	fe 4f       	sbci	r31, 0xFE	; 254
     b46:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     b48:	b3 96       	adiw	r30, 0x23	; 35
     b4a:	92 e0       	ldi	r25, 0x02	; 2
     b4c:	90 83       	st	Z, r25
	explosions.index++;
     b4e:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     b50:	c1 54       	subi	r28, 0x41	; 65
     b52:	d1 4d       	sbci	r29, 0xD1	; 209
     b54:	88 83       	st	Y, r24
     b56:	cf 5b       	subi	r28, 0xBF	; 191
     b58:	de 42       	sbci	r29, 0x2E	; 46
     b5a:	20 e6       	ldi	r18, 0x60	; 96
     b5c:	31 e0       	ldi	r19, 0x01	; 1
     b5e:	fe 01       	movw	r30, r28
     b60:	ef 59       	subi	r30, 0x9F	; 159
     b62:	f2 4d       	sbci	r31, 0xD2	; 210
     b64:	de 01       	movw	r26, r28
     b66:	af 5f       	subi	r26, 0xFF	; 255
     b68:	b3 4d       	sbci	r27, 0xD3	; 211
     b6a:	01 90       	ld	r0, Z+
     b6c:	0d 92       	st	X+, r0
     b6e:	21 50       	subi	r18, 0x01	; 1
     b70:	30 40       	sbci	r19, 0x00	; 0
     b72:	d9 f7       	brne	.-10     	; 0xb6a <main+0x1bc>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
     b74:	c1 5a       	subi	r28, 0xA1	; 161
     b76:	d2 4d       	sbci	r29, 0xD2	; 210
     b78:	88 83       	st	Y, r24
     b7a:	cf 55       	subi	r28, 0x5F	; 95
     b7c:	dd 42       	sbci	r29, 0x2D	; 45
     b7e:	80 e6       	ldi	r24, 0x60	; 96
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	fe 01       	movw	r30, r28
     b84:	ef 5f       	subi	r30, 0xFF	; 255
     b86:	f3 4d       	sbci	r31, 0xD3	; 211
     b88:	a8 e3       	ldi	r26, 0x38	; 56
     b8a:	b1 e0       	ldi	r27, 0x01	; 1
     b8c:	01 90       	ld	r0, Z+
     b8e:	0d 92       	st	X+, r0
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	e1 f7       	brne	.-8      	; 0xb8c <main+0x1de>
     b94:	0f 2e       	mov	r0, r31
     b96:	f0 e3       	ldi	r31, 0x30	; 48
     b98:	cf 2e       	mov	r12, r31
     b9a:	f1 e0       	ldi	r31, 0x01	; 1
     b9c:	df 2e       	mov	r13, r31
     b9e:	f0 2d       	mov	r31, r0
     ba0:	08 e0       	ldi	r16, 0x08	; 8
     ba2:	10 e0       	ldi	r17, 0x00	; 0
	
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 8);
     ba4:	c8 01       	movw	r24, r16
     ba6:	c4 d6       	rcall	.+3464   	; 0x1930 <eeprom_read_byte>
     ba8:	f6 01       	movw	r30, r12
     baa:	81 93       	st	Z+, r24
     bac:	6f 01       	movw	r12, r30
     bae:	0f 5f       	subi	r16, 0xFF	; 255
     bb0:	1f 4f       	sbci	r17, 0xFF	; 255
		matrix.m[i] = eeprom_read_byte((uint8_t*)i);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	
	for (int i = 0; i < 8; i++) {
     bb2:	00 31       	cpi	r16, 0x10	; 16
     bb4:	11 05       	cpc	r17, r1
     bb6:	b1 f7       	brne	.-20     	; 0xba4 <main+0x1f6>
     bb8:	80 e6       	ldi	r24, 0x60	; 96
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	e8 e3       	ldi	r30, 0x38	; 56
     bbe:	f1 e0       	ldi	r31, 0x01	; 1
     bc0:	de 01       	movw	r26, r28
     bc2:	af 55       	subi	r26, 0x5F	; 95
     bc4:	b5 4d       	sbci	r27, 0xD5	; 213
     bc6:	01 90       	ld	r0, Z+
     bc8:	0d 92       	st	X+, r0
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <main+0x218>
     bce:	80 91 96 02 	lds	r24, 0x0296
     bd2:	98 e0       	ldi	r25, 0x08	; 8
     bd4:	e0 e3       	ldi	r30, 0x30	; 48
     bd6:	f1 e0       	ldi	r31, 0x01	; 1
     bd8:	de 01       	movw	r26, r28
     bda:	a7 5c       	subi	r26, 0xC7	; 199
     bdc:	b0 4d       	sbci	r27, 0xD0	; 208
     bde:	01 90       	ld	r0, Z+
     be0:	0d 92       	st	X+, r0
     be2:	9a 95       	dec	r25
     be4:	e1 f7       	brne	.-8      	; 0xbde <main+0x230>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     be6:	a1 ea       	ldi	r26, 0xA1	; 161
     be8:	ba e2       	ldi	r27, 0x2A	; 42
     bea:	ac 0f       	add	r26, r28
     bec:	bd 1f       	adc	r27, r29
     bee:	f8 e0       	ldi	r31, 0x08	; 8
     bf0:	8f 9f       	mul	r24, r31
     bf2:	a0 0d       	add	r26, r0
     bf4:	b1 1d       	adc	r27, r1
     bf6:	11 24       	eor	r1, r1
     bf8:	98 e0       	ldi	r25, 0x08	; 8
     bfa:	fe 01       	movw	r30, r28
     bfc:	e7 5c       	subi	r30, 0xC7	; 199
     bfe:	f0 4d       	sbci	r31, 0xD0	; 208
     c00:	01 90       	ld	r0, Z+
     c02:	0d 92       	st	X+, r0
     c04:	9a 95       	dec	r25
     c06:	e1 f7       	brne	.-8      	; 0xc00 <main+0x252>
	explosions.timeBetween[explosions.index] = a;
     c08:	21 ea       	ldi	r18, 0xA1	; 161
     c0a:	3a e2       	ldi	r19, 0x2A	; 42
     c0c:	2c 0f       	add	r18, r28
     c0e:	3d 1f       	adc	r19, r29
     c10:	28 0f       	add	r18, r24
     c12:	31 1d       	adc	r19, r1
     c14:	f9 01       	movw	r30, r18
     c16:	e8 5e       	subi	r30, 0xE8	; 232
     c18:	fe 4f       	sbci	r31, 0xFE	; 254
     c1a:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     c1c:	b3 96       	adiw	r30, 0x23	; 35
     c1e:	92 e0       	ldi	r25, 0x02	; 2
     c20:	90 83       	st	Z, r25
	explosions.index++;
     c22:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     c24:	c1 50       	subi	r28, 0x01	; 1
     c26:	d4 4d       	sbci	r29, 0xD4	; 212
     c28:	88 83       	st	Y, r24
     c2a:	cf 5f       	subi	r28, 0xFF	; 255
     c2c:	db 42       	sbci	r29, 0x2B	; 43
     c2e:	20 e6       	ldi	r18, 0x60	; 96
     c30:	31 e0       	ldi	r19, 0x01	; 1
     c32:	fe 01       	movw	r30, r28
     c34:	ef 55       	subi	r30, 0x5F	; 95
     c36:	f5 4d       	sbci	r31, 0xD5	; 213
     c38:	de 01       	movw	r26, r28
     c3a:	af 5b       	subi	r26, 0xBF	; 191
     c3c:	b6 4d       	sbci	r27, 0xD6	; 214
     c3e:	01 90       	ld	r0, Z+
     c40:	0d 92       	st	X+, r0
     c42:	21 50       	subi	r18, 0x01	; 1
     c44:	30 40       	sbci	r19, 0x00	; 0
     c46:	d9 f7       	brne	.-10     	; 0xc3e <main+0x290>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 8);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
     c48:	c1 56       	subi	r28, 0x61	; 97
     c4a:	d5 4d       	sbci	r29, 0xD5	; 213
     c4c:	88 83       	st	Y, r24
     c4e:	cf 59       	subi	r28, 0x9F	; 159
     c50:	da 42       	sbci	r29, 0x2A	; 42
     c52:	80 e6       	ldi	r24, 0x60	; 96
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	fe 01       	movw	r30, r28
     c58:	ef 5b       	subi	r30, 0xBF	; 191
     c5a:	f6 4d       	sbci	r31, 0xD6	; 214
     c5c:	a8 e3       	ldi	r26, 0x38	; 56
     c5e:	b1 e0       	ldi	r27, 0x01	; 1
     c60:	01 90       	ld	r0, Z+
     c62:	0d 92       	st	X+, r0
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	e1 f7       	brne	.-8      	; 0xc60 <main+0x2b2>
     c68:	0f 2e       	mov	r0, r31
     c6a:	f0 e3       	ldi	r31, 0x30	; 48
     c6c:	cf 2e       	mov	r12, r31
     c6e:	f1 e0       	ldi	r31, 0x01	; 1
     c70:	df 2e       	mov	r13, r31
     c72:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 16);
     c74:	c8 01       	movw	r24, r16
     c76:	5c d6       	rcall	.+3256   	; 0x1930 <eeprom_read_byte>
     c78:	f6 01       	movw	r30, r12
     c7a:	81 93       	st	Z+, r24
     c7c:	6f 01       	movw	r12, r30
     c7e:	0f 5f       	subi	r16, 0xFF	; 255
     c80:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 8);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
     c82:	08 31       	cpi	r16, 0x18	; 24
     c84:	11 05       	cpc	r17, r1
     c86:	b1 f7       	brne	.-20     	; 0xc74 <main+0x2c6>
     c88:	80 e6       	ldi	r24, 0x60	; 96
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	e8 e3       	ldi	r30, 0x38	; 56
     c8e:	f1 e0       	ldi	r31, 0x01	; 1
     c90:	de 01       	movw	r26, r28
     c92:	af 51       	subi	r26, 0x1F	; 31
     c94:	b8 4d       	sbci	r27, 0xD8	; 216
     c96:	01 90       	ld	r0, Z+
     c98:	0d 92       	st	X+, r0
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <main+0x2e8>
     c9e:	80 91 96 02 	lds	r24, 0x0296
     ca2:	98 e0       	ldi	r25, 0x08	; 8
     ca4:	e0 e3       	ldi	r30, 0x30	; 48
     ca6:	f1 e0       	ldi	r31, 0x01	; 1
     ca8:	de 01       	movw	r26, r28
     caa:	af 5c       	subi	r26, 0xCF	; 207
     cac:	b0 4d       	sbci	r27, 0xD0	; 208
     cae:	01 90       	ld	r0, Z+
     cb0:	0d 92       	st	X+, r0
     cb2:	9a 95       	dec	r25
     cb4:	e1 f7       	brne	.-8      	; 0xcae <main+0x300>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     cb6:	a1 ee       	ldi	r26, 0xE1	; 225
     cb8:	b7 e2       	ldi	r27, 0x27	; 39
     cba:	ac 0f       	add	r26, r28
     cbc:	bd 1f       	adc	r27, r29
     cbe:	f8 e0       	ldi	r31, 0x08	; 8
     cc0:	8f 9f       	mul	r24, r31
     cc2:	a0 0d       	add	r26, r0
     cc4:	b1 1d       	adc	r27, r1
     cc6:	11 24       	eor	r1, r1
     cc8:	98 e0       	ldi	r25, 0x08	; 8
     cca:	fe 01       	movw	r30, r28
     ccc:	ef 5c       	subi	r30, 0xCF	; 207
     cce:	f0 4d       	sbci	r31, 0xD0	; 208
     cd0:	01 90       	ld	r0, Z+
     cd2:	0d 92       	st	X+, r0
     cd4:	9a 95       	dec	r25
     cd6:	e1 f7       	brne	.-8      	; 0xcd0 <main+0x322>
	explosions.timeBetween[explosions.index] = a;
     cd8:	21 ee       	ldi	r18, 0xE1	; 225
     cda:	37 e2       	ldi	r19, 0x27	; 39
     cdc:	2c 0f       	add	r18, r28
     cde:	3d 1f       	adc	r19, r29
     ce0:	28 0f       	add	r18, r24
     ce2:	31 1d       	adc	r19, r1
     ce4:	f9 01       	movw	r30, r18
     ce6:	e8 5e       	subi	r30, 0xE8	; 232
     ce8:	fe 4f       	sbci	r31, 0xFE	; 254
     cea:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     cec:	b3 96       	adiw	r30, 0x23	; 35
     cee:	92 e0       	ldi	r25, 0x02	; 2
     cf0:	90 83       	st	Z, r25
	explosions.index++;
     cf2:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     cf4:	c1 5c       	subi	r28, 0xC1	; 193
     cf6:	d6 4d       	sbci	r29, 0xD6	; 214
     cf8:	88 83       	st	Y, r24
     cfa:	cf 53       	subi	r28, 0x3F	; 63
     cfc:	d9 42       	sbci	r29, 0x29	; 41
     cfe:	20 e6       	ldi	r18, 0x60	; 96
     d00:	31 e0       	ldi	r19, 0x01	; 1
     d02:	fe 01       	movw	r30, r28
     d04:	ef 51       	subi	r30, 0x1F	; 31
     d06:	f8 4d       	sbci	r31, 0xD8	; 216
     d08:	de 01       	movw	r26, r28
     d0a:	af 57       	subi	r26, 0x7F	; 127
     d0c:	b9 4d       	sbci	r27, 0xD9	; 217
     d0e:	01 90       	ld	r0, Z+
     d10:	0d 92       	st	X+, r0
     d12:	21 50       	subi	r18, 0x01	; 1
     d14:	30 40       	sbci	r19, 0x00	; 0
     d16:	d9 f7       	brne	.-10     	; 0xd0e <main+0x360>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 16);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
     d18:	c1 52       	subi	r28, 0x21	; 33
     d1a:	d8 4d       	sbci	r29, 0xD8	; 216
     d1c:	88 83       	st	Y, r24
     d1e:	cf 5d       	subi	r28, 0xDF	; 223
     d20:	d7 42       	sbci	r29, 0x27	; 39
     d22:	80 e6       	ldi	r24, 0x60	; 96
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	fe 01       	movw	r30, r28
     d28:	ef 57       	subi	r30, 0x7F	; 127
     d2a:	f9 4d       	sbci	r31, 0xD9	; 217
     d2c:	a8 e3       	ldi	r26, 0x38	; 56
     d2e:	b1 e0       	ldi	r27, 0x01	; 1
     d30:	01 90       	ld	r0, Z+
     d32:	0d 92       	st	X+, r0
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	e1 f7       	brne	.-8      	; 0xd30 <main+0x382>
     d38:	0f 2e       	mov	r0, r31
     d3a:	f0 e3       	ldi	r31, 0x30	; 48
     d3c:	cf 2e       	mov	r12, r31
     d3e:	f1 e0       	ldi	r31, 0x01	; 1
     d40:	df 2e       	mov	r13, r31
     d42:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 24);
     d44:	c8 01       	movw	r24, r16
     d46:	f4 d5       	rcall	.+3048   	; 0x1930 <eeprom_read_byte>
     d48:	f6 01       	movw	r30, r12
     d4a:	81 93       	st	Z+, r24
     d4c:	6f 01       	movw	r12, r30
     d4e:	0f 5f       	subi	r16, 0xFF	; 255
     d50:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 16);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
     d52:	00 32       	cpi	r16, 0x20	; 32
     d54:	11 05       	cpc	r17, r1
     d56:	b1 f7       	brne	.-20     	; 0xd44 <main+0x396>
     d58:	80 e6       	ldi	r24, 0x60	; 96
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	e8 e3       	ldi	r30, 0x38	; 56
     d5e:	f1 e0       	ldi	r31, 0x01	; 1
     d60:	de 01       	movw	r26, r28
     d62:	af 5d       	subi	r26, 0xDF	; 223
     d64:	ba 4d       	sbci	r27, 0xDA	; 218
     d66:	01 90       	ld	r0, Z+
     d68:	0d 92       	st	X+, r0
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <main+0x3b8>
     d6e:	80 91 96 02 	lds	r24, 0x0296
     d72:	98 e0       	ldi	r25, 0x08	; 8
     d74:	e0 e3       	ldi	r30, 0x30	; 48
     d76:	f1 e0       	ldi	r31, 0x01	; 1
     d78:	de 01       	movw	r26, r28
     d7a:	a7 5d       	subi	r26, 0xD7	; 215
     d7c:	b0 4d       	sbci	r27, 0xD0	; 208
     d7e:	01 90       	ld	r0, Z+
     d80:	0d 92       	st	X+, r0
     d82:	9a 95       	dec	r25
     d84:	e1 f7       	brne	.-8      	; 0xd7e <main+0x3d0>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     d86:	a1 e2       	ldi	r26, 0x21	; 33
     d88:	b5 e2       	ldi	r27, 0x25	; 37
     d8a:	ac 0f       	add	r26, r28
     d8c:	bd 1f       	adc	r27, r29
     d8e:	f8 e0       	ldi	r31, 0x08	; 8
     d90:	8f 9f       	mul	r24, r31
     d92:	a0 0d       	add	r26, r0
     d94:	b1 1d       	adc	r27, r1
     d96:	11 24       	eor	r1, r1
     d98:	98 e0       	ldi	r25, 0x08	; 8
     d9a:	fe 01       	movw	r30, r28
     d9c:	e7 5d       	subi	r30, 0xD7	; 215
     d9e:	f0 4d       	sbci	r31, 0xD0	; 208
     da0:	01 90       	ld	r0, Z+
     da2:	0d 92       	st	X+, r0
     da4:	9a 95       	dec	r25
     da6:	e1 f7       	brne	.-8      	; 0xda0 <main+0x3f2>
	explosions.timeBetween[explosions.index] = a;
     da8:	21 e2       	ldi	r18, 0x21	; 33
     daa:	35 e2       	ldi	r19, 0x25	; 37
     dac:	2c 0f       	add	r18, r28
     dae:	3d 1f       	adc	r19, r29
     db0:	28 0f       	add	r18, r24
     db2:	31 1d       	adc	r19, r1
     db4:	f9 01       	movw	r30, r18
     db6:	e8 5e       	subi	r30, 0xE8	; 232
     db8:	fe 4f       	sbci	r31, 0xFE	; 254
     dba:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     dbc:	b3 96       	adiw	r30, 0x23	; 35
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	90 83       	st	Z, r25
	explosions.index++;
     dc2:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     dc4:	c1 58       	subi	r28, 0x81	; 129
     dc6:	d9 4d       	sbci	r29, 0xD9	; 217
     dc8:	88 83       	st	Y, r24
     dca:	cf 57       	subi	r28, 0x7F	; 127
     dcc:	d6 42       	sbci	r29, 0x26	; 38
     dce:	20 e6       	ldi	r18, 0x60	; 96
     dd0:	31 e0       	ldi	r19, 0x01	; 1
     dd2:	fe 01       	movw	r30, r28
     dd4:	ef 5d       	subi	r30, 0xDF	; 223
     dd6:	fa 4d       	sbci	r31, 0xDA	; 218
     dd8:	de 01       	movw	r26, r28
     dda:	af 53       	subi	r26, 0x3F	; 63
     ddc:	bc 4d       	sbci	r27, 0xDC	; 220
     dde:	01 90       	ld	r0, Z+
     de0:	0d 92       	st	X+, r0
     de2:	21 50       	subi	r18, 0x01	; 1
     de4:	30 40       	sbci	r19, 0x00	; 0
     de6:	d9 f7       	brne	.-10     	; 0xdde <main+0x430>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 24);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
     de8:	c1 5e       	subi	r28, 0xE1	; 225
     dea:	da 4d       	sbci	r29, 0xDA	; 218
     dec:	88 83       	st	Y, r24
     dee:	cf 51       	subi	r28, 0x1F	; 31
     df0:	d5 42       	sbci	r29, 0x25	; 37
     df2:	80 e6       	ldi	r24, 0x60	; 96
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	fe 01       	movw	r30, r28
     df8:	ef 53       	subi	r30, 0x3F	; 63
     dfa:	fc 4d       	sbci	r31, 0xDC	; 220
     dfc:	a8 e3       	ldi	r26, 0x38	; 56
     dfe:	b1 e0       	ldi	r27, 0x01	; 1
     e00:	01 90       	ld	r0, Z+
     e02:	0d 92       	st	X+, r0
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	e1 f7       	brne	.-8      	; 0xe00 <main+0x452>
     e08:	0f 2e       	mov	r0, r31
     e0a:	f0 e3       	ldi	r31, 0x30	; 48
     e0c:	cf 2e       	mov	r12, r31
     e0e:	f1 e0       	ldi	r31, 0x01	; 1
     e10:	df 2e       	mov	r13, r31
     e12:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 32);
     e14:	c8 01       	movw	r24, r16
     e16:	8c d5       	rcall	.+2840   	; 0x1930 <eeprom_read_byte>
     e18:	f6 01       	movw	r30, r12
     e1a:	81 93       	st	Z+, r24
     e1c:	6f 01       	movw	r12, r30
     e1e:	0f 5f       	subi	r16, 0xFF	; 255
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 24);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
     e22:	08 32       	cpi	r16, 0x28	; 40
     e24:	11 05       	cpc	r17, r1
     e26:	b1 f7       	brne	.-20     	; 0xe14 <main+0x466>
     e28:	80 e6       	ldi	r24, 0x60	; 96
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	e8 e3       	ldi	r30, 0x38	; 56
     e2e:	f1 e0       	ldi	r31, 0x01	; 1
     e30:	de 01       	movw	r26, r28
     e32:	af 59       	subi	r26, 0x9F	; 159
     e34:	bd 4d       	sbci	r27, 0xDD	; 221
     e36:	01 90       	ld	r0, Z+
     e38:	0d 92       	st	X+, r0
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	e1 f7       	brne	.-8      	; 0xe36 <main+0x488>
     e3e:	80 91 96 02 	lds	r24, 0x0296
     e42:	98 e0       	ldi	r25, 0x08	; 8
     e44:	e0 e3       	ldi	r30, 0x30	; 48
     e46:	f1 e0       	ldi	r31, 0x01	; 1
     e48:	de 01       	movw	r26, r28
     e4a:	af 5d       	subi	r26, 0xDF	; 223
     e4c:	b0 4d       	sbci	r27, 0xD0	; 208
     e4e:	01 90       	ld	r0, Z+
     e50:	0d 92       	st	X+, r0
     e52:	9a 95       	dec	r25
     e54:	e1 f7       	brne	.-8      	; 0xe4e <main+0x4a0>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     e56:	a1 e6       	ldi	r26, 0x61	; 97
     e58:	b2 e2       	ldi	r27, 0x22	; 34
     e5a:	ac 0f       	add	r26, r28
     e5c:	bd 1f       	adc	r27, r29
     e5e:	f8 e0       	ldi	r31, 0x08	; 8
     e60:	8f 9f       	mul	r24, r31
     e62:	a0 0d       	add	r26, r0
     e64:	b1 1d       	adc	r27, r1
     e66:	11 24       	eor	r1, r1
     e68:	98 e0       	ldi	r25, 0x08	; 8
     e6a:	fe 01       	movw	r30, r28
     e6c:	ef 5d       	subi	r30, 0xDF	; 223
     e6e:	f0 4d       	sbci	r31, 0xD0	; 208
     e70:	01 90       	ld	r0, Z+
     e72:	0d 92       	st	X+, r0
     e74:	9a 95       	dec	r25
     e76:	e1 f7       	brne	.-8      	; 0xe70 <main+0x4c2>
	explosions.timeBetween[explosions.index] = a;
     e78:	21 e6       	ldi	r18, 0x61	; 97
     e7a:	32 e2       	ldi	r19, 0x22	; 34
     e7c:	2c 0f       	add	r18, r28
     e7e:	3d 1f       	adc	r19, r29
     e80:	28 0f       	add	r18, r24
     e82:	31 1d       	adc	r19, r1
     e84:	f9 01       	movw	r30, r18
     e86:	e8 5e       	subi	r30, 0xE8	; 232
     e88:	fe 4f       	sbci	r31, 0xFE	; 254
     e8a:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     e8c:	b3 96       	adiw	r30, 0x23	; 35
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	90 83       	st	Z, r25
	explosions.index++;
     e92:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     e94:	c1 54       	subi	r28, 0x41	; 65
     e96:	dc 4d       	sbci	r29, 0xDC	; 220
     e98:	88 83       	st	Y, r24
     e9a:	cf 5b       	subi	r28, 0xBF	; 191
     e9c:	d3 42       	sbci	r29, 0x23	; 35
     e9e:	20 e6       	ldi	r18, 0x60	; 96
     ea0:	31 e0       	ldi	r19, 0x01	; 1
     ea2:	fe 01       	movw	r30, r28
     ea4:	ef 59       	subi	r30, 0x9F	; 159
     ea6:	fd 4d       	sbci	r31, 0xDD	; 221
     ea8:	de 01       	movw	r26, r28
     eaa:	af 5f       	subi	r26, 0xFF	; 255
     eac:	be 4d       	sbci	r27, 0xDE	; 222
     eae:	01 90       	ld	r0, Z+
     eb0:	0d 92       	st	X+, r0
     eb2:	21 50       	subi	r18, 0x01	; 1
     eb4:	30 40       	sbci	r19, 0x00	; 0
     eb6:	d9 f7       	brne	.-10     	; 0xeae <main+0x500>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 32);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
     eb8:	c1 5a       	subi	r28, 0xA1	; 161
     eba:	dd 4d       	sbci	r29, 0xDD	; 221
     ebc:	88 83       	st	Y, r24
     ebe:	cf 55       	subi	r28, 0x5F	; 95
     ec0:	d2 42       	sbci	r29, 0x22	; 34
     ec2:	80 e6       	ldi	r24, 0x60	; 96
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	fe 01       	movw	r30, r28
     ec8:	ef 5f       	subi	r30, 0xFF	; 255
     eca:	fe 4d       	sbci	r31, 0xDE	; 222
     ecc:	a8 e3       	ldi	r26, 0x38	; 56
     ece:	b1 e0       	ldi	r27, 0x01	; 1
     ed0:	01 90       	ld	r0, Z+
     ed2:	0d 92       	st	X+, r0
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	e1 f7       	brne	.-8      	; 0xed0 <main+0x522>
     ed8:	0f 2e       	mov	r0, r31
     eda:	f0 e3       	ldi	r31, 0x30	; 48
     edc:	cf 2e       	mov	r12, r31
     ede:	f1 e0       	ldi	r31, 0x01	; 1
     ee0:	df 2e       	mov	r13, r31
     ee2:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 40);
     ee4:	c8 01       	movw	r24, r16
     ee6:	24 d5       	rcall	.+2632   	; 0x1930 <eeprom_read_byte>
     ee8:	f6 01       	movw	r30, r12
     eea:	81 93       	st	Z+, r24
     eec:	6f 01       	movw	r12, r30
     eee:	0f 5f       	subi	r16, 0xFF	; 255
     ef0:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 32);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
     ef2:	00 33       	cpi	r16, 0x30	; 48
     ef4:	11 05       	cpc	r17, r1
     ef6:	b1 f7       	brne	.-20     	; 0xee4 <main+0x536>
     ef8:	80 e6       	ldi	r24, 0x60	; 96
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	e8 e3       	ldi	r30, 0x38	; 56
     efe:	f1 e0       	ldi	r31, 0x01	; 1
     f00:	de 01       	movw	r26, r28
     f02:	af 55       	subi	r26, 0x5F	; 95
     f04:	b0 4e       	sbci	r27, 0xE0	; 224
     f06:	01 90       	ld	r0, Z+
     f08:	0d 92       	st	X+, r0
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	e1 f7       	brne	.-8      	; 0xf06 <main+0x558>
     f0e:	80 91 96 02 	lds	r24, 0x0296
     f12:	98 e0       	ldi	r25, 0x08	; 8
     f14:	e0 e3       	ldi	r30, 0x30	; 48
     f16:	f1 e0       	ldi	r31, 0x01	; 1
     f18:	de 01       	movw	r26, r28
     f1a:	a7 5e       	subi	r26, 0xE7	; 231
     f1c:	b0 4d       	sbci	r27, 0xD0	; 208
     f1e:	01 90       	ld	r0, Z+
     f20:	0d 92       	st	X+, r0
     f22:	9a 95       	dec	r25
     f24:	e1 f7       	brne	.-8      	; 0xf1e <main+0x570>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     f26:	a1 ea       	ldi	r26, 0xA1	; 161
     f28:	bf e1       	ldi	r27, 0x1F	; 31
     f2a:	ac 0f       	add	r26, r28
     f2c:	bd 1f       	adc	r27, r29
     f2e:	f8 e0       	ldi	r31, 0x08	; 8
     f30:	8f 9f       	mul	r24, r31
     f32:	a0 0d       	add	r26, r0
     f34:	b1 1d       	adc	r27, r1
     f36:	11 24       	eor	r1, r1
     f38:	98 e0       	ldi	r25, 0x08	; 8
     f3a:	fe 01       	movw	r30, r28
     f3c:	e7 5e       	subi	r30, 0xE7	; 231
     f3e:	f0 4d       	sbci	r31, 0xD0	; 208
     f40:	01 90       	ld	r0, Z+
     f42:	0d 92       	st	X+, r0
     f44:	9a 95       	dec	r25
     f46:	e1 f7       	brne	.-8      	; 0xf40 <main+0x592>
	explosions.timeBetween[explosions.index] = a;
     f48:	21 ea       	ldi	r18, 0xA1	; 161
     f4a:	3f e1       	ldi	r19, 0x1F	; 31
     f4c:	2c 0f       	add	r18, r28
     f4e:	3d 1f       	adc	r19, r29
     f50:	28 0f       	add	r18, r24
     f52:	31 1d       	adc	r19, r1
     f54:	f9 01       	movw	r30, r18
     f56:	e8 5e       	subi	r30, 0xE8	; 232
     f58:	fe 4f       	sbci	r31, 0xFE	; 254
     f5a:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     f5c:	b3 96       	adiw	r30, 0x23	; 35
     f5e:	92 e0       	ldi	r25, 0x02	; 2
     f60:	90 83       	st	Z, r25
	explosions.index++;
     f62:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     f64:	c1 50       	subi	r28, 0x01	; 1
     f66:	df 4d       	sbci	r29, 0xDF	; 223
     f68:	88 83       	st	Y, r24
     f6a:	cf 5f       	subi	r28, 0xFF	; 255
     f6c:	d0 42       	sbci	r29, 0x20	; 32
     f6e:	20 e6       	ldi	r18, 0x60	; 96
     f70:	31 e0       	ldi	r19, 0x01	; 1
     f72:	fe 01       	movw	r30, r28
     f74:	ef 55       	subi	r30, 0x5F	; 95
     f76:	f0 4e       	sbci	r31, 0xE0	; 224
     f78:	de 01       	movw	r26, r28
     f7a:	af 5b       	subi	r26, 0xBF	; 191
     f7c:	b1 4e       	sbci	r27, 0xE1	; 225
     f7e:	01 90       	ld	r0, Z+
     f80:	0d 92       	st	X+, r0
     f82:	21 50       	subi	r18, 0x01	; 1
     f84:	30 40       	sbci	r19, 0x00	; 0
     f86:	d9 f7       	brne	.-10     	; 0xf7e <main+0x5d0>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 40);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
     f88:	c1 56       	subi	r28, 0x61	; 97
     f8a:	d0 4e       	sbci	r29, 0xE0	; 224
     f8c:	88 83       	st	Y, r24
     f8e:	cf 59       	subi	r28, 0x9F	; 159
     f90:	df 41       	sbci	r29, 0x1F	; 31
     f92:	80 e6       	ldi	r24, 0x60	; 96
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	fe 01       	movw	r30, r28
     f98:	ef 5b       	subi	r30, 0xBF	; 191
     f9a:	f1 4e       	sbci	r31, 0xE1	; 225
     f9c:	a8 e3       	ldi	r26, 0x38	; 56
     f9e:	b1 e0       	ldi	r27, 0x01	; 1
     fa0:	01 90       	ld	r0, Z+
     fa2:	0d 92       	st	X+, r0
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	e1 f7       	brne	.-8      	; 0xfa0 <main+0x5f2>
     fa8:	0f 2e       	mov	r0, r31
     faa:	f0 e3       	ldi	r31, 0x30	; 48
     fac:	cf 2e       	mov	r12, r31
     fae:	f1 e0       	ldi	r31, 0x01	; 1
     fb0:	df 2e       	mov	r13, r31
     fb2:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 48);
     fb4:	c8 01       	movw	r24, r16
     fb6:	bc d4       	rcall	.+2424   	; 0x1930 <eeprom_read_byte>
     fb8:	f6 01       	movw	r30, r12
     fba:	81 93       	st	Z+, r24
     fbc:	6f 01       	movw	r12, r30
     fbe:	0f 5f       	subi	r16, 0xFF	; 255
     fc0:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 40);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
     fc2:	08 33       	cpi	r16, 0x38	; 56
     fc4:	11 05       	cpc	r17, r1
     fc6:	b1 f7       	brne	.-20     	; 0xfb4 <main+0x606>
     fc8:	80 e6       	ldi	r24, 0x60	; 96
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	e8 e3       	ldi	r30, 0x38	; 56
     fce:	f1 e0       	ldi	r31, 0x01	; 1
     fd0:	de 01       	movw	r26, r28
     fd2:	af 51       	subi	r26, 0x1F	; 31
     fd4:	b3 4e       	sbci	r27, 0xE3	; 227
     fd6:	01 90       	ld	r0, Z+
     fd8:	0d 92       	st	X+, r0
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <main+0x628>
     fde:	80 91 96 02 	lds	r24, 0x0296
     fe2:	98 e0       	ldi	r25, 0x08	; 8
     fe4:	e0 e3       	ldi	r30, 0x30	; 48
     fe6:	f1 e0       	ldi	r31, 0x01	; 1
     fe8:	de 01       	movw	r26, r28
     fea:	af 5e       	subi	r26, 0xEF	; 239
     fec:	b0 4d       	sbci	r27, 0xD0	; 208
     fee:	01 90       	ld	r0, Z+
     ff0:	0d 92       	st	X+, r0
     ff2:	9a 95       	dec	r25
     ff4:	e1 f7       	brne	.-8      	; 0xfee <main+0x640>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     ff6:	a1 ee       	ldi	r26, 0xE1	; 225
     ff8:	bc e1       	ldi	r27, 0x1C	; 28
     ffa:	ac 0f       	add	r26, r28
     ffc:	bd 1f       	adc	r27, r29
     ffe:	f8 e0       	ldi	r31, 0x08	; 8
    1000:	8f 9f       	mul	r24, r31
    1002:	a0 0d       	add	r26, r0
    1004:	b1 1d       	adc	r27, r1
    1006:	11 24       	eor	r1, r1
    1008:	98 e0       	ldi	r25, 0x08	; 8
    100a:	fe 01       	movw	r30, r28
    100c:	ef 5e       	subi	r30, 0xEF	; 239
    100e:	f0 4d       	sbci	r31, 0xD0	; 208
    1010:	01 90       	ld	r0, Z+
    1012:	0d 92       	st	X+, r0
    1014:	9a 95       	dec	r25
    1016:	e1 f7       	brne	.-8      	; 0x1010 <main+0x662>
	explosions.timeBetween[explosions.index] = a;
    1018:	21 ee       	ldi	r18, 0xE1	; 225
    101a:	3c e1       	ldi	r19, 0x1C	; 28
    101c:	2c 0f       	add	r18, r28
    101e:	3d 1f       	adc	r19, r29
    1020:	28 0f       	add	r18, r24
    1022:	31 1d       	adc	r19, r1
    1024:	f9 01       	movw	r30, r18
    1026:	e8 5e       	subi	r30, 0xE8	; 232
    1028:	fe 4f       	sbci	r31, 0xFE	; 254
    102a:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    102c:	b3 96       	adiw	r30, 0x23	; 35
    102e:	92 e0       	ldi	r25, 0x02	; 2
    1030:	90 83       	st	Z, r25
	explosions.index++;
    1032:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1034:	c1 5c       	subi	r28, 0xC1	; 193
    1036:	d1 4e       	sbci	r29, 0xE1	; 225
    1038:	88 83       	st	Y, r24
    103a:	cf 53       	subi	r28, 0x3F	; 63
    103c:	de 41       	sbci	r29, 0x1E	; 30
    103e:	20 e6       	ldi	r18, 0x60	; 96
    1040:	31 e0       	ldi	r19, 0x01	; 1
    1042:	fe 01       	movw	r30, r28
    1044:	ef 51       	subi	r30, 0x1F	; 31
    1046:	f3 4e       	sbci	r31, 0xE3	; 227
    1048:	de 01       	movw	r26, r28
    104a:	af 57       	subi	r26, 0x7F	; 127
    104c:	b4 4e       	sbci	r27, 0xE4	; 228
    104e:	01 90       	ld	r0, Z+
    1050:	0d 92       	st	X+, r0
    1052:	21 50       	subi	r18, 0x01	; 1
    1054:	30 40       	sbci	r19, 0x00	; 0
    1056:	d9 f7       	brne	.-10     	; 0x104e <main+0x6a0>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 48);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1058:	c1 52       	subi	r28, 0x21	; 33
    105a:	d3 4e       	sbci	r29, 0xE3	; 227
    105c:	88 83       	st	Y, r24
    105e:	cf 5d       	subi	r28, 0xDF	; 223
    1060:	dc 41       	sbci	r29, 0x1C	; 28
    1062:	80 e6       	ldi	r24, 0x60	; 96
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	fe 01       	movw	r30, r28
    1068:	ef 57       	subi	r30, 0x7F	; 127
    106a:	f4 4e       	sbci	r31, 0xE4	; 228
    106c:	a8 e3       	ldi	r26, 0x38	; 56
    106e:	b1 e0       	ldi	r27, 0x01	; 1
    1070:	01 90       	ld	r0, Z+
    1072:	0d 92       	st	X+, r0
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	e1 f7       	brne	.-8      	; 0x1070 <main+0x6c2>
    1078:	0f 2e       	mov	r0, r31
    107a:	f0 e3       	ldi	r31, 0x30	; 48
    107c:	cf 2e       	mov	r12, r31
    107e:	f1 e0       	ldi	r31, 0x01	; 1
    1080:	df 2e       	mov	r13, r31
    1082:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 56);
    1084:	c8 01       	movw	r24, r16
    1086:	54 d4       	rcall	.+2216   	; 0x1930 <eeprom_read_byte>
    1088:	f6 01       	movw	r30, r12
    108a:	81 93       	st	Z+, r24
    108c:	6f 01       	movw	r12, r30
    108e:	0f 5f       	subi	r16, 0xFF	; 255
    1090:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 48);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
    1092:	00 34       	cpi	r16, 0x40	; 64
    1094:	11 05       	cpc	r17, r1
    1096:	b1 f7       	brne	.-20     	; 0x1084 <main+0x6d6>
    1098:	80 e6       	ldi	r24, 0x60	; 96
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	e8 e3       	ldi	r30, 0x38	; 56
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	de 01       	movw	r26, r28
    10a2:	af 5d       	subi	r26, 0xDF	; 223
    10a4:	b5 4e       	sbci	r27, 0xE5	; 229
    10a6:	01 90       	ld	r0, Z+
    10a8:	0d 92       	st	X+, r0
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	e1 f7       	brne	.-8      	; 0x10a6 <main+0x6f8>
    10ae:	80 91 96 02 	lds	r24, 0x0296
    10b2:	98 e0       	ldi	r25, 0x08	; 8
    10b4:	e0 e3       	ldi	r30, 0x30	; 48
    10b6:	f1 e0       	ldi	r31, 0x01	; 1
    10b8:	de 01       	movw	r26, r28
    10ba:	a7 5f       	subi	r26, 0xF7	; 247
    10bc:	b0 4d       	sbci	r27, 0xD0	; 208
    10be:	01 90       	ld	r0, Z+
    10c0:	0d 92       	st	X+, r0
    10c2:	9a 95       	dec	r25
    10c4:	e1 f7       	brne	.-8      	; 0x10be <main+0x710>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    10c6:	a1 e2       	ldi	r26, 0x21	; 33
    10c8:	ba e1       	ldi	r27, 0x1A	; 26
    10ca:	ac 0f       	add	r26, r28
    10cc:	bd 1f       	adc	r27, r29
    10ce:	f8 e0       	ldi	r31, 0x08	; 8
    10d0:	8f 9f       	mul	r24, r31
    10d2:	a0 0d       	add	r26, r0
    10d4:	b1 1d       	adc	r27, r1
    10d6:	11 24       	eor	r1, r1
    10d8:	98 e0       	ldi	r25, 0x08	; 8
    10da:	fe 01       	movw	r30, r28
    10dc:	e7 5f       	subi	r30, 0xF7	; 247
    10de:	f0 4d       	sbci	r31, 0xD0	; 208
    10e0:	01 90       	ld	r0, Z+
    10e2:	0d 92       	st	X+, r0
    10e4:	9a 95       	dec	r25
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <main+0x732>
	explosions.timeBetween[explosions.index] = a;
    10e8:	21 e2       	ldi	r18, 0x21	; 33
    10ea:	3a e1       	ldi	r19, 0x1A	; 26
    10ec:	2c 0f       	add	r18, r28
    10ee:	3d 1f       	adc	r19, r29
    10f0:	28 0f       	add	r18, r24
    10f2:	31 1d       	adc	r19, r1
    10f4:	f9 01       	movw	r30, r18
    10f6:	e8 5e       	subi	r30, 0xE8	; 232
    10f8:	fe 4f       	sbci	r31, 0xFE	; 254
    10fa:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    10fc:	b3 96       	adiw	r30, 0x23	; 35
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	90 83       	st	Z, r25
	explosions.index++;
    1102:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1104:	c1 58       	subi	r28, 0x81	; 129
    1106:	d4 4e       	sbci	r29, 0xE4	; 228
    1108:	88 83       	st	Y, r24
    110a:	cf 57       	subi	r28, 0x7F	; 127
    110c:	db 41       	sbci	r29, 0x1B	; 27
    110e:	20 e6       	ldi	r18, 0x60	; 96
    1110:	31 e0       	ldi	r19, 0x01	; 1
    1112:	fe 01       	movw	r30, r28
    1114:	ef 5d       	subi	r30, 0xDF	; 223
    1116:	f5 4e       	sbci	r31, 0xE5	; 229
    1118:	de 01       	movw	r26, r28
    111a:	af 53       	subi	r26, 0x3F	; 63
    111c:	b7 4e       	sbci	r27, 0xE7	; 231
    111e:	01 90       	ld	r0, Z+
    1120:	0d 92       	st	X+, r0
    1122:	21 50       	subi	r18, 0x01	; 1
    1124:	30 40       	sbci	r19, 0x00	; 0
    1126:	d9 f7       	brne	.-10     	; 0x111e <main+0x770>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 56);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1128:	c1 5e       	subi	r28, 0xE1	; 225
    112a:	d5 4e       	sbci	r29, 0xE5	; 229
    112c:	88 83       	st	Y, r24
    112e:	cf 51       	subi	r28, 0x1F	; 31
    1130:	da 41       	sbci	r29, 0x1A	; 26
    1132:	80 e6       	ldi	r24, 0x60	; 96
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	fe 01       	movw	r30, r28
    1138:	ef 53       	subi	r30, 0x3F	; 63
    113a:	f7 4e       	sbci	r31, 0xE7	; 231
    113c:	a8 e3       	ldi	r26, 0x38	; 56
    113e:	b1 e0       	ldi	r27, 0x01	; 1
    1140:	01 90       	ld	r0, Z+
    1142:	0d 92       	st	X+, r0
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	e1 f7       	brne	.-8      	; 0x1140 <main+0x792>
    1148:	0f 2e       	mov	r0, r31
    114a:	f0 e3       	ldi	r31, 0x30	; 48
    114c:	cf 2e       	mov	r12, r31
    114e:	f1 e0       	ldi	r31, 0x01	; 1
    1150:	df 2e       	mov	r13, r31
    1152:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 64);
    1154:	c8 01       	movw	r24, r16
    1156:	ec d3       	rcall	.+2008   	; 0x1930 <eeprom_read_byte>
    1158:	f6 01       	movw	r30, r12
    115a:	81 93       	st	Z+, r24
    115c:	6f 01       	movw	r12, r30
    115e:	0f 5f       	subi	r16, 0xFF	; 255
    1160:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 56);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
    1162:	08 34       	cpi	r16, 0x48	; 72
    1164:	11 05       	cpc	r17, r1
    1166:	b1 f7       	brne	.-20     	; 0x1154 <main+0x7a6>
    1168:	80 e6       	ldi	r24, 0x60	; 96
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	e8 e3       	ldi	r30, 0x38	; 56
    116e:	f1 e0       	ldi	r31, 0x01	; 1
    1170:	de 01       	movw	r26, r28
    1172:	af 59       	subi	r26, 0x9F	; 159
    1174:	b8 4e       	sbci	r27, 0xE8	; 232
    1176:	01 90       	ld	r0, Z+
    1178:	0d 92       	st	X+, r0
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	e1 f7       	brne	.-8      	; 0x1176 <main+0x7c8>
    117e:	80 91 96 02 	lds	r24, 0x0296
    1182:	98 e0       	ldi	r25, 0x08	; 8
    1184:	e0 e3       	ldi	r30, 0x30	; 48
    1186:	f1 e0       	ldi	r31, 0x01	; 1
    1188:	de 01       	movw	r26, r28
    118a:	af 5f       	subi	r26, 0xFF	; 255
    118c:	b0 4d       	sbci	r27, 0xD0	; 208
    118e:	01 90       	ld	r0, Z+
    1190:	0d 92       	st	X+, r0
    1192:	9a 95       	dec	r25
    1194:	e1 f7       	brne	.-8      	; 0x118e <main+0x7e0>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1196:	a1 e6       	ldi	r26, 0x61	; 97
    1198:	b7 e1       	ldi	r27, 0x17	; 23
    119a:	ac 0f       	add	r26, r28
    119c:	bd 1f       	adc	r27, r29
    119e:	f8 e0       	ldi	r31, 0x08	; 8
    11a0:	8f 9f       	mul	r24, r31
    11a2:	a0 0d       	add	r26, r0
    11a4:	b1 1d       	adc	r27, r1
    11a6:	11 24       	eor	r1, r1
    11a8:	98 e0       	ldi	r25, 0x08	; 8
    11aa:	fe 01       	movw	r30, r28
    11ac:	ef 5f       	subi	r30, 0xFF	; 255
    11ae:	f0 4d       	sbci	r31, 0xD0	; 208
    11b0:	01 90       	ld	r0, Z+
    11b2:	0d 92       	st	X+, r0
    11b4:	9a 95       	dec	r25
    11b6:	e1 f7       	brne	.-8      	; 0x11b0 <main+0x802>
	explosions.timeBetween[explosions.index] = a;
    11b8:	21 e6       	ldi	r18, 0x61	; 97
    11ba:	37 e1       	ldi	r19, 0x17	; 23
    11bc:	2c 0f       	add	r18, r28
    11be:	3d 1f       	adc	r19, r29
    11c0:	28 0f       	add	r18, r24
    11c2:	31 1d       	adc	r19, r1
    11c4:	f9 01       	movw	r30, r18
    11c6:	e8 5e       	subi	r30, 0xE8	; 232
    11c8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ca:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    11cc:	b3 96       	adiw	r30, 0x23	; 35
    11ce:	92 e0       	ldi	r25, 0x02	; 2
    11d0:	90 83       	st	Z, r25
	explosions.index++;
    11d2:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    11d4:	c1 54       	subi	r28, 0x41	; 65
    11d6:	d7 4e       	sbci	r29, 0xE7	; 231
    11d8:	88 83       	st	Y, r24
    11da:	cf 5b       	subi	r28, 0xBF	; 191
    11dc:	d8 41       	sbci	r29, 0x18	; 24
    11de:	20 e6       	ldi	r18, 0x60	; 96
    11e0:	31 e0       	ldi	r19, 0x01	; 1
    11e2:	fe 01       	movw	r30, r28
    11e4:	ef 59       	subi	r30, 0x9F	; 159
    11e6:	f8 4e       	sbci	r31, 0xE8	; 232
    11e8:	de 01       	movw	r26, r28
    11ea:	af 5f       	subi	r26, 0xFF	; 255
    11ec:	b9 4e       	sbci	r27, 0xE9	; 233
    11ee:	01 90       	ld	r0, Z+
    11f0:	0d 92       	st	X+, r0
    11f2:	21 50       	subi	r18, 0x01	; 1
    11f4:	30 40       	sbci	r19, 0x00	; 0
    11f6:	d9 f7       	brne	.-10     	; 0x11ee <main+0x840>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 64);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
    11f8:	c1 5a       	subi	r28, 0xA1	; 161
    11fa:	d8 4e       	sbci	r29, 0xE8	; 232
    11fc:	88 83       	st	Y, r24
    11fe:	cf 55       	subi	r28, 0x5F	; 95
    1200:	d7 41       	sbci	r29, 0x17	; 23
    1202:	80 e6       	ldi	r24, 0x60	; 96
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	fe 01       	movw	r30, r28
    1208:	ef 5f       	subi	r30, 0xFF	; 255
    120a:	f9 4e       	sbci	r31, 0xE9	; 233
    120c:	a8 e3       	ldi	r26, 0x38	; 56
    120e:	b1 e0       	ldi	r27, 0x01	; 1
    1210:	01 90       	ld	r0, Z+
    1212:	0d 92       	st	X+, r0
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	e1 f7       	brne	.-8      	; 0x1210 <main+0x862>
    1218:	0f 2e       	mov	r0, r31
    121a:	f0 e3       	ldi	r31, 0x30	; 48
    121c:	cf 2e       	mov	r12, r31
    121e:	f1 e0       	ldi	r31, 0x01	; 1
    1220:	df 2e       	mov	r13, r31
    1222:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 72);
    1224:	c8 01       	movw	r24, r16
    1226:	84 d3       	rcall	.+1800   	; 0x1930 <eeprom_read_byte>
    1228:	f6 01       	movw	r30, r12
    122a:	81 93       	st	Z+, r24
    122c:	6f 01       	movw	r12, r30
    122e:	0f 5f       	subi	r16, 0xFF	; 255
    1230:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 64);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
    1232:	00 35       	cpi	r16, 0x50	; 80
    1234:	11 05       	cpc	r17, r1
    1236:	b1 f7       	brne	.-20     	; 0x1224 <main+0x876>
    1238:	80 e6       	ldi	r24, 0x60	; 96
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	e8 e3       	ldi	r30, 0x38	; 56
    123e:	f1 e0       	ldi	r31, 0x01	; 1
    1240:	de 01       	movw	r26, r28
    1242:	af 55       	subi	r26, 0x5F	; 95
    1244:	bb 4e       	sbci	r27, 0xEB	; 235
    1246:	01 90       	ld	r0, Z+
    1248:	0d 92       	st	X+, r0
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	e1 f7       	brne	.-8      	; 0x1246 <main+0x898>
    124e:	80 91 96 02 	lds	r24, 0x0296
    1252:	98 e0       	ldi	r25, 0x08	; 8
    1254:	e0 e3       	ldi	r30, 0x30	; 48
    1256:	f1 e0       	ldi	r31, 0x01	; 1
    1258:	de 01       	movw	r26, r28
    125a:	a7 50       	subi	r26, 0x07	; 7
    125c:	b1 4d       	sbci	r27, 0xD1	; 209
    125e:	01 90       	ld	r0, Z+
    1260:	0d 92       	st	X+, r0
    1262:	9a 95       	dec	r25
    1264:	e1 f7       	brne	.-8      	; 0x125e <main+0x8b0>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1266:	a1 ea       	ldi	r26, 0xA1	; 161
    1268:	b4 e1       	ldi	r27, 0x14	; 20
    126a:	ac 0f       	add	r26, r28
    126c:	bd 1f       	adc	r27, r29
    126e:	f8 e0       	ldi	r31, 0x08	; 8
    1270:	8f 9f       	mul	r24, r31
    1272:	a0 0d       	add	r26, r0
    1274:	b1 1d       	adc	r27, r1
    1276:	11 24       	eor	r1, r1
    1278:	98 e0       	ldi	r25, 0x08	; 8
    127a:	fe 01       	movw	r30, r28
    127c:	e7 50       	subi	r30, 0x07	; 7
    127e:	f1 4d       	sbci	r31, 0xD1	; 209
    1280:	01 90       	ld	r0, Z+
    1282:	0d 92       	st	X+, r0
    1284:	9a 95       	dec	r25
    1286:	e1 f7       	brne	.-8      	; 0x1280 <main+0x8d2>
	explosions.timeBetween[explosions.index] = a;
    1288:	21 ea       	ldi	r18, 0xA1	; 161
    128a:	34 e1       	ldi	r19, 0x14	; 20
    128c:	2c 0f       	add	r18, r28
    128e:	3d 1f       	adc	r19, r29
    1290:	28 0f       	add	r18, r24
    1292:	31 1d       	adc	r19, r1
    1294:	f9 01       	movw	r30, r18
    1296:	e8 5e       	subi	r30, 0xE8	; 232
    1298:	fe 4f       	sbci	r31, 0xFE	; 254
    129a:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    129c:	b3 96       	adiw	r30, 0x23	; 35
    129e:	92 e0       	ldi	r25, 0x02	; 2
    12a0:	90 83       	st	Z, r25
	explosions.index++;
    12a2:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    12a4:	c1 50       	subi	r28, 0x01	; 1
    12a6:	da 4e       	sbci	r29, 0xEA	; 234
    12a8:	88 83       	st	Y, r24
    12aa:	cf 5f       	subi	r28, 0xFF	; 255
    12ac:	d5 41       	sbci	r29, 0x15	; 21
    12ae:	20 e6       	ldi	r18, 0x60	; 96
    12b0:	31 e0       	ldi	r19, 0x01	; 1
    12b2:	fe 01       	movw	r30, r28
    12b4:	ef 55       	subi	r30, 0x5F	; 95
    12b6:	fb 4e       	sbci	r31, 0xEB	; 235
    12b8:	de 01       	movw	r26, r28
    12ba:	af 5b       	subi	r26, 0xBF	; 191
    12bc:	bc 4e       	sbci	r27, 0xEC	; 236
    12be:	01 90       	ld	r0, Z+
    12c0:	0d 92       	st	X+, r0
    12c2:	21 50       	subi	r18, 0x01	; 1
    12c4:	30 40       	sbci	r19, 0x00	; 0
    12c6:	d9 f7       	brne	.-10     	; 0x12be <main+0x910>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 72);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
    12c8:	c1 56       	subi	r28, 0x61	; 97
    12ca:	db 4e       	sbci	r29, 0xEB	; 235
    12cc:	88 83       	st	Y, r24
    12ce:	cf 59       	subi	r28, 0x9F	; 159
    12d0:	d4 41       	sbci	r29, 0x14	; 20
    12d2:	80 e6       	ldi	r24, 0x60	; 96
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	fe 01       	movw	r30, r28
    12d8:	ef 5b       	subi	r30, 0xBF	; 191
    12da:	fc 4e       	sbci	r31, 0xEC	; 236
    12dc:	a8 e3       	ldi	r26, 0x38	; 56
    12de:	b1 e0       	ldi	r27, 0x01	; 1
    12e0:	01 90       	ld	r0, Z+
    12e2:	0d 92       	st	X+, r0
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	e1 f7       	brne	.-8      	; 0x12e0 <main+0x932>
    12e8:	0f 2e       	mov	r0, r31
    12ea:	f0 e3       	ldi	r31, 0x30	; 48
    12ec:	cf 2e       	mov	r12, r31
    12ee:	f1 e0       	ldi	r31, 0x01	; 1
    12f0:	df 2e       	mov	r13, r31
    12f2:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 80);
    12f4:	c8 01       	movw	r24, r16
    12f6:	1c d3       	rcall	.+1592   	; 0x1930 <eeprom_read_byte>
    12f8:	f6 01       	movw	r30, r12
    12fa:	81 93       	st	Z+, r24
    12fc:	6f 01       	movw	r12, r30
    12fe:	0f 5f       	subi	r16, 0xFF	; 255
    1300:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 72);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
    1302:	08 35       	cpi	r16, 0x58	; 88
    1304:	11 05       	cpc	r17, r1
    1306:	b1 f7       	brne	.-20     	; 0x12f4 <main+0x946>
    1308:	80 e6       	ldi	r24, 0x60	; 96
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	e8 e3       	ldi	r30, 0x38	; 56
    130e:	f1 e0       	ldi	r31, 0x01	; 1
    1310:	de 01       	movw	r26, r28
    1312:	af 51       	subi	r26, 0x1F	; 31
    1314:	be 4e       	sbci	r27, 0xEE	; 238
    1316:	01 90       	ld	r0, Z+
    1318:	0d 92       	st	X+, r0
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	e1 f7       	brne	.-8      	; 0x1316 <main+0x968>
    131e:	80 91 96 02 	lds	r24, 0x0296
    1322:	98 e0       	ldi	r25, 0x08	; 8
    1324:	e0 e3       	ldi	r30, 0x30	; 48
    1326:	f1 e0       	ldi	r31, 0x01	; 1
    1328:	de 01       	movw	r26, r28
    132a:	af 50       	subi	r26, 0x0F	; 15
    132c:	b1 4d       	sbci	r27, 0xD1	; 209
    132e:	01 90       	ld	r0, Z+
    1330:	0d 92       	st	X+, r0
    1332:	9a 95       	dec	r25
    1334:	e1 f7       	brne	.-8      	; 0x132e <main+0x980>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1336:	a1 ee       	ldi	r26, 0xE1	; 225
    1338:	b1 e1       	ldi	r27, 0x11	; 17
    133a:	ac 0f       	add	r26, r28
    133c:	bd 1f       	adc	r27, r29
    133e:	f8 e0       	ldi	r31, 0x08	; 8
    1340:	8f 9f       	mul	r24, r31
    1342:	a0 0d       	add	r26, r0
    1344:	b1 1d       	adc	r27, r1
    1346:	11 24       	eor	r1, r1
    1348:	98 e0       	ldi	r25, 0x08	; 8
    134a:	fe 01       	movw	r30, r28
    134c:	ef 50       	subi	r30, 0x0F	; 15
    134e:	f1 4d       	sbci	r31, 0xD1	; 209
    1350:	01 90       	ld	r0, Z+
    1352:	0d 92       	st	X+, r0
    1354:	9a 95       	dec	r25
    1356:	e1 f7       	brne	.-8      	; 0x1350 <main+0x9a2>
	explosions.timeBetween[explosions.index] = a;
    1358:	21 ee       	ldi	r18, 0xE1	; 225
    135a:	31 e1       	ldi	r19, 0x11	; 17
    135c:	2c 0f       	add	r18, r28
    135e:	3d 1f       	adc	r19, r29
    1360:	28 0f       	add	r18, r24
    1362:	31 1d       	adc	r19, r1
    1364:	f9 01       	movw	r30, r18
    1366:	e8 5e       	subi	r30, 0xE8	; 232
    1368:	fe 4f       	sbci	r31, 0xFE	; 254
    136a:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    136c:	b3 96       	adiw	r30, 0x23	; 35
    136e:	92 e0       	ldi	r25, 0x02	; 2
    1370:	90 83       	st	Z, r25
	explosions.index++;
    1372:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1374:	c1 5c       	subi	r28, 0xC1	; 193
    1376:	dc 4e       	sbci	r29, 0xEC	; 236
    1378:	88 83       	st	Y, r24
    137a:	cf 53       	subi	r28, 0x3F	; 63
    137c:	d3 41       	sbci	r29, 0x13	; 19
    137e:	20 e6       	ldi	r18, 0x60	; 96
    1380:	31 e0       	ldi	r19, 0x01	; 1
    1382:	fe 01       	movw	r30, r28
    1384:	ef 51       	subi	r30, 0x1F	; 31
    1386:	fe 4e       	sbci	r31, 0xEE	; 238
    1388:	de 01       	movw	r26, r28
    138a:	af 57       	subi	r26, 0x7F	; 127
    138c:	bf 4e       	sbci	r27, 0xEF	; 239
    138e:	01 90       	ld	r0, Z+
    1390:	0d 92       	st	X+, r0
    1392:	21 50       	subi	r18, 0x01	; 1
    1394:	30 40       	sbci	r19, 0x00	; 0
    1396:	d9 f7       	brne	.-10     	; 0x138e <main+0x9e0>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 80);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1398:	c1 52       	subi	r28, 0x21	; 33
    139a:	de 4e       	sbci	r29, 0xEE	; 238
    139c:	88 83       	st	Y, r24
    139e:	cf 5d       	subi	r28, 0xDF	; 223
    13a0:	d1 41       	sbci	r29, 0x11	; 17
    13a2:	80 e6       	ldi	r24, 0x60	; 96
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	fe 01       	movw	r30, r28
    13a8:	ef 57       	subi	r30, 0x7F	; 127
    13aa:	ff 4e       	sbci	r31, 0xEF	; 239
    13ac:	a8 e3       	ldi	r26, 0x38	; 56
    13ae:	b1 e0       	ldi	r27, 0x01	; 1
    13b0:	01 90       	ld	r0, Z+
    13b2:	0d 92       	st	X+, r0
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <main+0xa02>
    13b8:	0f 2e       	mov	r0, r31
    13ba:	f0 e3       	ldi	r31, 0x30	; 48
    13bc:	cf 2e       	mov	r12, r31
    13be:	f1 e0       	ldi	r31, 0x01	; 1
    13c0:	df 2e       	mov	r13, r31
    13c2:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 88);
    13c4:	c8 01       	movw	r24, r16
    13c6:	b4 d2       	rcall	.+1384   	; 0x1930 <eeprom_read_byte>
    13c8:	f6 01       	movw	r30, r12
    13ca:	81 93       	st	Z+, r24
    13cc:	6f 01       	movw	r12, r30
    13ce:	0f 5f       	subi	r16, 0xFF	; 255
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 80);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
    13d2:	00 36       	cpi	r16, 0x60	; 96
    13d4:	11 05       	cpc	r17, r1
    13d6:	b1 f7       	brne	.-20     	; 0x13c4 <main+0xa16>
    13d8:	80 e6       	ldi	r24, 0x60	; 96
    13da:	91 e0       	ldi	r25, 0x01	; 1
    13dc:	e8 e3       	ldi	r30, 0x38	; 56
    13de:	f1 e0       	ldi	r31, 0x01	; 1
    13e0:	de 01       	movw	r26, r28
    13e2:	af 5d       	subi	r26, 0xDF	; 223
    13e4:	b0 4f       	sbci	r27, 0xF0	; 240
    13e6:	01 90       	ld	r0, Z+
    13e8:	0d 92       	st	X+, r0
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	e1 f7       	brne	.-8      	; 0x13e6 <main+0xa38>
    13ee:	80 91 96 02 	lds	r24, 0x0296
    13f2:	98 e0       	ldi	r25, 0x08	; 8
    13f4:	e0 e3       	ldi	r30, 0x30	; 48
    13f6:	f1 e0       	ldi	r31, 0x01	; 1
    13f8:	de 01       	movw	r26, r28
    13fa:	a7 51       	subi	r26, 0x17	; 23
    13fc:	b1 4d       	sbci	r27, 0xD1	; 209
    13fe:	01 90       	ld	r0, Z+
    1400:	0d 92       	st	X+, r0
    1402:	9a 95       	dec	r25
    1404:	e1 f7       	brne	.-8      	; 0x13fe <main+0xa50>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1406:	a1 e2       	ldi	r26, 0x21	; 33
    1408:	bf e0       	ldi	r27, 0x0F	; 15
    140a:	ac 0f       	add	r26, r28
    140c:	bd 1f       	adc	r27, r29
    140e:	f8 e0       	ldi	r31, 0x08	; 8
    1410:	8f 9f       	mul	r24, r31
    1412:	a0 0d       	add	r26, r0
    1414:	b1 1d       	adc	r27, r1
    1416:	11 24       	eor	r1, r1
    1418:	98 e0       	ldi	r25, 0x08	; 8
    141a:	fe 01       	movw	r30, r28
    141c:	e7 51       	subi	r30, 0x17	; 23
    141e:	f1 4d       	sbci	r31, 0xD1	; 209
    1420:	01 90       	ld	r0, Z+
    1422:	0d 92       	st	X+, r0
    1424:	9a 95       	dec	r25
    1426:	e1 f7       	brne	.-8      	; 0x1420 <main+0xa72>
	explosions.timeBetween[explosions.index] = a;
    1428:	21 e2       	ldi	r18, 0x21	; 33
    142a:	3f e0       	ldi	r19, 0x0F	; 15
    142c:	2c 0f       	add	r18, r28
    142e:	3d 1f       	adc	r19, r29
    1430:	28 0f       	add	r18, r24
    1432:	31 1d       	adc	r19, r1
    1434:	f9 01       	movw	r30, r18
    1436:	e8 5e       	subi	r30, 0xE8	; 232
    1438:	fe 4f       	sbci	r31, 0xFE	; 254
    143a:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    143c:	b3 96       	adiw	r30, 0x23	; 35
    143e:	92 e0       	ldi	r25, 0x02	; 2
    1440:	90 83       	st	Z, r25
	explosions.index++;
    1442:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1444:	c1 58       	subi	r28, 0x81	; 129
    1446:	df 4e       	sbci	r29, 0xEF	; 239
    1448:	88 83       	st	Y, r24
    144a:	cf 57       	subi	r28, 0x7F	; 127
    144c:	d0 41       	sbci	r29, 0x10	; 16
    144e:	20 e6       	ldi	r18, 0x60	; 96
    1450:	31 e0       	ldi	r19, 0x01	; 1
    1452:	fe 01       	movw	r30, r28
    1454:	ef 5d       	subi	r30, 0xDF	; 223
    1456:	f0 4f       	sbci	r31, 0xF0	; 240
    1458:	de 01       	movw	r26, r28
    145a:	af 53       	subi	r26, 0x3F	; 63
    145c:	b2 4f       	sbci	r27, 0xF2	; 242
    145e:	01 90       	ld	r0, Z+
    1460:	0d 92       	st	X+, r0
    1462:	21 50       	subi	r18, 0x01	; 1
    1464:	30 40       	sbci	r19, 0x00	; 0
    1466:	d9 f7       	brne	.-10     	; 0x145e <main+0xab0>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 88);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1468:	c1 5e       	subi	r28, 0xE1	; 225
    146a:	d0 4f       	sbci	r29, 0xF0	; 240
    146c:	88 83       	st	Y, r24
    146e:	cf 51       	subi	r28, 0x1F	; 31
    1470:	df 40       	sbci	r29, 0x0F	; 15
    1472:	80 e6       	ldi	r24, 0x60	; 96
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	fe 01       	movw	r30, r28
    1478:	ef 53       	subi	r30, 0x3F	; 63
    147a:	f2 4f       	sbci	r31, 0xF2	; 242
    147c:	a8 e3       	ldi	r26, 0x38	; 56
    147e:	b1 e0       	ldi	r27, 0x01	; 1
    1480:	01 90       	ld	r0, Z+
    1482:	0d 92       	st	X+, r0
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	e1 f7       	brne	.-8      	; 0x1480 <main+0xad2>
    1488:	0f 2e       	mov	r0, r31
    148a:	f0 e3       	ldi	r31, 0x30	; 48
    148c:	cf 2e       	mov	r12, r31
    148e:	f1 e0       	ldi	r31, 0x01	; 1
    1490:	df 2e       	mov	r13, r31
    1492:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 96);
    1494:	c8 01       	movw	r24, r16
    1496:	4c d2       	rcall	.+1176   	; 0x1930 <eeprom_read_byte>
    1498:	f6 01       	movw	r30, r12
    149a:	81 93       	st	Z+, r24
    149c:	6f 01       	movw	r12, r30
    149e:	0f 5f       	subi	r16, 0xFF	; 255
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 88);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
    14a2:	08 36       	cpi	r16, 0x68	; 104
    14a4:	11 05       	cpc	r17, r1
    14a6:	b1 f7       	brne	.-20     	; 0x1494 <main+0xae6>
    14a8:	80 e6       	ldi	r24, 0x60	; 96
    14aa:	91 e0       	ldi	r25, 0x01	; 1
    14ac:	e8 e3       	ldi	r30, 0x38	; 56
    14ae:	f1 e0       	ldi	r31, 0x01	; 1
    14b0:	de 01       	movw	r26, r28
    14b2:	af 59       	subi	r26, 0x9F	; 159
    14b4:	b3 4f       	sbci	r27, 0xF3	; 243
    14b6:	01 90       	ld	r0, Z+
    14b8:	0d 92       	st	X+, r0
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	e1 f7       	brne	.-8      	; 0x14b6 <main+0xb08>
    14be:	80 91 96 02 	lds	r24, 0x0296
    14c2:	98 e0       	ldi	r25, 0x08	; 8
    14c4:	e0 e3       	ldi	r30, 0x30	; 48
    14c6:	f1 e0       	ldi	r31, 0x01	; 1
    14c8:	de 01       	movw	r26, r28
    14ca:	af 51       	subi	r26, 0x1F	; 31
    14cc:	b1 4d       	sbci	r27, 0xD1	; 209
    14ce:	01 90       	ld	r0, Z+
    14d0:	0d 92       	st	X+, r0
    14d2:	9a 95       	dec	r25
    14d4:	e1 f7       	brne	.-8      	; 0x14ce <main+0xb20>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    14d6:	a1 e6       	ldi	r26, 0x61	; 97
    14d8:	bc e0       	ldi	r27, 0x0C	; 12
    14da:	ac 0f       	add	r26, r28
    14dc:	bd 1f       	adc	r27, r29
    14de:	f8 e0       	ldi	r31, 0x08	; 8
    14e0:	8f 9f       	mul	r24, r31
    14e2:	a0 0d       	add	r26, r0
    14e4:	b1 1d       	adc	r27, r1
    14e6:	11 24       	eor	r1, r1
    14e8:	98 e0       	ldi	r25, 0x08	; 8
    14ea:	fe 01       	movw	r30, r28
    14ec:	ef 51       	subi	r30, 0x1F	; 31
    14ee:	f1 4d       	sbci	r31, 0xD1	; 209
    14f0:	01 90       	ld	r0, Z+
    14f2:	0d 92       	st	X+, r0
    14f4:	9a 95       	dec	r25
    14f6:	e1 f7       	brne	.-8      	; 0x14f0 <main+0xb42>
	explosions.timeBetween[explosions.index] = a;
    14f8:	21 e6       	ldi	r18, 0x61	; 97
    14fa:	3c e0       	ldi	r19, 0x0C	; 12
    14fc:	2c 0f       	add	r18, r28
    14fe:	3d 1f       	adc	r19, r29
    1500:	28 0f       	add	r18, r24
    1502:	31 1d       	adc	r19, r1
    1504:	f9 01       	movw	r30, r18
    1506:	e8 5e       	subi	r30, 0xE8	; 232
    1508:	fe 4f       	sbci	r31, 0xFE	; 254
    150a:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    150c:	b3 96       	adiw	r30, 0x23	; 35
    150e:	92 e0       	ldi	r25, 0x02	; 2
    1510:	90 83       	st	Z, r25
	explosions.index++;
    1512:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1514:	c1 54       	subi	r28, 0x41	; 65
    1516:	d2 4f       	sbci	r29, 0xF2	; 242
    1518:	88 83       	st	Y, r24
    151a:	cf 5b       	subi	r28, 0xBF	; 191
    151c:	dd 40       	sbci	r29, 0x0D	; 13
    151e:	20 e6       	ldi	r18, 0x60	; 96
    1520:	31 e0       	ldi	r19, 0x01	; 1
    1522:	fe 01       	movw	r30, r28
    1524:	ef 59       	subi	r30, 0x9F	; 159
    1526:	f3 4f       	sbci	r31, 0xF3	; 243
    1528:	de 01       	movw	r26, r28
    152a:	af 5f       	subi	r26, 0xFF	; 255
    152c:	b4 4f       	sbci	r27, 0xF4	; 244
    152e:	01 90       	ld	r0, Z+
    1530:	0d 92       	st	X+, r0
    1532:	21 50       	subi	r18, 0x01	; 1
    1534:	30 40       	sbci	r19, 0x00	; 0
    1536:	d9 f7       	brne	.-10     	; 0x152e <main+0xb80>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 96);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1538:	c1 5a       	subi	r28, 0xA1	; 161
    153a:	d3 4f       	sbci	r29, 0xF3	; 243
    153c:	88 83       	st	Y, r24
    153e:	cf 55       	subi	r28, 0x5F	; 95
    1540:	dc 40       	sbci	r29, 0x0C	; 12
    1542:	80 e6       	ldi	r24, 0x60	; 96
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	fe 01       	movw	r30, r28
    1548:	ef 5f       	subi	r30, 0xFF	; 255
    154a:	f4 4f       	sbci	r31, 0xF4	; 244
    154c:	a8 e3       	ldi	r26, 0x38	; 56
    154e:	b1 e0       	ldi	r27, 0x01	; 1
    1550:	01 90       	ld	r0, Z+
    1552:	0d 92       	st	X+, r0
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	e1 f7       	brne	.-8      	; 0x1550 <main+0xba2>
    1558:	0f 2e       	mov	r0, r31
    155a:	f0 e3       	ldi	r31, 0x30	; 48
    155c:	cf 2e       	mov	r12, r31
    155e:	f1 e0       	ldi	r31, 0x01	; 1
    1560:	df 2e       	mov	r13, r31
    1562:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 104);
    1564:	c8 01       	movw	r24, r16
    1566:	e4 d1       	rcall	.+968    	; 0x1930 <eeprom_read_byte>
    1568:	f6 01       	movw	r30, r12
    156a:	81 93       	st	Z+, r24
    156c:	6f 01       	movw	r12, r30
    156e:	0f 5f       	subi	r16, 0xFF	; 255
    1570:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 96);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
    1572:	00 37       	cpi	r16, 0x70	; 112
    1574:	11 05       	cpc	r17, r1
    1576:	b1 f7       	brne	.-20     	; 0x1564 <main+0xbb6>
    1578:	80 e6       	ldi	r24, 0x60	; 96
    157a:	91 e0       	ldi	r25, 0x01	; 1
    157c:	e8 e3       	ldi	r30, 0x38	; 56
    157e:	f1 e0       	ldi	r31, 0x01	; 1
    1580:	de 01       	movw	r26, r28
    1582:	af 55       	subi	r26, 0x5F	; 95
    1584:	b6 4f       	sbci	r27, 0xF6	; 246
    1586:	01 90       	ld	r0, Z+
    1588:	0d 92       	st	X+, r0
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	e1 f7       	brne	.-8      	; 0x1586 <main+0xbd8>
    158e:	80 91 96 02 	lds	r24, 0x0296
    1592:	98 e0       	ldi	r25, 0x08	; 8
    1594:	e0 e3       	ldi	r30, 0x30	; 48
    1596:	f1 e0       	ldi	r31, 0x01	; 1
    1598:	de 01       	movw	r26, r28
    159a:	a7 52       	subi	r26, 0x27	; 39
    159c:	b1 4d       	sbci	r27, 0xD1	; 209
    159e:	01 90       	ld	r0, Z+
    15a0:	0d 92       	st	X+, r0
    15a2:	9a 95       	dec	r25
    15a4:	e1 f7       	brne	.-8      	; 0x159e <main+0xbf0>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    15a6:	a1 ea       	ldi	r26, 0xA1	; 161
    15a8:	b9 e0       	ldi	r27, 0x09	; 9
    15aa:	ac 0f       	add	r26, r28
    15ac:	bd 1f       	adc	r27, r29
    15ae:	f8 e0       	ldi	r31, 0x08	; 8
    15b0:	8f 9f       	mul	r24, r31
    15b2:	a0 0d       	add	r26, r0
    15b4:	b1 1d       	adc	r27, r1
    15b6:	11 24       	eor	r1, r1
    15b8:	98 e0       	ldi	r25, 0x08	; 8
    15ba:	fe 01       	movw	r30, r28
    15bc:	e7 52       	subi	r30, 0x27	; 39
    15be:	f1 4d       	sbci	r31, 0xD1	; 209
    15c0:	01 90       	ld	r0, Z+
    15c2:	0d 92       	st	X+, r0
    15c4:	9a 95       	dec	r25
    15c6:	e1 f7       	brne	.-8      	; 0x15c0 <main+0xc12>
	explosions.timeBetween[explosions.index] = a;
    15c8:	21 ea       	ldi	r18, 0xA1	; 161
    15ca:	39 e0       	ldi	r19, 0x09	; 9
    15cc:	2c 0f       	add	r18, r28
    15ce:	3d 1f       	adc	r19, r29
    15d0:	28 0f       	add	r18, r24
    15d2:	31 1d       	adc	r19, r1
    15d4:	f9 01       	movw	r30, r18
    15d6:	e8 5e       	subi	r30, 0xE8	; 232
    15d8:	fe 4f       	sbci	r31, 0xFE	; 254
    15da:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    15dc:	b3 96       	adiw	r30, 0x23	; 35
    15de:	92 e0       	ldi	r25, 0x02	; 2
    15e0:	90 83       	st	Z, r25
	explosions.index++;
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    15e4:	c1 50       	subi	r28, 0x01	; 1
    15e6:	d5 4f       	sbci	r29, 0xF5	; 245
    15e8:	88 83       	st	Y, r24
    15ea:	cf 5f       	subi	r28, 0xFF	; 255
    15ec:	da 40       	sbci	r29, 0x0A	; 10
    15ee:	20 e6       	ldi	r18, 0x60	; 96
    15f0:	31 e0       	ldi	r19, 0x01	; 1
    15f2:	fe 01       	movw	r30, r28
    15f4:	ef 55       	subi	r30, 0x5F	; 95
    15f6:	f6 4f       	sbci	r31, 0xF6	; 246
    15f8:	de 01       	movw	r26, r28
    15fa:	af 5b       	subi	r26, 0xBF	; 191
    15fc:	b7 4f       	sbci	r27, 0xF7	; 247
    15fe:	01 90       	ld	r0, Z+
    1600:	0d 92       	st	X+, r0
    1602:	21 50       	subi	r18, 0x01	; 1
    1604:	30 40       	sbci	r19, 0x00	; 0
    1606:	d9 f7       	brne	.-10     	; 0x15fe <main+0xc50>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 104);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1608:	c1 56       	subi	r28, 0x61	; 97
    160a:	d6 4f       	sbci	r29, 0xF6	; 246
    160c:	88 83       	st	Y, r24
    160e:	cf 59       	subi	r28, 0x9F	; 159
    1610:	d9 40       	sbci	r29, 0x09	; 9
    1612:	80 e6       	ldi	r24, 0x60	; 96
    1614:	91 e0       	ldi	r25, 0x01	; 1
    1616:	fe 01       	movw	r30, r28
    1618:	ef 5b       	subi	r30, 0xBF	; 191
    161a:	f7 4f       	sbci	r31, 0xF7	; 247
    161c:	a8 e3       	ldi	r26, 0x38	; 56
    161e:	b1 e0       	ldi	r27, 0x01	; 1
    1620:	01 90       	ld	r0, Z+
    1622:	0d 92       	st	X+, r0
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	e1 f7       	brne	.-8      	; 0x1620 <main+0xc72>
    1628:	0f 2e       	mov	r0, r31
    162a:	f0 e3       	ldi	r31, 0x30	; 48
    162c:	cf 2e       	mov	r12, r31
    162e:	f1 e0       	ldi	r31, 0x01	; 1
    1630:	df 2e       	mov	r13, r31
    1632:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 112);
    1634:	c8 01       	movw	r24, r16
    1636:	7c d1       	rcall	.+760    	; 0x1930 <eeprom_read_byte>
    1638:	f6 01       	movw	r30, r12
    163a:	81 93       	st	Z+, r24
    163c:	6f 01       	movw	r12, r30
    163e:	0f 5f       	subi	r16, 0xFF	; 255
    1640:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 104);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
    1642:	08 37       	cpi	r16, 0x78	; 120
    1644:	11 05       	cpc	r17, r1
    1646:	b1 f7       	brne	.-20     	; 0x1634 <main+0xc86>
    1648:	80 e6       	ldi	r24, 0x60	; 96
    164a:	91 e0       	ldi	r25, 0x01	; 1
    164c:	e8 e3       	ldi	r30, 0x38	; 56
    164e:	f1 e0       	ldi	r31, 0x01	; 1
    1650:	de 01       	movw	r26, r28
    1652:	af 51       	subi	r26, 0x1F	; 31
    1654:	b9 4f       	sbci	r27, 0xF9	; 249
    1656:	01 90       	ld	r0, Z+
    1658:	0d 92       	st	X+, r0
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	e1 f7       	brne	.-8      	; 0x1656 <main+0xca8>
    165e:	80 91 96 02 	lds	r24, 0x0296
    1662:	98 e0       	ldi	r25, 0x08	; 8
    1664:	e0 e3       	ldi	r30, 0x30	; 48
    1666:	f1 e0       	ldi	r31, 0x01	; 1
    1668:	de 01       	movw	r26, r28
    166a:	af 52       	subi	r26, 0x2F	; 47
    166c:	b1 4d       	sbci	r27, 0xD1	; 209
    166e:	01 90       	ld	r0, Z+
    1670:	0d 92       	st	X+, r0
    1672:	9a 95       	dec	r25
    1674:	e1 f7       	brne	.-8      	; 0x166e <main+0xcc0>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1676:	a1 ee       	ldi	r26, 0xE1	; 225
    1678:	b6 e0       	ldi	r27, 0x06	; 6
    167a:	ac 0f       	add	r26, r28
    167c:	bd 1f       	adc	r27, r29
    167e:	f8 e0       	ldi	r31, 0x08	; 8
    1680:	8f 9f       	mul	r24, r31
    1682:	a0 0d       	add	r26, r0
    1684:	b1 1d       	adc	r27, r1
    1686:	11 24       	eor	r1, r1
    1688:	98 e0       	ldi	r25, 0x08	; 8
    168a:	fe 01       	movw	r30, r28
    168c:	ef 52       	subi	r30, 0x2F	; 47
    168e:	f1 4d       	sbci	r31, 0xD1	; 209
    1690:	01 90       	ld	r0, Z+
    1692:	0d 92       	st	X+, r0
    1694:	9a 95       	dec	r25
    1696:	e1 f7       	brne	.-8      	; 0x1690 <main+0xce2>
	explosions.timeBetween[explosions.index] = a;
    1698:	21 ee       	ldi	r18, 0xE1	; 225
    169a:	36 e0       	ldi	r19, 0x06	; 6
    169c:	2c 0f       	add	r18, r28
    169e:	3d 1f       	adc	r19, r29
    16a0:	28 0f       	add	r18, r24
    16a2:	31 1d       	adc	r19, r1
    16a4:	f9 01       	movw	r30, r18
    16a6:	e8 5e       	subi	r30, 0xE8	; 232
    16a8:	fe 4f       	sbci	r31, 0xFE	; 254
    16aa:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    16ac:	b3 96       	adiw	r30, 0x23	; 35
    16ae:	92 e0       	ldi	r25, 0x02	; 2
    16b0:	90 83       	st	Z, r25
	explosions.index++;
    16b2:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    16b4:	c1 5c       	subi	r28, 0xC1	; 193
    16b6:	d7 4f       	sbci	r29, 0xF7	; 247
    16b8:	88 83       	st	Y, r24
    16ba:	cf 53       	subi	r28, 0x3F	; 63
    16bc:	d8 40       	sbci	r29, 0x08	; 8
    16be:	20 e6       	ldi	r18, 0x60	; 96
    16c0:	31 e0       	ldi	r19, 0x01	; 1
    16c2:	fe 01       	movw	r30, r28
    16c4:	ef 51       	subi	r30, 0x1F	; 31
    16c6:	f9 4f       	sbci	r31, 0xF9	; 249
    16c8:	de 01       	movw	r26, r28
    16ca:	af 57       	subi	r26, 0x7F	; 127
    16cc:	ba 4f       	sbci	r27, 0xFA	; 250
    16ce:	01 90       	ld	r0, Z+
    16d0:	0d 92       	st	X+, r0
    16d2:	21 50       	subi	r18, 0x01	; 1
    16d4:	30 40       	sbci	r19, 0x00	; 0
    16d6:	d9 f7       	brne	.-10     	; 0x16ce <main+0xd20>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 112);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
    16d8:	c1 52       	subi	r28, 0x21	; 33
    16da:	d9 4f       	sbci	r29, 0xF9	; 249
    16dc:	88 83       	st	Y, r24
    16de:	cf 5d       	subi	r28, 0xDF	; 223
    16e0:	d6 40       	sbci	r29, 0x06	; 6
    16e2:	80 e6       	ldi	r24, 0x60	; 96
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	fe 01       	movw	r30, r28
    16e8:	ef 57       	subi	r30, 0x7F	; 127
    16ea:	fa 4f       	sbci	r31, 0xFA	; 250
    16ec:	a8 e3       	ldi	r26, 0x38	; 56
    16ee:	b1 e0       	ldi	r27, 0x01	; 1
    16f0:	01 90       	ld	r0, Z+
    16f2:	0d 92       	st	X+, r0
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	e1 f7       	brne	.-8      	; 0x16f0 <main+0xd42>
    16f8:	0f 2e       	mov	r0, r31
    16fa:	f0 e3       	ldi	r31, 0x30	; 48
    16fc:	cf 2e       	mov	r12, r31
    16fe:	f1 e0       	ldi	r31, 0x01	; 1
    1700:	df 2e       	mov	r13, r31
    1702:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 120);
    1704:	c8 01       	movw	r24, r16
    1706:	14 d1       	rcall	.+552    	; 0x1930 <eeprom_read_byte>
    1708:	f6 01       	movw	r30, r12
    170a:	81 93       	st	Z+, r24
    170c:	6f 01       	movw	r12, r30
    170e:	0f 5f       	subi	r16, 0xFF	; 255
    1710:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 112);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
    1712:	00 38       	cpi	r16, 0x80	; 128
    1714:	11 05       	cpc	r17, r1
    1716:	b1 f7       	brne	.-20     	; 0x1704 <main+0xd56>
    1718:	80 e6       	ldi	r24, 0x60	; 96
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	e8 e3       	ldi	r30, 0x38	; 56
    171e:	f1 e0       	ldi	r31, 0x01	; 1
    1720:	de 01       	movw	r26, r28
    1722:	af 5d       	subi	r26, 0xDF	; 223
    1724:	bb 4f       	sbci	r27, 0xFB	; 251
    1726:	01 90       	ld	r0, Z+
    1728:	0d 92       	st	X+, r0
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	e1 f7       	brne	.-8      	; 0x1726 <main+0xd78>
    172e:	80 91 96 02 	lds	r24, 0x0296
    1732:	98 e0       	ldi	r25, 0x08	; 8
    1734:	e0 e3       	ldi	r30, 0x30	; 48
    1736:	f1 e0       	ldi	r31, 0x01	; 1
    1738:	de 01       	movw	r26, r28
    173a:	a7 53       	subi	r26, 0x37	; 55
    173c:	b1 4d       	sbci	r27, 0xD1	; 209
    173e:	01 90       	ld	r0, Z+
    1740:	0d 92       	st	X+, r0
    1742:	9a 95       	dec	r25
    1744:	e1 f7       	brne	.-8      	; 0x173e <main+0xd90>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1746:	a1 e2       	ldi	r26, 0x21	; 33
    1748:	b4 e0       	ldi	r27, 0x04	; 4
    174a:	ac 0f       	add	r26, r28
    174c:	bd 1f       	adc	r27, r29
    174e:	f8 e0       	ldi	r31, 0x08	; 8
    1750:	8f 9f       	mul	r24, r31
    1752:	a0 0d       	add	r26, r0
    1754:	b1 1d       	adc	r27, r1
    1756:	11 24       	eor	r1, r1
    1758:	98 e0       	ldi	r25, 0x08	; 8
    175a:	fe 01       	movw	r30, r28
    175c:	e7 53       	subi	r30, 0x37	; 55
    175e:	f1 4d       	sbci	r31, 0xD1	; 209
    1760:	01 90       	ld	r0, Z+
    1762:	0d 92       	st	X+, r0
    1764:	9a 95       	dec	r25
    1766:	e1 f7       	brne	.-8      	; 0x1760 <main+0xdb2>
	explosions.timeBetween[explosions.index] = a;
    1768:	21 e2       	ldi	r18, 0x21	; 33
    176a:	34 e0       	ldi	r19, 0x04	; 4
    176c:	2c 0f       	add	r18, r28
    176e:	3d 1f       	adc	r19, r29
    1770:	28 0f       	add	r18, r24
    1772:	31 1d       	adc	r19, r1
    1774:	f9 01       	movw	r30, r18
    1776:	e8 5e       	subi	r30, 0xE8	; 232
    1778:	fe 4f       	sbci	r31, 0xFE	; 254
    177a:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    177c:	b3 96       	adiw	r30, 0x23	; 35
    177e:	92 e0       	ldi	r25, 0x02	; 2
    1780:	90 83       	st	Z, r25
	explosions.index++;
    1782:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1784:	c1 58       	subi	r28, 0x81	; 129
    1786:	da 4f       	sbci	r29, 0xFA	; 250
    1788:	88 83       	st	Y, r24
    178a:	cf 57       	subi	r28, 0x7F	; 127
    178c:	d5 40       	sbci	r29, 0x05	; 5
    178e:	20 e6       	ldi	r18, 0x60	; 96
    1790:	31 e0       	ldi	r19, 0x01	; 1
    1792:	fe 01       	movw	r30, r28
    1794:	ef 5d       	subi	r30, 0xDF	; 223
    1796:	fb 4f       	sbci	r31, 0xFB	; 251
    1798:	de 01       	movw	r26, r28
    179a:	af 53       	subi	r26, 0x3F	; 63
    179c:	bd 4f       	sbci	r27, 0xFD	; 253
    179e:	01 90       	ld	r0, Z+
    17a0:	0d 92       	st	X+, r0
    17a2:	21 50       	subi	r18, 0x01	; 1
    17a4:	30 40       	sbci	r19, 0x00	; 0
    17a6:	d9 f7       	brne	.-10     	; 0x179e <main+0xdf0>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 120);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
    17a8:	c1 5e       	subi	r28, 0xE1	; 225
    17aa:	db 4f       	sbci	r29, 0xFB	; 251
    17ac:	88 83       	st	Y, r24
    17ae:	cf 51       	subi	r28, 0x1F	; 31
    17b0:	d4 40       	sbci	r29, 0x04	; 4
    17b2:	80 e6       	ldi	r24, 0x60	; 96
    17b4:	91 e0       	ldi	r25, 0x01	; 1
    17b6:	fe 01       	movw	r30, r28
    17b8:	ef 53       	subi	r30, 0x3F	; 63
    17ba:	fd 4f       	sbci	r31, 0xFD	; 253
    17bc:	a8 e3       	ldi	r26, 0x38	; 56
    17be:	b1 e0       	ldi	r27, 0x01	; 1
    17c0:	01 90       	ld	r0, Z+
    17c2:	0d 92       	st	X+, r0
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	e1 f7       	brne	.-8      	; 0x17c0 <main+0xe12>
	
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 128);
    17c8:	c8 01       	movw	r24, r16
    17ca:	b2 d0       	rcall	.+356    	; 0x1930 <eeprom_read_byte>
    17cc:	f7 01       	movw	r30, r14
    17ce:	81 93       	st	Z+, r24
    17d0:	7f 01       	movw	r14, r30
    17d2:	0f 5f       	subi	r16, 0xFF	; 255
    17d4:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 8; i++) {
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 120);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
	
	for (int i = 0; i < 8; i++) {
    17d6:	08 38       	cpi	r16, 0x88	; 136
    17d8:	11 05       	cpc	r17, r1
    17da:	b1 f7       	brne	.-20     	; 0x17c8 <main+0xe1a>
    17dc:	80 e6       	ldi	r24, 0x60	; 96
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	e8 e3       	ldi	r30, 0x38	; 56
    17e2:	f1 e0       	ldi	r31, 0x01	; 1
    17e4:	de 01       	movw	r26, r28
    17e6:	af 59       	subi	r26, 0x9F	; 159
    17e8:	be 4f       	sbci	r27, 0xFE	; 254
    17ea:	01 90       	ld	r0, Z+
    17ec:	0d 92       	st	X+, r0
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	e1 f7       	brne	.-8      	; 0x17ea <main+0xe3c>
    17f2:	80 91 96 02 	lds	r24, 0x0296
    17f6:	98 e0       	ldi	r25, 0x08	; 8
    17f8:	e0 e3       	ldi	r30, 0x30	; 48
    17fa:	f1 e0       	ldi	r31, 0x01	; 1
    17fc:	de 01       	movw	r26, r28
    17fe:	af 53       	subi	r26, 0x3F	; 63
    1800:	b1 4d       	sbci	r27, 0xD1	; 209
    1802:	01 90       	ld	r0, Z+
    1804:	0d 92       	st	X+, r0
    1806:	9a 95       	dec	r25
    1808:	e1 f7       	brne	.-8      	; 0x1802 <main+0xe54>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    180a:	a1 e6       	ldi	r26, 0x61	; 97
    180c:	b1 e0       	ldi	r27, 0x01	; 1
    180e:	ac 0f       	add	r26, r28
    1810:	bd 1f       	adc	r27, r29
    1812:	f8 e0       	ldi	r31, 0x08	; 8
    1814:	8f 9f       	mul	r24, r31
    1816:	a0 0d       	add	r26, r0
    1818:	b1 1d       	adc	r27, r1
    181a:	11 24       	eor	r1, r1
    181c:	98 e0       	ldi	r25, 0x08	; 8
    181e:	fe 01       	movw	r30, r28
    1820:	ef 53       	subi	r30, 0x3F	; 63
    1822:	f1 4d       	sbci	r31, 0xD1	; 209
    1824:	01 90       	ld	r0, Z+
    1826:	0d 92       	st	X+, r0
    1828:	9a 95       	dec	r25
    182a:	e1 f7       	brne	.-8      	; 0x1824 <main+0xe76>
	explosions.timeBetween[explosions.index] = a;
    182c:	21 e6       	ldi	r18, 0x61	; 97
    182e:	31 e0       	ldi	r19, 0x01	; 1
    1830:	2c 0f       	add	r18, r28
    1832:	3d 1f       	adc	r19, r29
    1834:	28 0f       	add	r18, r24
    1836:	31 1d       	adc	r19, r1
    1838:	f9 01       	movw	r30, r18
    183a:	e8 5e       	subi	r30, 0xE8	; 232
    183c:	fe 4f       	sbci	r31, 0xFE	; 254
    183e:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1840:	b3 96       	adiw	r30, 0x23	; 35
    1842:	92 e0       	ldi	r25, 0x02	; 2
    1844:	90 83       	st	Z, r25
	explosions.index++;
    1846:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1848:	c1 54       	subi	r28, 0x41	; 65
    184a:	dd 4f       	sbci	r29, 0xFD	; 253
    184c:	88 83       	st	Y, r24
    184e:	cf 5b       	subi	r28, 0xBF	; 191
    1850:	d2 40       	sbci	r29, 0x02	; 2
    1852:	20 e6       	ldi	r18, 0x60	; 96
    1854:	31 e0       	ldi	r19, 0x01	; 1
    1856:	fe 01       	movw	r30, r28
    1858:	ef 59       	subi	r30, 0x9F	; 159
    185a:	fe 4f       	sbci	r31, 0xFE	; 254
    185c:	de 01       	movw	r26, r28
    185e:	11 96       	adiw	r26, 0x01	; 1
    1860:	01 90       	ld	r0, Z+
    1862:	0d 92       	st	X+, r0
    1864:	21 50       	subi	r18, 0x01	; 1
    1866:	30 40       	sbci	r19, 0x00	; 0
    1868:	d9 f7       	brne	.-10     	; 0x1860 <main+0xeb2>
		matrix.m[i] = eeprom_read_byte((uint8_t*)i + 128);
	}
	explosions = pushExplosion(explosions, matrix, 0, 2);
    186a:	c1 5a       	subi	r28, 0xA1	; 161
    186c:	de 4f       	sbci	r29, 0xFE	; 254
    186e:	88 83       	st	Y, r24
    1870:	cf 55       	subi	r28, 0x5F	; 95
    1872:	d1 40       	sbci	r29, 0x01	; 1
    1874:	80 e6       	ldi	r24, 0x60	; 96
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	fe 01       	movw	r30, r28
    187a:	31 96       	adiw	r30, 0x01	; 1
    187c:	a8 e3       	ldi	r26, 0x38	; 56
    187e:	b1 e0       	ldi	r27, 0x01	; 1
    1880:	01 90       	ld	r0, Z+
    1882:	0d 92       	st	X+, r0
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	e1 f7       	brne	.-8      	; 0x1880 <main+0xed2>
	
	
	userMatrix = initSingleUserMatrix(userMatrix);
    1888:	e0 90 98 02 	lds	r14, 0x0298
    188c:	f0 90 99 02 	lds	r15, 0x0299
    1890:	00 91 9a 02 	lds	r16, 0x029A
    1894:	10 91 9b 02 	lds	r17, 0x029B
    1898:	20 91 9c 02 	lds	r18, 0x029C
    189c:	30 91 9d 02 	lds	r19, 0x029D
    18a0:	40 91 9e 02 	lds	r20, 0x029E
    18a4:	50 91 9f 02 	lds	r21, 0x029F
    18a8:	60 91 a0 02 	lds	r22, 0x02A0
    18ac:	70 91 a1 02 	lds	r23, 0x02A1
    18b0:	ce 01       	movw	r24, r28
    18b2:	87 5b       	subi	r24, 0xB7	; 183
    18b4:	90 4d       	sbci	r25, 0xD0	; 208
    18b6:	0e 94 9f 01 	call	0x33e	; 0x33e <initSingleUserMatrix>
    18ba:	8a e0       	ldi	r24, 0x0A	; 10
    18bc:	fe 01       	movw	r30, r28
    18be:	e7 5b       	subi	r30, 0xB7	; 183
    18c0:	f0 4d       	sbci	r31, 0xD0	; 208
    18c2:	a8 e9       	ldi	r26, 0x98	; 152
    18c4:	b2 e0       	ldi	r27, 0x02	; 2
    18c6:	01 90       	ld	r0, Z+
    18c8:	0d 92       	st	X+, r0
    18ca:	8a 95       	dec	r24
    18cc:	e1 f7       	brne	.-8      	; 0x18c6 <main+0xf18>
	
	while (1) {
		explosions = ExpTick(explosions);
    18ce:	00 e6       	ldi	r16, 0x60	; 96
    18d0:	11 e0       	ldi	r17, 0x01	; 1
    18d2:	8d b7       	in	r24, 0x3d	; 61
    18d4:	9e b7       	in	r25, 0x3e	; 62
    18d6:	80 56       	subi	r24, 0x60	; 96
    18d8:	91 40       	sbci	r25, 0x01	; 1
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	9e bf       	out	0x3e, r25	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	8d bf       	out	0x3d, r24	; 61
    18e4:	ad b7       	in	r26, 0x3d	; 61
    18e6:	be b7       	in	r27, 0x3e	; 62
    18e8:	11 96       	adiw	r26, 0x01	; 1
    18ea:	e8 e3       	ldi	r30, 0x38	; 56
    18ec:	f1 e0       	ldi	r31, 0x01	; 1
    18ee:	c8 01       	movw	r24, r16
    18f0:	01 90       	ld	r0, Z+
    18f2:	0d 92       	st	X+, r0
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	e1 f7       	brne	.-8      	; 0x18f0 <main+0xf42>
    18f8:	ce 01       	movw	r24, r28
    18fa:	87 5b       	subi	r24, 0xB7	; 183
    18fc:	90 4d       	sbci	r25, 0xD0	; 208
    18fe:	0e 94 0a 04 	call	0x814	; 0x814 <ExpTick>
    1902:	fe 01       	movw	r30, r28
    1904:	e7 5b       	subi	r30, 0xB7	; 183
    1906:	f0 4d       	sbci	r31, 0xD0	; 208
    1908:	a8 e3       	ldi	r26, 0x38	; 56
    190a:	b1 e0       	ldi	r27, 0x01	; 1
    190c:	c8 01       	movw	r24, r16
    190e:	01 90       	ld	r0, Z+
    1910:	0d 92       	st	X+, r0
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	e1 f7       	brne	.-8      	; 0x190e <main+0xf60>
		DeathTick();
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	0e 94 b0 03 	call	0x760	; 0x760 <DeathTick>
		d3_setMatrixColor(userMatrix.m, GREEN);
    1924:	62 e0       	ldi	r22, 0x02	; 2
    1926:	88 e9       	ldi	r24, 0x98	; 152
    1928:	92 e0       	ldi	r25, 0x02	; 2
    192a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <d3_setMatrixColor>
	}
    192e:	d1 cf       	rjmp	.-94     	; 0x18d2 <main+0xf24>

00001930 <eeprom_read_byte>:
    1930:	f9 99       	sbic	0x1f, 1	; 31
    1932:	fe cf       	rjmp	.-4      	; 0x1930 <eeprom_read_byte>
    1934:	92 bd       	out	0x22, r25	; 34
    1936:	81 bd       	out	0x21, r24	; 33
    1938:	f8 9a       	sbi	0x1f, 0	; 31
    193a:	99 27       	eor	r25, r25
    193c:	80 b5       	in	r24, 0x20	; 32
    193e:	08 95       	ret

00001940 <_exit>:
    1940:	f8 94       	cli

00001942 <__stop_program>:
    1942:	ff cf       	rjmp	.-2      	; 0x1942 <__stop_program>
