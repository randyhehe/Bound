
scbound.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001998  00001a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001998  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000118  00800104  00800104  00001a30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001920  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003c9  00000000  00000000  000034e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001087  00000000  00000000  000038a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  00004930  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a8  00000000  00000000  00004cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001099  00000000  00000000  0000516c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00006205  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	e1 c0       	rjmp	.+450    	; 0x1f8 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e9       	ldi	r30, 0x98	; 152
      a0:	f9 e1       	ldi	r31, 0x19	; 25
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 30       	cpi	r26, 0x04	; 4
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a4 e0       	ldi	r26, 0x04	; 4
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 31       	cpi	r26, 0x1C	; 28
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	74 d3       	rcall	.+1768   	; 0x7ac <main>
      c4:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <ETIMERTick>:
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = sendMe;
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
		UDR1 = sendMe;
      ca:	00 97       	sbiw	r24, 0x00	; 0
      cc:	21 f0       	breq	.+8      	; 0xd6 <ETIMERTick+0xc>
      ce:	81 30       	cpi	r24, 0x01	; 1
      d0:	91 05       	cpc	r25, r1
      d2:	49 f0       	breq	.+18     	; 0xe6 <ETIMERTick+0x1c>
      d4:	05 c0       	rjmp	.+10     	; 0xe0 <ETIMERTick+0x16>
      d6:	10 92 05 01 	sts	0x0105, r1
      da:	10 92 04 01 	sts	0x0104, r1
      de:	03 c0       	rjmp	.+6      	; 0xe6 <ETIMERTick+0x1c>
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	91 05       	cpc	r25, r1
      e4:	f1 f4       	brne	.+60     	; 0x122 <ETIMERTick+0x58>
      e6:	80 91 04 01 	lds	r24, 0x0104
      ea:	90 91 05 01 	lds	r25, 0x0105
      ee:	01 96       	adiw	r24, 0x01	; 1
      f0:	90 93 05 01 	sts	0x0105, r25
      f4:	80 93 04 01 	sts	0x0104, r24
      f8:	80 91 07 01 	lds	r24, 0x0107
      fc:	90 91 08 01 	lds	r25, 0x0108
     100:	a0 91 09 01 	lds	r26, 0x0109
     104:	b0 91 0a 01 	lds	r27, 0x010A
     108:	01 96       	adiw	r24, 0x01	; 1
     10a:	a1 1d       	adc	r26, r1
     10c:	b1 1d       	adc	r27, r1
     10e:	80 93 07 01 	sts	0x0107, r24
     112:	90 93 08 01 	sts	0x0108, r25
     116:	a0 93 09 01 	sts	0x0109, r26
     11a:	b0 93 0a 01 	sts	0x010A, r27
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	08 95       	ret

00000124 <initTasks>:
     124:	ef e0       	ldi	r30, 0x0F	; 15
     126:	f1 e0       	ldi	r31, 0x01	; 1
     128:	11 82       	std	Z+1, r1	; 0x01
     12a:	10 82       	st	Z, r1
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	82 83       	std	Z+2, r24	; 0x02
     136:	93 83       	std	Z+3, r25	; 0x03
     138:	a4 83       	std	Z+4, r26	; 0x04
     13a:	b5 83       	std	Z+5, r27	; 0x05
     13c:	86 83       	std	Z+6, r24	; 0x06
     13e:	97 83       	std	Z+7, r25	; 0x07
     140:	a0 87       	std	Z+8, r26	; 0x08
     142:	b1 87       	std	Z+9, r27	; 0x09
     144:	85 e6       	ldi	r24, 0x65	; 101
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	93 87       	std	Z+11, r25	; 0x0b
     14a:	82 87       	std	Z+10, r24	; 0x0a
     14c:	08 95       	ret

0000014e <TimerOn>:
     14e:	8b e0       	ldi	r24, 0x0B	; 11
     150:	80 93 81 00 	sts	0x0081, r24
     154:	8d e7       	ldi	r24, 0x7D	; 125
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	90 93 89 00 	sts	0x0089, r25
     15c:	80 93 88 00 	sts	0x0088, r24
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	80 93 6f 00 	sts	0x006F, r24
     166:	10 92 85 00 	sts	0x0085, r1
     16a:	10 92 84 00 	sts	0x0084, r1
     16e:	80 91 00 01 	lds	r24, 0x0100
     172:	90 91 01 01 	lds	r25, 0x0101
     176:	a0 91 02 01 	lds	r26, 0x0102
     17a:	b0 91 03 01 	lds	r27, 0x0103
     17e:	80 93 0b 01 	sts	0x010B, r24
     182:	90 93 0c 01 	sts	0x010C, r25
     186:	a0 93 0d 01 	sts	0x010D, r26
     18a:	b0 93 0e 01 	sts	0x010E, r27
     18e:	8f b7       	in	r24, 0x3f	; 63
     190:	80 68       	ori	r24, 0x80	; 128
     192:	8f bf       	out	0x3f, r24	; 63
     194:	08 95       	ret

00000196 <TimerISR>:
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	ef e0       	ldi	r30, 0x0F	; 15
     19c:	f1 e0       	ldi	r31, 0x01	; 1
     19e:	86 81       	ldd	r24, Z+6	; 0x06
     1a0:	97 81       	ldd	r25, Z+7	; 0x07
     1a2:	a0 85       	ldd	r26, Z+8	; 0x08
     1a4:	b1 85       	ldd	r27, Z+9	; 0x09
     1a6:	42 81       	ldd	r20, Z+2	; 0x02
     1a8:	53 81       	ldd	r21, Z+3	; 0x03
     1aa:	64 81       	ldd	r22, Z+4	; 0x04
     1ac:	75 81       	ldd	r23, Z+5	; 0x05
     1ae:	84 17       	cp	r24, r20
     1b0:	95 07       	cpc	r25, r21
     1b2:	a6 07       	cpc	r26, r22
     1b4:	b7 07       	cpc	r27, r23
     1b6:	90 f0       	brcs	.+36     	; 0x1dc <TimerISR+0x46>
     1b8:	ef 01       	movw	r28, r30
     1ba:	02 84       	ldd	r0, Z+10	; 0x0a
     1bc:	f3 85       	ldd	r31, Z+11	; 0x0b
     1be:	e0 2d       	mov	r30, r0
     1c0:	88 81       	ld	r24, Y
     1c2:	99 81       	ldd	r25, Y+1	; 0x01
     1c4:	09 95       	icall
     1c6:	99 83       	std	Y+1, r25	; 0x01
     1c8:	88 83       	st	Y, r24
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	a0 e0       	ldi	r26, 0x00	; 0
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	8e 83       	std	Y+6, r24	; 0x06
     1d4:	9f 83       	std	Y+7, r25	; 0x07
     1d6:	a8 87       	std	Y+8, r26	; 0x08
     1d8:	b9 87       	std	Y+9, r27	; 0x09
     1da:	0b c0       	rjmp	.+22     	; 0x1f2 <TimerISR+0x5c>
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	a1 1d       	adc	r26, r1
     1e0:	b1 1d       	adc	r27, r1
     1e2:	80 93 15 01 	sts	0x0115, r24
     1e6:	90 93 16 01 	sts	0x0116, r25
     1ea:	a0 93 17 01 	sts	0x0117, r26
     1ee:	b0 93 18 01 	sts	0x0118, r27
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <__vector_13>:
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	0b b6       	in	r0, 0x3b	; 59
     204:	0f 92       	push	r0
     206:	2f 93       	push	r18
     208:	3f 93       	push	r19
     20a:	4f 93       	push	r20
     20c:	5f 93       	push	r21
     20e:	6f 93       	push	r22
     210:	7f 93       	push	r23
     212:	8f 93       	push	r24
     214:	9f 93       	push	r25
     216:	af 93       	push	r26
     218:	bf 93       	push	r27
     21a:	ef 93       	push	r30
     21c:	ff 93       	push	r31
     21e:	80 91 0b 01 	lds	r24, 0x010B
     222:	90 91 0c 01 	lds	r25, 0x010C
     226:	a0 91 0d 01 	lds	r26, 0x010D
     22a:	b0 91 0e 01 	lds	r27, 0x010E
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	a1 09       	sbc	r26, r1
     232:	b1 09       	sbc	r27, r1
     234:	80 93 0b 01 	sts	0x010B, r24
     238:	90 93 0c 01 	sts	0x010C, r25
     23c:	a0 93 0d 01 	sts	0x010D, r26
     240:	b0 93 0e 01 	sts	0x010E, r27
     244:	89 2b       	or	r24, r25
     246:	8a 2b       	or	r24, r26
     248:	8b 2b       	or	r24, r27
     24a:	89 f4       	brne	.+34     	; 0x26e <__vector_13+0x76>
     24c:	a4 df       	rcall	.-184    	; 0x196 <TimerISR>
     24e:	80 91 00 01 	lds	r24, 0x0100
     252:	90 91 01 01 	lds	r25, 0x0101
     256:	a0 91 02 01 	lds	r26, 0x0102
     25a:	b0 91 03 01 	lds	r27, 0x0103
     25e:	80 93 0b 01 	sts	0x010B, r24
     262:	90 93 0c 01 	sts	0x010C, r25
     266:	a0 93 0d 01 	sts	0x010D, r26
     26a:	b0 93 0e 01 	sts	0x010E, r27
     26e:	ff 91       	pop	r31
     270:	ef 91       	pop	r30
     272:	bf 91       	pop	r27
     274:	af 91       	pop	r26
     276:	9f 91       	pop	r25
     278:	8f 91       	pop	r24
     27a:	7f 91       	pop	r23
     27c:	6f 91       	pop	r22
     27e:	5f 91       	pop	r21
     280:	4f 91       	pop	r20
     282:	3f 91       	pop	r19
     284:	2f 91       	pop	r18
     286:	0f 90       	pop	r0
     288:	0b be       	out	0x3b, r0	; 59
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <clearSingleMatrix>:
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	60 97       	sbiw	r28, 0x10	; 16
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	29 87       	std	Y+9, r18	; 0x09
     2aa:	3a 87       	std	Y+10, r19	; 0x0a
     2ac:	4b 87       	std	Y+11, r20	; 0x0b
     2ae:	5c 87       	std	Y+12, r21	; 0x0c
     2b0:	6d 87       	std	Y+13, r22	; 0x0d
     2b2:	7e 87       	std	Y+14, r23	; 0x0e
     2b4:	8f 87       	std	Y+15, r24	; 0x0f
     2b6:	98 8b       	std	Y+16, r25	; 0x10
     2b8:	fe 01       	movw	r30, r28
     2ba:	39 96       	adiw	r30, 0x09	; 9
     2bc:	9e 01       	movw	r18, r28
     2be:	2f 5e       	subi	r18, 0xEF	; 239
     2c0:	3f 4f       	sbci	r19, 0xFF	; 255
     2c2:	8f ef       	ldi	r24, 0xFF	; 255
     2c4:	81 93       	st	Z+, r24
     2c6:	e2 17       	cp	r30, r18
     2c8:	f3 07       	cpc	r31, r19
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <clearSingleMatrix+0x30>
     2cc:	88 e0       	ldi	r24, 0x08	; 8
     2ce:	fe 01       	movw	r30, r28
     2d0:	39 96       	adiw	r30, 0x09	; 9
     2d2:	de 01       	movw	r26, r28
     2d4:	11 96       	adiw	r26, 0x01	; 1
     2d6:	01 90       	ld	r0, Z+
     2d8:	0d 92       	st	X+, r0
     2da:	8a 95       	dec	r24
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <clearSingleMatrix+0x42>
     2de:	29 81       	ldd	r18, Y+1	; 0x01
     2e0:	3a 81       	ldd	r19, Y+2	; 0x02
     2e2:	4b 81       	ldd	r20, Y+3	; 0x03
     2e4:	5c 81       	ldd	r21, Y+4	; 0x04
     2e6:	6d 81       	ldd	r22, Y+5	; 0x05
     2e8:	7e 81       	ldd	r23, Y+6	; 0x06
     2ea:	8f 81       	ldd	r24, Y+7	; 0x07
     2ec:	98 85       	ldd	r25, Y+8	; 0x08
     2ee:	60 96       	adiw	r28, 0x10	; 16
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <initSingleUserMatrix>:
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	2a 97       	sbiw	r28, 0x0a	; 10
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	bc 01       	movw	r22, r24
     31e:	e9 82       	std	Y+1, r14	; 0x01
     320:	fa 82       	std	Y+2, r15	; 0x02
     322:	0b 83       	std	Y+3, r16	; 0x03
     324:	1c 83       	std	Y+4, r17	; 0x04
     326:	2d 83       	std	Y+5, r18	; 0x05
     328:	3e 83       	std	Y+6, r19	; 0x06
     32a:	4f 83       	std	Y+7, r20	; 0x07
     32c:	58 87       	std	Y+8, r21	; 0x08
     32e:	fe 01       	movw	r30, r28
     330:	31 96       	adiw	r30, 0x01	; 1
     332:	9e 01       	movw	r18, r28
     334:	27 5f       	subi	r18, 0xF7	; 247
     336:	3f 4f       	sbci	r19, 0xFF	; 255
     338:	9f ef       	ldi	r25, 0xFF	; 255
     33a:	91 93       	st	Z+, r25
     33c:	e2 17       	cp	r30, r18
     33e:	f3 07       	cpc	r31, r19
     340:	e1 f7       	brne	.-8      	; 0x33a <initSingleUserMatrix+0x3a>
     342:	99 81       	ldd	r25, Y+1	; 0x01
     344:	97 7f       	andi	r25, 0xF7	; 247
     346:	99 83       	std	Y+1, r25	; 0x01
     348:	19 86       	std	Y+9, r1	; 0x09
     34a:	83 e0       	ldi	r24, 0x03	; 3
     34c:	8a 87       	std	Y+10, r24	; 0x0a
     34e:	8a e0       	ldi	r24, 0x0A	; 10
     350:	fe 01       	movw	r30, r28
     352:	31 96       	adiw	r30, 0x01	; 1
     354:	db 01       	movw	r26, r22
     356:	01 90       	ld	r0, Z+
     358:	0d 92       	st	X+, r0
     35a:	8a 95       	dec	r24
     35c:	e1 f7       	brne	.-8      	; 0x356 <initSingleUserMatrix+0x56>
     35e:	cb 01       	movw	r24, r22
     360:	2a 96       	adiw	r28, 0x0a	; 10
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	de bf       	out	0x3e, r29	; 62
     368:	0f be       	out	0x3f, r0	; 63
     36a:	cd bf       	out	0x3d, r28	; 61
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	ff 90       	pop	r15
     376:	ef 90       	pop	r14
     378:	08 95       	ret

0000037a <shiftSR>:
     37a:	85 b9       	out	0x05, r24	; 5
     37c:	29 9a       	sbi	0x05, 1	; 5
     37e:	15 b8       	out	0x05, r1	; 5
     380:	08 95       	ret

00000382 <shiftWhole>:
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	e1 e0       	ldi	r30, 0x01	; 1
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	71 e0       	ldi	r23, 0x01	; 1
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	af 01       	movw	r20, r30
     390:	02 2e       	mov	r0, r18
     392:	02 c0       	rjmp	.+4      	; 0x398 <shiftWhole+0x16>
     394:	44 0f       	add	r20, r20
     396:	55 1f       	adc	r21, r21
     398:	0a 94       	dec	r0
     39a:	e2 f7       	brpl	.-8      	; 0x394 <shiftWhole+0x12>
     39c:	48 23       	and	r20, r24
     39e:	97 2f       	mov	r25, r23
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <shiftWhole+0x22>
     3a2:	96 2f       	mov	r25, r22
     3a4:	95 b9       	out	0x05, r25	; 5
     3a6:	29 9a       	sbi	0x05, 1	; 5
     3a8:	65 b9       	out	0x05, r22	; 5
     3aa:	2f 5f       	subi	r18, 0xFF	; 255
     3ac:	3f 4f       	sbci	r19, 0xFF	; 255
     3ae:	28 30       	cpi	r18, 0x08	; 8
     3b0:	31 05       	cpc	r19, r1
     3b2:	69 f7       	brne	.-38     	; 0x38e <shiftWhole+0xc>
     3b4:	84 e0       	ldi	r24, 0x04	; 4
     3b6:	85 b9       	out	0x05, r24	; 5
     3b8:	08 95       	ret

000003ba <clearSR>:
     3ba:	cf 93       	push	r28
     3bc:	c8 e0       	ldi	r28, 0x08	; 8
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	dc df       	rcall	.-72     	; 0x37a <shiftSR>
     3c2:	c1 50       	subi	r28, 0x01	; 1
     3c4:	e1 f7       	brne	.-8      	; 0x3be <clearSR+0x4>
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	85 b9       	out	0x05, r24	; 5
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <d3_clearSR>:
     3ce:	f5 df       	rcall	.-22     	; 0x3ba <clearSR>
     3d0:	f4 df       	rcall	.-24     	; 0x3ba <clearSR>
     3d2:	f3 cf       	rjmp	.-26     	; 0x3ba <clearSR>
     3d4:	08 95       	ret

000003d6 <d3_setRowMatrixColor>:
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	18 2f       	mov	r17, r24
     3e0:	c9 2f       	mov	r28, r25
     3e2:	06 2f       	mov	r16, r22
     3e4:	d4 2f       	mov	r29, r20
     3e6:	f3 df       	rcall	.-26     	; 0x3ce <d3_clearSR>
     3e8:	51 e0       	ldi	r21, 0x01	; 1
     3ea:	01 c0       	rjmp	.+2      	; 0x3ee <d3_setRowMatrixColor+0x18>
     3ec:	55 0f       	add	r21, r21
     3ee:	0a 95       	dec	r16
     3f0:	ea f7       	brpl	.-6      	; 0x3ec <d3_setRowMatrixColor+0x16>
     3f2:	e1 2f       	mov	r30, r17
     3f4:	fc 2f       	mov	r31, r28
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	c0 e0       	ldi	r28, 0x00	; 0
     3fc:	a1 e0       	ldi	r26, 0x01	; 1
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	91 91       	ld	r25, Z+
     402:	95 23       	and	r25, r21
     404:	49 f0       	breq	.+18     	; 0x418 <d3_setRowMatrixColor+0x42>
     406:	cd 01       	movw	r24, r26
     408:	02 2e       	mov	r0, r18
     40a:	02 c0       	rjmp	.+4      	; 0x410 <d3_setRowMatrixColor+0x3a>
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	0a 94       	dec	r0
     412:	e2 f7       	brpl	.-8      	; 0x40c <d3_setRowMatrixColor+0x36>
     414:	c8 2b       	or	r28, r24
     416:	09 c0       	rjmp	.+18     	; 0x42a <d3_setRowMatrixColor+0x54>
     418:	bd 01       	movw	r22, r26
     41a:	02 2e       	mov	r0, r18
     41c:	02 c0       	rjmp	.+4      	; 0x422 <d3_setRowMatrixColor+0x4c>
     41e:	66 0f       	add	r22, r22
     420:	77 1f       	adc	r23, r23
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <d3_setRowMatrixColor+0x48>
     426:	60 95       	com	r22
     428:	c6 23       	and	r28, r22
     42a:	2f 5f       	subi	r18, 0xFF	; 255
     42c:	3f 4f       	sbci	r19, 0xFF	; 255
     42e:	28 30       	cpi	r18, 0x08	; 8
     430:	31 05       	cpc	r19, r1
     432:	31 f7       	brne	.-52     	; 0x400 <d3_setRowMatrixColor+0x2a>
     434:	d1 30       	cpi	r29, 0x01	; 1
     436:	71 f0       	breq	.+28     	; 0x454 <d3_setRowMatrixColor+0x7e>
     438:	18 f0       	brcs	.+6      	; 0x440 <d3_setRowMatrixColor+0x6a>
     43a:	d2 30       	cpi	r29, 0x02	; 2
     43c:	31 f0       	breq	.+12     	; 0x44a <d3_setRowMatrixColor+0x74>
     43e:	0e c0       	rjmp	.+28     	; 0x45c <d3_setRowMatrixColor+0x86>
     440:	bc df       	rcall	.-136    	; 0x3ba <clearSR>
     442:	8c 2f       	mov	r24, r28
     444:	9e df       	rcall	.-196    	; 0x382 <shiftWhole>
     446:	b9 df       	rcall	.-142    	; 0x3ba <clearSR>
     448:	09 c0       	rjmp	.+18     	; 0x45c <d3_setRowMatrixColor+0x86>
     44a:	8c 2f       	mov	r24, r28
     44c:	9a df       	rcall	.-204    	; 0x382 <shiftWhole>
     44e:	b5 df       	rcall	.-150    	; 0x3ba <clearSR>
     450:	b4 df       	rcall	.-152    	; 0x3ba <clearSR>
     452:	04 c0       	rjmp	.+8      	; 0x45c <d3_setRowMatrixColor+0x86>
     454:	b2 df       	rcall	.-156    	; 0x3ba <clearSR>
     456:	b1 df       	rcall	.-158    	; 0x3ba <clearSR>
     458:	8c 2f       	mov	r24, r28
     45a:	93 df       	rcall	.-218    	; 0x382 <shiftWhole>
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	08 95       	ret

00000466 <d3_setMatrixColor>:
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	6c 01       	movw	r12, r24
     476:	f6 2e       	mov	r15, r22
     478:	c0 e0       	ldi	r28, 0x00	; 0
     47a:	d0 e0       	ldi	r29, 0x00	; 0
     47c:	01 e0       	ldi	r16, 0x01	; 1
     47e:	10 e0       	ldi	r17, 0x00	; 0
     480:	98 01       	movw	r18, r16
     482:	0c 2e       	mov	r0, r28
     484:	02 c0       	rjmp	.+4      	; 0x48a <d3_setMatrixColor+0x24>
     486:	22 0f       	add	r18, r18
     488:	33 1f       	adc	r19, r19
     48a:	0a 94       	dec	r0
     48c:	e2 f7       	brpl	.-8      	; 0x486 <d3_setMatrixColor+0x20>
     48e:	28 b9       	out	0x08, r18	; 8
     490:	4f 2d       	mov	r20, r15
     492:	6c 2f       	mov	r22, r28
     494:	c6 01       	movw	r24, r12
     496:	9f df       	rcall	.-194    	; 0x3d6 <d3_setRowMatrixColor>
     498:	8f ea       	ldi	r24, 0xAF	; 175
     49a:	94 e0       	ldi	r25, 0x04	; 4
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <d3_setMatrixColor+0x36>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <d3_setMatrixColor+0x3c>
     4a2:	00 00       	nop
     4a4:	94 df       	rcall	.-216    	; 0x3ce <d3_clearSR>
     4a6:	21 96       	adiw	r28, 0x01	; 1
     4a8:	c8 30       	cpi	r28, 0x08	; 8
     4aa:	d1 05       	cpc	r29, r1
     4ac:	49 f7       	brne	.-46     	; 0x480 <d3_setMatrixColor+0x1a>
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	08 95       	ret

000004be <initExplosions>:
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	9c 01       	movw	r18, r24
     4c8:	94 e1       	ldi	r25, 0x14	; 20
     4ca:	91 50       	subi	r25, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <initExplosions+0xc>
     4ce:	c3 53       	subi	r28, 0x33	; 51
     4d0:	df 4f       	sbci	r29, 0xFF	; 255
     4d2:	18 82       	st	Y, r1
     4d4:	cd 5c       	subi	r28, 0xCD	; 205
     4d6:	d0 40       	sbci	r29, 0x00	; 0
     4d8:	c2 53       	subi	r28, 0x32	; 50
     4da:	df 4f       	sbci	r29, 0xFF	; 255
     4dc:	18 82       	st	Y, r1
     4de:	ce 5c       	subi	r28, 0xCE	; 206
     4e0:	d0 40       	sbci	r29, 0x00	; 0
     4e2:	8a ec       	ldi	r24, 0xCA	; 202
     4e4:	fe 01       	movw	r30, r28
     4e6:	35 96       	adiw	r30, 0x05	; 5
     4e8:	d9 01       	movw	r26, r18
     4ea:	01 90       	ld	r0, Z+
     4ec:	0d 92       	st	X+, r0
     4ee:	8a 95       	dec	r24
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <initExplosions+0x2c>
     4f2:	c9 01       	movw	r24, r18
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <initUSART>:
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	81 f0       	breq	.+32     	; 0x51e <initUSART+0x24>
     4fe:	e1 ec       	ldi	r30, 0xC1	; 193
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	88 61       	ori	r24, 0x18	; 24
     506:	80 83       	st	Z, r24
     508:	e2 ec       	ldi	r30, 0xC2	; 194
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	86 60       	ori	r24, 0x06	; 6
     510:	80 83       	st	Z, r24
     512:	83 e3       	ldi	r24, 0x33	; 51
     514:	80 93 c4 00 	sts	0x00C4, r24
     518:	10 92 c5 00 	sts	0x00C5, r1
     51c:	08 95       	ret
     51e:	e9 ec       	ldi	r30, 0xC9	; 201
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	88 61       	ori	r24, 0x18	; 24
     526:	80 83       	st	Z, r24
     528:	ea ec       	ldi	r30, 0xCA	; 202
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	86 60       	ori	r24, 0x06	; 6
     530:	80 83       	st	Z, r24
     532:	83 e3       	ldi	r24, 0x33	; 51
     534:	80 93 cc 00 	sts	0x00CC, r24
     538:	10 92 cd 00 	sts	0x00CD, r1
     53c:	08 95       	ret

0000053e <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	41 f0       	breq	.+16     	; 0x552 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
     542:	e0 ec       	ldi	r30, 0xC0	; 192
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	80 81       	ld	r24, Z
     548:	88 23       	and	r24, r24
     54a:	ec f7       	brge	.-6      	; 0x546 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
     54c:	80 91 c6 00 	lds	r24, 0x00C6
     550:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
     552:	e8 ec       	ldi	r30, 0xC8	; 200
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	80 81       	ld	r24, Z
     558:	88 23       	and	r24, r24
     55a:	ec f7       	brge	.-6      	; 0x556 <USART_Receive+0x18>
		return UDR1;
     55c:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
     560:	08 95       	ret

00000562 <DeathTick>:
			contClock++;
	}
	return state;
}

unsigned char DeathTick() {	
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	2a 97       	sbiw	r28, 0x0a	; 10
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
	if ((displayBlank == 0) && GetBit(explosions.matricies[explosions.displayIndex].m[userMatrix.row], userMatrix.column) == 0) {
     57e:	80 91 06 01 	lds	r24, 0x0106
     582:	81 11       	cpse	r24, r1
     584:	3a c0       	rjmp	.+116    	; 0x5fa <DeathTick+0x98>
     586:	e2 e0       	ldi	r30, 0x02	; 2
     588:	f2 e0       	ldi	r31, 0x02	; 2
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
     58a:	21 e0       	ldi	r18, 0x01	; 1
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	01 84       	ldd	r0, Z+9	; 0x09
     590:	02 c0       	rjmp	.+4      	; 0x596 <DeathTick+0x34>
     592:	22 0f       	add	r18, r18
     594:	33 1f       	adc	r19, r19
     596:	0a 94       	dec	r0
     598:	e2 f7       	brpl	.-8      	; 0x592 <DeathTick+0x30>
     59a:	90 91 01 02 	lds	r25, 0x0201
     59e:	e0 85       	ldd	r30, Z+8	; 0x08
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	48 e0       	ldi	r20, 0x08	; 8
     5a4:	94 9f       	mul	r25, r20
     5a6:	e0 0d       	add	r30, r0
     5a8:	f1 1d       	adc	r31, r1
     5aa:	11 24       	eor	r1, r1
     5ac:	e8 5c       	subi	r30, 0xC8	; 200
     5ae:	fe 4f       	sbci	r31, 0xFE	; 254
	return ((bits & mask) != 0);
     5b0:	90 81       	ld	r25, Z
     5b2:	29 23       	and	r18, r25
     5b4:	19 f5       	brne	.+70     	; 0x5fc <DeathTick+0x9a>
		userMatrix = initSingleUserMatrix(userMatrix);
     5b6:	e0 90 02 02 	lds	r14, 0x0202
     5ba:	f0 90 03 02 	lds	r15, 0x0203
     5be:	00 91 04 02 	lds	r16, 0x0204
     5c2:	10 91 05 02 	lds	r17, 0x0205
     5c6:	20 91 06 02 	lds	r18, 0x0206
     5ca:	30 91 07 02 	lds	r19, 0x0207
     5ce:	40 91 08 02 	lds	r20, 0x0208
     5d2:	50 91 09 02 	lds	r21, 0x0209
     5d6:	60 91 0a 02 	lds	r22, 0x020A
     5da:	70 91 0b 02 	lds	r23, 0x020B
     5de:	ce 01       	movw	r24, r28
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	8e de       	rcall	.-740    	; 0x300 <initSingleUserMatrix>
     5e4:	8a e0       	ldi	r24, 0x0A	; 10
     5e6:	fe 01       	movw	r30, r28
     5e8:	31 96       	adiw	r30, 0x01	; 1
     5ea:	a2 e0       	ldi	r26, 0x02	; 2
     5ec:	b2 e0       	ldi	r27, 0x02	; 2
     5ee:	01 90       	ld	r0, Z+
     5f0:	0d 92       	st	X+, r0
     5f2:	8a 95       	dec	r24
     5f4:	e1 f7       	brne	.-8      	; 0x5ee <DeathTick+0x8c>
		return 1;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <DeathTick+0x9a>
	} else {
		// nothing
		return 0;
     5fa:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     5fc:	2a 96       	adiw	r28, 0x0a	; 10
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	ef 90       	pop	r14
     614:	08 95       	ret

00000616 <ExpTick>:

Explosions ExpTick(Explosions explosions) {	
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	8c 01       	movw	r16, r24
	// Return if empty (Protection code)
	if (explosions.index == 0) {
     62c:	cd 52       	subi	r28, 0x2D	; 45
     62e:	df 4f       	sbci	r29, 0xFF	; 255
     630:	88 81       	ld	r24, Y
     632:	c3 5d       	subi	r28, 0xD3	; 211
     634:	d0 40       	sbci	r29, 0x00	; 0
     636:	81 11       	cpse	r24, r1
     638:	09 c0       	rjmp	.+18     	; 0x64c <ExpTick+0x36>
		return explosions;
     63a:	8a ec       	ldi	r24, 0xCA	; 202
     63c:	fe 01       	movw	r30, r28
     63e:	3b 96       	adiw	r30, 0x0b	; 11
     640:	d8 01       	movw	r26, r16
     642:	01 90       	ld	r0, Z+
     644:	0d 92       	st	X+, r0
     646:	8a 95       	dec	r24
     648:	e1 f7       	brne	.-8      	; 0x642 <ExpTick+0x2c>
     64a:	a6 c0       	rjmp	.+332    	; 0x798 <ExpTick+0x182>
	} 
	
	if (explosions.displayIndex >= explosions.index) {
     64c:	cc 52       	subi	r28, 0x2C	; 44
     64e:	df 4f       	sbci	r29, 0xFF	; 255
     650:	98 81       	ld	r25, Y
     652:	c4 5d       	subi	r28, 0xD4	; 212
     654:	d0 40       	sbci	r29, 0x00	; 0
     656:	98 17       	cp	r25, r24
     658:	28 f0       	brcs	.+10     	; 0x664 <ExpTick+0x4e>
		explosions.displayIndex = 0;
     65a:	cc 52       	subi	r28, 0x2C	; 44
     65c:	df 4f       	sbci	r29, 0xFF	; 255
     65e:	18 82       	st	Y, r1
     660:	c4 5d       	subi	r28, 0xD4	; 212
     662:	d0 40       	sbci	r29, 0x00	; 0
	}
	
	if (displayBlank == 0)
     664:	80 91 06 01 	lds	r24, 0x0106
     668:	81 11       	cpse	r24, r1
     66a:	12 c0       	rjmp	.+36     	; 0x690 <ExpTick+0x7a>
		d3_setMatrixColor(explosions.matricies[explosions.displayIndex].m, RED);
     66c:	cc 52       	subi	r28, 0x2C	; 44
     66e:	df 4f       	sbci	r29, 0xFF	; 255
     670:	88 81       	ld	r24, Y
     672:	c4 5d       	subi	r28, 0xD4	; 212
     674:	d0 40       	sbci	r29, 0x00	; 0
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	2b e0       	ldi	r18, 0x0B	; 11
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	2c 0f       	add	r18, r28
     67e:	3d 1f       	adc	r19, r29
     680:	48 e0       	ldi	r20, 0x08	; 8
     682:	84 9f       	mul	r24, r20
     684:	20 0d       	add	r18, r0
     686:	31 1d       	adc	r19, r1
     688:	11 24       	eor	r1, r1
     68a:	c9 01       	movw	r24, r18
     68c:	ec de       	rcall	.-552    	; 0x466 <d3_setMatrixColor>
     68e:	07 c0       	rjmp	.+14     	; 0x69e <ExpTick+0x88>
	else if (displayBlank == 1)
     690:	81 30       	cpi	r24, 0x01	; 1
     692:	09 f0       	breq	.+2      	; 0x696 <ExpTick+0x80>
     694:	79 c0       	rjmp	.+242    	; 0x788 <ExpTick+0x172>
		d3_setMatrixColor(blankMatrix.m, RED);
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	87 e2       	ldi	r24, 0x27	; 39
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	e4 de       	rcall	.-568    	; 0x466 <d3_setMatrixColor>
	
	if (displayBlank == 0 && contClock >= (explosions.timeDuration[explosions.displayIndex] * 10)) {
     69e:	80 91 06 01 	lds	r24, 0x0106
     6a2:	81 11       	cpse	r24, r1
     6a4:	3c c0       	rjmp	.+120    	; 0x71e <ExpTick+0x108>
     6a6:	cc 52       	subi	r28, 0x2C	; 44
     6a8:	df 4f       	sbci	r29, 0xFF	; 255
     6aa:	88 81       	ld	r24, Y
     6ac:	c4 5d       	subi	r28, 0xD4	; 212
     6ae:	d0 40       	sbci	r29, 0x00	; 0
     6b0:	ef eb       	ldi	r30, 0xBF	; 191
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	ec 0f       	add	r30, r28
     6b6:	fd 1f       	adc	r31, r29
     6b8:	e8 0f       	add	r30, r24
     6ba:	f1 1d       	adc	r31, r1
     6bc:	20 81       	ld	r18, Z
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	a9 01       	movw	r20, r18
     6c2:	44 0f       	add	r20, r20
     6c4:	55 1f       	adc	r21, r21
     6c6:	22 0f       	add	r18, r18
     6c8:	33 1f       	adc	r19, r19
     6ca:	22 0f       	add	r18, r18
     6cc:	33 1f       	adc	r19, r19
     6ce:	22 0f       	add	r18, r18
     6d0:	33 1f       	adc	r19, r19
     6d2:	42 0f       	add	r20, r18
     6d4:	53 1f       	adc	r21, r19
     6d6:	05 2e       	mov	r0, r21
     6d8:	00 0c       	add	r0, r0
     6da:	66 0b       	sbc	r22, r22
     6dc:	77 0b       	sbc	r23, r23
     6de:	c0 90 07 01 	lds	r12, 0x0107
     6e2:	d0 90 08 01 	lds	r13, 0x0108
     6e6:	e0 90 09 01 	lds	r14, 0x0109
     6ea:	f0 90 0a 01 	lds	r15, 0x010A
     6ee:	c4 16       	cp	r12, r20
     6f0:	d5 06       	cpc	r13, r21
     6f2:	e6 06       	cpc	r14, r22
     6f4:	f7 06       	cpc	r15, r23
     6f6:	08 f4       	brcc	.+2      	; 0x6fa <ExpTick+0xe4>
     6f8:	47 c0       	rjmp	.+142    	; 0x788 <ExpTick+0x172>
		displayBlank = 1;
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	90 93 06 01 	sts	0x0106, r25
		explosions.displayIndex++;
     700:	8f 5f       	subi	r24, 0xFF	; 255
     702:	cc 52       	subi	r28, 0x2C	; 44
     704:	df 4f       	sbci	r29, 0xFF	; 255
     706:	88 83       	st	Y, r24
     708:	c4 5d       	subi	r28, 0xD4	; 212
     70a:	d0 40       	sbci	r29, 0x00	; 0
		contClock = 0;
     70c:	10 92 07 01 	sts	0x0107, r1
     710:	10 92 08 01 	sts	0x0108, r1
     714:	10 92 09 01 	sts	0x0109, r1
     718:	10 92 0a 01 	sts	0x010A, r1
     71c:	35 c0       	rjmp	.+106    	; 0x788 <ExpTick+0x172>
	} else if (displayBlank == 1 && contClock >= (explosions.timeBetween[explosions.displayIndex] * 10)) {
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	99 f5       	brne	.+102    	; 0x788 <ExpTick+0x172>
     722:	cc 52       	subi	r28, 0x2C	; 44
     724:	df 4f       	sbci	r29, 0xFF	; 255
     726:	88 81       	ld	r24, Y
     728:	c4 5d       	subi	r28, 0xD4	; 212
     72a:	d0 40       	sbci	r29, 0x00	; 0
     72c:	eb ea       	ldi	r30, 0xAB	; 171
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	ec 0f       	add	r30, r28
     732:	fd 1f       	adc	r31, r29
     734:	e8 0f       	add	r30, r24
     736:	f1 1d       	adc	r31, r1
     738:	20 81       	ld	r18, Z
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	c9 01       	movw	r24, r18
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	22 0f       	add	r18, r18
     744:	33 1f       	adc	r19, r19
     746:	22 0f       	add	r18, r18
     748:	33 1f       	adc	r19, r19
     74a:	22 0f       	add	r18, r18
     74c:	33 1f       	adc	r19, r19
     74e:	82 0f       	add	r24, r18
     750:	93 1f       	adc	r25, r19
     752:	09 2e       	mov	r0, r25
     754:	00 0c       	add	r0, r0
     756:	aa 0b       	sbc	r26, r26
     758:	bb 0b       	sbc	r27, r27
     75a:	40 91 07 01 	lds	r20, 0x0107
     75e:	50 91 08 01 	lds	r21, 0x0108
     762:	60 91 09 01 	lds	r22, 0x0109
     766:	70 91 0a 01 	lds	r23, 0x010A
     76a:	48 17       	cp	r20, r24
     76c:	59 07       	cpc	r21, r25
     76e:	6a 07       	cpc	r22, r26
     770:	7b 07       	cpc	r23, r27
     772:	50 f0       	brcs	.+20     	; 0x788 <ExpTick+0x172>
		displayBlank = 0;
     774:	10 92 06 01 	sts	0x0106, r1
		contClock = 0;
     778:	10 92 07 01 	sts	0x0107, r1
     77c:	10 92 08 01 	sts	0x0108, r1
     780:	10 92 09 01 	sts	0x0109, r1
     784:	10 92 0a 01 	sts	0x010A, r1
	}
	
	return explosions;
     788:	8a ec       	ldi	r24, 0xCA	; 202
     78a:	fe 01       	movw	r30, r28
     78c:	3b 96       	adiw	r30, 0x0b	; 11
     78e:	d8 01       	movw	r26, r16
     790:	01 90       	ld	r0, Z+
     792:	0d 92       	st	X+, r0
     794:	8a 95       	dec	r24
     796:	e1 f7       	brne	.-8      	; 0x790 <ExpTick+0x17a>
     798:	c8 01       	movw	r24, r16
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	df 90       	pop	r13
     7a8:	cf 90       	pop	r12
     7aa:	08 95       	ret

000007ac <main>:
SingleMatrix wallMatrix;

unsigned char movement;


int main(void) {
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
     7b4:	c6 52       	subi	r28, 0x26	; 38
     7b6:	dc 41       	sbci	r29, 0x1C	; 28
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00;
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	84 b9       	out	0x04, r24	; 4
     7c6:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
     7c8:	8a b9       	out	0x0a, r24	; 10
     7ca:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xFF; PORTC = 0x00;
     7cc:	87 b9       	out	0x07, r24	; 7
     7ce:	18 b8       	out	0x08, r1	; 8
	
	initUSART(0);
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	93 de       	rcall	.-730    	; 0x4fa <initUSART>
	
	initTasks();
     7d4:	a7 dc       	rcall	.-1714   	; 0x124 <initTasks>
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	a0 e0       	ldi	r26, 0x00	; 0
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	80 93 00 01 	sts	0x0100, r24
     7e2:	90 93 01 01 	sts	0x0101, r25
     7e6:	a0 93 02 01 	sts	0x0102, r26
     7ea:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
     7ee:	80 93 0b 01 	sts	0x010B, r24
     7f2:	90 93 0c 01 	sts	0x010C, r25
     7f6:	a0 93 0d 01 	sts	0x010D, r26
     7fa:	b0 93 0e 01 	sts	0x010E, r27
	
	TimerSet(1);
	TimerOn();
     7fe:	a7 dc       	rcall	.-1714   	; 0x14e <TimerOn>
	
	blankMatrix = clearSingleMatrix(blankMatrix);
     800:	20 91 27 01 	lds	r18, 0x0127
     804:	30 91 28 01 	lds	r19, 0x0128
     808:	40 91 29 01 	lds	r20, 0x0129
     80c:	50 91 2a 01 	lds	r21, 0x012A
     810:	60 91 2b 01 	lds	r22, 0x012B
     814:	70 91 2c 01 	lds	r23, 0x012C
     818:	80 91 2d 01 	lds	r24, 0x012D
     81c:	90 91 2e 01 	lds	r25, 0x012E
     820:	39 dd       	rcall	.-1422   	; 0x294 <clearSingleMatrix>
     822:	e7 e2       	ldi	r30, 0x27	; 39
     824:	f1 e0       	ldi	r31, 0x01	; 1
     826:	20 83       	st	Z, r18
     828:	31 83       	std	Z+1, r19	; 0x01
     82a:	42 83       	std	Z+2, r20	; 0x02
     82c:	53 83       	std	Z+3, r21	; 0x03
     82e:	64 83       	std	Z+4, r22	; 0x04
     830:	75 83       	std	Z+5, r23	; 0x05
     832:	86 83       	std	Z+6, r24	; 0x06
     834:	97 83       	std	Z+7, r25	; 0x07
	
	explosions = initExplosions(explosions);
     836:	8d b7       	in	r24, 0x3d	; 61
     838:	9e b7       	in	r25, 0x3e	; 62
     83a:	8a 5c       	subi	r24, 0xCA	; 202
     83c:	91 09       	sbc	r25, r1
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	9e bf       	out	0x3e, r25	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	8d bf       	out	0x3d, r24	; 61
     848:	ad b7       	in	r26, 0x3d	; 61
     84a:	be b7       	in	r27, 0x3e	; 62
     84c:	11 96       	adiw	r26, 0x01	; 1
     84e:	8a ec       	ldi	r24, 0xCA	; 202
     850:	e8 e3       	ldi	r30, 0x38	; 56
     852:	f1 e0       	ldi	r31, 0x01	; 1
     854:	01 90       	ld	r0, Z+
     856:	0d 92       	st	X+, r0
     858:	8a 95       	dec	r24
     85a:	e1 f7       	brne	.-8      	; 0x854 <main+0xa8>
     85c:	ce 01       	movw	r24, r28
     85e:	83 5a       	subi	r24, 0xA3	; 163
     860:	94 4e       	sbci	r25, 0xE4	; 228
     862:	2d de       	rcall	.-934    	; 0x4be <initExplosions>
     864:	8a ec       	ldi	r24, 0xCA	; 202
     866:	fe 01       	movw	r30, r28
     868:	e3 5a       	subi	r30, 0xA3	; 163
     86a:	f4 4e       	sbci	r31, 0xE4	; 228
     86c:	a8 e3       	ldi	r26, 0x38	; 56
     86e:	b1 e0       	ldi	r27, 0x01	; 1
     870:	01 90       	ld	r0, Z+
     872:	0d 92       	st	X+, r0
     874:	8a 95       	dec	r24
     876:	e1 f7       	brne	.-8      	; 0x870 <main+0xc4>
	
	matrix = clearSingleMatrix(matrix);
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
     882:	20 91 2f 01 	lds	r18, 0x012F
     886:	30 91 30 01 	lds	r19, 0x0130
     88a:	40 91 31 01 	lds	r20, 0x0131
     88e:	50 91 32 01 	lds	r21, 0x0132
     892:	60 91 33 01 	lds	r22, 0x0133
     896:	70 91 34 01 	lds	r23, 0x0134
     89a:	80 91 35 01 	lds	r24, 0x0135
     89e:	90 91 36 01 	lds	r25, 0x0136
     8a2:	f8 dc       	rcall	.-1552   	; 0x294 <clearSingleMatrix>
     8a4:	0f 2e       	mov	r0, r31
     8a6:	ff e2       	ldi	r31, 0x2F	; 47
     8a8:	ef 2e       	mov	r14, r31
     8aa:	f1 e0       	ldi	r31, 0x01	; 1
     8ac:	ff 2e       	mov	r15, r31
     8ae:	f0 2d       	mov	r31, r0
     8b0:	f7 01       	movw	r30, r14
     8b2:	20 83       	st	Z, r18
     8b4:	42 83       	std	Z+2, r20	; 0x02
     8b6:	53 83       	std	Z+3, r21	; 0x03
     8b8:	64 83       	std	Z+4, r22	; 0x04
     8ba:	75 83       	std	Z+5, r23	; 0x05
     8bc:	97 83       	std	Z+7, r25	; 0x07
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
     8be:	3e 7f       	andi	r19, 0xFE	; 254
	matrix.m[1] = SetBit(matrix.m[1], 0, 0);
     8c0:	31 83       	std	Z+1, r19	; 0x01
     8c2:	8e 7f       	andi	r24, 0xFE	; 254
	matrix.m[6] = SetBit(matrix.m[6], 0, 0);
     8c4:	86 83       	std	Z+6, r24	; 0x06
     8c6:	8a ec       	ldi	r24, 0xCA	; 202
     8c8:	e8 e3       	ldi	r30, 0x38	; 56
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	de 01       	movw	r26, r28
     8ce:	a5 5f       	subi	r26, 0xF5	; 245
     8d0:	b5 4e       	sbci	r27, 0xE5	; 229
     8d2:	01 90       	ld	r0, Z+
     8d4:	0d 92       	st	X+, r0
     8d6:	8a 95       	dec	r24
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <main+0x126>
     8da:	0f 2e       	mov	r0, r31
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	cf 2e       	mov	r12, r31
     8e0:	f2 e0       	ldi	r31, 0x02	; 2
     8e2:	df 2e       	mov	r13, r31
     8e4:	f0 2d       	mov	r31, r0
     8e6:	f6 01       	movw	r30, r12
     8e8:	80 81       	ld	r24, Z
     8ea:	98 e0       	ldi	r25, 0x08	; 8
     8ec:	f7 01       	movw	r30, r14
     8ee:	de 01       	movw	r26, r28
     8f0:	ab 5a       	subi	r26, 0xAB	; 171
     8f2:	b4 4e       	sbci	r27, 0xE4	; 228
     8f4:	01 90       	ld	r0, Z+
     8f6:	0d 92       	st	X+, r0
     8f8:	9a 95       	dec	r25
     8fa:	e1 f7       	brne	.-8      	; 0x8f4 <main+0x148>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     8fc:	ab e0       	ldi	r26, 0x0B	; 11
     8fe:	ba e1       	ldi	r27, 0x1A	; 26
     900:	ac 0f       	add	r26, r28
     902:	bd 1f       	adc	r27, r29
     904:	f8 e0       	ldi	r31, 0x08	; 8
     906:	8f 9f       	mul	r24, r31
     908:	a0 0d       	add	r26, r0
     90a:	b1 1d       	adc	r27, r1
     90c:	11 24       	eor	r1, r1
     90e:	98 e0       	ldi	r25, 0x08	; 8
     910:	fe 01       	movw	r30, r28
     912:	eb 5a       	subi	r30, 0xAB	; 171
     914:	f4 4e       	sbci	r31, 0xE4	; 228
     916:	01 90       	ld	r0, Z+
     918:	0d 92       	st	X+, r0
     91a:	9a 95       	dec	r25
     91c:	e1 f7       	brne	.-8      	; 0x916 <main+0x16a>
	explosions.timeBetween[explosions.index] = a;
     91e:	2b e0       	ldi	r18, 0x0B	; 11
     920:	3a e1       	ldi	r19, 0x1A	; 26
     922:	2c 0f       	add	r18, r28
     924:	3d 1f       	adc	r19, r29
     926:	28 0f       	add	r18, r24
     928:	31 1d       	adc	r19, r1
     92a:	f9 01       	movw	r30, r18
     92c:	e0 56       	subi	r30, 0x60	; 96
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     932:	74 96       	adiw	r30, 0x14	; 20
     934:	12 e0       	ldi	r17, 0x02	; 2
     936:	10 83       	st	Z, r17
	explosions.index++;
     938:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     93a:	cd 52       	subi	r28, 0x2D	; 45
     93c:	d5 4e       	sbci	r29, 0xE5	; 229
     93e:	88 83       	st	Y, r24
     940:	c3 5d       	subi	r28, 0xD3	; 211
     942:	da 41       	sbci	r29, 0x1A	; 26
     944:	9a ec       	ldi	r25, 0xCA	; 202
     946:	fe 01       	movw	r30, r28
     948:	e5 5f       	subi	r30, 0xF5	; 245
     94a:	f5 4e       	sbci	r31, 0xE5	; 229
     94c:	de 01       	movw	r26, r28
     94e:	af 5b       	subi	r26, 0xBF	; 191
     950:	b6 4e       	sbci	r27, 0xE6	; 230
     952:	01 90       	ld	r0, Z+
     954:	0d 92       	st	X+, r0
     956:	9a 95       	dec	r25
     958:	e1 f7       	brne	.-8      	; 0x952 <main+0x1a6>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     95a:	c7 5f       	subi	r28, 0xF7	; 247
     95c:	d5 4e       	sbci	r29, 0xE5	; 229
     95e:	88 83       	st	Y, r24
     960:	c9 50       	subi	r28, 0x09	; 9
     962:	da 41       	sbci	r29, 0x1A	; 26
     964:	8a ec       	ldi	r24, 0xCA	; 202
     966:	fe 01       	movw	r30, r28
     968:	ef 5b       	subi	r30, 0xBF	; 191
     96a:	f6 4e       	sbci	r31, 0xE6	; 230
     96c:	a8 e3       	ldi	r26, 0x38	; 56
     96e:	b1 e0       	ldi	r27, 0x01	; 1
     970:	01 90       	ld	r0, Z+
     972:	0d 92       	st	X+, r0
     974:	8a 95       	dec	r24
     976:	e1 f7       	brne	.-8      	; 0x970 <main+0x1c4>
	
	matrix = clearSingleMatrix(matrix);
     978:	20 91 2f 01 	lds	r18, 0x012F
     97c:	30 91 30 01 	lds	r19, 0x0130
     980:	40 91 31 01 	lds	r20, 0x0131
     984:	50 91 32 01 	lds	r21, 0x0132
     988:	60 91 33 01 	lds	r22, 0x0133
     98c:	70 91 34 01 	lds	r23, 0x0134
     990:	80 91 35 01 	lds	r24, 0x0135
     994:	90 91 36 01 	lds	r25, 0x0136
     998:	7d dc       	rcall	.-1798   	; 0x294 <clearSingleMatrix>
     99a:	f7 01       	movw	r30, r14
     99c:	20 83       	st	Z, r18
     99e:	42 83       	std	Z+2, r20	; 0x02
     9a0:	53 83       	std	Z+3, r21	; 0x03
     9a2:	64 83       	std	Z+4, r22	; 0x04
     9a4:	75 83       	std	Z+5, r23	; 0x05
     9a6:	97 83       	std	Z+7, r25	; 0x07
     9a8:	3d 7f       	andi	r19, 0xFD	; 253
	matrix.m[1] = SetBit(matrix.m[1], 1, 0);
     9aa:	31 83       	std	Z+1, r19	; 0x01
     9ac:	8d 7f       	andi	r24, 0xFD	; 253
	matrix.m[6] = SetBit(matrix.m[6], 1, 0);
     9ae:	86 83       	std	Z+6, r24	; 0x06
     9b0:	8a ec       	ldi	r24, 0xCA	; 202
     9b2:	e8 e3       	ldi	r30, 0x38	; 56
     9b4:	f1 e0       	ldi	r31, 0x01	; 1
     9b6:	de 01       	movw	r26, r28
     9b8:	a9 58       	subi	r26, 0x89	; 137
     9ba:	b7 4e       	sbci	r27, 0xE7	; 231
     9bc:	01 90       	ld	r0, Z+
     9be:	0d 92       	st	X+, r0
     9c0:	8a 95       	dec	r24
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <main+0x210>
     9c4:	f6 01       	movw	r30, r12
     9c6:	80 81       	ld	r24, Z
     9c8:	98 e0       	ldi	r25, 0x08	; 8
     9ca:	f7 01       	movw	r30, r14
     9cc:	de 01       	movw	r26, r28
     9ce:	a3 5b       	subi	r26, 0xB3	; 179
     9d0:	b4 4e       	sbci	r27, 0xE4	; 228
     9d2:	01 90       	ld	r0, Z+
     9d4:	0d 92       	st	X+, r0
     9d6:	9a 95       	dec	r25
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <main+0x226>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     9da:	a7 e7       	ldi	r26, 0x77	; 119
     9dc:	b8 e1       	ldi	r27, 0x18	; 24
     9de:	ac 0f       	add	r26, r28
     9e0:	bd 1f       	adc	r27, r29
     9e2:	f8 e0       	ldi	r31, 0x08	; 8
     9e4:	8f 9f       	mul	r24, r31
     9e6:	a0 0d       	add	r26, r0
     9e8:	b1 1d       	adc	r27, r1
     9ea:	11 24       	eor	r1, r1
     9ec:	98 e0       	ldi	r25, 0x08	; 8
     9ee:	fe 01       	movw	r30, r28
     9f0:	e3 5b       	subi	r30, 0xB3	; 179
     9f2:	f4 4e       	sbci	r31, 0xE4	; 228
     9f4:	01 90       	ld	r0, Z+
     9f6:	0d 92       	st	X+, r0
     9f8:	9a 95       	dec	r25
     9fa:	e1 f7       	brne	.-8      	; 0x9f4 <main+0x248>
	explosions.timeBetween[explosions.index] = a;
     9fc:	27 e7       	ldi	r18, 0x77	; 119
     9fe:	38 e1       	ldi	r19, 0x18	; 24
     a00:	2c 0f       	add	r18, r28
     a02:	3d 1f       	adc	r19, r29
     a04:	28 0f       	add	r18, r24
     a06:	31 1d       	adc	r19, r1
     a08:	f9 01       	movw	r30, r18
     a0a:	e0 56       	subi	r30, 0x60	; 96
     a0c:	ff 4f       	sbci	r31, 0xFF	; 255
     a0e:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     a10:	74 96       	adiw	r30, 0x14	; 20
     a12:	10 83       	st	Z, r17
	explosions.index++;
     a14:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     a16:	c1 5c       	subi	r28, 0xC1	; 193
     a18:	d6 4e       	sbci	r29, 0xE6	; 230
     a1a:	88 83       	st	Y, r24
     a1c:	cf 53       	subi	r28, 0x3F	; 63
     a1e:	d9 41       	sbci	r29, 0x19	; 25
     a20:	9a ec       	ldi	r25, 0xCA	; 202
     a22:	fe 01       	movw	r30, r28
     a24:	e9 58       	subi	r30, 0x89	; 137
     a26:	f7 4e       	sbci	r31, 0xE7	; 231
     a28:	de 01       	movw	r26, r28
     a2a:	a3 55       	subi	r26, 0x53	; 83
     a2c:	b8 4e       	sbci	r27, 0xE8	; 232
     a2e:	01 90       	ld	r0, Z+
     a30:	0d 92       	st	X+, r0
     a32:	9a 95       	dec	r25
     a34:	e1 f7       	brne	.-8      	; 0xa2e <main+0x282>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     a36:	cb 58       	subi	r28, 0x8B	; 139
     a38:	d7 4e       	sbci	r29, 0xE7	; 231
     a3a:	88 83       	st	Y, r24
     a3c:	c5 57       	subi	r28, 0x75	; 117
     a3e:	d8 41       	sbci	r29, 0x18	; 24
     a40:	8a ec       	ldi	r24, 0xCA	; 202
     a42:	fe 01       	movw	r30, r28
     a44:	e3 55       	subi	r30, 0x53	; 83
     a46:	f8 4e       	sbci	r31, 0xE8	; 232
     a48:	a8 e3       	ldi	r26, 0x38	; 56
     a4a:	b1 e0       	ldi	r27, 0x01	; 1
     a4c:	01 90       	ld	r0, Z+
     a4e:	0d 92       	st	X+, r0
     a50:	8a 95       	dec	r24
     a52:	e1 f7       	brne	.-8      	; 0xa4c <main+0x2a0>
	
	matrix = clearSingleMatrix(matrix);
     a54:	20 91 2f 01 	lds	r18, 0x012F
     a58:	30 91 30 01 	lds	r19, 0x0130
     a5c:	40 91 31 01 	lds	r20, 0x0131
     a60:	50 91 32 01 	lds	r21, 0x0132
     a64:	60 91 33 01 	lds	r22, 0x0133
     a68:	70 91 34 01 	lds	r23, 0x0134
     a6c:	80 91 35 01 	lds	r24, 0x0135
     a70:	90 91 36 01 	lds	r25, 0x0136
     a74:	0f dc       	rcall	.-2018   	; 0x294 <clearSingleMatrix>
     a76:	f7 01       	movw	r30, r14
     a78:	20 83       	st	Z, r18
     a7a:	42 83       	std	Z+2, r20	; 0x02
     a7c:	53 83       	std	Z+3, r21	; 0x03
     a7e:	64 83       	std	Z+4, r22	; 0x04
     a80:	75 83       	std	Z+5, r23	; 0x05
     a82:	97 83       	std	Z+7, r25	; 0x07
     a84:	3b 7f       	andi	r19, 0xFB	; 251
	matrix.m[1] = SetBit(matrix.m[1], 2, 0);
     a86:	31 83       	std	Z+1, r19	; 0x01
     a88:	8b 7f       	andi	r24, 0xFB	; 251
	matrix.m[6] = SetBit(matrix.m[6], 2, 0);
     a8a:	86 83       	std	Z+6, r24	; 0x06
     a8c:	8a ec       	ldi	r24, 0xCA	; 202
     a8e:	e8 e3       	ldi	r30, 0x38	; 56
     a90:	f1 e0       	ldi	r31, 0x01	; 1
     a92:	de 01       	movw	r26, r28
     a94:	ad 51       	subi	r26, 0x1D	; 29
     a96:	b9 4e       	sbci	r27, 0xE9	; 233
     a98:	01 90       	ld	r0, Z+
     a9a:	0d 92       	st	X+, r0
     a9c:	8a 95       	dec	r24
     a9e:	e1 f7       	brne	.-8      	; 0xa98 <main+0x2ec>
     aa0:	f6 01       	movw	r30, r12
     aa2:	80 81       	ld	r24, Z
     aa4:	98 e0       	ldi	r25, 0x08	; 8
     aa6:	f7 01       	movw	r30, r14
     aa8:	de 01       	movw	r26, r28
     aaa:	ab 5b       	subi	r26, 0xBB	; 187
     aac:	b4 4e       	sbci	r27, 0xE4	; 228
     aae:	01 90       	ld	r0, Z+
     ab0:	0d 92       	st	X+, r0
     ab2:	9a 95       	dec	r25
     ab4:	e1 f7       	brne	.-8      	; 0xaae <main+0x302>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     ab6:	a3 ee       	ldi	r26, 0xE3	; 227
     ab8:	b6 e1       	ldi	r27, 0x16	; 22
     aba:	ac 0f       	add	r26, r28
     abc:	bd 1f       	adc	r27, r29
     abe:	f8 e0       	ldi	r31, 0x08	; 8
     ac0:	8f 9f       	mul	r24, r31
     ac2:	a0 0d       	add	r26, r0
     ac4:	b1 1d       	adc	r27, r1
     ac6:	11 24       	eor	r1, r1
     ac8:	98 e0       	ldi	r25, 0x08	; 8
     aca:	fe 01       	movw	r30, r28
     acc:	eb 5b       	subi	r30, 0xBB	; 187
     ace:	f4 4e       	sbci	r31, 0xE4	; 228
     ad0:	01 90       	ld	r0, Z+
     ad2:	0d 92       	st	X+, r0
     ad4:	9a 95       	dec	r25
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <main+0x324>
	explosions.timeBetween[explosions.index] = a;
     ad8:	23 ee       	ldi	r18, 0xE3	; 227
     ada:	36 e1       	ldi	r19, 0x16	; 22
     adc:	2c 0f       	add	r18, r28
     ade:	3d 1f       	adc	r19, r29
     ae0:	28 0f       	add	r18, r24
     ae2:	31 1d       	adc	r19, r1
     ae4:	f9 01       	movw	r30, r18
     ae6:	e0 56       	subi	r30, 0x60	; 96
     ae8:	ff 4f       	sbci	r31, 0xFF	; 255
     aea:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     aec:	74 96       	adiw	r30, 0x14	; 20
     aee:	10 83       	st	Z, r17
	explosions.index++;
     af0:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     af2:	c5 55       	subi	r28, 0x55	; 85
     af4:	d8 4e       	sbci	r29, 0xE8	; 232
     af6:	88 83       	st	Y, r24
     af8:	cb 5a       	subi	r28, 0xAB	; 171
     afa:	d7 41       	sbci	r29, 0x17	; 23
     afc:	9a ec       	ldi	r25, 0xCA	; 202
     afe:	fe 01       	movw	r30, r28
     b00:	ed 51       	subi	r30, 0x1D	; 29
     b02:	f9 4e       	sbci	r31, 0xE9	; 233
     b04:	de 01       	movw	r26, r28
     b06:	a7 5e       	subi	r26, 0xE7	; 231
     b08:	b9 4e       	sbci	r27, 0xE9	; 233
     b0a:	01 90       	ld	r0, Z+
     b0c:	0d 92       	st	X+, r0
     b0e:	9a 95       	dec	r25
     b10:	e1 f7       	brne	.-8      	; 0xb0a <main+0x35e>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     b12:	cf 51       	subi	r28, 0x1F	; 31
     b14:	d9 4e       	sbci	r29, 0xE9	; 233
     b16:	88 83       	st	Y, r24
     b18:	c1 5e       	subi	r28, 0xE1	; 225
     b1a:	d6 41       	sbci	r29, 0x16	; 22
     b1c:	8a ec       	ldi	r24, 0xCA	; 202
     b1e:	fe 01       	movw	r30, r28
     b20:	e7 5e       	subi	r30, 0xE7	; 231
     b22:	f9 4e       	sbci	r31, 0xE9	; 233
     b24:	a8 e3       	ldi	r26, 0x38	; 56
     b26:	b1 e0       	ldi	r27, 0x01	; 1
     b28:	01 90       	ld	r0, Z+
     b2a:	0d 92       	st	X+, r0
     b2c:	8a 95       	dec	r24
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <main+0x37c>
	
	matrix = clearSingleMatrix(matrix);
     b30:	20 91 2f 01 	lds	r18, 0x012F
     b34:	30 91 30 01 	lds	r19, 0x0130
     b38:	40 91 31 01 	lds	r20, 0x0131
     b3c:	50 91 32 01 	lds	r21, 0x0132
     b40:	60 91 33 01 	lds	r22, 0x0133
     b44:	70 91 34 01 	lds	r23, 0x0134
     b48:	80 91 35 01 	lds	r24, 0x0135
     b4c:	90 91 36 01 	lds	r25, 0x0136
     b50:	a1 db       	rcall	.-2238   	; 0x294 <clearSingleMatrix>
     b52:	f7 01       	movw	r30, r14
     b54:	20 83       	st	Z, r18
     b56:	42 83       	std	Z+2, r20	; 0x02
     b58:	53 83       	std	Z+3, r21	; 0x03
     b5a:	64 83       	std	Z+4, r22	; 0x04
     b5c:	75 83       	std	Z+5, r23	; 0x05
     b5e:	97 83       	std	Z+7, r25	; 0x07
     b60:	37 7f       	andi	r19, 0xF7	; 247
	matrix.m[1] = SetBit(matrix.m[1], 3, 0);
     b62:	31 83       	std	Z+1, r19	; 0x01
     b64:	87 7f       	andi	r24, 0xF7	; 247
	matrix.m[6] = SetBit(matrix.m[6], 3, 0);
     b66:	86 83       	std	Z+6, r24	; 0x06
     b68:	8a ec       	ldi	r24, 0xCA	; 202
     b6a:	e8 e3       	ldi	r30, 0x38	; 56
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
     b6e:	de 01       	movw	r26, r28
     b70:	a1 5b       	subi	r26, 0xB1	; 177
     b72:	ba 4e       	sbci	r27, 0xEA	; 234
     b74:	01 90       	ld	r0, Z+
     b76:	0d 92       	st	X+, r0
     b78:	8a 95       	dec	r24
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <main+0x3c8>
     b7c:	f6 01       	movw	r30, r12
     b7e:	80 81       	ld	r24, Z
     b80:	98 e0       	ldi	r25, 0x08	; 8
     b82:	f7 01       	movw	r30, r14
     b84:	de 01       	movw	r26, r28
     b86:	a3 5c       	subi	r26, 0xC3	; 195
     b88:	b4 4e       	sbci	r27, 0xE4	; 228
     b8a:	01 90       	ld	r0, Z+
     b8c:	0d 92       	st	X+, r0
     b8e:	9a 95       	dec	r25
     b90:	e1 f7       	brne	.-8      	; 0xb8a <main+0x3de>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     b92:	af e4       	ldi	r26, 0x4F	; 79
     b94:	b5 e1       	ldi	r27, 0x15	; 21
     b96:	ac 0f       	add	r26, r28
     b98:	bd 1f       	adc	r27, r29
     b9a:	f8 e0       	ldi	r31, 0x08	; 8
     b9c:	8f 9f       	mul	r24, r31
     b9e:	a0 0d       	add	r26, r0
     ba0:	b1 1d       	adc	r27, r1
     ba2:	11 24       	eor	r1, r1
     ba4:	98 e0       	ldi	r25, 0x08	; 8
     ba6:	fe 01       	movw	r30, r28
     ba8:	e3 5c       	subi	r30, 0xC3	; 195
     baa:	f4 4e       	sbci	r31, 0xE4	; 228
     bac:	01 90       	ld	r0, Z+
     bae:	0d 92       	st	X+, r0
     bb0:	9a 95       	dec	r25
     bb2:	e1 f7       	brne	.-8      	; 0xbac <main+0x400>
	explosions.timeBetween[explosions.index] = a;
     bb4:	2f e4       	ldi	r18, 0x4F	; 79
     bb6:	35 e1       	ldi	r19, 0x15	; 21
     bb8:	2c 0f       	add	r18, r28
     bba:	3d 1f       	adc	r19, r29
     bbc:	28 0f       	add	r18, r24
     bbe:	31 1d       	adc	r19, r1
     bc0:	f9 01       	movw	r30, r18
     bc2:	e0 56       	subi	r30, 0x60	; 96
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     bc8:	74 96       	adiw	r30, 0x14	; 20
     bca:	10 83       	st	Z, r17
	explosions.index++;
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     bce:	c9 5e       	subi	r28, 0xE9	; 233
     bd0:	d9 4e       	sbci	r29, 0xE9	; 233
     bd2:	88 83       	st	Y, r24
     bd4:	c7 51       	subi	r28, 0x17	; 23
     bd6:	d6 41       	sbci	r29, 0x16	; 22
     bd8:	9a ec       	ldi	r25, 0xCA	; 202
     bda:	fe 01       	movw	r30, r28
     bdc:	e1 5b       	subi	r30, 0xB1	; 177
     bde:	fa 4e       	sbci	r31, 0xEA	; 234
     be0:	de 01       	movw	r26, r28
     be2:	ab 57       	subi	r26, 0x7B	; 123
     be4:	bb 4e       	sbci	r27, 0xEB	; 235
     be6:	01 90       	ld	r0, Z+
     be8:	0d 92       	st	X+, r0
     bea:	9a 95       	dec	r25
     bec:	e1 f7       	brne	.-8      	; 0xbe6 <main+0x43a>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     bee:	c3 5b       	subi	r28, 0xB3	; 179
     bf0:	da 4e       	sbci	r29, 0xEA	; 234
     bf2:	88 83       	st	Y, r24
     bf4:	cd 54       	subi	r28, 0x4D	; 77
     bf6:	d5 41       	sbci	r29, 0x15	; 21
     bf8:	8a ec       	ldi	r24, 0xCA	; 202
     bfa:	fe 01       	movw	r30, r28
     bfc:	eb 57       	subi	r30, 0x7B	; 123
     bfe:	fb 4e       	sbci	r31, 0xEB	; 235
     c00:	a8 e3       	ldi	r26, 0x38	; 56
     c02:	b1 e0       	ldi	r27, 0x01	; 1
     c04:	01 90       	ld	r0, Z+
     c06:	0d 92       	st	X+, r0
     c08:	8a 95       	dec	r24
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <main+0x458>
	
	matrix = clearSingleMatrix(matrix);
     c0c:	20 91 2f 01 	lds	r18, 0x012F
     c10:	30 91 30 01 	lds	r19, 0x0130
     c14:	40 91 31 01 	lds	r20, 0x0131
     c18:	50 91 32 01 	lds	r21, 0x0132
     c1c:	60 91 33 01 	lds	r22, 0x0133
     c20:	70 91 34 01 	lds	r23, 0x0134
     c24:	80 91 35 01 	lds	r24, 0x0135
     c28:	90 91 36 01 	lds	r25, 0x0136
     c2c:	33 db       	rcall	.-2458   	; 0x294 <clearSingleMatrix>
     c2e:	f7 01       	movw	r30, r14
     c30:	20 83       	st	Z, r18
     c32:	42 83       	std	Z+2, r20	; 0x02
     c34:	53 83       	std	Z+3, r21	; 0x03
     c36:	64 83       	std	Z+4, r22	; 0x04
     c38:	75 83       	std	Z+5, r23	; 0x05
     c3a:	97 83       	std	Z+7, r25	; 0x07
     c3c:	3f 7e       	andi	r19, 0xEF	; 239
	matrix.m[1] = SetBit(matrix.m[1], 4, 0);
     c3e:	31 83       	std	Z+1, r19	; 0x01
     c40:	8f 7e       	andi	r24, 0xEF	; 239
	matrix.m[6] = SetBit(matrix.m[6], 4, 0);
     c42:	86 83       	std	Z+6, r24	; 0x06
     c44:	8a ec       	ldi	r24, 0xCA	; 202
     c46:	e8 e3       	ldi	r30, 0x38	; 56
     c48:	f1 e0       	ldi	r31, 0x01	; 1
     c4a:	de 01       	movw	r26, r28
     c4c:	a5 54       	subi	r26, 0x45	; 69
     c4e:	bc 4e       	sbci	r27, 0xEC	; 236
     c50:	01 90       	ld	r0, Z+
     c52:	0d 92       	st	X+, r0
     c54:	8a 95       	dec	r24
     c56:	e1 f7       	brne	.-8      	; 0xc50 <main+0x4a4>
     c58:	f6 01       	movw	r30, r12
     c5a:	80 81       	ld	r24, Z
     c5c:	98 e0       	ldi	r25, 0x08	; 8
     c5e:	f7 01       	movw	r30, r14
     c60:	de 01       	movw	r26, r28
     c62:	ab 5c       	subi	r26, 0xCB	; 203
     c64:	b4 4e       	sbci	r27, 0xE4	; 228
     c66:	01 90       	ld	r0, Z+
     c68:	0d 92       	st	X+, r0
     c6a:	9a 95       	dec	r25
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <main+0x4ba>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     c6e:	ab eb       	ldi	r26, 0xBB	; 187
     c70:	b3 e1       	ldi	r27, 0x13	; 19
     c72:	ac 0f       	add	r26, r28
     c74:	bd 1f       	adc	r27, r29
     c76:	f8 e0       	ldi	r31, 0x08	; 8
     c78:	8f 9f       	mul	r24, r31
     c7a:	a0 0d       	add	r26, r0
     c7c:	b1 1d       	adc	r27, r1
     c7e:	11 24       	eor	r1, r1
     c80:	98 e0       	ldi	r25, 0x08	; 8
     c82:	fe 01       	movw	r30, r28
     c84:	eb 5c       	subi	r30, 0xCB	; 203
     c86:	f4 4e       	sbci	r31, 0xE4	; 228
     c88:	01 90       	ld	r0, Z+
     c8a:	0d 92       	st	X+, r0
     c8c:	9a 95       	dec	r25
     c8e:	e1 f7       	brne	.-8      	; 0xc88 <main+0x4dc>
	explosions.timeBetween[explosions.index] = a;
     c90:	2b eb       	ldi	r18, 0xBB	; 187
     c92:	33 e1       	ldi	r19, 0x13	; 19
     c94:	2c 0f       	add	r18, r28
     c96:	3d 1f       	adc	r19, r29
     c98:	28 0f       	add	r18, r24
     c9a:	31 1d       	adc	r19, r1
     c9c:	f9 01       	movw	r30, r18
     c9e:	e0 56       	subi	r30, 0x60	; 96
     ca0:	ff 4f       	sbci	r31, 0xFF	; 255
     ca2:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     ca4:	74 96       	adiw	r30, 0x14	; 20
     ca6:	10 83       	st	Z, r17
	explosions.index++;
     ca8:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     caa:	cd 57       	subi	r28, 0x7D	; 125
     cac:	db 4e       	sbci	r29, 0xEB	; 235
     cae:	88 83       	st	Y, r24
     cb0:	c3 58       	subi	r28, 0x83	; 131
     cb2:	d4 41       	sbci	r29, 0x14	; 20
     cb4:	9a ec       	ldi	r25, 0xCA	; 202
     cb6:	fe 01       	movw	r30, r28
     cb8:	e5 54       	subi	r30, 0x45	; 69
     cba:	fc 4e       	sbci	r31, 0xEC	; 236
     cbc:	de 01       	movw	r26, r28
     cbe:	af 50       	subi	r26, 0x0F	; 15
     cc0:	bd 4e       	sbci	r27, 0xED	; 237
     cc2:	01 90       	ld	r0, Z+
     cc4:	0d 92       	st	X+, r0
     cc6:	9a 95       	dec	r25
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <main+0x516>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     cca:	c7 54       	subi	r28, 0x47	; 71
     ccc:	dc 4e       	sbci	r29, 0xEC	; 236
     cce:	88 83       	st	Y, r24
     cd0:	c9 5b       	subi	r28, 0xB9	; 185
     cd2:	d3 41       	sbci	r29, 0x13	; 19
     cd4:	8a ec       	ldi	r24, 0xCA	; 202
     cd6:	fe 01       	movw	r30, r28
     cd8:	ef 50       	subi	r30, 0x0F	; 15
     cda:	fd 4e       	sbci	r31, 0xED	; 237
     cdc:	a8 e3       	ldi	r26, 0x38	; 56
     cde:	b1 e0       	ldi	r27, 0x01	; 1
     ce0:	01 90       	ld	r0, Z+
     ce2:	0d 92       	st	X+, r0
     ce4:	8a 95       	dec	r24
     ce6:	e1 f7       	brne	.-8      	; 0xce0 <main+0x534>
	
	matrix = clearSingleMatrix(matrix);
     ce8:	20 91 2f 01 	lds	r18, 0x012F
     cec:	30 91 30 01 	lds	r19, 0x0130
     cf0:	40 91 31 01 	lds	r20, 0x0131
     cf4:	50 91 32 01 	lds	r21, 0x0132
     cf8:	60 91 33 01 	lds	r22, 0x0133
     cfc:	70 91 34 01 	lds	r23, 0x0134
     d00:	80 91 35 01 	lds	r24, 0x0135
     d04:	90 91 36 01 	lds	r25, 0x0136
     d08:	c5 da       	rcall	.-2678   	; 0x294 <clearSingleMatrix>
     d0a:	f7 01       	movw	r30, r14
     d0c:	20 83       	st	Z, r18
     d0e:	42 83       	std	Z+2, r20	; 0x02
     d10:	53 83       	std	Z+3, r21	; 0x03
     d12:	64 83       	std	Z+4, r22	; 0x04
     d14:	75 83       	std	Z+5, r23	; 0x05
     d16:	97 83       	std	Z+7, r25	; 0x07
     d18:	3f 7d       	andi	r19, 0xDF	; 223
	matrix.m[1] = SetBit(matrix.m[1], 5, 0);
     d1a:	31 83       	std	Z+1, r19	; 0x01
     d1c:	8f 7d       	andi	r24, 0xDF	; 223
	matrix.m[6] = SetBit(matrix.m[6], 5, 0);
     d1e:	86 83       	std	Z+6, r24	; 0x06
     d20:	8a ec       	ldi	r24, 0xCA	; 202
     d22:	e8 e3       	ldi	r30, 0x38	; 56
     d24:	f1 e0       	ldi	r31, 0x01	; 1
     d26:	de 01       	movw	r26, r28
     d28:	a9 5d       	subi	r26, 0xD9	; 217
     d2a:	bd 4e       	sbci	r27, 0xED	; 237
     d2c:	01 90       	ld	r0, Z+
     d2e:	0d 92       	st	X+, r0
     d30:	8a 95       	dec	r24
     d32:	e1 f7       	brne	.-8      	; 0xd2c <main+0x580>
     d34:	f6 01       	movw	r30, r12
     d36:	80 81       	ld	r24, Z
     d38:	98 e0       	ldi	r25, 0x08	; 8
     d3a:	f7 01       	movw	r30, r14
     d3c:	de 01       	movw	r26, r28
     d3e:	a3 5d       	subi	r26, 0xD3	; 211
     d40:	b4 4e       	sbci	r27, 0xE4	; 228
     d42:	01 90       	ld	r0, Z+
     d44:	0d 92       	st	X+, r0
     d46:	9a 95       	dec	r25
     d48:	e1 f7       	brne	.-8      	; 0xd42 <main+0x596>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     d4a:	a7 e2       	ldi	r26, 0x27	; 39
     d4c:	b2 e1       	ldi	r27, 0x12	; 18
     d4e:	ac 0f       	add	r26, r28
     d50:	bd 1f       	adc	r27, r29
     d52:	f8 e0       	ldi	r31, 0x08	; 8
     d54:	8f 9f       	mul	r24, r31
     d56:	a0 0d       	add	r26, r0
     d58:	b1 1d       	adc	r27, r1
     d5a:	11 24       	eor	r1, r1
     d5c:	98 e0       	ldi	r25, 0x08	; 8
     d5e:	fe 01       	movw	r30, r28
     d60:	e3 5d       	subi	r30, 0xD3	; 211
     d62:	f4 4e       	sbci	r31, 0xE4	; 228
     d64:	01 90       	ld	r0, Z+
     d66:	0d 92       	st	X+, r0
     d68:	9a 95       	dec	r25
     d6a:	e1 f7       	brne	.-8      	; 0xd64 <main+0x5b8>
	explosions.timeBetween[explosions.index] = a;
     d6c:	27 e2       	ldi	r18, 0x27	; 39
     d6e:	32 e1       	ldi	r19, 0x12	; 18
     d70:	2c 0f       	add	r18, r28
     d72:	3d 1f       	adc	r19, r29
     d74:	28 0f       	add	r18, r24
     d76:	31 1d       	adc	r19, r1
     d78:	f9 01       	movw	r30, r18
     d7a:	e0 56       	subi	r30, 0x60	; 96
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     d80:	74 96       	adiw	r30, 0x14	; 20
     d82:	10 83       	st	Z, r17
	explosions.index++;
     d84:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     d86:	c1 51       	subi	r28, 0x11	; 17
     d88:	dd 4e       	sbci	r29, 0xED	; 237
     d8a:	88 83       	st	Y, r24
     d8c:	cf 5e       	subi	r28, 0xEF	; 239
     d8e:	d2 41       	sbci	r29, 0x12	; 18
     d90:	9a ec       	ldi	r25, 0xCA	; 202
     d92:	fe 01       	movw	r30, r28
     d94:	e9 5d       	subi	r30, 0xD9	; 217
     d96:	fd 4e       	sbci	r31, 0xED	; 237
     d98:	de 01       	movw	r26, r28
     d9a:	a3 5a       	subi	r26, 0xA3	; 163
     d9c:	be 4e       	sbci	r27, 0xEE	; 238
     d9e:	01 90       	ld	r0, Z+
     da0:	0d 92       	st	X+, r0
     da2:	9a 95       	dec	r25
     da4:	e1 f7       	brne	.-8      	; 0xd9e <main+0x5f2>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     da6:	cb 5d       	subi	r28, 0xDB	; 219
     da8:	dd 4e       	sbci	r29, 0xED	; 237
     daa:	88 83       	st	Y, r24
     dac:	c5 52       	subi	r28, 0x25	; 37
     dae:	d2 41       	sbci	r29, 0x12	; 18
     db0:	8a ec       	ldi	r24, 0xCA	; 202
     db2:	fe 01       	movw	r30, r28
     db4:	e3 5a       	subi	r30, 0xA3	; 163
     db6:	fe 4e       	sbci	r31, 0xEE	; 238
     db8:	a8 e3       	ldi	r26, 0x38	; 56
     dba:	b1 e0       	ldi	r27, 0x01	; 1
     dbc:	01 90       	ld	r0, Z+
     dbe:	0d 92       	st	X+, r0
     dc0:	8a 95       	dec	r24
     dc2:	e1 f7       	brne	.-8      	; 0xdbc <main+0x610>
	
	matrix = clearSingleMatrix(matrix);
     dc4:	20 91 2f 01 	lds	r18, 0x012F
     dc8:	30 91 30 01 	lds	r19, 0x0130
     dcc:	40 91 31 01 	lds	r20, 0x0131
     dd0:	50 91 32 01 	lds	r21, 0x0132
     dd4:	60 91 33 01 	lds	r22, 0x0133
     dd8:	70 91 34 01 	lds	r23, 0x0134
     ddc:	80 91 35 01 	lds	r24, 0x0135
     de0:	90 91 36 01 	lds	r25, 0x0136
     de4:	57 da       	rcall	.-2898   	; 0x294 <clearSingleMatrix>
     de6:	f7 01       	movw	r30, r14
     de8:	20 83       	st	Z, r18
     dea:	42 83       	std	Z+2, r20	; 0x02
     dec:	53 83       	std	Z+3, r21	; 0x03
     dee:	64 83       	std	Z+4, r22	; 0x04
     df0:	75 83       	std	Z+5, r23	; 0x05
     df2:	97 83       	std	Z+7, r25	; 0x07
     df4:	3f 7b       	andi	r19, 0xBF	; 191
	matrix.m[1] = SetBit(matrix.m[1], 6, 0);
     df6:	31 83       	std	Z+1, r19	; 0x01
     df8:	8f 7b       	andi	r24, 0xBF	; 191
	matrix.m[6] = SetBit(matrix.m[6], 6, 0);
     dfa:	86 83       	std	Z+6, r24	; 0x06
     dfc:	8a ec       	ldi	r24, 0xCA	; 202
     dfe:	e8 e3       	ldi	r30, 0x38	; 56
     e00:	f1 e0       	ldi	r31, 0x01	; 1
     e02:	de 01       	movw	r26, r28
     e04:	ad 56       	subi	r26, 0x6D	; 109
     e06:	bf 4e       	sbci	r27, 0xEF	; 239
     e08:	01 90       	ld	r0, Z+
     e0a:	0d 92       	st	X+, r0
     e0c:	8a 95       	dec	r24
     e0e:	e1 f7       	brne	.-8      	; 0xe08 <main+0x65c>
     e10:	f6 01       	movw	r30, r12
     e12:	80 81       	ld	r24, Z
     e14:	98 e0       	ldi	r25, 0x08	; 8
     e16:	f7 01       	movw	r30, r14
     e18:	de 01       	movw	r26, r28
     e1a:	ab 5d       	subi	r26, 0xDB	; 219
     e1c:	b4 4e       	sbci	r27, 0xE4	; 228
     e1e:	01 90       	ld	r0, Z+
     e20:	0d 92       	st	X+, r0
     e22:	9a 95       	dec	r25
     e24:	e1 f7       	brne	.-8      	; 0xe1e <main+0x672>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     e26:	a3 e9       	ldi	r26, 0x93	; 147
     e28:	b0 e1       	ldi	r27, 0x10	; 16
     e2a:	ac 0f       	add	r26, r28
     e2c:	bd 1f       	adc	r27, r29
     e2e:	f8 e0       	ldi	r31, 0x08	; 8
     e30:	8f 9f       	mul	r24, r31
     e32:	a0 0d       	add	r26, r0
     e34:	b1 1d       	adc	r27, r1
     e36:	11 24       	eor	r1, r1
     e38:	98 e0       	ldi	r25, 0x08	; 8
     e3a:	fe 01       	movw	r30, r28
     e3c:	eb 5d       	subi	r30, 0xDB	; 219
     e3e:	f4 4e       	sbci	r31, 0xE4	; 228
     e40:	01 90       	ld	r0, Z+
     e42:	0d 92       	st	X+, r0
     e44:	9a 95       	dec	r25
     e46:	e1 f7       	brne	.-8      	; 0xe40 <main+0x694>
	explosions.timeBetween[explosions.index] = a;
     e48:	23 e9       	ldi	r18, 0x93	; 147
     e4a:	30 e1       	ldi	r19, 0x10	; 16
     e4c:	2c 0f       	add	r18, r28
     e4e:	3d 1f       	adc	r19, r29
     e50:	28 0f       	add	r18, r24
     e52:	31 1d       	adc	r19, r1
     e54:	f9 01       	movw	r30, r18
     e56:	e0 56       	subi	r30, 0x60	; 96
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     e5c:	74 96       	adiw	r30, 0x14	; 20
     e5e:	10 83       	st	Z, r17
	explosions.index++;
     e60:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     e62:	c5 5a       	subi	r28, 0xA5	; 165
     e64:	de 4e       	sbci	r29, 0xEE	; 238
     e66:	88 83       	st	Y, r24
     e68:	cb 55       	subi	r28, 0x5B	; 91
     e6a:	d1 41       	sbci	r29, 0x11	; 17
     e6c:	9a ec       	ldi	r25, 0xCA	; 202
     e6e:	fe 01       	movw	r30, r28
     e70:	ed 56       	subi	r30, 0x6D	; 109
     e72:	ff 4e       	sbci	r31, 0xEF	; 239
     e74:	de 01       	movw	r26, r28
     e76:	a7 53       	subi	r26, 0x37	; 55
     e78:	b0 4f       	sbci	r27, 0xF0	; 240
     e7a:	01 90       	ld	r0, Z+
     e7c:	0d 92       	st	X+, r0
     e7e:	9a 95       	dec	r25
     e80:	e1 f7       	brne	.-8      	; 0xe7a <main+0x6ce>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     e82:	cf 56       	subi	r28, 0x6F	; 111
     e84:	df 4e       	sbci	r29, 0xEF	; 239
     e86:	88 83       	st	Y, r24
     e88:	c1 59       	subi	r28, 0x91	; 145
     e8a:	d0 41       	sbci	r29, 0x10	; 16
     e8c:	8a ec       	ldi	r24, 0xCA	; 202
     e8e:	fe 01       	movw	r30, r28
     e90:	e7 53       	subi	r30, 0x37	; 55
     e92:	f0 4f       	sbci	r31, 0xF0	; 240
     e94:	a8 e3       	ldi	r26, 0x38	; 56
     e96:	b1 e0       	ldi	r27, 0x01	; 1
     e98:	01 90       	ld	r0, Z+
     e9a:	0d 92       	st	X+, r0
     e9c:	8a 95       	dec	r24
     e9e:	e1 f7       	brne	.-8      	; 0xe98 <main+0x6ec>
	
	matrix = clearSingleMatrix(matrix);
     ea0:	20 91 2f 01 	lds	r18, 0x012F
     ea4:	30 91 30 01 	lds	r19, 0x0130
     ea8:	40 91 31 01 	lds	r20, 0x0131
     eac:	50 91 32 01 	lds	r21, 0x0132
     eb0:	60 91 33 01 	lds	r22, 0x0133
     eb4:	70 91 34 01 	lds	r23, 0x0134
     eb8:	80 91 35 01 	lds	r24, 0x0135
     ebc:	90 91 36 01 	lds	r25, 0x0136
     ec0:	e9 d9       	rcall	.-3118   	; 0x294 <clearSingleMatrix>
     ec2:	f7 01       	movw	r30, r14
     ec4:	20 83       	st	Z, r18
     ec6:	42 83       	std	Z+2, r20	; 0x02
     ec8:	53 83       	std	Z+3, r21	; 0x03
     eca:	64 83       	std	Z+4, r22	; 0x04
     ecc:	75 83       	std	Z+5, r23	; 0x05
     ece:	97 83       	std	Z+7, r25	; 0x07
     ed0:	3f 77       	andi	r19, 0x7F	; 127
	matrix.m[1] = SetBit(matrix.m[1], 7, 0);
     ed2:	31 83       	std	Z+1, r19	; 0x01
     ed4:	8f 77       	andi	r24, 0x7F	; 127
	matrix.m[6] = SetBit(matrix.m[6], 7, 0);
     ed6:	86 83       	std	Z+6, r24	; 0x06
     ed8:	8a ec       	ldi	r24, 0xCA	; 202
     eda:	e8 e3       	ldi	r30, 0x38	; 56
     edc:	f1 e0       	ldi	r31, 0x01	; 1
     ede:	de 01       	movw	r26, r28
     ee0:	a1 50       	subi	r26, 0x01	; 1
     ee2:	b1 4f       	sbci	r27, 0xF1	; 241
     ee4:	01 90       	ld	r0, Z+
     ee6:	0d 92       	st	X+, r0
     ee8:	8a 95       	dec	r24
     eea:	e1 f7       	brne	.-8      	; 0xee4 <main+0x738>
     eec:	f6 01       	movw	r30, r12
     eee:	80 81       	ld	r24, Z
     ef0:	98 e0       	ldi	r25, 0x08	; 8
     ef2:	f7 01       	movw	r30, r14
     ef4:	de 01       	movw	r26, r28
     ef6:	a3 5e       	subi	r26, 0xE3	; 227
     ef8:	b4 4e       	sbci	r27, 0xE4	; 228
     efa:	01 90       	ld	r0, Z+
     efc:	0d 92       	st	X+, r0
     efe:	9a 95       	dec	r25
     f00:	e1 f7       	brne	.-8      	; 0xefa <main+0x74e>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     f02:	af ef       	ldi	r26, 0xFF	; 255
     f04:	be e0       	ldi	r27, 0x0E	; 14
     f06:	ac 0f       	add	r26, r28
     f08:	bd 1f       	adc	r27, r29
     f0a:	f8 e0       	ldi	r31, 0x08	; 8
     f0c:	8f 9f       	mul	r24, r31
     f0e:	a0 0d       	add	r26, r0
     f10:	b1 1d       	adc	r27, r1
     f12:	11 24       	eor	r1, r1
     f14:	98 e0       	ldi	r25, 0x08	; 8
     f16:	fe 01       	movw	r30, r28
     f18:	e3 5e       	subi	r30, 0xE3	; 227
     f1a:	f4 4e       	sbci	r31, 0xE4	; 228
     f1c:	01 90       	ld	r0, Z+
     f1e:	0d 92       	st	X+, r0
     f20:	9a 95       	dec	r25
     f22:	e1 f7       	brne	.-8      	; 0xf1c <main+0x770>
	explosions.timeBetween[explosions.index] = a;
     f24:	2f ef       	ldi	r18, 0xFF	; 255
     f26:	3e e0       	ldi	r19, 0x0E	; 14
     f28:	2c 0f       	add	r18, r28
     f2a:	3d 1f       	adc	r19, r29
     f2c:	28 0f       	add	r18, r24
     f2e:	31 1d       	adc	r19, r1
     f30:	f9 01       	movw	r30, r18
     f32:	e0 56       	subi	r30, 0x60	; 96
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
     f38:	74 96       	adiw	r30, 0x14	; 20
     f3a:	10 83       	st	Z, r17
	explosions.index++;
     f3c:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
     f3e:	c9 53       	subi	r28, 0x39	; 57
     f40:	d0 4f       	sbci	r29, 0xF0	; 240
     f42:	88 83       	st	Y, r24
     f44:	c7 5c       	subi	r28, 0xC7	; 199
     f46:	df 40       	sbci	r29, 0x0F	; 15
     f48:	9a ec       	ldi	r25, 0xCA	; 202
     f4a:	fe 01       	movw	r30, r28
     f4c:	e1 50       	subi	r30, 0x01	; 1
     f4e:	f1 4f       	sbci	r31, 0xF1	; 241
     f50:	de 01       	movw	r26, r28
     f52:	ab 5c       	subi	r26, 0xCB	; 203
     f54:	b1 4f       	sbci	r27, 0xF1	; 241
     f56:	01 90       	ld	r0, Z+
     f58:	0d 92       	st	X+, r0
     f5a:	9a 95       	dec	r25
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <main+0x7aa>
	explosions = pushExplosion(explosions, matrix, 0, 2);
     f5e:	c3 50       	subi	r28, 0x03	; 3
     f60:	d1 4f       	sbci	r29, 0xF1	; 241
     f62:	88 83       	st	Y, r24
     f64:	cd 5f       	subi	r28, 0xFD	; 253
     f66:	de 40       	sbci	r29, 0x0E	; 14
     f68:	8a ec       	ldi	r24, 0xCA	; 202
     f6a:	fe 01       	movw	r30, r28
     f6c:	eb 5c       	subi	r30, 0xCB	; 203
     f6e:	f1 4f       	sbci	r31, 0xF1	; 241
     f70:	a8 e3       	ldi	r26, 0x38	; 56
     f72:	b1 e0       	ldi	r27, 0x01	; 1
     f74:	01 90       	ld	r0, Z+
     f76:	0d 92       	st	X+, r0
     f78:	8a 95       	dec	r24
     f7a:	e1 f7       	brne	.-8      	; 0xf74 <main+0x7c8>
	
	matrix = clearSingleMatrix(matrix);
     f7c:	20 91 2f 01 	lds	r18, 0x012F
     f80:	30 91 30 01 	lds	r19, 0x0130
     f84:	40 91 31 01 	lds	r20, 0x0131
     f88:	50 91 32 01 	lds	r21, 0x0132
     f8c:	60 91 33 01 	lds	r22, 0x0133
     f90:	70 91 34 01 	lds	r23, 0x0134
     f94:	80 91 35 01 	lds	r24, 0x0135
     f98:	90 91 36 01 	lds	r25, 0x0136
     f9c:	7b d9       	rcall	.-3338   	; 0x294 <clearSingleMatrix>
     f9e:	f7 01       	movw	r30, r14
     fa0:	20 83       	st	Z, r18
     fa2:	31 83       	std	Z+1, r19	; 0x01
     fa4:	53 83       	std	Z+3, r21	; 0x03
     fa6:	64 83       	std	Z+4, r22	; 0x04
     fa8:	86 83       	std	Z+6, r24	; 0x06
     faa:	97 83       	std	Z+7, r25	; 0x07
     fac:	4f 77       	andi	r20, 0x7F	; 127
	matrix.m[2] = SetBit(matrix.m[2], 7, 0);
     fae:	42 83       	std	Z+2, r20	; 0x02
     fb0:	7f 77       	andi	r23, 0x7F	; 127
	matrix.m[5] = SetBit(matrix.m[5], 7, 0);
     fb2:	75 83       	std	Z+5, r23	; 0x05
     fb4:	8a ec       	ldi	r24, 0xCA	; 202
     fb6:	e8 e3       	ldi	r30, 0x38	; 56
     fb8:	f1 e0       	ldi	r31, 0x01	; 1
     fba:	de 01       	movw	r26, r28
     fbc:	a5 59       	subi	r26, 0x95	; 149
     fbe:	b2 4f       	sbci	r27, 0xF2	; 242
     fc0:	01 90       	ld	r0, Z+
     fc2:	0d 92       	st	X+, r0
     fc4:	8a 95       	dec	r24
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <main+0x814>
     fc8:	f6 01       	movw	r30, r12
     fca:	80 81       	ld	r24, Z
     fcc:	98 e0       	ldi	r25, 0x08	; 8
     fce:	f7 01       	movw	r30, r14
     fd0:	de 01       	movw	r26, r28
     fd2:	ab 5e       	subi	r26, 0xEB	; 235
     fd4:	b4 4e       	sbci	r27, 0xE4	; 228
     fd6:	01 90       	ld	r0, Z+
     fd8:	0d 92       	st	X+, r0
     fda:	9a 95       	dec	r25
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <main+0x82a>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
     fde:	ab e6       	ldi	r26, 0x6B	; 107
     fe0:	bd e0       	ldi	r27, 0x0D	; 13
     fe2:	ac 0f       	add	r26, r28
     fe4:	bd 1f       	adc	r27, r29
     fe6:	f8 e0       	ldi	r31, 0x08	; 8
     fe8:	8f 9f       	mul	r24, r31
     fea:	a0 0d       	add	r26, r0
     fec:	b1 1d       	adc	r27, r1
     fee:	11 24       	eor	r1, r1
     ff0:	98 e0       	ldi	r25, 0x08	; 8
     ff2:	fe 01       	movw	r30, r28
     ff4:	eb 5e       	subi	r30, 0xEB	; 235
     ff6:	f4 4e       	sbci	r31, 0xE4	; 228
     ff8:	01 90       	ld	r0, Z+
     ffa:	0d 92       	st	X+, r0
     ffc:	9a 95       	dec	r25
     ffe:	e1 f7       	brne	.-8      	; 0xff8 <main+0x84c>
	explosions.timeBetween[explosions.index] = a;
    1000:	2b e6       	ldi	r18, 0x6B	; 107
    1002:	3d e0       	ldi	r19, 0x0D	; 13
    1004:	2c 0f       	add	r18, r28
    1006:	3d 1f       	adc	r19, r29
    1008:	28 0f       	add	r18, r24
    100a:	31 1d       	adc	r19, r1
    100c:	f9 01       	movw	r30, r18
    100e:	e0 56       	subi	r30, 0x60	; 96
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1014:	74 96       	adiw	r30, 0x14	; 20
    1016:	10 83       	st	Z, r17
	explosions.index++;
    1018:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    101a:	cd 5c       	subi	r28, 0xCD	; 205
    101c:	d1 4f       	sbci	r29, 0xF1	; 241
    101e:	88 83       	st	Y, r24
    1020:	c3 53       	subi	r28, 0x33	; 51
    1022:	de 40       	sbci	r29, 0x0E	; 14
    1024:	9a ec       	ldi	r25, 0xCA	; 202
    1026:	fe 01       	movw	r30, r28
    1028:	e5 59       	subi	r30, 0x95	; 149
    102a:	f2 4f       	sbci	r31, 0xF2	; 242
    102c:	de 01       	movw	r26, r28
    102e:	af 55       	subi	r26, 0x5F	; 95
    1030:	b3 4f       	sbci	r27, 0xF3	; 243
    1032:	01 90       	ld	r0, Z+
    1034:	0d 92       	st	X+, r0
    1036:	9a 95       	dec	r25
    1038:	e1 f7       	brne	.-8      	; 0x1032 <main+0x886>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    103a:	c7 59       	subi	r28, 0x97	; 151
    103c:	d2 4f       	sbci	r29, 0xF2	; 242
    103e:	88 83       	st	Y, r24
    1040:	c9 56       	subi	r28, 0x69	; 105
    1042:	dd 40       	sbci	r29, 0x0D	; 13
    1044:	8a ec       	ldi	r24, 0xCA	; 202
    1046:	fe 01       	movw	r30, r28
    1048:	ef 55       	subi	r30, 0x5F	; 95
    104a:	f3 4f       	sbci	r31, 0xF3	; 243
    104c:	a8 e3       	ldi	r26, 0x38	; 56
    104e:	b1 e0       	ldi	r27, 0x01	; 1
    1050:	01 90       	ld	r0, Z+
    1052:	0d 92       	st	X+, r0
    1054:	8a 95       	dec	r24
    1056:	e1 f7       	brne	.-8      	; 0x1050 <main+0x8a4>
	
	matrix = clearSingleMatrix(matrix);
    1058:	20 91 2f 01 	lds	r18, 0x012F
    105c:	30 91 30 01 	lds	r19, 0x0130
    1060:	40 91 31 01 	lds	r20, 0x0131
    1064:	50 91 32 01 	lds	r21, 0x0132
    1068:	60 91 33 01 	lds	r22, 0x0133
    106c:	70 91 34 01 	lds	r23, 0x0134
    1070:	80 91 35 01 	lds	r24, 0x0135
    1074:	90 91 36 01 	lds	r25, 0x0136
    1078:	0d d9       	rcall	.-3558   	; 0x294 <clearSingleMatrix>
    107a:	f7 01       	movw	r30, r14
    107c:	20 83       	st	Z, r18
    107e:	31 83       	std	Z+1, r19	; 0x01
    1080:	53 83       	std	Z+3, r21	; 0x03
    1082:	64 83       	std	Z+4, r22	; 0x04
    1084:	86 83       	std	Z+6, r24	; 0x06
    1086:	97 83       	std	Z+7, r25	; 0x07
    1088:	4f 7b       	andi	r20, 0xBF	; 191
	matrix.m[2] = SetBit(matrix.m[2], 6, 0);
    108a:	42 83       	std	Z+2, r20	; 0x02
    108c:	7f 7b       	andi	r23, 0xBF	; 191
	matrix.m[5] = SetBit(matrix.m[5], 6, 0);
    108e:	75 83       	std	Z+5, r23	; 0x05
    1090:	8a ec       	ldi	r24, 0xCA	; 202
    1092:	e8 e3       	ldi	r30, 0x38	; 56
    1094:	f1 e0       	ldi	r31, 0x01	; 1
    1096:	de 01       	movw	r26, r28
    1098:	a9 52       	subi	r26, 0x29	; 41
    109a:	b4 4f       	sbci	r27, 0xF4	; 244
    109c:	01 90       	ld	r0, Z+
    109e:	0d 92       	st	X+, r0
    10a0:	8a 95       	dec	r24
    10a2:	e1 f7       	brne	.-8      	; 0x109c <main+0x8f0>
    10a4:	f6 01       	movw	r30, r12
    10a6:	80 81       	ld	r24, Z
    10a8:	98 e0       	ldi	r25, 0x08	; 8
    10aa:	f7 01       	movw	r30, r14
    10ac:	de 01       	movw	r26, r28
    10ae:	a3 5f       	subi	r26, 0xF3	; 243
    10b0:	b4 4e       	sbci	r27, 0xE4	; 228
    10b2:	01 90       	ld	r0, Z+
    10b4:	0d 92       	st	X+, r0
    10b6:	9a 95       	dec	r25
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <main+0x906>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    10ba:	a7 ed       	ldi	r26, 0xD7	; 215
    10bc:	bb e0       	ldi	r27, 0x0B	; 11
    10be:	ac 0f       	add	r26, r28
    10c0:	bd 1f       	adc	r27, r29
    10c2:	f8 e0       	ldi	r31, 0x08	; 8
    10c4:	8f 9f       	mul	r24, r31
    10c6:	a0 0d       	add	r26, r0
    10c8:	b1 1d       	adc	r27, r1
    10ca:	11 24       	eor	r1, r1
    10cc:	98 e0       	ldi	r25, 0x08	; 8
    10ce:	fe 01       	movw	r30, r28
    10d0:	e3 5f       	subi	r30, 0xF3	; 243
    10d2:	f4 4e       	sbci	r31, 0xE4	; 228
    10d4:	01 90       	ld	r0, Z+
    10d6:	0d 92       	st	X+, r0
    10d8:	9a 95       	dec	r25
    10da:	e1 f7       	brne	.-8      	; 0x10d4 <main+0x928>
	explosions.timeBetween[explosions.index] = a;
    10dc:	27 ed       	ldi	r18, 0xD7	; 215
    10de:	3b e0       	ldi	r19, 0x0B	; 11
    10e0:	2c 0f       	add	r18, r28
    10e2:	3d 1f       	adc	r19, r29
    10e4:	28 0f       	add	r18, r24
    10e6:	31 1d       	adc	r19, r1
    10e8:	f9 01       	movw	r30, r18
    10ea:	e0 56       	subi	r30, 0x60	; 96
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    10f0:	74 96       	adiw	r30, 0x14	; 20
    10f2:	10 83       	st	Z, r17
	explosions.index++;
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    10f6:	c1 56       	subi	r28, 0x61	; 97
    10f8:	d3 4f       	sbci	r29, 0xF3	; 243
    10fa:	88 83       	st	Y, r24
    10fc:	cf 59       	subi	r28, 0x9F	; 159
    10fe:	dc 40       	sbci	r29, 0x0C	; 12
    1100:	9a ec       	ldi	r25, 0xCA	; 202
    1102:	fe 01       	movw	r30, r28
    1104:	e9 52       	subi	r30, 0x29	; 41
    1106:	f4 4f       	sbci	r31, 0xF4	; 244
    1108:	de 01       	movw	r26, r28
    110a:	a3 5f       	subi	r26, 0xF3	; 243
    110c:	b4 4f       	sbci	r27, 0xF4	; 244
    110e:	01 90       	ld	r0, Z+
    1110:	0d 92       	st	X+, r0
    1112:	9a 95       	dec	r25
    1114:	e1 f7       	brne	.-8      	; 0x110e <main+0x962>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1116:	cb 52       	subi	r28, 0x2B	; 43
    1118:	d4 4f       	sbci	r29, 0xF4	; 244
    111a:	88 83       	st	Y, r24
    111c:	c5 5d       	subi	r28, 0xD5	; 213
    111e:	db 40       	sbci	r29, 0x0B	; 11
    1120:	8a ec       	ldi	r24, 0xCA	; 202
    1122:	fe 01       	movw	r30, r28
    1124:	e3 5f       	subi	r30, 0xF3	; 243
    1126:	f4 4f       	sbci	r31, 0xF4	; 244
    1128:	a8 e3       	ldi	r26, 0x38	; 56
    112a:	b1 e0       	ldi	r27, 0x01	; 1
    112c:	01 90       	ld	r0, Z+
    112e:	0d 92       	st	X+, r0
    1130:	8a 95       	dec	r24
    1132:	e1 f7       	brne	.-8      	; 0x112c <main+0x980>
	
	matrix = clearSingleMatrix(matrix);
    1134:	20 91 2f 01 	lds	r18, 0x012F
    1138:	30 91 30 01 	lds	r19, 0x0130
    113c:	40 91 31 01 	lds	r20, 0x0131
    1140:	50 91 32 01 	lds	r21, 0x0132
    1144:	60 91 33 01 	lds	r22, 0x0133
    1148:	70 91 34 01 	lds	r23, 0x0134
    114c:	80 91 35 01 	lds	r24, 0x0135
    1150:	90 91 36 01 	lds	r25, 0x0136
    1154:	9f d8       	rcall	.-3778   	; 0x294 <clearSingleMatrix>
    1156:	f7 01       	movw	r30, r14
    1158:	20 83       	st	Z, r18
    115a:	31 83       	std	Z+1, r19	; 0x01
    115c:	53 83       	std	Z+3, r21	; 0x03
    115e:	64 83       	std	Z+4, r22	; 0x04
    1160:	86 83       	std	Z+6, r24	; 0x06
    1162:	97 83       	std	Z+7, r25	; 0x07
    1164:	4f 7d       	andi	r20, 0xDF	; 223
	matrix.m[2] = SetBit(matrix.m[2], 5, 0);
    1166:	42 83       	std	Z+2, r20	; 0x02
    1168:	7f 7d       	andi	r23, 0xDF	; 223
	matrix.m[5] = SetBit(matrix.m[5], 5, 0);
    116a:	75 83       	std	Z+5, r23	; 0x05
    116c:	8a ec       	ldi	r24, 0xCA	; 202
    116e:	e8 e3       	ldi	r30, 0x38	; 56
    1170:	f1 e0       	ldi	r31, 0x01	; 1
    1172:	de 01       	movw	r26, r28
    1174:	ad 5b       	subi	r26, 0xBD	; 189
    1176:	b5 4f       	sbci	r27, 0xF5	; 245
    1178:	01 90       	ld	r0, Z+
    117a:	0d 92       	st	X+, r0
    117c:	8a 95       	dec	r24
    117e:	e1 f7       	brne	.-8      	; 0x1178 <main+0x9cc>
    1180:	f6 01       	movw	r30, r12
    1182:	80 81       	ld	r24, Z
    1184:	98 e0       	ldi	r25, 0x08	; 8
    1186:	f7 01       	movw	r30, r14
    1188:	de 01       	movw	r26, r28
    118a:	ab 5f       	subi	r26, 0xFB	; 251
    118c:	b4 4e       	sbci	r27, 0xE4	; 228
    118e:	01 90       	ld	r0, Z+
    1190:	0d 92       	st	X+, r0
    1192:	9a 95       	dec	r25
    1194:	e1 f7       	brne	.-8      	; 0x118e <main+0x9e2>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1196:	a3 e4       	ldi	r26, 0x43	; 67
    1198:	ba e0       	ldi	r27, 0x0A	; 10
    119a:	ac 0f       	add	r26, r28
    119c:	bd 1f       	adc	r27, r29
    119e:	f8 e0       	ldi	r31, 0x08	; 8
    11a0:	8f 9f       	mul	r24, r31
    11a2:	a0 0d       	add	r26, r0
    11a4:	b1 1d       	adc	r27, r1
    11a6:	11 24       	eor	r1, r1
    11a8:	98 e0       	ldi	r25, 0x08	; 8
    11aa:	fe 01       	movw	r30, r28
    11ac:	eb 5f       	subi	r30, 0xFB	; 251
    11ae:	f4 4e       	sbci	r31, 0xE4	; 228
    11b0:	01 90       	ld	r0, Z+
    11b2:	0d 92       	st	X+, r0
    11b4:	9a 95       	dec	r25
    11b6:	e1 f7       	brne	.-8      	; 0x11b0 <main+0xa04>
	explosions.timeBetween[explosions.index] = a;
    11b8:	23 e4       	ldi	r18, 0x43	; 67
    11ba:	3a e0       	ldi	r19, 0x0A	; 10
    11bc:	2c 0f       	add	r18, r28
    11be:	3d 1f       	adc	r19, r29
    11c0:	28 0f       	add	r18, r24
    11c2:	31 1d       	adc	r19, r1
    11c4:	f9 01       	movw	r30, r18
    11c6:	e0 56       	subi	r30, 0x60	; 96
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    11cc:	74 96       	adiw	r30, 0x14	; 20
    11ce:	10 83       	st	Z, r17
	explosions.index++;
    11d0:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    11d2:	c5 5f       	subi	r28, 0xF5	; 245
    11d4:	d4 4f       	sbci	r29, 0xF4	; 244
    11d6:	88 83       	st	Y, r24
    11d8:	cb 50       	subi	r28, 0x0B	; 11
    11da:	db 40       	sbci	r29, 0x0B	; 11
    11dc:	9a ec       	ldi	r25, 0xCA	; 202
    11de:	fe 01       	movw	r30, r28
    11e0:	ed 5b       	subi	r30, 0xBD	; 189
    11e2:	f5 4f       	sbci	r31, 0xF5	; 245
    11e4:	de 01       	movw	r26, r28
    11e6:	a7 58       	subi	r26, 0x87	; 135
    11e8:	b6 4f       	sbci	r27, 0xF6	; 246
    11ea:	01 90       	ld	r0, Z+
    11ec:	0d 92       	st	X+, r0
    11ee:	9a 95       	dec	r25
    11f0:	e1 f7       	brne	.-8      	; 0x11ea <main+0xa3e>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    11f2:	cf 5b       	subi	r28, 0xBF	; 191
    11f4:	d5 4f       	sbci	r29, 0xF5	; 245
    11f6:	88 83       	st	Y, r24
    11f8:	c1 54       	subi	r28, 0x41	; 65
    11fa:	da 40       	sbci	r29, 0x0A	; 10
    11fc:	8a ec       	ldi	r24, 0xCA	; 202
    11fe:	fe 01       	movw	r30, r28
    1200:	e7 58       	subi	r30, 0x87	; 135
    1202:	f6 4f       	sbci	r31, 0xF6	; 246
    1204:	a8 e3       	ldi	r26, 0x38	; 56
    1206:	b1 e0       	ldi	r27, 0x01	; 1
    1208:	01 90       	ld	r0, Z+
    120a:	0d 92       	st	X+, r0
    120c:	8a 95       	dec	r24
    120e:	e1 f7       	brne	.-8      	; 0x1208 <main+0xa5c>
	
	matrix = clearSingleMatrix(matrix);
    1210:	20 91 2f 01 	lds	r18, 0x012F
    1214:	30 91 30 01 	lds	r19, 0x0130
    1218:	40 91 31 01 	lds	r20, 0x0131
    121c:	50 91 32 01 	lds	r21, 0x0132
    1220:	60 91 33 01 	lds	r22, 0x0133
    1224:	70 91 34 01 	lds	r23, 0x0134
    1228:	80 91 35 01 	lds	r24, 0x0135
    122c:	90 91 36 01 	lds	r25, 0x0136
    1230:	31 d8       	rcall	.-3998   	; 0x294 <clearSingleMatrix>
    1232:	f7 01       	movw	r30, r14
    1234:	20 83       	st	Z, r18
    1236:	31 83       	std	Z+1, r19	; 0x01
    1238:	53 83       	std	Z+3, r21	; 0x03
    123a:	64 83       	std	Z+4, r22	; 0x04
    123c:	86 83       	std	Z+6, r24	; 0x06
    123e:	97 83       	std	Z+7, r25	; 0x07
    1240:	4f 7e       	andi	r20, 0xEF	; 239
	matrix.m[2] = SetBit(matrix.m[2], 4, 0);
    1242:	42 83       	std	Z+2, r20	; 0x02
    1244:	7f 7e       	andi	r23, 0xEF	; 239
	matrix.m[5] = SetBit(matrix.m[5], 4, 0);
    1246:	75 83       	std	Z+5, r23	; 0x05
    1248:	8a ec       	ldi	r24, 0xCA	; 202
    124a:	e8 e3       	ldi	r30, 0x38	; 56
    124c:	f1 e0       	ldi	r31, 0x01	; 1
    124e:	de 01       	movw	r26, r28
    1250:	a1 55       	subi	r26, 0x51	; 81
    1252:	b7 4f       	sbci	r27, 0xF7	; 247
    1254:	01 90       	ld	r0, Z+
    1256:	0d 92       	st	X+, r0
    1258:	8a 95       	dec	r24
    125a:	e1 f7       	brne	.-8      	; 0x1254 <main+0xaa8>
    125c:	f6 01       	movw	r30, r12
    125e:	80 81       	ld	r24, Z
    1260:	98 e0       	ldi	r25, 0x08	; 8
    1262:	f7 01       	movw	r30, r14
    1264:	de 01       	movw	r26, r28
    1266:	a3 50       	subi	r26, 0x03	; 3
    1268:	b5 4e       	sbci	r27, 0xE5	; 229
    126a:	01 90       	ld	r0, Z+
    126c:	0d 92       	st	X+, r0
    126e:	9a 95       	dec	r25
    1270:	e1 f7       	brne	.-8      	; 0x126a <main+0xabe>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1272:	af ea       	ldi	r26, 0xAF	; 175
    1274:	b8 e0       	ldi	r27, 0x08	; 8
    1276:	ac 0f       	add	r26, r28
    1278:	bd 1f       	adc	r27, r29
    127a:	f8 e0       	ldi	r31, 0x08	; 8
    127c:	8f 9f       	mul	r24, r31
    127e:	a0 0d       	add	r26, r0
    1280:	b1 1d       	adc	r27, r1
    1282:	11 24       	eor	r1, r1
    1284:	98 e0       	ldi	r25, 0x08	; 8
    1286:	fe 01       	movw	r30, r28
    1288:	e3 50       	subi	r30, 0x03	; 3
    128a:	f5 4e       	sbci	r31, 0xE5	; 229
    128c:	01 90       	ld	r0, Z+
    128e:	0d 92       	st	X+, r0
    1290:	9a 95       	dec	r25
    1292:	e1 f7       	brne	.-8      	; 0x128c <main+0xae0>
	explosions.timeBetween[explosions.index] = a;
    1294:	2f ea       	ldi	r18, 0xAF	; 175
    1296:	38 e0       	ldi	r19, 0x08	; 8
    1298:	2c 0f       	add	r18, r28
    129a:	3d 1f       	adc	r19, r29
    129c:	28 0f       	add	r18, r24
    129e:	31 1d       	adc	r19, r1
    12a0:	f9 01       	movw	r30, r18
    12a2:	e0 56       	subi	r30, 0x60	; 96
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    12a8:	74 96       	adiw	r30, 0x14	; 20
    12aa:	10 83       	st	Z, r17
	explosions.index++;
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    12ae:	c9 58       	subi	r28, 0x89	; 137
    12b0:	d6 4f       	sbci	r29, 0xF6	; 246
    12b2:	88 83       	st	Y, r24
    12b4:	c7 57       	subi	r28, 0x77	; 119
    12b6:	d9 40       	sbci	r29, 0x09	; 9
    12b8:	9a ec       	ldi	r25, 0xCA	; 202
    12ba:	fe 01       	movw	r30, r28
    12bc:	e1 55       	subi	r30, 0x51	; 81
    12be:	f7 4f       	sbci	r31, 0xF7	; 247
    12c0:	de 01       	movw	r26, r28
    12c2:	ab 51       	subi	r26, 0x1B	; 27
    12c4:	b8 4f       	sbci	r27, 0xF8	; 248
    12c6:	01 90       	ld	r0, Z+
    12c8:	0d 92       	st	X+, r0
    12ca:	9a 95       	dec	r25
    12cc:	e1 f7       	brne	.-8      	; 0x12c6 <main+0xb1a>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    12ce:	c3 55       	subi	r28, 0x53	; 83
    12d0:	d7 4f       	sbci	r29, 0xF7	; 247
    12d2:	88 83       	st	Y, r24
    12d4:	cd 5a       	subi	r28, 0xAD	; 173
    12d6:	d8 40       	sbci	r29, 0x08	; 8
    12d8:	8a ec       	ldi	r24, 0xCA	; 202
    12da:	fe 01       	movw	r30, r28
    12dc:	eb 51       	subi	r30, 0x1B	; 27
    12de:	f8 4f       	sbci	r31, 0xF8	; 248
    12e0:	a8 e3       	ldi	r26, 0x38	; 56
    12e2:	b1 e0       	ldi	r27, 0x01	; 1
    12e4:	01 90       	ld	r0, Z+
    12e6:	0d 92       	st	X+, r0
    12e8:	8a 95       	dec	r24
    12ea:	e1 f7       	brne	.-8      	; 0x12e4 <main+0xb38>
	
	matrix = clearSingleMatrix(matrix);
    12ec:	20 91 2f 01 	lds	r18, 0x012F
    12f0:	30 91 30 01 	lds	r19, 0x0130
    12f4:	40 91 31 01 	lds	r20, 0x0131
    12f8:	50 91 32 01 	lds	r21, 0x0132
    12fc:	60 91 33 01 	lds	r22, 0x0133
    1300:	70 91 34 01 	lds	r23, 0x0134
    1304:	80 91 35 01 	lds	r24, 0x0135
    1308:	90 91 36 01 	lds	r25, 0x0136
    130c:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    1310:	f7 01       	movw	r30, r14
    1312:	20 83       	st	Z, r18
    1314:	31 83       	std	Z+1, r19	; 0x01
    1316:	53 83       	std	Z+3, r21	; 0x03
    1318:	64 83       	std	Z+4, r22	; 0x04
    131a:	86 83       	std	Z+6, r24	; 0x06
    131c:	97 83       	std	Z+7, r25	; 0x07
    131e:	47 7f       	andi	r20, 0xF7	; 247
	matrix.m[2] = SetBit(matrix.m[2], 3, 0);
    1320:	42 83       	std	Z+2, r20	; 0x02
    1322:	77 7f       	andi	r23, 0xF7	; 247
	matrix.m[5] = SetBit(matrix.m[5], 3, 0);
    1324:	75 83       	std	Z+5, r23	; 0x05
    1326:	8a ec       	ldi	r24, 0xCA	; 202
    1328:	e8 e3       	ldi	r30, 0x38	; 56
    132a:	f1 e0       	ldi	r31, 0x01	; 1
    132c:	de 01       	movw	r26, r28
    132e:	a5 5e       	subi	r26, 0xE5	; 229
    1330:	b8 4f       	sbci	r27, 0xF8	; 248
    1332:	01 90       	ld	r0, Z+
    1334:	0d 92       	st	X+, r0
    1336:	8a 95       	dec	r24
    1338:	e1 f7       	brne	.-8      	; 0x1332 <main+0xb86>
    133a:	f6 01       	movw	r30, r12
    133c:	80 81       	ld	r24, Z
    133e:	98 e0       	ldi	r25, 0x08	; 8
    1340:	f7 01       	movw	r30, r14
    1342:	de 01       	movw	r26, r28
    1344:	ab 50       	subi	r26, 0x0B	; 11
    1346:	b5 4e       	sbci	r27, 0xE5	; 229
    1348:	01 90       	ld	r0, Z+
    134a:	0d 92       	st	X+, r0
    134c:	9a 95       	dec	r25
    134e:	e1 f7       	brne	.-8      	; 0x1348 <main+0xb9c>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    1350:	ab e1       	ldi	r26, 0x1B	; 27
    1352:	b7 e0       	ldi	r27, 0x07	; 7
    1354:	ac 0f       	add	r26, r28
    1356:	bd 1f       	adc	r27, r29
    1358:	f8 e0       	ldi	r31, 0x08	; 8
    135a:	8f 9f       	mul	r24, r31
    135c:	a0 0d       	add	r26, r0
    135e:	b1 1d       	adc	r27, r1
    1360:	11 24       	eor	r1, r1
    1362:	98 e0       	ldi	r25, 0x08	; 8
    1364:	fe 01       	movw	r30, r28
    1366:	eb 50       	subi	r30, 0x0B	; 11
    1368:	f5 4e       	sbci	r31, 0xE5	; 229
    136a:	01 90       	ld	r0, Z+
    136c:	0d 92       	st	X+, r0
    136e:	9a 95       	dec	r25
    1370:	e1 f7       	brne	.-8      	; 0x136a <main+0xbbe>
	explosions.timeBetween[explosions.index] = a;
    1372:	2b e1       	ldi	r18, 0x1B	; 27
    1374:	37 e0       	ldi	r19, 0x07	; 7
    1376:	2c 0f       	add	r18, r28
    1378:	3d 1f       	adc	r19, r29
    137a:	28 0f       	add	r18, r24
    137c:	31 1d       	adc	r19, r1
    137e:	f9 01       	movw	r30, r18
    1380:	e0 56       	subi	r30, 0x60	; 96
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1386:	74 96       	adiw	r30, 0x14	; 20
    1388:	10 83       	st	Z, r17
	explosions.index++;
    138a:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    138c:	cd 51       	subi	r28, 0x1D	; 29
    138e:	d8 4f       	sbci	r29, 0xF8	; 248
    1390:	88 83       	st	Y, r24
    1392:	c3 5e       	subi	r28, 0xE3	; 227
    1394:	d7 40       	sbci	r29, 0x07	; 7
    1396:	9a ec       	ldi	r25, 0xCA	; 202
    1398:	fe 01       	movw	r30, r28
    139a:	e5 5e       	subi	r30, 0xE5	; 229
    139c:	f8 4f       	sbci	r31, 0xF8	; 248
    139e:	de 01       	movw	r26, r28
    13a0:	af 5a       	subi	r26, 0xAF	; 175
    13a2:	b9 4f       	sbci	r27, 0xF9	; 249
    13a4:	01 90       	ld	r0, Z+
    13a6:	0d 92       	st	X+, r0
    13a8:	9a 95       	dec	r25
    13aa:	e1 f7       	brne	.-8      	; 0x13a4 <main+0xbf8>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    13ac:	c7 5e       	subi	r28, 0xE7	; 231
    13ae:	d8 4f       	sbci	r29, 0xF8	; 248
    13b0:	88 83       	st	Y, r24
    13b2:	c9 51       	subi	r28, 0x19	; 25
    13b4:	d7 40       	sbci	r29, 0x07	; 7
    13b6:	8a ec       	ldi	r24, 0xCA	; 202
    13b8:	fe 01       	movw	r30, r28
    13ba:	ef 5a       	subi	r30, 0xAF	; 175
    13bc:	f9 4f       	sbci	r31, 0xF9	; 249
    13be:	a8 e3       	ldi	r26, 0x38	; 56
    13c0:	b1 e0       	ldi	r27, 0x01	; 1
    13c2:	01 90       	ld	r0, Z+
    13c4:	0d 92       	st	X+, r0
    13c6:	8a 95       	dec	r24
    13c8:	e1 f7       	brne	.-8      	; 0x13c2 <main+0xc16>
	
	matrix = clearSingleMatrix(matrix);
    13ca:	20 91 2f 01 	lds	r18, 0x012F
    13ce:	30 91 30 01 	lds	r19, 0x0130
    13d2:	40 91 31 01 	lds	r20, 0x0131
    13d6:	50 91 32 01 	lds	r21, 0x0132
    13da:	60 91 33 01 	lds	r22, 0x0133
    13de:	70 91 34 01 	lds	r23, 0x0134
    13e2:	80 91 35 01 	lds	r24, 0x0135
    13e6:	90 91 36 01 	lds	r25, 0x0136
    13ea:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    13ee:	f7 01       	movw	r30, r14
    13f0:	20 83       	st	Z, r18
    13f2:	31 83       	std	Z+1, r19	; 0x01
    13f4:	53 83       	std	Z+3, r21	; 0x03
    13f6:	64 83       	std	Z+4, r22	; 0x04
    13f8:	86 83       	std	Z+6, r24	; 0x06
    13fa:	97 83       	std	Z+7, r25	; 0x07
    13fc:	4b 7f       	andi	r20, 0xFB	; 251
	matrix.m[2] = SetBit(matrix.m[2], 2, 0);
    13fe:	42 83       	std	Z+2, r20	; 0x02
    1400:	7b 7f       	andi	r23, 0xFB	; 251
	matrix.m[5] = SetBit(matrix.m[5], 2, 0);
    1402:	75 83       	std	Z+5, r23	; 0x05
    1404:	8a ec       	ldi	r24, 0xCA	; 202
    1406:	e8 e3       	ldi	r30, 0x38	; 56
    1408:	f1 e0       	ldi	r31, 0x01	; 1
    140a:	de 01       	movw	r26, r28
    140c:	a9 57       	subi	r26, 0x79	; 121
    140e:	ba 4f       	sbci	r27, 0xFA	; 250
    1410:	01 90       	ld	r0, Z+
    1412:	0d 92       	st	X+, r0
    1414:	8a 95       	dec	r24
    1416:	e1 f7       	brne	.-8      	; 0x1410 <main+0xc64>
    1418:	f6 01       	movw	r30, r12
    141a:	80 81       	ld	r24, Z
    141c:	98 e0       	ldi	r25, 0x08	; 8
    141e:	f7 01       	movw	r30, r14
    1420:	de 01       	movw	r26, r28
    1422:	a3 51       	subi	r26, 0x13	; 19
    1424:	b5 4e       	sbci	r27, 0xE5	; 229
    1426:	01 90       	ld	r0, Z+
    1428:	0d 92       	st	X+, r0
    142a:	9a 95       	dec	r25
    142c:	e1 f7       	brne	.-8      	; 0x1426 <main+0xc7a>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    142e:	a7 e8       	ldi	r26, 0x87	; 135
    1430:	b5 e0       	ldi	r27, 0x05	; 5
    1432:	ac 0f       	add	r26, r28
    1434:	bd 1f       	adc	r27, r29
    1436:	f8 e0       	ldi	r31, 0x08	; 8
    1438:	8f 9f       	mul	r24, r31
    143a:	a0 0d       	add	r26, r0
    143c:	b1 1d       	adc	r27, r1
    143e:	11 24       	eor	r1, r1
    1440:	98 e0       	ldi	r25, 0x08	; 8
    1442:	fe 01       	movw	r30, r28
    1444:	e3 51       	subi	r30, 0x13	; 19
    1446:	f5 4e       	sbci	r31, 0xE5	; 229
    1448:	01 90       	ld	r0, Z+
    144a:	0d 92       	st	X+, r0
    144c:	9a 95       	dec	r25
    144e:	e1 f7       	brne	.-8      	; 0x1448 <main+0xc9c>
	explosions.timeBetween[explosions.index] = a;
    1450:	27 e8       	ldi	r18, 0x87	; 135
    1452:	35 e0       	ldi	r19, 0x05	; 5
    1454:	2c 0f       	add	r18, r28
    1456:	3d 1f       	adc	r19, r29
    1458:	28 0f       	add	r18, r24
    145a:	31 1d       	adc	r19, r1
    145c:	f9 01       	movw	r30, r18
    145e:	e0 56       	subi	r30, 0x60	; 96
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1464:	74 96       	adiw	r30, 0x14	; 20
    1466:	10 83       	st	Z, r17
	explosions.index++;
    1468:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    146a:	c1 5b       	subi	r28, 0xB1	; 177
    146c:	d9 4f       	sbci	r29, 0xF9	; 249
    146e:	88 83       	st	Y, r24
    1470:	cf 54       	subi	r28, 0x4F	; 79
    1472:	d6 40       	sbci	r29, 0x06	; 6
    1474:	9a ec       	ldi	r25, 0xCA	; 202
    1476:	fe 01       	movw	r30, r28
    1478:	e9 57       	subi	r30, 0x79	; 121
    147a:	fa 4f       	sbci	r31, 0xFA	; 250
    147c:	de 01       	movw	r26, r28
    147e:	a3 54       	subi	r26, 0x43	; 67
    1480:	bb 4f       	sbci	r27, 0xFB	; 251
    1482:	01 90       	ld	r0, Z+
    1484:	0d 92       	st	X+, r0
    1486:	9a 95       	dec	r25
    1488:	e1 f7       	brne	.-8      	; 0x1482 <main+0xcd6>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    148a:	cb 57       	subi	r28, 0x7B	; 123
    148c:	da 4f       	sbci	r29, 0xFA	; 250
    148e:	88 83       	st	Y, r24
    1490:	c5 58       	subi	r28, 0x85	; 133
    1492:	d5 40       	sbci	r29, 0x05	; 5
    1494:	8a ec       	ldi	r24, 0xCA	; 202
    1496:	fe 01       	movw	r30, r28
    1498:	e3 54       	subi	r30, 0x43	; 67
    149a:	fb 4f       	sbci	r31, 0xFB	; 251
    149c:	a8 e3       	ldi	r26, 0x38	; 56
    149e:	b1 e0       	ldi	r27, 0x01	; 1
    14a0:	01 90       	ld	r0, Z+
    14a2:	0d 92       	st	X+, r0
    14a4:	8a 95       	dec	r24
    14a6:	e1 f7       	brne	.-8      	; 0x14a0 <main+0xcf4>
	
	matrix = clearSingleMatrix(matrix);
    14a8:	20 91 2f 01 	lds	r18, 0x012F
    14ac:	30 91 30 01 	lds	r19, 0x0130
    14b0:	40 91 31 01 	lds	r20, 0x0131
    14b4:	50 91 32 01 	lds	r21, 0x0132
    14b8:	60 91 33 01 	lds	r22, 0x0133
    14bc:	70 91 34 01 	lds	r23, 0x0134
    14c0:	80 91 35 01 	lds	r24, 0x0135
    14c4:	90 91 36 01 	lds	r25, 0x0136
    14c8:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    14cc:	f7 01       	movw	r30, r14
    14ce:	20 83       	st	Z, r18
    14d0:	31 83       	std	Z+1, r19	; 0x01
    14d2:	53 83       	std	Z+3, r21	; 0x03
    14d4:	64 83       	std	Z+4, r22	; 0x04
    14d6:	86 83       	std	Z+6, r24	; 0x06
    14d8:	97 83       	std	Z+7, r25	; 0x07
    14da:	4d 7f       	andi	r20, 0xFD	; 253
	matrix.m[2] = SetBit(matrix.m[2], 1, 0);
    14dc:	42 83       	std	Z+2, r20	; 0x02
    14de:	7d 7f       	andi	r23, 0xFD	; 253
	matrix.m[5] = SetBit(matrix.m[5], 1, 0);
    14e0:	75 83       	std	Z+5, r23	; 0x05
    14e2:	8a ec       	ldi	r24, 0xCA	; 202
    14e4:	e8 e3       	ldi	r30, 0x38	; 56
    14e6:	f1 e0       	ldi	r31, 0x01	; 1
    14e8:	de 01       	movw	r26, r28
    14ea:	ad 50       	subi	r26, 0x0D	; 13
    14ec:	bc 4f       	sbci	r27, 0xFC	; 252
    14ee:	01 90       	ld	r0, Z+
    14f0:	0d 92       	st	X+, r0
    14f2:	8a 95       	dec	r24
    14f4:	e1 f7       	brne	.-8      	; 0x14ee <main+0xd42>
    14f6:	f6 01       	movw	r30, r12
    14f8:	80 81       	ld	r24, Z
    14fa:	98 e0       	ldi	r25, 0x08	; 8
    14fc:	f7 01       	movw	r30, r14
    14fe:	de 01       	movw	r26, r28
    1500:	ab 51       	subi	r26, 0x1B	; 27
    1502:	b5 4e       	sbci	r27, 0xE5	; 229
    1504:	01 90       	ld	r0, Z+
    1506:	0d 92       	st	X+, r0
    1508:	9a 95       	dec	r25
    150a:	e1 f7       	brne	.-8      	; 0x1504 <main+0xd58>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    150c:	a3 ef       	ldi	r26, 0xF3	; 243
    150e:	b3 e0       	ldi	r27, 0x03	; 3
    1510:	ac 0f       	add	r26, r28
    1512:	bd 1f       	adc	r27, r29
    1514:	f8 e0       	ldi	r31, 0x08	; 8
    1516:	8f 9f       	mul	r24, r31
    1518:	a0 0d       	add	r26, r0
    151a:	b1 1d       	adc	r27, r1
    151c:	11 24       	eor	r1, r1
    151e:	98 e0       	ldi	r25, 0x08	; 8
    1520:	fe 01       	movw	r30, r28
    1522:	eb 51       	subi	r30, 0x1B	; 27
    1524:	f5 4e       	sbci	r31, 0xE5	; 229
    1526:	01 90       	ld	r0, Z+
    1528:	0d 92       	st	X+, r0
    152a:	9a 95       	dec	r25
    152c:	e1 f7       	brne	.-8      	; 0x1526 <main+0xd7a>
	explosions.timeBetween[explosions.index] = a;
    152e:	23 ef       	ldi	r18, 0xF3	; 243
    1530:	33 e0       	ldi	r19, 0x03	; 3
    1532:	2c 0f       	add	r18, r28
    1534:	3d 1f       	adc	r19, r29
    1536:	28 0f       	add	r18, r24
    1538:	31 1d       	adc	r19, r1
    153a:	f9 01       	movw	r30, r18
    153c:	e0 56       	subi	r30, 0x60	; 96
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1542:	74 96       	adiw	r30, 0x14	; 20
    1544:	10 83       	st	Z, r17
	explosions.index++;
    1546:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1548:	c5 54       	subi	r28, 0x45	; 69
    154a:	db 4f       	sbci	r29, 0xFB	; 251
    154c:	88 83       	st	Y, r24
    154e:	cb 5b       	subi	r28, 0xBB	; 187
    1550:	d4 40       	sbci	r29, 0x04	; 4
    1552:	9a ec       	ldi	r25, 0xCA	; 202
    1554:	fe 01       	movw	r30, r28
    1556:	ed 50       	subi	r30, 0x0D	; 13
    1558:	fc 4f       	sbci	r31, 0xFC	; 252
    155a:	de 01       	movw	r26, r28
    155c:	a7 5d       	subi	r26, 0xD7	; 215
    155e:	bc 4f       	sbci	r27, 0xFC	; 252
    1560:	01 90       	ld	r0, Z+
    1562:	0d 92       	st	X+, r0
    1564:	9a 95       	dec	r25
    1566:	e1 f7       	brne	.-8      	; 0x1560 <main+0xdb4>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1568:	cf 50       	subi	r28, 0x0F	; 15
    156a:	dc 4f       	sbci	r29, 0xFC	; 252
    156c:	88 83       	st	Y, r24
    156e:	c1 5f       	subi	r28, 0xF1	; 241
    1570:	d3 40       	sbci	r29, 0x03	; 3
    1572:	8a ec       	ldi	r24, 0xCA	; 202
    1574:	fe 01       	movw	r30, r28
    1576:	e7 5d       	subi	r30, 0xD7	; 215
    1578:	fc 4f       	sbci	r31, 0xFC	; 252
    157a:	a8 e3       	ldi	r26, 0x38	; 56
    157c:	b1 e0       	ldi	r27, 0x01	; 1
    157e:	01 90       	ld	r0, Z+
    1580:	0d 92       	st	X+, r0
    1582:	8a 95       	dec	r24
    1584:	e1 f7       	brne	.-8      	; 0x157e <main+0xdd2>
	
	matrix = clearSingleMatrix(matrix);
    1586:	20 91 2f 01 	lds	r18, 0x012F
    158a:	30 91 30 01 	lds	r19, 0x0130
    158e:	40 91 31 01 	lds	r20, 0x0131
    1592:	50 91 32 01 	lds	r21, 0x0132
    1596:	60 91 33 01 	lds	r22, 0x0133
    159a:	70 91 34 01 	lds	r23, 0x0134
    159e:	80 91 35 01 	lds	r24, 0x0135
    15a2:	90 91 36 01 	lds	r25, 0x0136
    15a6:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    15aa:	f7 01       	movw	r30, r14
    15ac:	20 83       	st	Z, r18
    15ae:	31 83       	std	Z+1, r19	; 0x01
    15b0:	53 83       	std	Z+3, r21	; 0x03
    15b2:	64 83       	std	Z+4, r22	; 0x04
    15b4:	86 83       	std	Z+6, r24	; 0x06
    15b6:	97 83       	std	Z+7, r25	; 0x07
    15b8:	4e 7f       	andi	r20, 0xFE	; 254
	matrix.m[2] = SetBit(matrix.m[2], 0, 0);
    15ba:	42 83       	std	Z+2, r20	; 0x02
    15bc:	7e 7f       	andi	r23, 0xFE	; 254
	matrix.m[5] = SetBit(matrix.m[5], 0, 0);
    15be:	75 83       	std	Z+5, r23	; 0x05
    15c0:	8a ec       	ldi	r24, 0xCA	; 202
    15c2:	e8 e3       	ldi	r30, 0x38	; 56
    15c4:	f1 e0       	ldi	r31, 0x01	; 1
    15c6:	de 01       	movw	r26, r28
    15c8:	a1 5a       	subi	r26, 0xA1	; 161
    15ca:	bd 4f       	sbci	r27, 0xFD	; 253
    15cc:	01 90       	ld	r0, Z+
    15ce:	0d 92       	st	X+, r0
    15d0:	8a 95       	dec	r24
    15d2:	e1 f7       	brne	.-8      	; 0x15cc <main+0xe20>
    15d4:	f6 01       	movw	r30, r12
    15d6:	80 81       	ld	r24, Z
    15d8:	98 e0       	ldi	r25, 0x08	; 8
    15da:	f7 01       	movw	r30, r14
    15dc:	de 01       	movw	r26, r28
    15de:	a3 52       	subi	r26, 0x23	; 35
    15e0:	b5 4e       	sbci	r27, 0xE5	; 229
    15e2:	01 90       	ld	r0, Z+
    15e4:	0d 92       	st	X+, r0
    15e6:	9a 95       	dec	r25
    15e8:	e1 f7       	brne	.-8      	; 0x15e2 <main+0xe36>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    15ea:	af e5       	ldi	r26, 0x5F	; 95
    15ec:	b2 e0       	ldi	r27, 0x02	; 2
    15ee:	ac 0f       	add	r26, r28
    15f0:	bd 1f       	adc	r27, r29
    15f2:	f8 e0       	ldi	r31, 0x08	; 8
    15f4:	8f 9f       	mul	r24, r31
    15f6:	a0 0d       	add	r26, r0
    15f8:	b1 1d       	adc	r27, r1
    15fa:	11 24       	eor	r1, r1
    15fc:	98 e0       	ldi	r25, 0x08	; 8
    15fe:	fe 01       	movw	r30, r28
    1600:	e3 52       	subi	r30, 0x23	; 35
    1602:	f5 4e       	sbci	r31, 0xE5	; 229
    1604:	01 90       	ld	r0, Z+
    1606:	0d 92       	st	X+, r0
    1608:	9a 95       	dec	r25
    160a:	e1 f7       	brne	.-8      	; 0x1604 <main+0xe58>
	explosions.timeBetween[explosions.index] = a;
    160c:	2f e5       	ldi	r18, 0x5F	; 95
    160e:	32 e0       	ldi	r19, 0x02	; 2
    1610:	2c 0f       	add	r18, r28
    1612:	3d 1f       	adc	r19, r29
    1614:	28 0f       	add	r18, r24
    1616:	31 1d       	adc	r19, r1
    1618:	f9 01       	movw	r30, r18
    161a:	e0 56       	subi	r30, 0x60	; 96
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    1620:	74 96       	adiw	r30, 0x14	; 20
    1622:	10 83       	st	Z, r17
	explosions.index++;
    1624:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1626:	c9 5d       	subi	r28, 0xD9	; 217
    1628:	dc 4f       	sbci	r29, 0xFC	; 252
    162a:	88 83       	st	Y, r24
    162c:	c7 52       	subi	r28, 0x27	; 39
    162e:	d3 40       	sbci	r29, 0x03	; 3
    1630:	9a ec       	ldi	r25, 0xCA	; 202
    1632:	fe 01       	movw	r30, r28
    1634:	e1 5a       	subi	r30, 0xA1	; 161
    1636:	fd 4f       	sbci	r31, 0xFD	; 253
    1638:	de 01       	movw	r26, r28
    163a:	ab 56       	subi	r26, 0x6B	; 107
    163c:	be 4f       	sbci	r27, 0xFE	; 254
    163e:	01 90       	ld	r0, Z+
    1640:	0d 92       	st	X+, r0
    1642:	9a 95       	dec	r25
    1644:	e1 f7       	brne	.-8      	; 0x163e <main+0xe92>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    1646:	c3 5a       	subi	r28, 0xA3	; 163
    1648:	dd 4f       	sbci	r29, 0xFD	; 253
    164a:	88 83       	st	Y, r24
    164c:	cd 55       	subi	r28, 0x5D	; 93
    164e:	d2 40       	sbci	r29, 0x02	; 2
    1650:	8a ec       	ldi	r24, 0xCA	; 202
    1652:	fe 01       	movw	r30, r28
    1654:	eb 56       	subi	r30, 0x6B	; 107
    1656:	fe 4f       	sbci	r31, 0xFE	; 254
    1658:	a8 e3       	ldi	r26, 0x38	; 56
    165a:	b1 e0       	ldi	r27, 0x01	; 1
    165c:	01 90       	ld	r0, Z+
    165e:	0d 92       	st	X+, r0
    1660:	8a 95       	dec	r24
    1662:	e1 f7       	brne	.-8      	; 0x165c <main+0xeb0>
	
	matrix = clearSingleMatrix(matrix);
    1664:	20 91 2f 01 	lds	r18, 0x012F
    1668:	30 91 30 01 	lds	r19, 0x0130
    166c:	40 91 31 01 	lds	r20, 0x0131
    1670:	50 91 32 01 	lds	r21, 0x0132
    1674:	60 91 33 01 	lds	r22, 0x0133
    1678:	70 91 34 01 	lds	r23, 0x0134
    167c:	80 91 35 01 	lds	r24, 0x0135
    1680:	90 91 36 01 	lds	r25, 0x0136
    1684:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    1688:	f7 01       	movw	r30, r14
    168a:	20 83       	st	Z, r18
    168c:	31 83       	std	Z+1, r19	; 0x01
    168e:	42 83       	std	Z+2, r20	; 0x02
    1690:	75 83       	std	Z+5, r23	; 0x05
    1692:	86 83       	std	Z+6, r24	; 0x06
    1694:	97 83       	std	Z+7, r25	; 0x07
	matrix.m[3] = 0x00;
    1696:	13 82       	std	Z+3, r1	; 0x03
	matrix.m[4] = 0x00;
    1698:	14 82       	std	Z+4, r1	; 0x04
    169a:	8a ec       	ldi	r24, 0xCA	; 202
    169c:	e8 e3       	ldi	r30, 0x38	; 56
    169e:	f1 e0       	ldi	r31, 0x01	; 1
    16a0:	de 01       	movw	r26, r28
    16a2:	a5 53       	subi	r26, 0x35	; 53
    16a4:	bf 4f       	sbci	r27, 0xFF	; 255
    16a6:	01 90       	ld	r0, Z+
    16a8:	0d 92       	st	X+, r0
    16aa:	8a 95       	dec	r24
    16ac:	e1 f7       	brne	.-8      	; 0x16a6 <main+0xefa>
    16ae:	f6 01       	movw	r30, r12
    16b0:	80 81       	ld	r24, Z
    16b2:	98 e0       	ldi	r25, 0x08	; 8
    16b4:	f7 01       	movw	r30, r14
    16b6:	de 01       	movw	r26, r28
    16b8:	ab 52       	subi	r26, 0x2B	; 43
    16ba:	b5 4e       	sbci	r27, 0xE5	; 229
    16bc:	01 90       	ld	r0, Z+
    16be:	0d 92       	st	X+, r0
    16c0:	9a 95       	dec	r25
    16c2:	e1 f7       	brne	.-8      	; 0x16bc <main+0xf10>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned char a, unsigned char b) {
	explosions.matricies[explosions.index] = matrix;
    16c4:	ab ec       	ldi	r26, 0xCB	; 203
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	ac 0f       	add	r26, r28
    16ca:	bd 1f       	adc	r27, r29
    16cc:	f8 e0       	ldi	r31, 0x08	; 8
    16ce:	8f 9f       	mul	r24, r31
    16d0:	a0 0d       	add	r26, r0
    16d2:	b1 1d       	adc	r27, r1
    16d4:	11 24       	eor	r1, r1
    16d6:	98 e0       	ldi	r25, 0x08	; 8
    16d8:	fe 01       	movw	r30, r28
    16da:	eb 52       	subi	r30, 0x2B	; 43
    16dc:	f5 4e       	sbci	r31, 0xE5	; 229
    16de:	01 90       	ld	r0, Z+
    16e0:	0d 92       	st	X+, r0
    16e2:	9a 95       	dec	r25
    16e4:	e1 f7       	brne	.-8      	; 0x16de <main+0xf32>
	explosions.timeBetween[explosions.index] = a;
    16e6:	2b ec       	ldi	r18, 0xCB	; 203
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	2c 0f       	add	r18, r28
    16ec:	3d 1f       	adc	r19, r29
    16ee:	28 0f       	add	r18, r24
    16f0:	31 1d       	adc	r19, r1
    16f2:	f9 01       	movw	r30, r18
    16f4:	e0 56       	subi	r30, 0x60	; 96
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	10 82       	st	Z, r1
	explosions.timeDuration[explosions.index] = b;
    16fa:	74 96       	adiw	r30, 0x14	; 20
    16fc:	10 83       	st	Z, r17
	explosions.index++;
    16fe:	8f 5f       	subi	r24, 0xFF	; 255
	
	return explosions;
    1700:	cd 56       	subi	r28, 0x6D	; 109
    1702:	de 4f       	sbci	r29, 0xFE	; 254
    1704:	88 83       	st	Y, r24
    1706:	c3 59       	subi	r28, 0x93	; 147
    1708:	d1 40       	sbci	r29, 0x01	; 1
    170a:	9a ec       	ldi	r25, 0xCA	; 202
    170c:	fe 01       	movw	r30, r28
    170e:	e5 53       	subi	r30, 0x35	; 53
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	de 01       	movw	r26, r28
    1714:	11 96       	adiw	r26, 0x01	; 1
    1716:	01 90       	ld	r0, Z+
    1718:	0d 92       	st	X+, r0
    171a:	9a 95       	dec	r25
    171c:	e1 f7       	brne	.-8      	; 0x1716 <main+0xf6a>
	explosions = pushExplosion(explosions, matrix, 0, 2);
    171e:	c7 53       	subi	r28, 0x37	; 55
    1720:	df 4f       	sbci	r29, 0xFF	; 255
    1722:	88 83       	st	Y, r24
    1724:	c9 5c       	subi	r28, 0xC9	; 201
    1726:	d0 40       	sbci	r29, 0x00	; 0
    1728:	8a ec       	ldi	r24, 0xCA	; 202
    172a:	fe 01       	movw	r30, r28
    172c:	31 96       	adiw	r30, 0x01	; 1
    172e:	a8 e3       	ldi	r26, 0x38	; 56
    1730:	b1 e0       	ldi	r27, 0x01	; 1
    1732:	01 90       	ld	r0, Z+
    1734:	0d 92       	st	X+, r0
    1736:	8a 95       	dec	r24
    1738:	e1 f7       	brne	.-8      	; 0x1732 <main+0xf86>
	
	userMatrix = initSingleUserMatrix(userMatrix);
    173a:	e0 90 02 02 	lds	r14, 0x0202
    173e:	f0 90 03 02 	lds	r15, 0x0203
    1742:	00 91 04 02 	lds	r16, 0x0204
    1746:	10 91 05 02 	lds	r17, 0x0205
    174a:	20 91 06 02 	lds	r18, 0x0206
    174e:	30 91 07 02 	lds	r19, 0x0207
    1752:	40 91 08 02 	lds	r20, 0x0208
    1756:	50 91 09 02 	lds	r21, 0x0209
    175a:	60 91 0a 02 	lds	r22, 0x020A
    175e:	70 91 0b 02 	lds	r23, 0x020B
    1762:	ce 01       	movw	r24, r28
    1764:	83 5a       	subi	r24, 0xA3	; 163
    1766:	94 4e       	sbci	r25, 0xE4	; 228
    1768:	0e 94 80 01 	call	0x300	; 0x300 <initSingleUserMatrix>
    176c:	8a e0       	ldi	r24, 0x0A	; 10
    176e:	fe 01       	movw	r30, r28
    1770:	e3 5a       	subi	r30, 0xA3	; 163
    1772:	f4 4e       	sbci	r31, 0xE4	; 228
    1774:	a2 e0       	ldi	r26, 0x02	; 2
    1776:	b2 e0       	ldi	r27, 0x02	; 2
    1778:	01 90       	ld	r0, Z+
    177a:	0d 92       	st	X+, r0
    177c:	8a 95       	dec	r24
    177e:	e1 f7       	brne	.-8      	; 0x1778 <main+0xfcc>
	wallMatrix = clearSingleMatrix(wallMatrix);
    1780:	20 91 0c 02 	lds	r18, 0x020C
    1784:	30 91 0d 02 	lds	r19, 0x020D
    1788:	40 91 0e 02 	lds	r20, 0x020E
    178c:	50 91 0f 02 	lds	r21, 0x020F
    1790:	60 91 10 02 	lds	r22, 0x0210
    1794:	70 91 11 02 	lds	r23, 0x0211
    1798:	80 91 12 02 	lds	r24, 0x0212
    179c:	90 91 13 02 	lds	r25, 0x0213
    17a0:	0e 94 4a 01 	call	0x294	; 0x294 <clearSingleMatrix>
    17a4:	ec e0       	ldi	r30, 0x0C	; 12
    17a6:	f2 e0       	ldi	r31, 0x02	; 2
    17a8:	20 83       	st	Z, r18
    17aa:	31 83       	std	Z+1, r19	; 0x01
    17ac:	42 83       	std	Z+2, r20	; 0x02
    17ae:	53 83       	std	Z+3, r21	; 0x03
    17b0:	75 83       	std	Z+5, r23	; 0x05
    17b2:	86 83       	std	Z+6, r24	; 0x06
    17b4:	97 83       	std	Z+7, r25	; 0x07
	wallMatrix.m[4] = 0xCC;
    17b6:	8c ec       	ldi	r24, 0xCC	; 204
    17b8:	84 83       	std	Z+4, r24	; 0x04
	
	while (1) {
		explosions = ExpTick(explosions);
    17ba:	1a ec       	ldi	r17, 0xCA	; 202
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
    17bc:	0f 2e       	mov	r0, r31
    17be:	f0 ec       	ldi	r31, 0xC0	; 192
    17c0:	ef 2e       	mov	r14, r31
    17c2:	f1 2c       	mov	r15, r1
    17c4:	f0 2d       	mov	r31, r0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
    17c6:	cc 24       	eor	r12, r12
    17c8:	c3 94       	inc	r12
    17ca:	d1 2c       	mov	r13, r1
    17cc:	8d b7       	in	r24, 0x3d	; 61
    17ce:	9e b7       	in	r25, 0x3e	; 62
    17d0:	8a 5c       	subi	r24, 0xCA	; 202
    17d2:	91 09       	sbc	r25, r1
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	9e bf       	out	0x3e, r25	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	8d bf       	out	0x3d, r24	; 61
    17de:	ad b7       	in	r26, 0x3d	; 61
    17e0:	be b7       	in	r27, 0x3e	; 62
    17e2:	11 96       	adiw	r26, 0x01	; 1
    17e4:	e8 e3       	ldi	r30, 0x38	; 56
    17e6:	f1 e0       	ldi	r31, 0x01	; 1
    17e8:	81 2f       	mov	r24, r17
    17ea:	01 90       	ld	r0, Z+
    17ec:	0d 92       	st	X+, r0
    17ee:	8a 95       	dec	r24
    17f0:	e1 f7       	brne	.-8      	; 0x17ea <main+0x103e>
    17f2:	ce 01       	movw	r24, r28
    17f4:	83 5a       	subi	r24, 0xA3	; 163
    17f6:	94 4e       	sbci	r25, 0xE4	; 228
    17f8:	0e 94 0b 03 	call	0x616	; 0x616 <ExpTick>
    17fc:	fe 01       	movw	r30, r28
    17fe:	e3 5a       	subi	r30, 0xA3	; 163
    1800:	f4 4e       	sbci	r31, 0xE4	; 228
    1802:	a8 e3       	ldi	r26, 0x38	; 56
    1804:	b1 e0       	ldi	r27, 0x01	; 1
    1806:	81 2f       	mov	r24, r17
    1808:	01 90       	ld	r0, Z+
    180a:	0d 92       	st	X+, r0
    180c:	8a 95       	dec	r24
    180e:	e1 f7       	brne	.-8      	; 0x1808 <main+0x105c>
		DeathTick();
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	0e 94 b1 02 	call	0x562	; 0x562 <DeathTick>
		d3_setMatrixColor(userMatrix.m, GREEN);
    181e:	62 e0       	ldi	r22, 0x02	; 2
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	92 e0       	ldi	r25, 0x02	; 2
    1824:	0e 94 33 02 	call	0x466	; 0x466 <d3_setMatrixColor>
		d3_setMatrixColor(wallMatrix.m, BLUE);
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	8c e0       	ldi	r24, 0x0C	; 12
    182c:	92 e0       	ldi	r25, 0x02	; 2
    182e:	0e 94 33 02 	call	0x466	; 0x466 <d3_setMatrixColor>
    1832:	f7 01       	movw	r30, r14
    1834:	80 81       	ld	r24, Z
		
		if (USART_HasReceived(0)) {
    1836:	88 23       	and	r24, r24
    1838:	4c f6       	brge	.-110    	; 0x17cc <main+0x1020>
			movement = USART_Receive(0);
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	0e 94 9f 02 	call	0x53e	; 0x53e <USART_Receive>
    1840:	80 93 37 01 	sts	0x0137, r24
			
			if (movement == 0x00) { // up
    1844:	81 11       	cpse	r24, r1
    1846:	27 c0       	rjmp	.+78     	; 0x1896 <main+0x10ea>
				if (userMatrix.row < 7 && GetBit(wallMatrix.m[userMatrix.row + 1], userMatrix.column)) {
    1848:	e0 91 0a 02 	lds	r30, 0x020A
    184c:	e7 30       	cpi	r30, 0x07	; 7
    184e:	08 f0       	brcs	.+2      	; 0x1852 <main+0x10a6>
    1850:	bd cf       	rjmp	.-134    	; 0x17cc <main+0x1020>
    1852:	c6 01       	movw	r24, r12
    1854:	00 90 0b 02 	lds	r0, 0x020B
    1858:	02 c0       	rjmp	.+4      	; 0x185e <main+0x10b2>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <main+0x10ae>
    1862:	ae 2f       	mov	r26, r30
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	a4 5f       	subi	r26, 0xF4	; 244
    1868:	bd 4f       	sbci	r27, 0xFD	; 253
	return ((bits & mask) != 0);
    186a:	11 96       	adiw	r26, 0x01	; 1
    186c:	2c 91       	ld	r18, X
    186e:	28 23       	and	r18, r24
    1870:	09 f4       	brne	.+2      	; 0x1874 <main+0x10c8>
    1872:	ac cf       	rjmp	.-168    	; 0x17cc <main+0x1020>
					userMatrix.row++;
    1874:	ef 5f       	subi	r30, 0xFF	; 255
    1876:	e0 93 0a 02 	sts	0x020A, r30
					userMatrix.m[userMatrix.row - 1] = SetBit(userMatrix.m[userMatrix.row - 1], userMatrix.column, 1);
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	df 01       	movw	r26, r30
    187e:	af 5f       	subi	r26, 0xFF	; 255
    1880:	bd 4f       	sbci	r27, 0xFD	; 253
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
    1882:	9c 91       	ld	r25, X
    1884:	98 2b       	or	r25, r24
    1886:	9c 93       	st	X, r25
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
    1888:	ee 5f       	subi	r30, 0xFE	; 254
    188a:	fd 4f       	sbci	r31, 0xFD	; 253
    188c:	80 95       	com	r24
    188e:	90 81       	ld	r25, Z
    1890:	89 23       	and	r24, r25
    1892:	80 83       	st	Z, r24
    1894:	9b cf       	rjmp	.-202    	; 0x17cc <main+0x1020>
				}
			} else if (movement == 0x01) { // right
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	49 f5       	brne	.+82     	; 0x18ec <main+0x1140>
				if (userMatrix.column  < 7 && GetBit(wallMatrix.m[userMatrix.row], userMatrix.column + 1)) {
    189a:	20 91 0b 02 	lds	r18, 0x020B
    189e:	27 30       	cpi	r18, 0x07	; 7
    18a0:	08 f0       	brcs	.+2      	; 0x18a4 <main+0x10f8>
    18a2:	94 cf       	rjmp	.-216    	; 0x17cc <main+0x1020>
    18a4:	61 e0       	ldi	r22, 0x01	; 1
    18a6:	62 0f       	add	r22, r18
    18a8:	80 91 0a 02 	lds	r24, 0x020A
    18ac:	90 e0       	ldi	r25, 0x00	; 0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
    18ae:	a6 01       	movw	r20, r12
    18b0:	06 2e       	mov	r0, r22
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <main+0x110c>
    18b4:	44 0f       	add	r20, r20
    18b6:	55 1f       	adc	r21, r21
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <main+0x1108>
    18bc:	fc 01       	movw	r30, r24
    18be:	e4 5f       	subi	r30, 0xF4	; 244
    18c0:	fd 4f       	sbci	r31, 0xFD	; 253
	return ((bits & mask) != 0);
    18c2:	30 81       	ld	r19, Z
    18c4:	34 23       	and	r19, r20
    18c6:	09 f4       	brne	.+2      	; 0x18ca <main+0x111e>
    18c8:	81 cf       	rjmp	.-254    	; 0x17cc <main+0x1020>
					userMatrix.column++;
    18ca:	60 93 0b 02 	sts	0x020B, r22
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column - 1, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
    18ce:	fc 01       	movw	r30, r24
    18d0:	ee 5f       	subi	r30, 0xFE	; 254
    18d2:	fd 4f       	sbci	r31, 0xFD	; 253
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
    18d4:	40 95       	com	r20
    18d6:	c6 01       	movw	r24, r12
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <main+0x1132>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	2a 95       	dec	r18
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <main+0x112e>
    18e2:	90 81       	ld	r25, Z
    18e4:	89 2b       	or	r24, r25
    18e6:	48 23       	and	r20, r24
    18e8:	40 83       	st	Z, r20
    18ea:	70 cf       	rjmp	.-288    	; 0x17cc <main+0x1020>
				}
			} else if (movement == 0x02) { // down
    18ec:	82 30       	cpi	r24, 0x02	; 2
    18ee:	31 f5       	brne	.+76     	; 0x193c <main+0x1190>
				if (userMatrix.row > 0  && GetBit(wallMatrix.m[userMatrix.row - 1], userMatrix.column)) {
    18f0:	e0 91 0a 02 	lds	r30, 0x020A
    18f4:	ee 23       	and	r30, r30
    18f6:	09 f4       	brne	.+2      	; 0x18fa <main+0x114e>
    18f8:	69 cf       	rjmp	.-302    	; 0x17cc <main+0x1020>
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
    18fa:	c6 01       	movw	r24, r12
    18fc:	00 90 0b 02 	lds	r0, 0x020B
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <main+0x115a>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <main+0x1156>
    190a:	ae 2f       	mov	r26, r30
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	a5 5f       	subi	r26, 0xF5	; 245
    1910:	bd 4f       	sbci	r27, 0xFD	; 253
	return ((bits & mask) != 0);
    1912:	2c 91       	ld	r18, X
    1914:	28 23       	and	r18, r24
    1916:	09 f4       	brne	.+2      	; 0x191a <main+0x116e>
    1918:	59 cf       	rjmp	.-334    	; 0x17cc <main+0x1020>
					userMatrix.row--;
    191a:	e1 50       	subi	r30, 0x01	; 1
    191c:	e0 93 0a 02 	sts	0x020A, r30
					userMatrix.m[userMatrix.row + 1] = SetBit(userMatrix.m[userMatrix.row + 1], userMatrix.column, 1);
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	df 01       	movw	r26, r30
    1924:	ad 5f       	subi	r26, 0xFD	; 253
    1926:	bd 4f       	sbci	r27, 0xFD	; 253
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
    1928:	9c 91       	ld	r25, X
    192a:	98 2b       	or	r25, r24
    192c:	9c 93       	st	X, r25
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
    192e:	ee 5f       	subi	r30, 0xFE	; 254
    1930:	fd 4f       	sbci	r31, 0xFD	; 253
    1932:	80 95       	com	r24
    1934:	90 81       	ld	r25, Z
    1936:	89 23       	and	r24, r25
    1938:	80 83       	st	Z, r24
    193a:	48 cf       	rjmp	.-368    	; 0x17cc <main+0x1020>
				}
			} else if (movement == 0x03) { // left
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	09 f0       	breq	.+2      	; 0x1942 <main+0x1196>
    1940:	45 cf       	rjmp	.-374    	; 0x17cc <main+0x1020>
				if (userMatrix.column > 0 &&  GetBit(wallMatrix.m[userMatrix.row], userMatrix.column - 1)) {
    1942:	20 91 0b 02 	lds	r18, 0x020B
    1946:	22 23       	and	r18, r18
    1948:	09 f4       	brne	.+2      	; 0x194c <main+0x11a0>
    194a:	40 cf       	rjmp	.-384    	; 0x17cc <main+0x1020>
    194c:	6f ef       	ldi	r22, 0xFF	; 255
    194e:	62 0f       	add	r22, r18
    1950:	80 91 0a 02 	lds	r24, 0x020A
    1954:	90 e0       	ldi	r25, 0x00	; 0
#ifndef BIT_H_
#define BIT_H_

unsigned char GetBit(unsigned char bits, unsigned char numShifts) {
	unsigned char mask = 0x01 << numShifts;
    1956:	a6 01       	movw	r20, r12
    1958:	06 2e       	mov	r0, r22
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <main+0x11b4>
    195c:	44 0f       	add	r20, r20
    195e:	55 1f       	adc	r21, r21
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <main+0x11b0>
    1964:	fc 01       	movw	r30, r24
    1966:	e4 5f       	subi	r30, 0xF4	; 244
    1968:	fd 4f       	sbci	r31, 0xFD	; 253
	return ((bits & mask) != 0);
    196a:	30 81       	ld	r19, Z
    196c:	34 23       	and	r19, r20
    196e:	09 f4       	brne	.+2      	; 0x1972 <main+0x11c6>
    1970:	2d cf       	rjmp	.-422    	; 0x17cc <main+0x1020>
					userMatrix.column--;
    1972:	60 93 0b 02 	sts	0x020B, r22
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column + 1, 1);
					userMatrix.m[userMatrix.row] = SetBit(userMatrix.m[userMatrix.row], userMatrix.column, 0);
    1976:	fc 01       	movw	r30, r24
    1978:	ee 5f       	subi	r30, 0xFE	; 254
    197a:	fd 4f       	sbci	r31, 0xFD	; 253
}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)));
    197c:	40 95       	com	r20
    197e:	c6 01       	movw	r24, r12
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <main+0x11da>
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	2a 95       	dec	r18
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <main+0x11d6>
    198a:	90 81       	ld	r25, Z
    198c:	89 2b       	or	r24, r25
    198e:	48 23       	and	r20, r24
    1990:	40 83       	st	Z, r20
    1992:	1c cf       	rjmp	.-456    	; 0x17cc <main+0x1020>

00001994 <_exit>:
    1994:	f8 94       	cli

00001996 <__stop_program>:
    1996:	ff cf       	rjmp	.-2      	; 0x1996 <__stop_program>
