
scbound.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000dd4  00000e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000525  00800106  00800106  00000e6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ea0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d97  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003d1  00000000  00000000  00001d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000acc  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00002c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000477  00000000  00000000  00002f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b3b  00000000  00000000  000033cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003f06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	1a c1       	rjmp	.+564    	; 0x26a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ed       	ldi	r30, 0xD4	; 212
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	26 e0       	ldi	r18, 0x06	; 6
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 32       	cpi	r26, 0x2B	; 43
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	66 d4       	rcall	.+2252   	; 0x990 <main>
  c4:	85 c6       	rjmp	.+3338   	; 0xdd0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ETIMERTick>:
	}
	
	// Display explosion
	d3_setMatrixColor(explosions.matricies[explosions.displayIndex].m, RED);
	explosions.displayIndex++;
}
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	21 f0       	breq	.+8      	; 0xd4 <ETIMERTick+0xc>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	49 f0       	breq	.+18     	; 0xe4 <ETIMERTick+0x1c>
  d2:	05 c0       	rjmp	.+10     	; 0xde <ETIMERTick+0x16>
  d4:	10 92 07 01 	sts	0x0107, r1
  d8:	10 92 06 01 	sts	0x0106, r1
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <ETIMERTick+0x1c>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 05       	cpc	r25, r1
  e2:	c9 f5       	brne	.+114    	; 0x156 <ETIMERTick+0x8e>
  e4:	80 91 06 01 	lds	r24, 0x0106
  e8:	90 91 07 01 	lds	r25, 0x0107
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 07 01 	sts	0x0107, r25
  f2:	80 93 06 01 	sts	0x0106, r24
  f6:	40 91 0b 01 	lds	r20, 0x010B
  fa:	50 91 0c 01 	lds	r21, 0x010C
  fe:	60 91 0d 01 	lds	r22, 0x010D
 102:	70 91 0e 01 	lds	r23, 0x010E
 106:	4f 5f       	subi	r20, 0xFF	; 255
 108:	5f 4f       	sbci	r21, 0xFF	; 255
 10a:	6f 4f       	sbci	r22, 0xFF	; 255
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	40 93 0b 01 	sts	0x010B, r20
 112:	50 93 0c 01 	sts	0x010C, r21
 116:	60 93 0d 01 	sts	0x010D, r22
 11a:	70 93 0e 01 	sts	0x010E, r23
 11e:	20 91 00 01 	lds	r18, 0x0100
 122:	30 91 01 01 	lds	r19, 0x0101
 126:	28 17       	cp	r18, r24
 128:	39 07       	cpc	r19, r25
 12a:	98 f4       	brcc	.+38     	; 0x152 <ETIMERTick+0x8a>
 12c:	80 91 0a 01 	lds	r24, 0x010A
 130:	81 11       	cpse	r24, r1
 132:	04 c0       	rjmp	.+8      	; 0x13c <ETIMERTick+0x74>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 0a 01 	sts	0x010A, r24
 13a:	04 c0       	rjmp	.+8      	; 0x144 <ETIMERTick+0x7c>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	11 f4       	brne	.+4      	; 0x144 <ETIMERTick+0x7c>
 140:	10 92 0a 01 	sts	0x010A, r1
 144:	10 92 07 01 	sts	0x0107, r1
 148:	10 92 06 01 	sts	0x0106, r1
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret

00000158 <initTasks>:
 158:	e3 e1       	ldi	r30, 0x13	; 19
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	11 82       	std	Z+1, r1	; 0x01
 15e:	10 82       	st	Z, r1
 160:	84 e1       	ldi	r24, 0x14	; 20
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	a0 e0       	ldi	r26, 0x00	; 0
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	82 83       	std	Z+2, r24	; 0x02
 16a:	93 83       	std	Z+3, r25	; 0x03
 16c:	a4 83       	std	Z+4, r26	; 0x04
 16e:	b5 83       	std	Z+5, r27	; 0x05
 170:	86 83       	std	Z+6, r24	; 0x06
 172:	97 83       	std	Z+7, r25	; 0x07
 174:	a0 87       	std	Z+8, r26	; 0x08
 176:	b1 87       	std	Z+9, r27	; 0x09
 178:	80 ed       	ldi	r24, 0xD0	; 208
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	93 87       	std	Z+11, r25	; 0x0b
 17e:	82 87       	std	Z+10, r24	; 0x0a
 180:	15 86       	std	Z+13, r1	; 0x0d
 182:	14 86       	std	Z+12, r1	; 0x0c
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	a0 e0       	ldi	r26, 0x00	; 0
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	86 87       	std	Z+14, r24	; 0x0e
 18e:	97 87       	std	Z+15, r25	; 0x0f
 190:	a0 8b       	std	Z+16, r26	; 0x10
 192:	b1 8b       	std	Z+17, r27	; 0x11
 194:	82 8b       	std	Z+18, r24	; 0x12
 196:	93 8b       	std	Z+19, r25	; 0x13
 198:	a4 8b       	std	Z+20, r26	; 0x14
 19a:	b5 8b       	std	Z+21, r27	; 0x15
 19c:	84 e6       	ldi	r24, 0x64	; 100
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	97 8b       	std	Z+23, r25	; 0x17
 1a2:	86 8b       	std	Z+22, r24	; 0x16
 1a4:	08 95       	ret

000001a6 <TimerOn>:
 1a6:	8b e0       	ldi	r24, 0x0B	; 11
 1a8:	80 93 81 00 	sts	0x0081, r24
 1ac:	8d e7       	ldi	r24, 0x7D	; 125
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 89 00 	sts	0x0089, r25
 1b4:	80 93 88 00 	sts	0x0088, r24
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	80 93 6f 00 	sts	0x006F, r24
 1be:	10 92 85 00 	sts	0x0085, r1
 1c2:	10 92 84 00 	sts	0x0084, r1
 1c6:	80 91 02 01 	lds	r24, 0x0102
 1ca:	90 91 03 01 	lds	r25, 0x0103
 1ce:	a0 91 04 01 	lds	r26, 0x0104
 1d2:	b0 91 05 01 	lds	r27, 0x0105
 1d6:	80 93 0f 01 	sts	0x010F, r24
 1da:	90 93 10 01 	sts	0x0110, r25
 1de:	a0 93 11 01 	sts	0x0111, r26
 1e2:	b0 93 12 01 	sts	0x0112, r27
 1e6:	8f b7       	in	r24, 0x3f	; 63
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	8f bf       	out	0x3f, r24	; 63
 1ec:	08 95       	ret

000001ee <TimerISR>:
 1ee:	ef 92       	push	r14
 1f0:	ff 92       	push	r15
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	c3 e1       	ldi	r28, 0x13	; 19
 1fc:	d1 e0       	ldi	r29, 0x01	; 1
 1fe:	0f 2e       	mov	r0, r31
 200:	fb e2       	ldi	r31, 0x2B	; 43
 202:	ef 2e       	mov	r14, r31
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	ff 2e       	mov	r15, r31
 208:	f0 2d       	mov	r31, r0
 20a:	8e 01       	movw	r16, r28
 20c:	4e 81       	ldd	r20, Y+6	; 0x06
 20e:	5f 81       	ldd	r21, Y+7	; 0x07
 210:	68 85       	ldd	r22, Y+8	; 0x08
 212:	79 85       	ldd	r23, Y+9	; 0x09
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	9b 81       	ldd	r25, Y+3	; 0x03
 218:	ac 81       	ldd	r26, Y+4	; 0x04
 21a:	bd 81       	ldd	r27, Y+5	; 0x05
 21c:	48 17       	cp	r20, r24
 21e:	59 07       	cpc	r21, r25
 220:	6a 07       	cpc	r22, r26
 222:	7b 07       	cpc	r23, r27
 224:	58 f0       	brcs	.+22     	; 0x23c <TimerISR+0x4e>
 226:	ea 85       	ldd	r30, Y+10	; 0x0a
 228:	fb 85       	ldd	r31, Y+11	; 0x0b
 22a:	88 81       	ld	r24, Y
 22c:	99 81       	ldd	r25, Y+1	; 0x01
 22e:	09 95       	icall
 230:	99 83       	std	Y+1, r25	; 0x01
 232:	88 83       	st	Y, r24
 234:	1e 82       	std	Y+6, r1	; 0x06
 236:	1f 82       	std	Y+7, r1	; 0x07
 238:	18 86       	std	Y+8, r1	; 0x08
 23a:	19 86       	std	Y+9, r1	; 0x09
 23c:	f8 01       	movw	r30, r16
 23e:	86 81       	ldd	r24, Z+6	; 0x06
 240:	97 81       	ldd	r25, Z+7	; 0x07
 242:	a0 85       	ldd	r26, Z+8	; 0x08
 244:	b1 85       	ldd	r27, Z+9	; 0x09
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	a1 1d       	adc	r26, r1
 24a:	b1 1d       	adc	r27, r1
 24c:	86 83       	std	Z+6, r24	; 0x06
 24e:	97 83       	std	Z+7, r25	; 0x07
 250:	a0 87       	std	Z+8, r26	; 0x08
 252:	b1 87       	std	Z+9, r27	; 0x09
 254:	2c 96       	adiw	r28, 0x0c	; 12
 256:	ce 15       	cp	r28, r14
 258:	df 05       	cpc	r29, r15
 25a:	b9 f6       	brne	.-82     	; 0x20a <TimerISR+0x1c>
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	08 95       	ret

0000026a <__vector_13>:
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	0b b6       	in	r0, 0x3b	; 59
 276:	0f 92       	push	r0
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
 290:	80 91 0f 01 	lds	r24, 0x010F
 294:	90 91 10 01 	lds	r25, 0x0110
 298:	a0 91 11 01 	lds	r26, 0x0111
 29c:	b0 91 12 01 	lds	r27, 0x0112
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	a1 09       	sbc	r26, r1
 2a4:	b1 09       	sbc	r27, r1
 2a6:	80 93 0f 01 	sts	0x010F, r24
 2aa:	90 93 10 01 	sts	0x0110, r25
 2ae:	a0 93 11 01 	sts	0x0111, r26
 2b2:	b0 93 12 01 	sts	0x0112, r27
 2b6:	89 2b       	or	r24, r25
 2b8:	8a 2b       	or	r24, r26
 2ba:	8b 2b       	or	r24, r27
 2bc:	89 f4       	brne	.+34     	; 0x2e0 <__vector_13+0x76>
 2be:	97 df       	rcall	.-210    	; 0x1ee <TimerISR>
 2c0:	80 91 02 01 	lds	r24, 0x0102
 2c4:	90 91 03 01 	lds	r25, 0x0103
 2c8:	a0 91 04 01 	lds	r26, 0x0104
 2cc:	b0 91 05 01 	lds	r27, 0x0105
 2d0:	80 93 0f 01 	sts	0x010F, r24
 2d4:	90 93 10 01 	sts	0x0110, r25
 2d8:	a0 93 11 01 	sts	0x0111, r26
 2dc:	b0 93 12 01 	sts	0x0112, r27
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	7f 91       	pop	r23
 2ee:	6f 91       	pop	r22
 2f0:	5f 91       	pop	r21
 2f2:	4f 91       	pop	r20
 2f4:	3f 91       	pop	r19
 2f6:	2f 91       	pop	r18
 2f8:	0f 90       	pop	r0
 2fa:	0b be       	out	0x3b, r0	; 59
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <clearSingleMatrix>:
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	8c 01       	movw	r16, r24
 314:	ae 01       	movw	r20, r28
 316:	49 5f       	subi	r20, 0xF9	; 249
 318:	5f 4f       	sbci	r21, 0xFF	; 255
 31a:	be 01       	movw	r22, r28
 31c:	69 5b       	subi	r22, 0xB9	; 185
 31e:	7f 4f       	sbci	r23, 0xFF	; 255
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	09 c0       	rjmp	.+18     	; 0x338 <clearSingleMatrix+0x32>
 326:	21 93       	st	Z+, r18
 328:	9f 5f       	subi	r25, 0xFF	; 255
 32a:	98 30       	cpi	r25, 0x08	; 8
 32c:	e1 f7       	brne	.-8      	; 0x326 <clearSingleMatrix+0x20>
 32e:	48 5f       	subi	r20, 0xF8	; 248
 330:	5f 4f       	sbci	r21, 0xFF	; 255
 332:	46 17       	cp	r20, r22
 334:	57 07       	cpc	r21, r23
 336:	19 f0       	breq	.+6      	; 0x33e <clearSingleMatrix+0x38>
 338:	fa 01       	movw	r30, r20
 33a:	93 2f       	mov	r25, r19
 33c:	f4 cf       	rjmp	.-24     	; 0x326 <clearSingleMatrix+0x20>
 33e:	80 e4       	ldi	r24, 0x40	; 64
 340:	fe 01       	movw	r30, r28
 342:	37 96       	adiw	r30, 0x07	; 7
 344:	d8 01       	movw	r26, r16
 346:	01 90       	ld	r0, Z+
 348:	0d 92       	st	X+, r0
 34a:	8a 95       	dec	r24
 34c:	e1 f7       	brne	.-8      	; 0x346 <clearSingleMatrix+0x40>
 34e:	c8 01       	movw	r24, r16
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	08 95       	ret

0000035a <initSingleUserMatrix>:
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
 366:	8c 01       	movw	r16, r24
 368:	ae 01       	movw	r20, r28
 36a:	49 5f       	subi	r20, 0xF9	; 249
 36c:	5f 4f       	sbci	r21, 0xFF	; 255
 36e:	be 01       	movw	r22, r28
 370:	69 5b       	subi	r22, 0xB9	; 185
 372:	7f 4f       	sbci	r23, 0xFF	; 255
 374:	38 e0       	ldi	r19, 0x08	; 8
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	08 c0       	rjmp	.+16     	; 0x38a <initSingleUserMatrix+0x30>
 37a:	21 93       	st	Z+, r18
 37c:	91 50       	subi	r25, 0x01	; 1
 37e:	e9 f7       	brne	.-6      	; 0x37a <initSingleUserMatrix+0x20>
 380:	48 5f       	subi	r20, 0xF8	; 248
 382:	5f 4f       	sbci	r21, 0xFF	; 255
 384:	46 17       	cp	r20, r22
 386:	57 07       	cpc	r21, r23
 388:	19 f0       	breq	.+6      	; 0x390 <initSingleUserMatrix+0x36>
 38a:	fa 01       	movw	r30, r20
 38c:	93 2f       	mov	r25, r19
 38e:	f5 cf       	rjmp	.-22     	; 0x37a <initSingleUserMatrix+0x20>
 390:	1a 86       	std	Y+10, r1	; 0x0a
 392:	28 96       	adiw	r28, 0x08	; 8
 394:	1f ae       	std	Y+63, r1	; 0x3f
 396:	28 97       	sbiw	r28, 0x08	; 8
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	29 96       	adiw	r28, 0x09	; 9
 39c:	8f af       	std	Y+63, r24	; 0x3f
 39e:	29 97       	sbiw	r28, 0x09	; 9
 3a0:	82 e4       	ldi	r24, 0x42	; 66
 3a2:	fe 01       	movw	r30, r28
 3a4:	37 96       	adiw	r30, 0x07	; 7
 3a6:	d8 01       	movw	r26, r16
 3a8:	01 90       	ld	r0, Z+
 3aa:	0d 92       	st	X+, r0
 3ac:	8a 95       	dec	r24
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <initSingleUserMatrix+0x4e>
 3b0:	c8 01       	movw	r24, r16
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	08 95       	ret

000003bc <SetBit>:
 3bc:	44 23       	and	r20, r20
 3be:	49 f0       	breq	.+18     	; 0x3d2 <SetBit+0x16>
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <SetBit+0xe>
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <SetBit+0xa>
 3ce:	82 2b       	or	r24, r18
 3d0:	08 95       	ret
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <SetBit+0x20>
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <SetBit+0x1c>
 3e0:	20 95       	com	r18
 3e2:	82 23       	and	r24, r18
 3e4:	08 95       	ret

000003e6 <shiftSR>:
 3e6:	85 b9       	out	0x05, r24	; 5
 3e8:	29 9a       	sbi	0x05, 1	; 5
 3ea:	15 b8       	out	0x05, r1	; 5
 3ec:	08 95       	ret

000003ee <shiftWhole>:
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	e1 e0       	ldi	r30, 0x01	; 1
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	71 e0       	ldi	r23, 0x01	; 1
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	af 01       	movw	r20, r30
 3fc:	02 2e       	mov	r0, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <shiftWhole+0x16>
 400:	44 0f       	add	r20, r20
 402:	55 1f       	adc	r21, r21
 404:	0a 94       	dec	r0
 406:	e2 f7       	brpl	.-8      	; 0x400 <shiftWhole+0x12>
 408:	48 23       	and	r20, r24
 40a:	97 2f       	mov	r25, r23
 40c:	09 f4       	brne	.+2      	; 0x410 <shiftWhole+0x22>
 40e:	96 2f       	mov	r25, r22
 410:	95 b9       	out	0x05, r25	; 5
 412:	29 9a       	sbi	0x05, 1	; 5
 414:	65 b9       	out	0x05, r22	; 5
 416:	2f 5f       	subi	r18, 0xFF	; 255
 418:	3f 4f       	sbci	r19, 0xFF	; 255
 41a:	28 30       	cpi	r18, 0x08	; 8
 41c:	31 05       	cpc	r19, r1
 41e:	69 f7       	brne	.-38     	; 0x3fa <shiftWhole+0xc>
 420:	84 e0       	ldi	r24, 0x04	; 4
 422:	85 b9       	out	0x05, r24	; 5
 424:	08 95       	ret

00000426 <clearSR>:
 426:	cf 93       	push	r28
 428:	c8 e0       	ldi	r28, 0x08	; 8
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	dc df       	rcall	.-72     	; 0x3e6 <shiftSR>
 42e:	c1 50       	subi	r28, 0x01	; 1
 430:	e1 f7       	brne	.-8      	; 0x42a <clearSR+0x4>
 432:	84 e0       	ldi	r24, 0x04	; 4
 434:	85 b9       	out	0x05, r24	; 5
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <d3_clearSR>:
 43a:	f5 df       	rcall	.-22     	; 0x426 <clearSR>
 43c:	f4 df       	rcall	.-24     	; 0x426 <clearSR>
 43e:	f3 cf       	rjmp	.-26     	; 0x426 <clearSR>
 440:	08 95       	ret

00000442 <d3_setRowMatrixColor>:
 442:	ff 92       	push	r15
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	8c 01       	movw	r16, r24
 44e:	c6 2f       	mov	r28, r22
 450:	f4 2e       	mov	r15, r20
 452:	f3 df       	rcall	.-26     	; 0x43a <d3_clearSR>
 454:	0c 0f       	add	r16, r28
 456:	11 1d       	adc	r17, r1
 458:	c0 e0       	ldi	r28, 0x00	; 0
 45a:	d0 e0       	ldi	r29, 0x00	; 0
 45c:	f8 01       	movw	r30, r16
 45e:	40 81       	ld	r20, Z
 460:	6c 2f       	mov	r22, r28
 462:	8d 2f       	mov	r24, r29
 464:	ab df       	rcall	.-170    	; 0x3bc <SetBit>
 466:	d8 2f       	mov	r29, r24
 468:	cf 5f       	subi	r28, 0xFF	; 255
 46a:	08 5f       	subi	r16, 0xF8	; 248
 46c:	1f 4f       	sbci	r17, 0xFF	; 255
 46e:	c8 30       	cpi	r28, 0x08	; 8
 470:	a9 f7       	brne	.-22     	; 0x45c <d3_setRowMatrixColor+0x1a>
 472:	f1 e0       	ldi	r31, 0x01	; 1
 474:	ff 16       	cp	r15, r31
 476:	81 f0       	breq	.+32     	; 0x498 <d3_setRowMatrixColor+0x56>
 478:	ff 16       	cp	r15, r31
 47a:	20 f0       	brcs	.+8      	; 0x484 <d3_setRowMatrixColor+0x42>
 47c:	82 e0       	ldi	r24, 0x02	; 2
 47e:	f8 16       	cp	r15, r24
 480:	31 f0       	breq	.+12     	; 0x48e <d3_setRowMatrixColor+0x4c>
 482:	0e c0       	rjmp	.+28     	; 0x4a0 <d3_setRowMatrixColor+0x5e>
 484:	d0 df       	rcall	.-96     	; 0x426 <clearSR>
 486:	8d 2f       	mov	r24, r29
 488:	b2 df       	rcall	.-156    	; 0x3ee <shiftWhole>
 48a:	cd df       	rcall	.-102    	; 0x426 <clearSR>
 48c:	09 c0       	rjmp	.+18     	; 0x4a0 <d3_setRowMatrixColor+0x5e>
 48e:	8d 2f       	mov	r24, r29
 490:	ae df       	rcall	.-164    	; 0x3ee <shiftWhole>
 492:	c9 df       	rcall	.-110    	; 0x426 <clearSR>
 494:	c8 df       	rcall	.-112    	; 0x426 <clearSR>
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <d3_setRowMatrixColor+0x5e>
 498:	c6 df       	rcall	.-116    	; 0x426 <clearSR>
 49a:	c5 df       	rcall	.-118    	; 0x426 <clearSR>
 49c:	8d 2f       	mov	r24, r29
 49e:	a7 df       	rcall	.-178    	; 0x3ee <shiftWhole>
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	ff 90       	pop	r15
 4aa:	08 95       	ret

000004ac <d3_setMatrixColor>:
 4ac:	cf 92       	push	r12
 4ae:	df 92       	push	r13
 4b0:	ff 92       	push	r15
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	6c 01       	movw	r12, r24
 4bc:	f6 2e       	mov	r15, r22
 4be:	c0 e0       	ldi	r28, 0x00	; 0
 4c0:	d0 e0       	ldi	r29, 0x00	; 0
 4c2:	01 e0       	ldi	r16, 0x01	; 1
 4c4:	10 e0       	ldi	r17, 0x00	; 0
 4c6:	98 01       	movw	r18, r16
 4c8:	0c 2e       	mov	r0, r28
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <d3_setMatrixColor+0x24>
 4cc:	22 0f       	add	r18, r18
 4ce:	33 1f       	adc	r19, r19
 4d0:	0a 94       	dec	r0
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <d3_setMatrixColor+0x20>
 4d4:	2b b9       	out	0x0b, r18	; 11
 4d6:	4f 2d       	mov	r20, r15
 4d8:	6c 2f       	mov	r22, r28
 4da:	c6 01       	movw	r24, r12
 4dc:	b2 df       	rcall	.-156    	; 0x442 <d3_setRowMatrixColor>
 4de:	8f ea       	ldi	r24, 0xAF	; 175
 4e0:	94 e0       	ldi	r25, 0x04	; 4
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <d3_setMatrixColor+0x36>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <d3_setMatrixColor+0x3c>
 4e8:	00 00       	nop
 4ea:	a7 df       	rcall	.-178    	; 0x43a <d3_clearSR>
 4ec:	21 96       	adiw	r28, 0x01	; 1
 4ee:	c8 30       	cpi	r28, 0x08	; 8
 4f0:	d1 05       	cpc	r29, r1
 4f2:	49 f7       	brne	.-46     	; 0x4c6 <d3_setMatrixColor+0x1a>
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	1f 91       	pop	r17
 4fa:	0f 91       	pop	r16
 4fc:	ff 90       	pop	r15
 4fe:	df 90       	pop	r13
 500:	cf 90       	pop	r12
 502:	08 95       	ret

00000504 <GetKeypadKey>:
 504:	8f ee       	ldi	r24, 0xEF	; 239
 506:	88 b9       	out	0x08, r24	; 8
 508:	00 00       	nop
 50a:	30 9b       	sbis	0x06, 0	; 6
 50c:	29 c0       	rjmp	.+82     	; 0x560 <GetKeypadKey+0x5c>
 50e:	31 9b       	sbis	0x06, 1	; 6
 510:	29 c0       	rjmp	.+82     	; 0x564 <GetKeypadKey+0x60>
 512:	32 9b       	sbis	0x06, 2	; 6
 514:	29 c0       	rjmp	.+82     	; 0x568 <GetKeypadKey+0x64>
 516:	33 9b       	sbis	0x06, 3	; 6
 518:	29 c0       	rjmp	.+82     	; 0x56c <GetKeypadKey+0x68>
 51a:	8f ed       	ldi	r24, 0xDF	; 223
 51c:	88 b9       	out	0x08, r24	; 8
 51e:	00 00       	nop
 520:	30 9b       	sbis	0x06, 0	; 6
 522:	26 c0       	rjmp	.+76     	; 0x570 <GetKeypadKey+0x6c>
 524:	31 9b       	sbis	0x06, 1	; 6
 526:	26 c0       	rjmp	.+76     	; 0x574 <GetKeypadKey+0x70>
 528:	32 9b       	sbis	0x06, 2	; 6
 52a:	26 c0       	rjmp	.+76     	; 0x578 <GetKeypadKey+0x74>
 52c:	33 9b       	sbis	0x06, 3	; 6
 52e:	26 c0       	rjmp	.+76     	; 0x57c <GetKeypadKey+0x78>
 530:	8f eb       	ldi	r24, 0xBF	; 191
 532:	88 b9       	out	0x08, r24	; 8
 534:	00 00       	nop
 536:	30 9b       	sbis	0x06, 0	; 6
 538:	23 c0       	rjmp	.+70     	; 0x580 <GetKeypadKey+0x7c>
 53a:	31 9b       	sbis	0x06, 1	; 6
 53c:	23 c0       	rjmp	.+70     	; 0x584 <GetKeypadKey+0x80>
 53e:	32 9b       	sbis	0x06, 2	; 6
 540:	23 c0       	rjmp	.+70     	; 0x588 <GetKeypadKey+0x84>
 542:	33 9b       	sbis	0x06, 3	; 6
 544:	23 c0       	rjmp	.+70     	; 0x58c <GetKeypadKey+0x88>
 546:	8f e7       	ldi	r24, 0x7F	; 127
 548:	88 b9       	out	0x08, r24	; 8
 54a:	00 00       	nop
 54c:	30 9b       	sbis	0x06, 0	; 6
 54e:	20 c0       	rjmp	.+64     	; 0x590 <GetKeypadKey+0x8c>
 550:	31 9b       	sbis	0x06, 1	; 6
 552:	20 c0       	rjmp	.+64     	; 0x594 <GetKeypadKey+0x90>
 554:	32 9b       	sbis	0x06, 2	; 6
 556:	20 c0       	rjmp	.+64     	; 0x598 <GetKeypadKey+0x94>
 558:	33 9b       	sbis	0x06, 3	; 6
 55a:	20 c0       	rjmp	.+64     	; 0x59c <GetKeypadKey+0x98>
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	08 95       	ret
 560:	81 e3       	ldi	r24, 0x31	; 49
 562:	08 95       	ret
 564:	84 e3       	ldi	r24, 0x34	; 52
 566:	08 95       	ret
 568:	87 e3       	ldi	r24, 0x37	; 55
 56a:	08 95       	ret
 56c:	8a e2       	ldi	r24, 0x2A	; 42
 56e:	08 95       	ret
 570:	82 e3       	ldi	r24, 0x32	; 50
 572:	08 95       	ret
 574:	85 e3       	ldi	r24, 0x35	; 53
 576:	08 95       	ret
 578:	88 e3       	ldi	r24, 0x38	; 56
 57a:	08 95       	ret
 57c:	80 e3       	ldi	r24, 0x30	; 48
 57e:	08 95       	ret
 580:	83 e3       	ldi	r24, 0x33	; 51
 582:	08 95       	ret
 584:	86 e3       	ldi	r24, 0x36	; 54
 586:	08 95       	ret
 588:	89 e3       	ldi	r24, 0x39	; 57
 58a:	08 95       	ret
 58c:	83 e2       	ldi	r24, 0x23	; 35
 58e:	08 95       	ret
 590:	81 e4       	ldi	r24, 0x41	; 65
 592:	08 95       	ret
 594:	82 e4       	ldi	r24, 0x42	; 66
 596:	08 95       	ret
 598:	83 e4       	ldi	r24, 0x43	; 67
 59a:	08 95       	ret
 59c:	84 e4       	ldi	r24, 0x44	; 68
 59e:	08 95       	ret

000005a0 <KPTick>:
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	ec 01       	movw	r28, r24
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	91 05       	cpc	r25, r1
 5aa:	51 f0       	breq	.+20     	; 0x5c0 <KPTick+0x20>
 5ac:	82 30       	cpi	r24, 0x02	; 2
 5ae:	91 05       	cpc	r25, r1
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <KPTick+0x14>
 5b2:	aa c0       	rjmp	.+340    	; 0x708 <KPTick+0x168>
 5b4:	89 2b       	or	r24, r25
 5b6:	09 f0       	breq	.+2      	; 0x5ba <KPTick+0x1a>
 5b8:	bd c0       	rjmp	.+378    	; 0x734 <KPTick+0x194>
 5ba:	c1 e0       	ldi	r28, 0x01	; 1
 5bc:	d0 e0       	ldi	r29, 0x00	; 0
 5be:	ba c0       	rjmp	.+372    	; 0x734 <KPTick+0x194>
 5c0:	a1 df       	rcall	.-190    	; 0x504 <GetKeypadKey>
 5c2:	80 93 08 01 	sts	0x0108, r24
 5c6:	88 23       	and	r24, r24
 5c8:	09 f4       	brne	.+2      	; 0x5cc <KPTick+0x2c>
 5ca:	b4 c0       	rjmp	.+360    	; 0x734 <KPTick+0x194>
 5cc:	84 33       	cpi	r24, 0x34	; 52
 5ce:	49 f5       	brne	.+82     	; 0x622 <KPTick+0x82>
 5d0:	80 91 e9 05 	lds	r24, 0x05E9
 5d4:	87 30       	cpi	r24, 0x07	; 7
 5d6:	08 f0       	brcs	.+2      	; 0x5da <KPTick+0x3a>
 5d8:	9c c0       	rjmp	.+312    	; 0x712 <KPTick+0x172>
 5da:	8f 5f       	subi	r24, 0xFF	; 255
 5dc:	80 93 e9 05 	sts	0x05E9, r24
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	20 91 ea 05 	lds	r18, 0x05EA
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	fc 01       	movw	r30, r24
 5ea:	31 97       	sbiw	r30, 0x01	; 1
 5ec:	ee 0f       	add	r30, r30
 5ee:	ff 1f       	adc	r31, r31
 5f0:	ee 0f       	add	r30, r30
 5f2:	ff 1f       	adc	r31, r31
 5f4:	ee 0f       	add	r30, r30
 5f6:	ff 1f       	adc	r31, r31
 5f8:	e2 0f       	add	r30, r18
 5fa:	f3 1f       	adc	r31, r19
 5fc:	e7 55       	subi	r30, 0x57	; 87
 5fe:	fa 4f       	sbci	r31, 0xFA	; 250
 600:	41 e0       	ldi	r20, 0x01	; 1
 602:	40 83       	st	Z, r20
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	82 0f       	add	r24, r18
 612:	93 1f       	adc	r25, r19
 614:	fc 01       	movw	r30, r24
 616:	e7 55       	subi	r30, 0x57	; 87
 618:	fa 4f       	sbci	r31, 0xFA	; 250
 61a:	10 82       	st	Z, r1
 61c:	c2 e0       	ldi	r28, 0x02	; 2
 61e:	d0 e0       	ldi	r29, 0x00	; 0
 620:	89 c0       	rjmp	.+274    	; 0x734 <KPTick+0x194>
 622:	82 33       	cpi	r24, 0x32	; 50
 624:	11 f5       	brne	.+68     	; 0x66a <KPTick+0xca>
 626:	80 91 ea 05 	lds	r24, 0x05EA
 62a:	87 30       	cpi	r24, 0x07	; 7
 62c:	08 f0       	brcs	.+2      	; 0x630 <KPTick+0x90>
 62e:	74 c0       	rjmp	.+232    	; 0x718 <KPTick+0x178>
 630:	8f 5f       	subi	r24, 0xFF	; 255
 632:	80 93 ea 05 	sts	0x05EA, r24
 636:	e0 91 e9 05 	lds	r30, 0x05E9
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	ee 0f       	add	r30, r30
 640:	ff 1f       	adc	r31, r31
 642:	ee 0f       	add	r30, r30
 644:	ff 1f       	adc	r31, r31
 646:	ee 0f       	add	r30, r30
 648:	ff 1f       	adc	r31, r31
 64a:	dc 01       	movw	r26, r24
 64c:	ae 0f       	add	r26, r30
 64e:	bf 1f       	adc	r27, r31
 650:	a8 55       	subi	r26, 0x58	; 88
 652:	ba 4f       	sbci	r27, 0xFA	; 250
 654:	21 e0       	ldi	r18, 0x01	; 1
 656:	2c 93       	st	X, r18
 658:	8e 0f       	add	r24, r30
 65a:	9f 1f       	adc	r25, r31
 65c:	fc 01       	movw	r30, r24
 65e:	e7 55       	subi	r30, 0x57	; 87
 660:	fa 4f       	sbci	r31, 0xFA	; 250
 662:	10 82       	st	Z, r1
 664:	c2 e0       	ldi	r28, 0x02	; 2
 666:	d0 e0       	ldi	r29, 0x00	; 0
 668:	65 c0       	rjmp	.+202    	; 0x734 <KPTick+0x194>
 66a:	85 33       	cpi	r24, 0x35	; 53
 66c:	49 f5       	brne	.+82     	; 0x6c0 <KPTick+0x120>
 66e:	80 91 e9 05 	lds	r24, 0x05E9
 672:	88 23       	and	r24, r24
 674:	09 f4       	brne	.+2      	; 0x678 <KPTick+0xd8>
 676:	53 c0       	rjmp	.+166    	; 0x71e <KPTick+0x17e>
 678:	81 50       	subi	r24, 0x01	; 1
 67a:	80 93 e9 05 	sts	0x05E9, r24
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	20 91 ea 05 	lds	r18, 0x05EA
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	fc 01       	movw	r30, r24
 688:	31 96       	adiw	r30, 0x01	; 1
 68a:	ee 0f       	add	r30, r30
 68c:	ff 1f       	adc	r31, r31
 68e:	ee 0f       	add	r30, r30
 690:	ff 1f       	adc	r31, r31
 692:	ee 0f       	add	r30, r30
 694:	ff 1f       	adc	r31, r31
 696:	e2 0f       	add	r30, r18
 698:	f3 1f       	adc	r31, r19
 69a:	e7 55       	subi	r30, 0x57	; 87
 69c:	fa 4f       	sbci	r31, 0xFA	; 250
 69e:	41 e0       	ldi	r20, 0x01	; 1
 6a0:	40 83       	st	Z, r20
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	82 0f       	add	r24, r18
 6b0:	93 1f       	adc	r25, r19
 6b2:	fc 01       	movw	r30, r24
 6b4:	e7 55       	subi	r30, 0x57	; 87
 6b6:	fa 4f       	sbci	r31, 0xFA	; 250
 6b8:	10 82       	st	Z, r1
 6ba:	c2 e0       	ldi	r28, 0x02	; 2
 6bc:	d0 e0       	ldi	r29, 0x00	; 0
 6be:	3a c0       	rjmp	.+116    	; 0x734 <KPTick+0x194>
 6c0:	88 33       	cpi	r24, 0x38	; 56
 6c2:	81 f5       	brne	.+96     	; 0x724 <KPTick+0x184>
 6c4:	80 91 ea 05 	lds	r24, 0x05EA
 6c8:	88 23       	and	r24, r24
 6ca:	79 f1       	breq	.+94     	; 0x72a <KPTick+0x18a>
 6cc:	81 50       	subi	r24, 0x01	; 1
 6ce:	80 93 ea 05 	sts	0x05EA, r24
 6d2:	e0 91 e9 05 	lds	r30, 0x05E9
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	ee 0f       	add	r30, r30
 6e4:	ff 1f       	adc	r31, r31
 6e6:	df 01       	movw	r26, r30
 6e8:	a7 55       	subi	r26, 0x57	; 87
 6ea:	ba 4f       	sbci	r27, 0xFA	; 250
 6ec:	a8 0f       	add	r26, r24
 6ee:	b9 1f       	adc	r27, r25
 6f0:	21 e0       	ldi	r18, 0x01	; 1
 6f2:	11 96       	adiw	r26, 0x01	; 1
 6f4:	2c 93       	st	X, r18
 6f6:	8e 0f       	add	r24, r30
 6f8:	9f 1f       	adc	r25, r31
 6fa:	fc 01       	movw	r30, r24
 6fc:	e7 55       	subi	r30, 0x57	; 87
 6fe:	fa 4f       	sbci	r31, 0xFA	; 250
 700:	10 82       	st	Z, r1
 702:	c2 e0       	ldi	r28, 0x02	; 2
 704:	d0 e0       	ldi	r29, 0x00	; 0
 706:	16 c0       	rjmp	.+44     	; 0x734 <KPTick+0x194>
 708:	fd de       	rcall	.-518    	; 0x504 <GetKeypadKey>
 70a:	88 23       	and	r24, r24
 70c:	89 f0       	breq	.+34     	; 0x730 <KPTick+0x190>
 70e:	fa de       	rcall	.-524    	; 0x504 <GetKeypadKey>
 710:	11 c0       	rjmp	.+34     	; 0x734 <KPTick+0x194>
 712:	c2 e0       	ldi	r28, 0x02	; 2
 714:	d0 e0       	ldi	r29, 0x00	; 0
 716:	0e c0       	rjmp	.+28     	; 0x734 <KPTick+0x194>
 718:	c2 e0       	ldi	r28, 0x02	; 2
 71a:	d0 e0       	ldi	r29, 0x00	; 0
 71c:	0b c0       	rjmp	.+22     	; 0x734 <KPTick+0x194>
 71e:	c2 e0       	ldi	r28, 0x02	; 2
 720:	d0 e0       	ldi	r29, 0x00	; 0
 722:	08 c0       	rjmp	.+16     	; 0x734 <KPTick+0x194>
 724:	c2 e0       	ldi	r28, 0x02	; 2
 726:	d0 e0       	ldi	r29, 0x00	; 0
 728:	05 c0       	rjmp	.+10     	; 0x734 <KPTick+0x194>
 72a:	c2 e0       	ldi	r28, 0x02	; 2
 72c:	d0 e0       	ldi	r29, 0x00	; 0
 72e:	02 c0       	rjmp	.+4      	; 0x734 <KPTick+0x194>
 730:	c1 e0       	ldi	r28, 0x01	; 1
 732:	d0 e0       	ldi	r29, 0x00	; 0
 734:	ce 01       	movw	r24, r28
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <initExplosions>:
 73c:	cf 93       	push	r28
 73e:	df 93       	push	r29
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
 744:	cf 5f       	subi	r28, 0xFF	; 255
 746:	db 4f       	sbci	r29, 0xFB	; 251
 748:	18 82       	st	Y, r1
 74a:	c1 50       	subi	r28, 0x01	; 1
 74c:	d4 40       	sbci	r29, 0x04	; 4
 74e:	ce 5f       	subi	r28, 0xFE	; 254
 750:	db 4f       	sbci	r29, 0xFB	; 251
 752:	18 82       	st	Y, r1
 754:	c2 50       	subi	r28, 0x02	; 2
 756:	d4 40       	sbci	r29, 0x04	; 4
 758:	2e ef       	ldi	r18, 0xFE	; 254
 75a:	33 e0       	ldi	r19, 0x03	; 3
 75c:	fe 01       	movw	r30, r28
 75e:	35 96       	adiw	r30, 0x05	; 5
 760:	dc 01       	movw	r26, r24
 762:	01 90       	ld	r0, Z+
 764:	0d 92       	st	X+, r0
 766:	21 50       	subi	r18, 0x01	; 1
 768:	30 40       	sbci	r19, 0x00	; 0
 76a:	d9 f7       	brne	.-10     	; 0x762 <initExplosions+0x26>
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	08 95       	ret

00000772 <DeathTick>:
			}
		}
	return state;
}

unsigned char DeathTick() {	
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
 77a:	c2 54       	subi	r28, 0x42	; 66
 77c:	d1 09       	sbc	r29, r1
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	f8 94       	cli
 782:	de bf       	out	0x3e, r29	; 62
 784:	0f be       	out	0x3f, r0	; 63
 786:	cd bf       	out	0x3d, r28	; 61
	if ((displayBlank == 0) && (explosions.matricies[explosions.displayIndex].m[userMatrix.row][userMatrix.column] == 0)) {
 788:	80 91 09 01 	lds	r24, 0x0109
 78c:	81 11       	cpse	r24, r1
 78e:	3f c0       	rjmp	.+126    	; 0x80e <DeathTick+0x9c>
 790:	90 91 a8 05 	lds	r25, 0x05A8
 794:	e0 91 e9 05 	lds	r30, 0x05E9
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	28 e0       	ldi	r18, 0x08	; 8
 79c:	92 9f       	mul	r25, r18
 79e:	e0 0d       	add	r30, r0
 7a0:	f1 1d       	adc	r31, r1
 7a2:	11 24       	eor	r1, r1
 7a4:	90 91 ea 05 	lds	r25, 0x05EA
 7a8:	ee 0f       	add	r30, r30
 7aa:	ff 1f       	adc	r31, r31
 7ac:	ee 0f       	add	r30, r30
 7ae:	ff 1f       	adc	r31, r31
 7b0:	ee 0f       	add	r30, r30
 7b2:	ff 1f       	adc	r31, r31
 7b4:	e9 0f       	add	r30, r25
 7b6:	f1 1d       	adc	r31, r1
 7b8:	e5 55       	subi	r30, 0x55	; 85
 7ba:	fe 4f       	sbci	r31, 0xFE	; 254
 7bc:	90 81       	ld	r25, Z
 7be:	91 11       	cpse	r25, r1
 7c0:	27 c0       	rjmp	.+78     	; 0x810 <DeathTick+0x9e>
		// Lose Game
		userMatrix = initSingleUserMatrix(userMatrix); // place user back to original position
 7c2:	8d b7       	in	r24, 0x3d	; 61
 7c4:	9e b7       	in	r25, 0x3e	; 62
 7c6:	82 54       	subi	r24, 0x42	; 66
 7c8:	91 09       	sbc	r25, r1
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	f8 94       	cli
 7ce:	9e bf       	out	0x3e, r25	; 62
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	8d bf       	out	0x3d, r24	; 61
 7d4:	ad b7       	in	r26, 0x3d	; 61
 7d6:	be b7       	in	r27, 0x3e	; 62
 7d8:	11 96       	adiw	r26, 0x01	; 1
 7da:	82 e4       	ldi	r24, 0x42	; 66
 7dc:	e9 ea       	ldi	r30, 0xA9	; 169
 7de:	f5 e0       	ldi	r31, 0x05	; 5
 7e0:	01 90       	ld	r0, Z+
 7e2:	0d 92       	st	X+, r0
 7e4:	8a 95       	dec	r24
 7e6:	e1 f7       	brne	.-8      	; 0x7e0 <DeathTick+0x6e>
 7e8:	ce 01       	movw	r24, r28
 7ea:	01 96       	adiw	r24, 0x01	; 1
 7ec:	b6 dd       	rcall	.-1172   	; 0x35a <initSingleUserMatrix>
 7ee:	82 e4       	ldi	r24, 0x42	; 66
 7f0:	fe 01       	movw	r30, r28
 7f2:	31 96       	adiw	r30, 0x01	; 1
 7f4:	a9 ea       	ldi	r26, 0xA9	; 169
 7f6:	b5 e0       	ldi	r27, 0x05	; 5
 7f8:	01 90       	ld	r0, Z+
 7fa:	0d 92       	st	X+, r0
 7fc:	8a 95       	dec	r24
 7fe:	e1 f7       	brne	.-8      	; 0x7f8 <DeathTick+0x86>
		return 1;
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	f8 94       	cli
 804:	de bf       	out	0x3e, r29	; 62
 806:	0f be       	out	0x3f, r0	; 63
 808:	cd bf       	out	0x3d, r28	; 61
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	01 c0       	rjmp	.+2      	; 0x810 <DeathTick+0x9e>
	} else {
		// Nothing
		return 0;
 80e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 810:	ce 5b       	subi	r28, 0xBE	; 190
 812:	df 4f       	sbci	r29, 0xFF	; 255
 814:	0f b6       	in	r0, 0x3f	; 63
 816:	f8 94       	cli
 818:	de bf       	out	0x3e, r29	; 62
 81a:	0f be       	out	0x3f, r0	; 63
 81c:	cd bf       	out	0x3d, r28	; 61
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	08 95       	ret

00000824 <ExpTick>:

Explosions ExpTick(Explosions explosions) {	
 824:	0f 93       	push	r16
 826:	1f 93       	push	r17
 828:	cf 93       	push	r28
 82a:	df 93       	push	r29
 82c:	cd b7       	in	r28, 0x3d	; 61
 82e:	de b7       	in	r29, 0x3e	; 62
 830:	8c 01       	movw	r16, r24
	// Return if empty (Protection code)
	if (explosions.index == 0) {
 832:	cd 5f       	subi	r28, 0xFD	; 253
 834:	db 4f       	sbci	r29, 0xFB	; 251
 836:	88 81       	ld	r24, Y
 838:	c3 50       	subi	r28, 0x03	; 3
 83a:	d4 40       	sbci	r29, 0x04	; 4
 83c:	81 11       	cpse	r24, r1
 83e:	0a c0       	rjmp	.+20     	; 0x854 <ExpTick+0x30>
		return explosions;
 840:	8e ef       	ldi	r24, 0xFE	; 254
 842:	93 e0       	ldi	r25, 0x03	; 3
 844:	fe 01       	movw	r30, r28
 846:	37 96       	adiw	r30, 0x07	; 7
 848:	d8 01       	movw	r26, r16
 84a:	01 90       	ld	r0, Z+
 84c:	0d 92       	st	X+, r0
 84e:	01 97       	sbiw	r24, 0x01	; 1
 850:	e1 f7       	brne	.-8      	; 0x84a <ExpTick+0x26>
 852:	98 c0       	rjmp	.+304    	; 0x984 <ExpTick+0x160>
	} 
	
	if (explosions.displayIndex >= explosions.index) {
 854:	cc 5f       	subi	r28, 0xFC	; 252
 856:	db 4f       	sbci	r29, 0xFB	; 251
 858:	98 81       	ld	r25, Y
 85a:	c4 50       	subi	r28, 0x04	; 4
 85c:	d4 40       	sbci	r29, 0x04	; 4
 85e:	98 17       	cp	r25, r24
 860:	28 f0       	brcs	.+10     	; 0x86c <ExpTick+0x48>
		explosions.displayIndex = 0;
 862:	cc 5f       	subi	r28, 0xFC	; 252
 864:	db 4f       	sbci	r29, 0xFB	; 251
 866:	18 82       	st	Y, r1
 868:	c4 50       	subi	r28, 0x04	; 4
 86a:	d4 40       	sbci	r29, 0x04	; 4
	}
	
	if (displayBlank == 0)
 86c:	80 91 09 01 	lds	r24, 0x0109
 870:	81 11       	cpse	r24, r1
 872:	12 c0       	rjmp	.+36     	; 0x898 <ExpTick+0x74>
		d3_setMatrixColor(explosions.matricies[explosions.displayIndex].m, RED);
 874:	cc 5f       	subi	r28, 0xFC	; 252
 876:	db 4f       	sbci	r29, 0xFB	; 251
 878:	88 81       	ld	r24, Y
 87a:	c4 50       	subi	r28, 0x04	; 4
 87c:	d4 40       	sbci	r29, 0x04	; 4
 87e:	60 e0       	ldi	r22, 0x00	; 0
 880:	27 e0       	ldi	r18, 0x07	; 7
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	2c 0f       	add	r18, r28
 886:	3d 1f       	adc	r19, r29
 888:	40 e4       	ldi	r20, 0x40	; 64
 88a:	84 9f       	mul	r24, r20
 88c:	20 0d       	add	r18, r0
 88e:	31 1d       	adc	r19, r1
 890:	11 24       	eor	r1, r1
 892:	c9 01       	movw	r24, r18
 894:	0b de       	rcall	.-1002   	; 0x4ac <d3_setMatrixColor>
 896:	07 c0       	rjmp	.+14     	; 0x8a6 <ExpTick+0x82>
	else if (displayBlank == 1)
 898:	81 30       	cpi	r24, 0x01	; 1
 89a:	09 f0       	breq	.+2      	; 0x89e <ExpTick+0x7a>
 89c:	6a c0       	rjmp	.+212    	; 0x972 <ExpTick+0x14e>
		d3_setMatrixColor(blankMatrix.m, RED);
 89e:	60 e0       	ldi	r22, 0x00	; 0
 8a0:	8b e2       	ldi	r24, 0x2B	; 43
 8a2:	91 e0       	ldi	r25, 0x01	; 1
 8a4:	03 de       	rcall	.-1018   	; 0x4ac <d3_setMatrixColor>
	
	if (displayBlank == 0 && contClock >= explosions.timeDuration[explosions.displayIndex]) {
 8a6:	80 91 09 01 	lds	r24, 0x0109
 8aa:	81 11       	cpse	r24, r1
 8ac:	35 c0       	rjmp	.+106    	; 0x918 <ExpTick+0xf4>
 8ae:	cc 5f       	subi	r28, 0xFC	; 252
 8b0:	db 4f       	sbci	r29, 0xFB	; 251
 8b2:	28 81       	ld	r18, Y
 8b4:	c4 50       	subi	r28, 0x04	; 4
 8b6:	d4 40       	sbci	r29, 0x04	; 4
 8b8:	e2 2f       	mov	r30, r18
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	e1 51       	subi	r30, 0x11	; 17
 8be:	fe 4f       	sbci	r31, 0xFE	; 254
 8c0:	ee 0f       	add	r30, r30
 8c2:	ff 1f       	adc	r31, r31
 8c4:	87 e0       	ldi	r24, 0x07	; 7
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	8c 0f       	add	r24, r28
 8ca:	9d 1f       	adc	r25, r29
 8cc:	e8 0f       	add	r30, r24
 8ce:	f9 1f       	adc	r31, r25
 8d0:	80 81       	ld	r24, Z
 8d2:	91 81       	ldd	r25, Z+1	; 0x01
 8d4:	a0 e0       	ldi	r26, 0x00	; 0
 8d6:	b0 e0       	ldi	r27, 0x00	; 0
 8d8:	40 91 0b 01 	lds	r20, 0x010B
 8dc:	50 91 0c 01 	lds	r21, 0x010C
 8e0:	60 91 0d 01 	lds	r22, 0x010D
 8e4:	70 91 0e 01 	lds	r23, 0x010E
 8e8:	48 17       	cp	r20, r24
 8ea:	59 07       	cpc	r21, r25
 8ec:	6a 07       	cpc	r22, r26
 8ee:	7b 07       	cpc	r23, r27
 8f0:	08 f4       	brcc	.+2      	; 0x8f4 <ExpTick+0xd0>
 8f2:	3f c0       	rjmp	.+126    	; 0x972 <ExpTick+0x14e>
		displayBlank = 1;
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	80 93 09 01 	sts	0x0109, r24
		explosions.displayIndex++;
 8fa:	2f 5f       	subi	r18, 0xFF	; 255
 8fc:	cc 5f       	subi	r28, 0xFC	; 252
 8fe:	db 4f       	sbci	r29, 0xFB	; 251
 900:	28 83       	st	Y, r18
 902:	c4 50       	subi	r28, 0x04	; 4
 904:	d4 40       	sbci	r29, 0x04	; 4
		contClock = 0;
 906:	10 92 0b 01 	sts	0x010B, r1
 90a:	10 92 0c 01 	sts	0x010C, r1
 90e:	10 92 0d 01 	sts	0x010D, r1
 912:	10 92 0e 01 	sts	0x010E, r1
 916:	2d c0       	rjmp	.+90     	; 0x972 <ExpTick+0x14e>
	} else if (displayBlank == 1 && contClock >= explosions.timeBetween[explosions.displayIndex]) {
 918:	81 30       	cpi	r24, 0x01	; 1
 91a:	59 f5       	brne	.+86     	; 0x972 <ExpTick+0x14e>
 91c:	cc 5f       	subi	r28, 0xFC	; 252
 91e:	db 4f       	sbci	r29, 0xFB	; 251
 920:	e8 81       	ld	r30, Y
 922:	c4 50       	subi	r28, 0x04	; 4
 924:	d4 40       	sbci	r29, 0x04	; 4
 926:	f0 e0       	ldi	r31, 0x00	; 0
 928:	e0 52       	subi	r30, 0x20	; 32
 92a:	fe 4f       	sbci	r31, 0xFE	; 254
 92c:	ee 0f       	add	r30, r30
 92e:	ff 1f       	adc	r31, r31
 930:	27 e0       	ldi	r18, 0x07	; 7
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	2c 0f       	add	r18, r28
 936:	3d 1f       	adc	r19, r29
 938:	e2 0f       	add	r30, r18
 93a:	f3 1f       	adc	r31, r19
 93c:	80 81       	ld	r24, Z
 93e:	91 81       	ldd	r25, Z+1	; 0x01
 940:	a0 e0       	ldi	r26, 0x00	; 0
 942:	b0 e0       	ldi	r27, 0x00	; 0
 944:	40 91 0b 01 	lds	r20, 0x010B
 948:	50 91 0c 01 	lds	r21, 0x010C
 94c:	60 91 0d 01 	lds	r22, 0x010D
 950:	70 91 0e 01 	lds	r23, 0x010E
 954:	48 17       	cp	r20, r24
 956:	59 07       	cpc	r21, r25
 958:	6a 07       	cpc	r22, r26
 95a:	7b 07       	cpc	r23, r27
 95c:	50 f0       	brcs	.+20     	; 0x972 <ExpTick+0x14e>
		displayBlank = 0;
 95e:	10 92 09 01 	sts	0x0109, r1
		contClock = 0;
 962:	10 92 0b 01 	sts	0x010B, r1
 966:	10 92 0c 01 	sts	0x010C, r1
 96a:	10 92 0d 01 	sts	0x010D, r1
 96e:	10 92 0e 01 	sts	0x010E, r1
	}
	
	return explosions;
 972:	8e ef       	ldi	r24, 0xFE	; 254
 974:	93 e0       	ldi	r25, 0x03	; 3
 976:	fe 01       	movw	r30, r28
 978:	37 96       	adiw	r30, 0x07	; 7
 97a:	d8 01       	movw	r26, r16
 97c:	01 90       	ld	r0, Z+
 97e:	0d 92       	st	X+, r0
 980:	01 97       	sbiw	r24, 0x01	; 1
 982:	e1 f7       	brne	.-8      	; 0x97c <ExpTick+0x158>
 984:	c8 01       	movw	r24, r16
 986:	df 91       	pop	r29
 988:	cf 91       	pop	r28
 98a:	1f 91       	pop	r17
 98c:	0f 91       	pop	r16
 98e:	08 95       	ret

00000990 <main>:
SingleMatrix matrix;
SingleMatrix matrix2;
SingleMatrix blankMatrix;


int main(void) {
 990:	cf 93       	push	r28
 992:	df 93       	push	r29
 994:	cd b7       	in	r28, 0x3d	; 61
 996:	de b7       	in	r29, 0x3e	; 62
 998:	c6 5b       	subi	r28, 0xB6	; 182
 99a:	d4 41       	sbci	r29, 0x14	; 20
 99c:	0f b6       	in	r0, 0x3f	; 63
 99e:	f8 94       	cli
 9a0:	de bf       	out	0x3e, r29	; 62
 9a2:	0f be       	out	0x3f, r0	; 63
 9a4:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00;
 9a6:	8f ef       	ldi	r24, 0xFF	; 255
 9a8:	84 b9       	out	0x04, r24	; 4
 9aa:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 9ac:	8a b9       	out	0x0a, r24	; 10
 9ae:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xF0; PORTC = 0x0F;
 9b0:	80 ef       	ldi	r24, 0xF0	; 240
 9b2:	87 b9       	out	0x07, r24	; 7
 9b4:	8f e0       	ldi	r24, 0x0F	; 15
 9b6:	88 b9       	out	0x08, r24	; 8
	
	initTasks();
 9b8:	cf db       	rcall	.-2146   	; 0x158 <initTasks>
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	a0 e0       	ldi	r26, 0x00	; 0
 9c0:	b0 e0       	ldi	r27, 0x00	; 0
 9c2:	80 93 02 01 	sts	0x0102, r24
 9c6:	90 93 03 01 	sts	0x0103, r25
 9ca:	a0 93 04 01 	sts	0x0104, r26
 9ce:	b0 93 05 01 	sts	0x0105, r27
	_avr_timer_cntcurr = _avr_timer_M;
 9d2:	80 93 0f 01 	sts	0x010F, r24
 9d6:	90 93 10 01 	sts	0x0110, r25
 9da:	a0 93 11 01 	sts	0x0111, r26
 9de:	b0 93 12 01 	sts	0x0112, r27
	
	TimerSet(1);
	TimerOn();
 9e2:	e1 db       	rcall	.-2110   	; 0x1a6 <TimerOn>
	
	matrix = clearSingleMatrix(matrix);
 9e4:	4d b7       	in	r20, 0x3d	; 61
 9e6:	5e b7       	in	r21, 0x3e	; 62
 9e8:	40 54       	subi	r20, 0x40	; 64
 9ea:	51 09       	sbc	r21, r1
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	f8 94       	cli
 9f0:	5e bf       	out	0x3e, r21	; 62
 9f2:	0f be       	out	0x3f, r0	; 63
 9f4:	4d bf       	out	0x3d, r20	; 61
 9f6:	ad b7       	in	r26, 0x3d	; 61
 9f8:	be b7       	in	r27, 0x3e	; 62
 9fa:	11 96       	adiw	r26, 0x01	; 1
 9fc:	80 e4       	ldi	r24, 0x40	; 64
 9fe:	eb e6       	ldi	r30, 0x6B	; 107
 a00:	f1 e0       	ldi	r31, 0x01	; 1
 a02:	01 90       	ld	r0, Z+
 a04:	0d 92       	st	X+, r0
 a06:	8a 95       	dec	r24
 a08:	e1 f7       	brne	.-8      	; 0xa02 <main+0x72>
 a0a:	ce 01       	movw	r24, r28
 a0c:	87 58       	subi	r24, 0x87	; 135
 a0e:	9f 4e       	sbci	r25, 0xEF	; 239
 a10:	7a dc       	rcall	.-1804   	; 0x306 <clearSingleMatrix>
 a12:	80 e4       	ldi	r24, 0x40	; 64
 a14:	fe 01       	movw	r30, r28
 a16:	e7 58       	subi	r30, 0x87	; 135
 a18:	ff 4e       	sbci	r31, 0xEF	; 239
 a1a:	ab e6       	ldi	r26, 0x6B	; 107
 a1c:	b1 e0       	ldi	r27, 0x01	; 1
 a1e:	01 90       	ld	r0, Z+
 a20:	0d 92       	st	X+, r0
 a22:	8a 95       	dec	r24
 a24:	e1 f7       	brne	.-8      	; 0xa1e <main+0x8e>
 a26:	23 e7       	ldi	r18, 0x73	; 115
 a28:	31 e0       	ldi	r19, 0x01	; 1
 a2a:	03 ea       	ldi	r16, 0xA3	; 163
 a2c:	11 e0       	ldi	r17, 0x01	; 1
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61

	unsigned char alternate = 0;
 a38:	80 e0       	ldi	r24, 0x00	; 0
SingleMatrix matrix;
SingleMatrix matrix2;
SingleMatrix blankMatrix;


int main(void) {
 a3a:	a8 e0       	ldi	r26, 0x08	; 8

	unsigned char alternate = 0;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
 a3c:	50 e0       	ldi	r21, 0x00	; 0
			else if (alternate == 0) alternate = 1;
 a3e:	41 e0       	ldi	r20, 0x01	; 1

	unsigned char alternate = 0;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
 a40:	75 2f       	mov	r23, r21
			else if (alternate == 0) alternate = 1;
 a42:	64 2f       	mov	r22, r20
 a44:	16 c0       	rjmp	.+44     	; 0xa72 <main+0xe2>
	matrix = clearSingleMatrix(matrix);

	unsigned char alternate = 0;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[i][j] = alternate;
 a46:	81 93       	st	Z+, r24
			if (alternate == 1) alternate = 0;
 a48:	81 30       	cpi	r24, 0x01	; 1
 a4a:	21 f0       	breq	.+8      	; 0xa54 <main+0xc4>
			else if (alternate == 0) alternate = 1;
 a4c:	81 11       	cpse	r24, r1
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <main+0xc6>
 a50:	86 2f       	mov	r24, r22
 a52:	01 c0       	rjmp	.+2      	; 0xa56 <main+0xc6>

	unsigned char alternate = 0;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
 a54:	87 2f       	mov	r24, r23
 a56:	91 50       	subi	r25, 0x01	; 1
	
	matrix = clearSingleMatrix(matrix);

	unsigned char alternate = 0;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
 a58:	b1 f7       	brne	.-20     	; 0xa46 <main+0xb6>
			matrix.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
		}
		if (alternate == 1) alternate = 0;
 a5a:	81 30       	cpi	r24, 0x01	; 1
 a5c:	21 f0       	breq	.+8      	; 0xa66 <main+0xd6>
		else if (alternate == 0) alternate = 1;
 a5e:	81 11       	cpse	r24, r1
 a60:	03 c0       	rjmp	.+6      	; 0xa68 <main+0xd8>
 a62:	84 2f       	mov	r24, r20
 a64:	01 c0       	rjmp	.+2      	; 0xa68 <main+0xd8>
		for (unsigned char j = 0; j < 8; j++) {
			matrix.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
		}
		if (alternate == 1) alternate = 0;
 a66:	85 2f       	mov	r24, r21
 a68:	28 5f       	subi	r18, 0xF8	; 248
 a6a:	3f 4f       	sbci	r19, 0xFF	; 255
	TimerOn();
	
	matrix = clearSingleMatrix(matrix);

	unsigned char alternate = 0;
	for (unsigned char i = 1; i < 7; i++) {
 a6c:	20 17       	cp	r18, r16
 a6e:	31 07       	cpc	r19, r17
 a70:	19 f0       	breq	.+6      	; 0xa78 <main+0xe8>
SingleMatrix matrix;
SingleMatrix matrix2;
SingleMatrix blankMatrix;


int main(void) {
 a72:	f9 01       	movw	r30, r18
 a74:	9a 2f       	mov	r25, r26
 a76:	e7 cf       	rjmp	.-50     	; 0xa46 <main+0xb6>
		}
		if (alternate == 1) alternate = 0;
		else if (alternate == 0) alternate = 1;
	}
	
	matrix2 = clearSingleMatrix(matrix2);
 a78:	ad b7       	in	r26, 0x3d	; 61
 a7a:	be b7       	in	r27, 0x3e	; 62
 a7c:	a0 54       	subi	r26, 0x40	; 64
 a7e:	b1 09       	sbc	r27, r1
 a80:	0f b6       	in	r0, 0x3f	; 63
 a82:	f8 94       	cli
 a84:	be bf       	out	0x3e, r27	; 62
 a86:	0f be       	out	0x3f, r0	; 63
 a88:	ad bf       	out	0x3d, r26	; 61
 a8a:	11 96       	adiw	r26, 0x01	; 1
 a8c:	80 e4       	ldi	r24, 0x40	; 64
 a8e:	eb ee       	ldi	r30, 0xEB	; 235
 a90:	f5 e0       	ldi	r31, 0x05	; 5
 a92:	01 90       	ld	r0, Z+
 a94:	0d 92       	st	X+, r0
 a96:	8a 95       	dec	r24
 a98:	e1 f7       	brne	.-8      	; 0xa92 <main+0x102>
 a9a:	ce 01       	movw	r24, r28
 a9c:	87 58       	subi	r24, 0x87	; 135
 a9e:	9f 4e       	sbci	r25, 0xEF	; 239
 aa0:	32 dc       	rcall	.-1948   	; 0x306 <clearSingleMatrix>
 aa2:	80 e4       	ldi	r24, 0x40	; 64
 aa4:	fe 01       	movw	r30, r28
 aa6:	e7 58       	subi	r30, 0x87	; 135
 aa8:	ff 4e       	sbci	r31, 0xEF	; 239
 aaa:	ab ee       	ldi	r26, 0xEB	; 235
 aac:	b5 e0       	ldi	r27, 0x05	; 5
 aae:	01 90       	ld	r0, Z+
 ab0:	0d 92       	st	X+, r0
 ab2:	8a 95       	dec	r24
 ab4:	e1 f7       	brne	.-8      	; 0xaae <main+0x11e>
 ab6:	23 ef       	ldi	r18, 0xF3	; 243
 ab8:	35 e0       	ldi	r19, 0x05	; 5
 aba:	03 e2       	ldi	r16, 0x23	; 35
 abc:	16 e0       	ldi	r17, 0x06	; 6
 abe:	0f b6       	in	r0, 0x3f	; 63
 ac0:	f8 94       	cli
 ac2:	de bf       	out	0x3e, r29	; 62
 ac4:	0f be       	out	0x3f, r0	; 63
 ac6:	cd bf       	out	0x3d, r28	; 61
	alternate = 1;
 ac8:	81 e0       	ldi	r24, 0x01	; 1
	TimerSet(1);
	TimerOn();
	
	matrix = clearSingleMatrix(matrix);

	unsigned char alternate = 0;
 aca:	a8 e0       	ldi	r26, 0x08	; 8
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix2.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
 acc:	50 e0       	ldi	r21, 0x00	; 0
			else if (alternate == 0) alternate = 1;
 ace:	41 e0       	ldi	r20, 0x01	; 1
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix2.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
 ad0:	75 2f       	mov	r23, r21
			else if (alternate == 0) alternate = 1;
 ad2:	64 2f       	mov	r22, r20
 ad4:	16 c0       	rjmp	.+44     	; 0xb02 <main+0x172>
	
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix2.m[i][j] = alternate;
 ad6:	81 93       	st	Z+, r24
			if (alternate == 1) alternate = 0;
 ad8:	81 30       	cpi	r24, 0x01	; 1
 ada:	21 f0       	breq	.+8      	; 0xae4 <main+0x154>
			else if (alternate == 0) alternate = 1;
 adc:	81 11       	cpse	r24, r1
 ade:	03 c0       	rjmp	.+6      	; 0xae6 <main+0x156>
 ae0:	86 2f       	mov	r24, r22
 ae2:	01 c0       	rjmp	.+2      	; 0xae6 <main+0x156>
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
			matrix2.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
 ae4:	87 2f       	mov	r24, r23
 ae6:	91 50       	subi	r25, 0x01	; 1
	}
	
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (unsigned char i = 1; i < 7; i++) {
		for (unsigned char j = 0; j < 8; j++) {
 ae8:	b1 f7       	brne	.-20     	; 0xad6 <main+0x146>
			matrix2.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
		}
		if (alternate == 1) alternate = 0;
 aea:	81 30       	cpi	r24, 0x01	; 1
 aec:	21 f0       	breq	.+8      	; 0xaf6 <main+0x166>
		else if (alternate == 0) alternate = 1;
 aee:	81 11       	cpse	r24, r1
 af0:	03 c0       	rjmp	.+6      	; 0xaf8 <main+0x168>
 af2:	84 2f       	mov	r24, r20
 af4:	01 c0       	rjmp	.+2      	; 0xaf8 <main+0x168>
		for (unsigned char j = 0; j < 8; j++) {
			matrix2.m[i][j] = alternate;
			if (alternate == 1) alternate = 0;
			else if (alternate == 0) alternate = 1;
		}
		if (alternate == 1) alternate = 0;
 af6:	85 2f       	mov	r24, r21
 af8:	28 5f       	subi	r18, 0xF8	; 248
 afa:	3f 4f       	sbci	r19, 0xFF	; 255
		else if (alternate == 0) alternate = 1;
	}
	
	matrix2 = clearSingleMatrix(matrix2);
	alternate = 1;
	for (unsigned char i = 1; i < 7; i++) {
 afc:	20 17       	cp	r18, r16
 afe:	31 07       	cpc	r19, r17
 b00:	19 f0       	breq	.+6      	; 0xb08 <main+0x178>
	TimerSet(1);
	TimerOn();
	
	matrix = clearSingleMatrix(matrix);

	unsigned char alternate = 0;
 b02:	f9 01       	movw	r30, r18
 b04:	9a 2f       	mov	r25, r26
 b06:	e7 cf       	rjmp	.-50     	; 0xad6 <main+0x146>
		}
		if (alternate == 1) alternate = 0;
		else if (alternate == 0) alternate = 1;
	}
	
	blankMatrix = clearSingleMatrix(blankMatrix);
 b08:	4d b7       	in	r20, 0x3d	; 61
 b0a:	5e b7       	in	r21, 0x3e	; 62
 b0c:	40 54       	subi	r20, 0x40	; 64
 b0e:	51 09       	sbc	r21, r1
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	f8 94       	cli
 b14:	5e bf       	out	0x3e, r21	; 62
 b16:	0f be       	out	0x3f, r0	; 63
 b18:	4d bf       	out	0x3d, r20	; 61
 b1a:	ad b7       	in	r26, 0x3d	; 61
 b1c:	be b7       	in	r27, 0x3e	; 62
 b1e:	11 96       	adiw	r26, 0x01	; 1
 b20:	80 e4       	ldi	r24, 0x40	; 64
 b22:	eb e2       	ldi	r30, 0x2B	; 43
 b24:	f1 e0       	ldi	r31, 0x01	; 1
 b26:	01 90       	ld	r0, Z+
 b28:	0d 92       	st	X+, r0
 b2a:	8a 95       	dec	r24
 b2c:	e1 f7       	brne	.-8      	; 0xb26 <main+0x196>
 b2e:	ce 01       	movw	r24, r28
 b30:	87 58       	subi	r24, 0x87	; 135
 b32:	9f 4e       	sbci	r25, 0xEF	; 239
 b34:	e8 db       	rcall	.-2096   	; 0x306 <clearSingleMatrix>
 b36:	80 e4       	ldi	r24, 0x40	; 64
 b38:	fe 01       	movw	r30, r28
 b3a:	e7 58       	subi	r30, 0x87	; 135
 b3c:	ff 4e       	sbci	r31, 0xEF	; 239
 b3e:	ab e2       	ldi	r26, 0x2B	; 43
 b40:	b1 e0       	ldi	r27, 0x01	; 1
 b42:	01 90       	ld	r0, Z+
 b44:	0d 92       	st	X+, r0
 b46:	8a 95       	dec	r24
 b48:	e1 f7       	brne	.-8      	; 0xb42 <main+0x1b2>
	
	explosions = initExplosions(explosions);
 b4a:	0f b6       	in	r0, 0x3f	; 63
 b4c:	f8 94       	cli
 b4e:	de bf       	out	0x3e, r29	; 62
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	cd bf       	out	0x3d, r28	; 61
 b54:	ad b7       	in	r26, 0x3d	; 61
 b56:	be b7       	in	r27, 0x3e	; 62
 b58:	ae 5f       	subi	r26, 0xFE	; 254
 b5a:	b3 40       	sbci	r27, 0x03	; 3
 b5c:	0f b6       	in	r0, 0x3f	; 63
 b5e:	f8 94       	cli
 b60:	be bf       	out	0x3e, r27	; 62
 b62:	0f be       	out	0x3f, r0	; 63
 b64:	ad bf       	out	0x3d, r26	; 61
 b66:	11 96       	adiw	r26, 0x01	; 1
 b68:	8e ef       	ldi	r24, 0xFE	; 254
 b6a:	93 e0       	ldi	r25, 0x03	; 3
 b6c:	eb ea       	ldi	r30, 0xAB	; 171
 b6e:	f1 e0       	ldi	r31, 0x01	; 1
 b70:	01 90       	ld	r0, Z+
 b72:	0d 92       	st	X+, r0
 b74:	01 97       	sbiw	r24, 0x01	; 1
 b76:	e1 f7       	brne	.-8      	; 0xb70 <main+0x1e0>
 b78:	ce 01       	movw	r24, r28
 b7a:	87 54       	subi	r24, 0x47	; 71
 b7c:	9f 4e       	sbci	r25, 0xEF	; 239
 b7e:	de dd       	rcall	.-1092   	; 0x73c <initExplosions>
 b80:	8e ef       	ldi	r24, 0xFE	; 254
 b82:	93 e0       	ldi	r25, 0x03	; 3
 b84:	fe 01       	movw	r30, r28
 b86:	e7 54       	subi	r30, 0x47	; 71
 b88:	ff 4e       	sbci	r31, 0xEF	; 239
 b8a:	ab ea       	ldi	r26, 0xAB	; 171
 b8c:	b1 e0       	ldi	r27, 0x01	; 1
 b8e:	01 90       	ld	r0, Z+
 b90:	0d 92       	st	X+, r0
 b92:	01 97       	sbiw	r24, 0x01	; 1
 b94:	e1 f7       	brne	.-8      	; 0xb8e <main+0x1fe>
 b96:	8e ef       	ldi	r24, 0xFE	; 254
 b98:	93 e0       	ldi	r25, 0x03	; 3
 b9a:	eb ea       	ldi	r30, 0xAB	; 171
 b9c:	f1 e0       	ldi	r31, 0x01	; 1
 b9e:	de 01       	movw	r26, r28
 ba0:	a5 50       	subi	r26, 0x05	; 5
 ba2:	b4 4f       	sbci	r27, 0xF4	; 244
 ba4:	01 90       	ld	r0, Z+
 ba6:	0d 92       	st	X+, r0
 ba8:	01 97       	sbiw	r24, 0x01	; 1
 baa:	e1 f7       	brne	.-8      	; 0xba4 <main+0x214>
 bac:	07 ea       	ldi	r16, 0xA7	; 167
 bae:	15 e0       	ldi	r17, 0x05	; 5
 bb0:	f8 01       	movw	r30, r16
 bb2:	20 81       	ld	r18, Z
 bb4:	80 e4       	ldi	r24, 0x40	; 64
 bb6:	eb e6       	ldi	r30, 0x6B	; 107
 bb8:	f1 e0       	ldi	r31, 0x01	; 1
 bba:	de 01       	movw	r26, r28
 bbc:	a7 5c       	subi	r26, 0xC7	; 199
 bbe:	bf 4e       	sbci	r27, 0xEF	; 239
 bc0:	01 90       	ld	r0, Z+
 bc2:	0d 92       	st	X+, r0
 bc4:	8a 95       	dec	r24
 bc6:	e1 f7       	brne	.-8      	; 0xbc0 <main+0x230>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned short a, unsigned short b) {
	explosions.matricies[explosions.index] = matrix;
 bc8:	82 2f       	mov	r24, r18
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	ab ef       	ldi	r26, 0xFB	; 251
 bce:	bb e0       	ldi	r27, 0x0B	; 11
 bd0:	ac 0f       	add	r26, r28
 bd2:	bd 1f       	adc	r27, r29
 bd4:	f0 e4       	ldi	r31, 0x40	; 64
 bd6:	2f 9f       	mul	r18, r31
 bd8:	a0 0d       	add	r26, r0
 bda:	b1 1d       	adc	r27, r1
 bdc:	11 24       	eor	r1, r1
 bde:	30 e4       	ldi	r19, 0x40	; 64
 be0:	fe 01       	movw	r30, r28
 be2:	e7 5c       	subi	r30, 0xC7	; 199
 be4:	ff 4e       	sbci	r31, 0xEF	; 239
 be6:	01 90       	ld	r0, Z+
 be8:	0d 92       	st	X+, r0
 bea:	3a 95       	dec	r19
 bec:	e1 f7       	brne	.-8      	; 0xbe6 <main+0x256>
	explosions.timeBetween[explosions.index] = a;
 bee:	fc 01       	movw	r30, r24
 bf0:	e0 52       	subi	r30, 0x20	; 32
 bf2:	fe 4f       	sbci	r31, 0xFE	; 254
 bf4:	ee 0f       	add	r30, r30
 bf6:	ff 1f       	adc	r31, r31
 bf8:	4b ef       	ldi	r20, 0xFB	; 251
 bfa:	5b e0       	ldi	r21, 0x0B	; 11
 bfc:	4c 0f       	add	r20, r28
 bfe:	5d 1f       	adc	r21, r29
 c00:	e4 0f       	add	r30, r20
 c02:	f5 1f       	adc	r31, r21
 c04:	6e e5       	ldi	r22, 0x5E	; 94
 c06:	71 e0       	ldi	r23, 0x01	; 1
 c08:	71 83       	std	Z+1, r23	; 0x01
 c0a:	60 83       	st	Z, r22
	explosions.timeDuration[explosions.index] = b;
 c0c:	fc 01       	movw	r30, r24
 c0e:	e1 51       	subi	r30, 0x11	; 17
 c10:	fe 4f       	sbci	r31, 0xFE	; 254
 c12:	ee 0f       	add	r30, r30
 c14:	ff 1f       	adc	r31, r31
 c16:	e4 0f       	add	r30, r20
 c18:	f5 1f       	adc	r31, r21
 c1a:	48 ec       	ldi	r20, 0xC8	; 200
 c1c:	50 e0       	ldi	r21, 0x00	; 0
 c1e:	51 83       	std	Z+1, r21	; 0x01
 c20:	40 83       	st	Z, r20
	explosions.index++;
 c22:	2f 5f       	subi	r18, 0xFF	; 255
	
	return explosions;
 c24:	c9 50       	subi	r28, 0x09	; 9
 c26:	d0 4f       	sbci	r29, 0xF0	; 240
 c28:	28 83       	st	Y, r18
 c2a:	c7 5f       	subi	r28, 0xF7	; 247
 c2c:	df 40       	sbci	r29, 0x0F	; 15
 c2e:	8e ef       	ldi	r24, 0xFE	; 254
 c30:	93 e0       	ldi	r25, 0x03	; 3
 c32:	fe 01       	movw	r30, r28
 c34:	e5 50       	subi	r30, 0x05	; 5
 c36:	f4 4f       	sbci	r31, 0xF4	; 244
 c38:	de 01       	movw	r26, r28
 c3a:	a3 50       	subi	r26, 0x03	; 3
 c3c:	b8 4f       	sbci	r27, 0xF8	; 248
 c3e:	01 90       	ld	r0, Z+
 c40:	0d 92       	st	X+, r0
 c42:	01 97       	sbiw	r24, 0x01	; 1
 c44:	e1 f7       	brne	.-8      	; 0xc3e <main+0x2ae>
	explosions = pushExplosion(explosions, matrix, 350, 200);
 c46:	c7 50       	subi	r28, 0x07	; 7
 c48:	d4 4f       	sbci	r29, 0xF4	; 244
 c4a:	28 83       	st	Y, r18
 c4c:	c9 5f       	subi	r28, 0xF9	; 249
 c4e:	db 40       	sbci	r29, 0x0B	; 11
 c50:	8e ef       	ldi	r24, 0xFE	; 254
 c52:	93 e0       	ldi	r25, 0x03	; 3
 c54:	fe 01       	movw	r30, r28
 c56:	e3 50       	subi	r30, 0x03	; 3
 c58:	f8 4f       	sbci	r31, 0xF8	; 248
 c5a:	ab ea       	ldi	r26, 0xAB	; 171
 c5c:	b1 e0       	ldi	r27, 0x01	; 1
 c5e:	01 90       	ld	r0, Z+
 c60:	0d 92       	st	X+, r0
 c62:	01 97       	sbiw	r24, 0x01	; 1
 c64:	e1 f7       	brne	.-8      	; 0xc5e <main+0x2ce>
 c66:	8e ef       	ldi	r24, 0xFE	; 254
 c68:	93 e0       	ldi	r25, 0x03	; 3
 c6a:	eb ea       	ldi	r30, 0xAB	; 171
 c6c:	f1 e0       	ldi	r31, 0x01	; 1
 c6e:	de 01       	movw	r26, r28
 c70:	a1 50       	subi	r26, 0x01	; 1
 c72:	bc 4f       	sbci	r27, 0xFC	; 252
 c74:	01 90       	ld	r0, Z+
 c76:	0d 92       	st	X+, r0
 c78:	01 97       	sbiw	r24, 0x01	; 1
 c7a:	e1 f7       	brne	.-8      	; 0xc74 <main+0x2e4>
 c7c:	d8 01       	movw	r26, r16
 c7e:	2c 91       	ld	r18, X
 c80:	80 e4       	ldi	r24, 0x40	; 64
 c82:	eb ee       	ldi	r30, 0xEB	; 235
 c84:	f5 e0       	ldi	r31, 0x05	; 5
 c86:	de 01       	movw	r26, r28
 c88:	a7 50       	subi	r26, 0x07	; 7
 c8a:	b0 4f       	sbci	r27, 0xF0	; 240
 c8c:	01 90       	ld	r0, Z+
 c8e:	0d 92       	st	X+, r0
 c90:	8a 95       	dec	r24
 c92:	e1 f7       	brne	.-8      	; 0xc8c <main+0x2fc>
	
	return explosions;
}

Explosions pushExplosion(Explosions explosions, SingleMatrix matrix, unsigned short a, unsigned short b) {
	explosions.matricies[explosions.index] = matrix;
 c94:	82 2f       	mov	r24, r18
 c96:	90 e0       	ldi	r25, 0x00	; 0
 c98:	af ef       	ldi	r26, 0xFF	; 255
 c9a:	b3 e0       	ldi	r27, 0x03	; 3
 c9c:	ac 0f       	add	r26, r28
 c9e:	bd 1f       	adc	r27, r29
 ca0:	e0 e4       	ldi	r30, 0x40	; 64
 ca2:	2e 9f       	mul	r18, r30
 ca4:	a0 0d       	add	r26, r0
 ca6:	b1 1d       	adc	r27, r1
 ca8:	11 24       	eor	r1, r1
 caa:	30 e4       	ldi	r19, 0x40	; 64
 cac:	fe 01       	movw	r30, r28
 cae:	e7 50       	subi	r30, 0x07	; 7
 cb0:	f0 4f       	sbci	r31, 0xF0	; 240
 cb2:	01 90       	ld	r0, Z+
 cb4:	0d 92       	st	X+, r0
 cb6:	3a 95       	dec	r19
 cb8:	e1 f7       	brne	.-8      	; 0xcb2 <main+0x322>
	explosions.timeBetween[explosions.index] = a;
 cba:	fc 01       	movw	r30, r24
 cbc:	e0 52       	subi	r30, 0x20	; 32
 cbe:	fe 4f       	sbci	r31, 0xFE	; 254
 cc0:	ee 0f       	add	r30, r30
 cc2:	ff 1f       	adc	r31, r31
 cc4:	af ef       	ldi	r26, 0xFF	; 255
 cc6:	b3 e0       	ldi	r27, 0x03	; 3
 cc8:	ac 0f       	add	r26, r28
 cca:	bd 1f       	adc	r27, r29
 ccc:	ea 0f       	add	r30, r26
 cce:	fb 1f       	adc	r31, r27
 cd0:	71 83       	std	Z+1, r23	; 0x01
 cd2:	60 83       	st	Z, r22
	explosions.timeDuration[explosions.index] = b;
 cd4:	fc 01       	movw	r30, r24
 cd6:	e1 51       	subi	r30, 0x11	; 17
 cd8:	fe 4f       	sbci	r31, 0xFE	; 254
 cda:	ee 0f       	add	r30, r30
 cdc:	ff 1f       	adc	r31, r31
 cde:	ea 0f       	add	r30, r26
 ce0:	fb 1f       	adc	r31, r27
 ce2:	51 83       	std	Z+1, r21	; 0x01
 ce4:	40 83       	st	Z, r20
	explosions.index++;
 ce6:	2f 5f       	subi	r18, 0xFF	; 255
	
	return explosions;
 ce8:	c5 50       	subi	r28, 0x05	; 5
 cea:	d8 4f       	sbci	r29, 0xF8	; 248
 cec:	28 83       	st	Y, r18
 cee:	cb 5f       	subi	r28, 0xFB	; 251
 cf0:	d7 40       	sbci	r29, 0x07	; 7
 cf2:	8e ef       	ldi	r24, 0xFE	; 254
 cf4:	93 e0       	ldi	r25, 0x03	; 3
 cf6:	fd 01       	movw	r30, r26
 cf8:	ae 5f       	subi	r26, 0xFE	; 254
 cfa:	b3 40       	sbci	r27, 0x03	; 3
 cfc:	01 90       	ld	r0, Z+
 cfe:	0d 92       	st	X+, r0
 d00:	01 97       	sbiw	r24, 0x01	; 1
 d02:	e1 f7       	brne	.-8      	; 0xcfc <main+0x36c>
	explosions = pushExplosion(explosions, matrix2, 350, 200);
 d04:	c3 50       	subi	r28, 0x03	; 3
 d06:	dc 4f       	sbci	r29, 0xFC	; 252
 d08:	28 83       	st	Y, r18
 d0a:	cd 5f       	subi	r28, 0xFD	; 253
 d0c:	d3 40       	sbci	r29, 0x03	; 3
 d0e:	8e ef       	ldi	r24, 0xFE	; 254
 d10:	93 e0       	ldi	r25, 0x03	; 3
 d12:	fe 01       	movw	r30, r28
 d14:	31 96       	adiw	r30, 0x01	; 1
 d16:	ab ea       	ldi	r26, 0xAB	; 171
 d18:	b1 e0       	ldi	r27, 0x01	; 1
 d1a:	01 90       	ld	r0, Z+
 d1c:	0d 92       	st	X+, r0
 d1e:	01 97       	sbiw	r24, 0x01	; 1
 d20:	e1 f7       	brne	.-8      	; 0xd1a <main+0x38a>
	
	userMatrix = initSingleUserMatrix(userMatrix);
 d22:	0f b6       	in	r0, 0x3f	; 63
 d24:	f8 94       	cli
 d26:	de bf       	out	0x3e, r29	; 62
 d28:	0f be       	out	0x3f, r0	; 63
 d2a:	cd bf       	out	0x3d, r28	; 61
 d2c:	4d b7       	in	r20, 0x3d	; 61
 d2e:	5e b7       	in	r21, 0x3e	; 62
 d30:	42 54       	subi	r20, 0x42	; 66
 d32:	51 09       	sbc	r21, r1
 d34:	0f b6       	in	r0, 0x3f	; 63
 d36:	f8 94       	cli
 d38:	5e bf       	out	0x3e, r21	; 62
 d3a:	0f be       	out	0x3f, r0	; 63
 d3c:	4d bf       	out	0x3d, r20	; 61
 d3e:	ad b7       	in	r26, 0x3d	; 61
 d40:	be b7       	in	r27, 0x3e	; 62
 d42:	11 96       	adiw	r26, 0x01	; 1
 d44:	82 e4       	ldi	r24, 0x42	; 66
 d46:	e9 ea       	ldi	r30, 0xA9	; 169
 d48:	f5 e0       	ldi	r31, 0x05	; 5
 d4a:	01 90       	ld	r0, Z+
 d4c:	0d 92       	st	X+, r0
 d4e:	8a 95       	dec	r24
 d50:	e1 f7       	brne	.-8      	; 0xd4a <main+0x3ba>
 d52:	ce 01       	movw	r24, r28
 d54:	87 58       	subi	r24, 0x87	; 135
 d56:	9f 4e       	sbci	r25, 0xEF	; 239
 d58:	00 db       	rcall	.-2560   	; 0x35a <initSingleUserMatrix>
 d5a:	82 e4       	ldi	r24, 0x42	; 66
 d5c:	fe 01       	movw	r30, r28
 d5e:	e7 58       	subi	r30, 0x87	; 135
 d60:	ff 4e       	sbci	r31, 0xEF	; 239
 d62:	a9 ea       	ldi	r26, 0xA9	; 169
 d64:	b5 e0       	ldi	r27, 0x05	; 5
 d66:	01 90       	ld	r0, Z+
 d68:	0d 92       	st	X+, r0
 d6a:	8a 95       	dec	r24
 d6c:	e1 f7       	brne	.-8      	; 0xd66 <main+0x3d6>
 d6e:	0f b6       	in	r0, 0x3f	; 63
 d70:	f8 94       	cli
 d72:	de bf       	out	0x3e, r29	; 62
 d74:	0f be       	out	0x3f, r0	; 63
 d76:	cd bf       	out	0x3d, r28	; 61
	
	while (1) {
		//d3_setMatrix(explosions.matricies[0]);
		explosions = ExpTick(explosions);
 d78:	0e ef       	ldi	r16, 0xFE	; 254
 d7a:	13 e0       	ldi	r17, 0x03	; 3
 d7c:	ad b7       	in	r26, 0x3d	; 61
 d7e:	be b7       	in	r27, 0x3e	; 62
 d80:	ae 5f       	subi	r26, 0xFE	; 254
 d82:	b3 40       	sbci	r27, 0x03	; 3
 d84:	0f b6       	in	r0, 0x3f	; 63
 d86:	f8 94       	cli
 d88:	be bf       	out	0x3e, r27	; 62
 d8a:	0f be       	out	0x3f, r0	; 63
 d8c:	ad bf       	out	0x3d, r26	; 61
 d8e:	11 96       	adiw	r26, 0x01	; 1
 d90:	eb ea       	ldi	r30, 0xAB	; 171
 d92:	f1 e0       	ldi	r31, 0x01	; 1
 d94:	c8 01       	movw	r24, r16
 d96:	01 90       	ld	r0, Z+
 d98:	0d 92       	st	X+, r0
 d9a:	01 97       	sbiw	r24, 0x01	; 1
 d9c:	e1 f7       	brne	.-8      	; 0xd96 <main+0x406>
 d9e:	ce 01       	movw	r24, r28
 da0:	87 58       	subi	r24, 0x87	; 135
 da2:	9f 4e       	sbci	r25, 0xEF	; 239
 da4:	3f dd       	rcall	.-1410   	; 0x824 <ExpTick>
 da6:	fe 01       	movw	r30, r28
 da8:	e7 58       	subi	r30, 0x87	; 135
 daa:	ff 4e       	sbci	r31, 0xEF	; 239
 dac:	ab ea       	ldi	r26, 0xAB	; 171
 dae:	b1 e0       	ldi	r27, 0x01	; 1
 db0:	c8 01       	movw	r24, r16
 db2:	01 90       	ld	r0, Z+
 db4:	0d 92       	st	X+, r0
 db6:	01 97       	sbiw	r24, 0x01	; 1
 db8:	e1 f7       	brne	.-8      	; 0xdb2 <main+0x422>
		DeathTick();
 dba:	0f b6       	in	r0, 0x3f	; 63
 dbc:	f8 94       	cli
 dbe:	de bf       	out	0x3e, r29	; 62
 dc0:	0f be       	out	0x3f, r0	; 63
 dc2:	cd bf       	out	0x3d, r28	; 61
 dc4:	d6 dc       	rcall	.-1620   	; 0x772 <DeathTick>
		d3_setMatrixColor(userMatrix.m, GREEN);
 dc6:	62 e0       	ldi	r22, 0x02	; 2
 dc8:	89 ea       	ldi	r24, 0xA9	; 169
 dca:	95 e0       	ldi	r25, 0x05	; 5
 dcc:	6f db       	rcall	.-2338   	; 0x4ac <d3_setMatrixColor>
	}
 dce:	d6 cf       	rjmp	.-84     	; 0xd7c <main+0x3ec>

00000dd0 <_exit>:
 dd0:	f8 94       	cli

00000dd2 <__stop_program>:
 dd2:	ff cf       	rjmp	.-2      	; 0xdd2 <__stop_program>
