
scbound1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000e3e  00000ed2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  00800152  00800152  00000f24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001727  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000355  00000000  00000000  000027cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000113d  00000000  00000000  00002b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00003c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c3  00000000  00000000  00003efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f79  00000000  00000000  000043bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005338  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	82 c1       	rjmp	.+772    	; 0x33a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e3       	ldi	r30, 0x3E	; 62
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 35       	cpi	r26, 0x52	; 82
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e5       	ldi	r26, 0x52	; 82
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 39       	cpi	r26, 0x90	; 144
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	57 d2       	rcall	.+1198   	; 0x572 <main>
  c4:	ba c6       	rjmp	.+3444   	; 0xe3a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f0       	breq	.+32     	; 0xec <initUSART+0x24>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24
  e6:	10 92 c5 00 	sts	0x00C5, r1
  ea:	08 95       	ret
  ec:	e9 ec       	ldi	r30, 0xC9	; 201
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	ea ec       	ldi	r30, 0xCA	; 202
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	80 93 cc 00 	sts	0x00CC, r24
 106:	10 92 cd 00 	sts	0x00CD, r1
 10a:	08 95       	ret

0000010c <USART_Send>:
 10c:	61 30       	cpi	r22, 0x01	; 1
 10e:	41 f0       	breq	.+16     	; 0x120 <USART_Send+0x14>
 110:	e0 ec       	ldi	r30, 0xC0	; 192
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	90 81       	ld	r25, Z
 116:	95 ff       	sbrs	r25, 5
 118:	fd cf       	rjmp	.-6      	; 0x114 <USART_Send+0x8>
 11a:	80 93 c6 00 	sts	0x00C6, r24
 11e:	08 95       	ret
 120:	e8 ec       	ldi	r30, 0xC8	; 200
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	95 ff       	sbrs	r25, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <USART_Send+0x18>
 12a:	80 93 ce 00 	sts	0x00CE, r24
 12e:	08 95       	ret

00000130 <USART_Receive>:
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	41 f0       	breq	.+16     	; 0x144 <USART_Receive+0x14>
 134:	e0 ec       	ldi	r30, 0xC0	; 192
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	ec f7       	brge	.-6      	; 0x138 <USART_Receive+0x8>
 13e:	80 91 c6 00 	lds	r24, 0x00C6
 142:	08 95       	ret
 144:	e8 ec       	ldi	r30, 0xC8	; 200
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	88 23       	and	r24, r24
 14c:	ec f7       	brge	.-6      	; 0x148 <USART_Receive+0x18>
 14e:	80 91 ce 00 	lds	r24, 0x00CE
 152:	08 95       	ret

00000154 <GetKeypadKey>:
 154:	8f ee       	ldi	r24, 0xEF	; 239
 156:	88 b9       	out	0x08, r24	; 8
 158:	00 00       	nop
 15a:	30 9b       	sbis	0x06, 0	; 6
 15c:	29 c0       	rjmp	.+82     	; 0x1b0 <GetKeypadKey+0x5c>
 15e:	31 9b       	sbis	0x06, 1	; 6
 160:	29 c0       	rjmp	.+82     	; 0x1b4 <GetKeypadKey+0x60>
 162:	32 9b       	sbis	0x06, 2	; 6
 164:	29 c0       	rjmp	.+82     	; 0x1b8 <GetKeypadKey+0x64>
 166:	33 9b       	sbis	0x06, 3	; 6
 168:	29 c0       	rjmp	.+82     	; 0x1bc <GetKeypadKey+0x68>
 16a:	8f ed       	ldi	r24, 0xDF	; 223
 16c:	88 b9       	out	0x08, r24	; 8
 16e:	00 00       	nop
 170:	30 9b       	sbis	0x06, 0	; 6
 172:	26 c0       	rjmp	.+76     	; 0x1c0 <GetKeypadKey+0x6c>
 174:	31 9b       	sbis	0x06, 1	; 6
 176:	26 c0       	rjmp	.+76     	; 0x1c4 <GetKeypadKey+0x70>
 178:	32 9b       	sbis	0x06, 2	; 6
 17a:	26 c0       	rjmp	.+76     	; 0x1c8 <GetKeypadKey+0x74>
 17c:	33 9b       	sbis	0x06, 3	; 6
 17e:	26 c0       	rjmp	.+76     	; 0x1cc <GetKeypadKey+0x78>
 180:	8f eb       	ldi	r24, 0xBF	; 191
 182:	88 b9       	out	0x08, r24	; 8
 184:	00 00       	nop
 186:	30 9b       	sbis	0x06, 0	; 6
 188:	23 c0       	rjmp	.+70     	; 0x1d0 <GetKeypadKey+0x7c>
 18a:	31 9b       	sbis	0x06, 1	; 6
 18c:	23 c0       	rjmp	.+70     	; 0x1d4 <GetKeypadKey+0x80>
 18e:	32 9b       	sbis	0x06, 2	; 6
 190:	23 c0       	rjmp	.+70     	; 0x1d8 <GetKeypadKey+0x84>
 192:	33 9b       	sbis	0x06, 3	; 6
 194:	23 c0       	rjmp	.+70     	; 0x1dc <GetKeypadKey+0x88>
 196:	8f e7       	ldi	r24, 0x7F	; 127
 198:	88 b9       	out	0x08, r24	; 8
 19a:	00 00       	nop
 19c:	30 9b       	sbis	0x06, 0	; 6
 19e:	20 c0       	rjmp	.+64     	; 0x1e0 <GetKeypadKey+0x8c>
 1a0:	31 9b       	sbis	0x06, 1	; 6
 1a2:	20 c0       	rjmp	.+64     	; 0x1e4 <GetKeypadKey+0x90>
 1a4:	32 9b       	sbis	0x06, 2	; 6
 1a6:	20 c0       	rjmp	.+64     	; 0x1e8 <GetKeypadKey+0x94>
 1a8:	33 9b       	sbis	0x06, 3	; 6
 1aa:	20 c0       	rjmp	.+64     	; 0x1ec <GetKeypadKey+0x98>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	08 95       	ret
 1b0:	81 e3       	ldi	r24, 0x31	; 49
 1b2:	08 95       	ret
 1b4:	84 e3       	ldi	r24, 0x34	; 52
 1b6:	08 95       	ret
 1b8:	87 e3       	ldi	r24, 0x37	; 55
 1ba:	08 95       	ret
 1bc:	8a e2       	ldi	r24, 0x2A	; 42
 1be:	08 95       	ret
 1c0:	82 e3       	ldi	r24, 0x32	; 50
 1c2:	08 95       	ret
 1c4:	85 e3       	ldi	r24, 0x35	; 53
 1c6:	08 95       	ret
 1c8:	88 e3       	ldi	r24, 0x38	; 56
 1ca:	08 95       	ret
 1cc:	80 e3       	ldi	r24, 0x30	; 48
 1ce:	08 95       	ret
 1d0:	83 e3       	ldi	r24, 0x33	; 51
 1d2:	08 95       	ret
 1d4:	86 e3       	ldi	r24, 0x36	; 54
 1d6:	08 95       	ret
 1d8:	89 e3       	ldi	r24, 0x39	; 57
 1da:	08 95       	ret
 1dc:	83 e2       	ldi	r24, 0x23	; 35
 1de:	08 95       	ret
 1e0:	81 e4       	ldi	r24, 0x41	; 65
 1e2:	08 95       	ret
 1e4:	82 e4       	ldi	r24, 0x42	; 66
 1e6:	08 95       	ret
 1e8:	83 e4       	ldi	r24, 0x43	; 67
 1ea:	08 95       	ret
 1ec:	84 e4       	ldi	r24, 0x44	; 68
 1ee:	08 95       	ret

000001f0 <initTasks>:
 1f0:	e7 e5       	ldi	r30, 0x57	; 87
 1f2:	f1 e0       	ldi	r31, 0x01	; 1
 1f4:	11 82       	std	Z+1, r1	; 0x01
 1f6:	10 82       	st	Z, r1
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	a0 e0       	ldi	r26, 0x00	; 0
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	82 83       	std	Z+2, r24	; 0x02
 202:	93 83       	std	Z+3, r25	; 0x03
 204:	a4 83       	std	Z+4, r26	; 0x04
 206:	b5 83       	std	Z+5, r27	; 0x05
 208:	86 83       	std	Z+6, r24	; 0x06
 20a:	97 83       	std	Z+7, r25	; 0x07
 20c:	a0 87       	std	Z+8, r26	; 0x08
 20e:	b1 87       	std	Z+9, r27	; 0x09
 210:	81 e9       	ldi	r24, 0x91	; 145
 212:	95 e0       	ldi	r25, 0x05	; 5
 214:	93 87       	std	Z+11, r25	; 0x0b
 216:	82 87       	std	Z+10, r24	; 0x0a
 218:	15 86       	std	Z+13, r1	; 0x0d
 21a:	14 86       	std	Z+12, r1	; 0x0c
 21c:	84 e1       	ldi	r24, 0x14	; 20
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	a0 e0       	ldi	r26, 0x00	; 0
 222:	b0 e0       	ldi	r27, 0x00	; 0
 224:	86 87       	std	Z+14, r24	; 0x0e
 226:	97 87       	std	Z+15, r25	; 0x0f
 228:	a0 8b       	std	Z+16, r26	; 0x10
 22a:	b1 8b       	std	Z+17, r27	; 0x11
 22c:	12 8a       	std	Z+18, r1	; 0x12
 22e:	13 8a       	std	Z+19, r1	; 0x13
 230:	14 8a       	std	Z+20, r1	; 0x14
 232:	15 8a       	std	Z+21, r1	; 0x15
 234:	25 e4       	ldi	r18, 0x45	; 69
 236:	32 e0       	ldi	r19, 0x02	; 2
 238:	37 8b       	std	Z+23, r19	; 0x17
 23a:	26 8b       	std	Z+22, r18	; 0x16
 23c:	11 8e       	std	Z+25, r1	; 0x19
 23e:	10 8e       	std	Z+24, r1	; 0x18
 240:	82 8f       	std	Z+26, r24	; 0x1a
 242:	93 8f       	std	Z+27, r25	; 0x1b
 244:	a4 8f       	std	Z+28, r26	; 0x1c
 246:	b5 8f       	std	Z+29, r27	; 0x1d
 248:	86 8f       	std	Z+30, r24	; 0x1e
 24a:	97 8f       	std	Z+31, r25	; 0x1f
 24c:	a0 a3       	std	Z+32, r26	; 0x20
 24e:	b1 a3       	std	Z+33, r27	; 0x21
 250:	29 e1       	ldi	r18, 0x19	; 25
 252:	33 e0       	ldi	r19, 0x03	; 3
 254:	33 a3       	std	Z+35, r19	; 0x23
 256:	22 a3       	std	Z+34, r18	; 0x22
 258:	15 a2       	std	Z+37, r1	; 0x25
 25a:	14 a2       	std	Z+36, r1	; 0x24
 25c:	86 a3       	std	Z+38, r24	; 0x26
 25e:	97 a3       	std	Z+39, r25	; 0x27
 260:	a0 a7       	std	Z+40, r26	; 0x28
 262:	b1 a7       	std	Z+41, r27	; 0x29
 264:	82 a7       	std	Z+42, r24	; 0x2a
 266:	93 a7       	std	Z+43, r25	; 0x2b
 268:	a4 a7       	std	Z+44, r26	; 0x2c
 26a:	b5 a7       	std	Z+45, r27	; 0x2d
 26c:	8a ec       	ldi	r24, 0xCA	; 202
 26e:	93 e0       	ldi	r25, 0x03	; 3
 270:	97 a7       	std	Z+47, r25	; 0x2f
 272:	86 a7       	std	Z+46, r24	; 0x2e
 274:	08 95       	ret

00000276 <TimerOn>:
 276:	8b e0       	ldi	r24, 0x0B	; 11
 278:	80 93 81 00 	sts	0x0081, r24
 27c:	8d e7       	ldi	r24, 0x7D	; 125
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	90 93 89 00 	sts	0x0089, r25
 284:	80 93 88 00 	sts	0x0088, r24
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	80 93 6f 00 	sts	0x006F, r24
 28e:	10 92 85 00 	sts	0x0085, r1
 292:	10 92 84 00 	sts	0x0084, r1
 296:	80 91 00 01 	lds	r24, 0x0100
 29a:	90 91 01 01 	lds	r25, 0x0101
 29e:	a0 91 02 01 	lds	r26, 0x0102
 2a2:	b0 91 03 01 	lds	r27, 0x0103
 2a6:	80 93 53 01 	sts	0x0153, r24
 2aa:	90 93 54 01 	sts	0x0154, r25
 2ae:	a0 93 55 01 	sts	0x0155, r26
 2b2:	b0 93 56 01 	sts	0x0156, r27
 2b6:	8f b7       	in	r24, 0x3f	; 63
 2b8:	80 68       	ori	r24, 0x80	; 128
 2ba:	8f bf       	out	0x3f, r24	; 63
 2bc:	08 95       	ret

000002be <TimerISR>:
 2be:	ef 92       	push	r14
 2c0:	ff 92       	push	r15
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	c7 e5       	ldi	r28, 0x57	; 87
 2cc:	d1 e0       	ldi	r29, 0x01	; 1
 2ce:	0f 2e       	mov	r0, r31
 2d0:	f7 e8       	ldi	r31, 0x87	; 135
 2d2:	ef 2e       	mov	r14, r31
 2d4:	f1 e0       	ldi	r31, 0x01	; 1
 2d6:	ff 2e       	mov	r15, r31
 2d8:	f0 2d       	mov	r31, r0
 2da:	8e 01       	movw	r16, r28
 2dc:	4e 81       	ldd	r20, Y+6	; 0x06
 2de:	5f 81       	ldd	r21, Y+7	; 0x07
 2e0:	68 85       	ldd	r22, Y+8	; 0x08
 2e2:	79 85       	ldd	r23, Y+9	; 0x09
 2e4:	8a 81       	ldd	r24, Y+2	; 0x02
 2e6:	9b 81       	ldd	r25, Y+3	; 0x03
 2e8:	ac 81       	ldd	r26, Y+4	; 0x04
 2ea:	bd 81       	ldd	r27, Y+5	; 0x05
 2ec:	48 17       	cp	r20, r24
 2ee:	59 07       	cpc	r21, r25
 2f0:	6a 07       	cpc	r22, r26
 2f2:	7b 07       	cpc	r23, r27
 2f4:	58 f0       	brcs	.+22     	; 0x30c <TimerISR+0x4e>
 2f6:	ea 85       	ldd	r30, Y+10	; 0x0a
 2f8:	fb 85       	ldd	r31, Y+11	; 0x0b
 2fa:	88 81       	ld	r24, Y
 2fc:	99 81       	ldd	r25, Y+1	; 0x01
 2fe:	09 95       	icall
 300:	99 83       	std	Y+1, r25	; 0x01
 302:	88 83       	st	Y, r24
 304:	1e 82       	std	Y+6, r1	; 0x06
 306:	1f 82       	std	Y+7, r1	; 0x07
 308:	18 86       	std	Y+8, r1	; 0x08
 30a:	19 86       	std	Y+9, r1	; 0x09
 30c:	f8 01       	movw	r30, r16
 30e:	86 81       	ldd	r24, Z+6	; 0x06
 310:	97 81       	ldd	r25, Z+7	; 0x07
 312:	a0 85       	ldd	r26, Z+8	; 0x08
 314:	b1 85       	ldd	r27, Z+9	; 0x09
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	a1 1d       	adc	r26, r1
 31a:	b1 1d       	adc	r27, r1
 31c:	86 83       	std	Z+6, r24	; 0x06
 31e:	97 83       	std	Z+7, r25	; 0x07
 320:	a0 87       	std	Z+8, r26	; 0x08
 322:	b1 87       	std	Z+9, r27	; 0x09
 324:	2c 96       	adiw	r28, 0x0c	; 12
 326:	ce 15       	cp	r28, r14
 328:	df 05       	cpc	r29, r15
 32a:	b9 f6       	brne	.-82     	; 0x2da <TimerISR+0x1c>
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	08 95       	ret

0000033a <__vector_13>:
}

ISR(TIMER1_COMPA_vect) {
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	0b b6       	in	r0, 0x3b	; 59
 346:	0f 92       	push	r0
 348:	2f 93       	push	r18
 34a:	3f 93       	push	r19
 34c:	4f 93       	push	r20
 34e:	5f 93       	push	r21
 350:	6f 93       	push	r22
 352:	7f 93       	push	r23
 354:	8f 93       	push	r24
 356:	9f 93       	push	r25
 358:	af 93       	push	r26
 35a:	bf 93       	push	r27
 35c:	ef 93       	push	r30
 35e:	ff 93       	push	r31
	_avr_timer_cntcurr--;
 360:	80 91 53 01 	lds	r24, 0x0153
 364:	90 91 54 01 	lds	r25, 0x0154
 368:	a0 91 55 01 	lds	r26, 0x0155
 36c:	b0 91 56 01 	lds	r27, 0x0156
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	a1 09       	sbc	r26, r1
 374:	b1 09       	sbc	r27, r1
 376:	80 93 53 01 	sts	0x0153, r24
 37a:	90 93 54 01 	sts	0x0154, r25
 37e:	a0 93 55 01 	sts	0x0155, r26
 382:	b0 93 56 01 	sts	0x0156, r27
	if (_avr_timer_cntcurr == 0) {
 386:	89 2b       	or	r24, r25
 388:	8a 2b       	or	r24, r26
 38a:	8b 2b       	or	r24, r27
 38c:	89 f4       	brne	.+34     	; 0x3b0 <__vector_13+0x76>
		TimerISR();
 38e:	97 df       	rcall	.-210    	; 0x2be <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 390:	80 91 00 01 	lds	r24, 0x0100
 394:	90 91 01 01 	lds	r25, 0x0101
 398:	a0 91 02 01 	lds	r26, 0x0102
 39c:	b0 91 03 01 	lds	r27, 0x0103
 3a0:	80 93 53 01 	sts	0x0153, r24
 3a4:	90 93 54 01 	sts	0x0154, r25
 3a8:	a0 93 55 01 	sts	0x0155, r26
 3ac:	b0 93 56 01 	sts	0x0156, r27
	}
}
 3b0:	ff 91       	pop	r31
 3b2:	ef 91       	pop	r30
 3b4:	bf 91       	pop	r27
 3b6:	af 91       	pop	r26
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	7f 91       	pop	r23
 3be:	6f 91       	pop	r22
 3c0:	5f 91       	pop	r21
 3c2:	4f 91       	pop	r20
 3c4:	3f 91       	pop	r19
 3c6:	2f 91       	pop	r18
 3c8:	0f 90       	pop	r0
 3ca:	0b be       	out	0x3b, r0	; 59
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 3d6:	18 16       	cp	r1, r24
 3d8:	19 06       	cpc	r1, r25
 3da:	5c f0       	brlt	.+22     	; 0x3f2 <delay_ms+0x1c>
 3dc:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 3de:	00 00       	nop
 3e0:	21 50       	subi	r18, 0x01	; 1
 3e2:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 3e4:	e1 f7       	brne	.-8      	; 0x3de <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 3e6:	4f 5f       	subi	r20, 0xFF	; 255
 3e8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ea:	48 17       	cp	r20, r24
 3ec:	59 07       	cpc	r21, r25
 3ee:	29 f4       	brne	.+10     	; 0x3fa <delay_ms+0x24>
 3f0:	08 95       	ret
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 3f6:	77 e0       	ldi	r23, 0x07	; 7
 3f8:	63 e0       	ldi	r22, 0x03	; 3
 3fa:	27 2f       	mov	r18, r23
 3fc:	36 2f       	mov	r19, r22
 3fe:	ef cf       	rjmp	.-34     	; 0x3de <delay_ms+0x8>

00000400 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 400:	28 98       	cbi	0x05, 0	; 5
   DATA_BUS = Command;
 402:	82 b9       	out	0x02, r24	; 2
   SET_BIT(CONTROL_BUS,E);
 404:	29 9a       	sbi	0x05, 1	; 5
   asm("nop");
 406:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 408:	29 98       	cbi	0x05, 1	; 5
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	e3 cf       	rjmp	.-58     	; 0x3d6 <delay_ms>
 410:	08 95       	ret

00000412 <LCD_ClearScreen>:
#define E 1			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	f5 cf       	rjmp	.-22     	; 0x400 <LCD_WriteCommand>
 416:	08 95       	ret

00000418 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 418:	81 31       	cpi	r24, 0x11	; 17
 41a:	18 f4       	brcc	.+6      	; 0x422 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 41c:	81 58       	subi	r24, 0x81	; 129
 41e:	f0 cf       	rjmp	.-32     	; 0x400 <LCD_WriteCommand>
 420:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 422:	81 55       	subi	r24, 0x51	; 81
 424:	ed cf       	rjmp	.-38     	; 0x400 <LCD_WriteCommand>
 426:	08 95       	ret

00000428 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 428:	84 e6       	ldi	r24, 0x64	; 100
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	d4 df       	rcall	.-88     	; 0x3d6 <delay_ms>
	LCD_WriteCommand(0x38);
 42e:	88 e3       	ldi	r24, 0x38	; 56
 430:	e7 df       	rcall	.-50     	; 0x400 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	e5 df       	rcall	.-54     	; 0x400 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 436:	8f e0       	ldi	r24, 0x0F	; 15
 438:	e3 df       	rcall	.-58     	; 0x400 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	e1 df       	rcall	.-62     	; 0x400 <LCD_WriteCommand>
	delay_ms(10);						 
 43e:	8a e0       	ldi	r24, 0x0A	; 10
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	c9 cf       	rjmp	.-110    	; 0x3d6 <delay_ms>
 444:	08 95       	ret

00000446 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
 446:	28 9a       	sbi	0x05, 0	; 5
   DATA_BUS = Data;
 448:	82 b9       	out	0x02, r24	; 2
   SET_BIT(CONTROL_BUS,E);
 44a:	29 9a       	sbi	0x05, 1	; 5
   asm("nop");
 44c:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 44e:	29 98       	cbi	0x05, 1	; 5
   delay_ms(1);
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	c0 cf       	rjmp	.-128    	; 0x3d6 <delay_ms>
 456:	08 95       	ret

00000458 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	18 2f       	mov	r17, r24
 462:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 464:	d6 df       	rcall	.-84     	; 0x412 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 466:	88 81       	ld	r24, Y
 468:	88 23       	and	r24, r24
 46a:	51 f0       	breq	.+20     	; 0x480 <LCD_DisplayString+0x28>
      LCD_Cursor(c++);
 46c:	01 e0       	ldi	r16, 0x01	; 1
 46e:	01 0f       	add	r16, r17
 470:	81 2f       	mov	r24, r17
 472:	d2 df       	rcall	.-92     	; 0x418 <LCD_Cursor>
      LCD_WriteData(*string++);
 474:	89 91       	ld	r24, Y+
 476:	e7 df       	rcall	.-50     	; 0x446 <LCD_WriteData>

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 478:	10 2f       	mov	r17, r16
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 47a:	88 81       	ld	r24, Y
 47c:	81 11       	cpse	r24, r1
 47e:	f6 cf       	rjmp	.-20     	; 0x46c <LCD_DisplayString+0x14>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	08 95       	ret

0000048a <LCD_Tick>:
	}
	LCD_WriteData(data + '0');
} 

int LCD_Tick(int state) {
	switch (state) {
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	91 05       	cpc	r25, r1
 48e:	e9 f0       	breq	.+58     	; 0x4ca <LCD_Tick+0x40>
 490:	1c f4       	brge	.+6      	; 0x498 <LCD_Tick+0xe>
 492:	00 97       	sbiw	r24, 0x00	; 0
 494:	51 f0       	breq	.+20     	; 0x4aa <LCD_Tick+0x20>
 496:	08 95       	ret
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	91 05       	cpc	r25, r1
 49c:	09 f4       	brne	.+2      	; 0x4a0 <LCD_Tick+0x16>
 49e:	49 c0       	rjmp	.+146    	; 0x532 <LCD_Tick+0xa8>
 4a0:	84 30       	cpi	r24, 0x04	; 4
 4a2:	91 05       	cpc	r25, r1
 4a4:	09 f4       	brne	.+2      	; 0x4a8 <LCD_Tick+0x1e>
 4a6:	56 c0       	rjmp	.+172    	; 0x554 <LCD_Tick+0xca>
 4a8:	08 95       	ret
		case LCD_SMStart:
			isAlive = 0;
 4aa:	10 92 8e 01 	sts	0x018E, r1
			isIdle = 1;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	80 93 8c 01 	sts	0x018C, r24
			isEditing = 0;
 4b4:	10 92 8d 01 	sts	0x018D, r1
			state = LCD_Home;
			LCD_init();
 4b8:	b7 df       	rcall	.-146    	; 0x428 <LCD_init>
			LCD_ClearScreen();
 4ba:	ab df       	rcall	.-170    	; 0x412 <LCD_ClearScreen>
			LCD_DisplayString (1, "   Welcome to        Bound!");
 4bc:	64 e0       	ldi	r22, 0x04	; 4
 4be:	71 e0       	ldi	r23, 0x01	; 1
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	ca df       	rcall	.-108    	; 0x458 <LCD_DisplayString>
	switch (state) {
		case LCD_SMStart:
			isAlive = 0;
			isIdle = 1;
			isEditing = 0;
			state = LCD_Home;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
			LCD_init();
			LCD_ClearScreen();
			LCD_DisplayString (1, "   Welcome to        Bound!");
			break;
 4c8:	08 95       	ret
			
		case LCD_Home:
			if (isAlive) {
 4ca:	20 91 8e 01 	lds	r18, 0x018E
 4ce:	22 23       	and	r18, r18
 4d0:	31 f1       	breq	.+76     	; 0x51e <LCD_Tick+0x94>
				state = LCD_Play;
				LCD_ClearScreen();
 4d2:	9f df       	rcall	.-194    	; 0x412 <LCD_ClearScreen>
				LCD_Cursor(1);
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	a0 df       	rcall	.-192    	; 0x418 <LCD_Cursor>
				LCD_WriteData('L'); LCD_WriteData('e');
 4d8:	8c e4       	ldi	r24, 0x4C	; 76
 4da:	b5 df       	rcall	.-150    	; 0x446 <LCD_WriteData>
 4dc:	85 e6       	ldi	r24, 0x65	; 101
 4de:	b3 df       	rcall	.-154    	; 0x446 <LCD_WriteData>
				LCD_WriteData('v'); LCD_WriteData('e');
 4e0:	86 e7       	ldi	r24, 0x76	; 118
 4e2:	b1 df       	rcall	.-158    	; 0x446 <LCD_WriteData>
 4e4:	85 e6       	ldi	r24, 0x65	; 101
 4e6:	af df       	rcall	.-162    	; 0x446 <LCD_WriteData>
				LCD_WriteData('l'); LCD_WriteData(':');
 4e8:	8c e6       	ldi	r24, 0x6C	; 108
 4ea:	ad df       	rcall	.-166    	; 0x446 <LCD_WriteData>
 4ec:	8a e3       	ldi	r24, 0x3A	; 58
 4ee:	ab df       	rcall	.-170    	; 0x446 <LCD_WriteData>
				LCD_WriteData('1');
 4f0:	81 e3       	ldi	r24, 0x31	; 49
 4f2:	a9 df       	rcall	.-174    	; 0x446 <LCD_WriteData>
				LCD_WriteData(' '); LCD_WriteData(' ');
 4f4:	80 e2       	ldi	r24, 0x20	; 32
 4f6:	a7 df       	rcall	.-178    	; 0x446 <LCD_WriteData>
 4f8:	80 e2       	ldi	r24, 0x20	; 32
 4fa:	a5 df       	rcall	.-182    	; 0x446 <LCD_WriteData>
				LCD_WriteData('L'); LCD_WriteData('i');
 4fc:	8c e4       	ldi	r24, 0x4C	; 76
 4fe:	a3 df       	rcall	.-186    	; 0x446 <LCD_WriteData>
 500:	89 e6       	ldi	r24, 0x69	; 105
 502:	a1 df       	rcall	.-190    	; 0x446 <LCD_WriteData>
				LCD_WriteData('v'); LCD_WriteData('e');
 504:	86 e7       	ldi	r24, 0x76	; 118
 506:	9f df       	rcall	.-194    	; 0x446 <LCD_WriteData>
 508:	85 e6       	ldi	r24, 0x65	; 101
 50a:	9d df       	rcall	.-198    	; 0x446 <LCD_WriteData>
				LCD_WriteData('s'); LCD_WriteData(':');
 50c:	83 e7       	ldi	r24, 0x73	; 115
 50e:	9b df       	rcall	.-202    	; 0x446 <LCD_WriteData>
 510:	8a e3       	ldi	r24, 0x3A	; 58
 512:	99 df       	rcall	.-206    	; 0x446 <LCD_WriteData>
				LCD_WriteData('3');
 514:	83 e3       	ldi	r24, 0x33	; 51
 516:	97 df       	rcall	.-210    	; 0x446 <LCD_WriteData>
			LCD_DisplayString (1, "   Welcome to        Bound!");
			break;
			
		case LCD_Home:
			if (isAlive) {
				state = LCD_Play;
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	90 e0       	ldi	r25, 0x00	; 0
				LCD_WriteData(' '); LCD_WriteData(' ');
				LCD_WriteData('L'); LCD_WriteData('i');
				LCD_WriteData('v'); LCD_WriteData('e');
				LCD_WriteData('s'); LCD_WriteData(':');
				LCD_WriteData('3');
				break;
 51c:	08 95       	ret
			} else if (isEditing) {
 51e:	20 91 8d 01 	lds	r18, 0x018D
 522:	21 11       	cpse	r18, r1
 524:	23 c0       	rjmp	.+70     	; 0x56c <LCD_Tick+0xe2>
				state = LCD_Edit;
			} else {
				state = LCD_Home;
				isAlive = 0;
				isIdle = 1;
 526:	21 e0       	ldi	r18, 0x01	; 1
 528:	20 93 8c 01 	sts	0x018C, r18
				isEditing = 0;
 52c:	10 92 8d 01 	sts	0x018D, r1
 530:	08 95       	ret
			}
			break;
		
		case LCD_Play:
			if (isAlive) {
 532:	20 91 8e 01 	lds	r18, 0x018E
 536:	21 11       	cpse	r18, r1
 538:	1b c0       	rjmp	.+54     	; 0x570 <LCD_Tick+0xe6>
				state = LCD_Play;
			} else if (!isAlive) {
				state = LCD_Home;
				isAlive = 0;
				isIdle = 1;
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	80 93 8c 01 	sts	0x018C, r24
				isEditing = 0;
 540:	10 92 8d 01 	sts	0x018D, r1
				LCD_ClearScreen();
 544:	66 df       	rcall	.-308    	; 0x412 <LCD_ClearScreen>
				LCD_DisplayString (1, "  Welcome to        Bound!");
 546:	65 e0       	ldi	r22, 0x05	; 5
 548:	71 e0       	ldi	r23, 0x01	; 1
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	85 df       	rcall	.-246    	; 0x458 <LCD_DisplayString>
		
		case LCD_Play:
			if (isAlive) {
				state = LCD_Play;
			} else if (!isAlive) {
				state = LCD_Home;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	08 95       	ret
		
		case LCD_End:
			break;
		
		case LCD_Edit:
		if (isEditing) {
 554:	20 91 8d 01 	lds	r18, 0x018D
 558:	21 11       	cpse	r18, r1
 55a:	0a c0       	rjmp	.+20     	; 0x570 <LCD_Tick+0xe6>
			state = LCD_Edit;
			} 
		else if (!isEditing) {
			state = LCD_Home;
			LCD_ClearScreen();
 55c:	5a df       	rcall	.-332    	; 0x412 <LCD_ClearScreen>
			LCD_DisplayString (1, "  Welcome to        Bound!");
 55e:	65 e0       	ldi	r22, 0x05	; 5
 560:	71 e0       	ldi	r23, 0x01	; 1
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	79 df       	rcall	.-270    	; 0x458 <LCD_DisplayString>
		case LCD_Edit:
		if (isEditing) {
			state = LCD_Edit;
			} 
		else if (!isEditing) {
			state = LCD_Home;
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	08 95       	ret
				LCD_WriteData('v'); LCD_WriteData('e');
				LCD_WriteData('s'); LCD_WriteData(':');
				LCD_WriteData('3');
				break;
			} else if (isEditing) {
				state = LCD_Edit;
 56c:	84 e0       	ldi	r24, 0x04	; 4
 56e:	90 e0       	ldi	r25, 0x00	; 0
			break;
		
	}
	
	return state;
 570:	08 95       	ret

00000572 <main>:
void updateDuration(unsigned char i);
void customWriteLCD(unsigned char data);

int main(void)
{
	DDRC = 0xF0; PORTC = 0x0F; 
 572:	80 ef       	ldi	r24, 0xF0	; 240
 574:	87 b9       	out	0x07, r24	; 7
 576:	8f e0       	ldi	r24, 0x0F	; 15
 578:	88 b9       	out	0x08, r24	; 8
	DDRA = 0xFF; PORTA = 0x00;
 57a:	8f ef       	ldi	r24, 0xFF	; 255
 57c:	81 b9       	out	0x01, r24	; 1
 57e:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
 580:	84 b9       	out	0x04, r24	; 4
 582:	15 b8       	out	0x05, r1	; 5
	
	initUSART(0);
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	a0 dd       	rcall	.-1216   	; 0xc8 <initUSART>
	initTasks();
 588:	33 de       	rcall	.-922    	; 0x1f0 <initTasks>
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 58a:	8a e0       	ldi	r24, 0x0A	; 10
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	a0 e0       	ldi	r26, 0x00	; 0
 590:	b0 e0       	ldi	r27, 0x00	; 0
 592:	80 93 00 01 	sts	0x0100, r24
 596:	90 93 01 01 	sts	0x0101, r25
 59a:	a0 93 02 01 	sts	0x0102, r26
 59e:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
 5a2:	80 93 53 01 	sts	0x0153, r24
 5a6:	90 93 54 01 	sts	0x0154, r25
 5aa:	a0 93 55 01 	sts	0x0155, r26
 5ae:	b0 93 56 01 	sts	0x0156, r27
	
	TimerSet(10);
	TimerOn();
 5b2:	61 de       	rcall	.-830    	; 0x276 <TimerOn>

    while (1) {
		// Do something
    }
 5b4:	ff cf       	rjmp	.-2      	; 0x5b4 <main+0x42>

000005b6 <customWriteLCD>:
		} else if (rowSelected) {
		LCD_Cursor(32);
	}
}

void customWriteLCD(unsigned char data) {
 5b6:	cf 93       	push	r28
 5b8:	c8 2f       	mov	r28, r24
	if (data < 10) {
 5ba:	8a 30       	cpi	r24, 0x0A	; 10
 5bc:	a8 f1       	brcs	.+106    	; 0x628 <customWriteLCD+0x72>

	} else if (data < 20) {
 5be:	84 31       	cpi	r24, 0x14	; 20
 5c0:	20 f4       	brcc	.+8      	; 0x5ca <customWriteLCD+0x14>
		data -= 10;
 5c2:	ca 50       	subi	r28, 0x0A	; 10
		LCD_WriteData('1');
 5c4:	81 e3       	ldi	r24, 0x31	; 49
 5c6:	3f df       	rcall	.-386    	; 0x446 <LCD_WriteData>
 5c8:	2f c0       	rjmp	.+94     	; 0x628 <customWriteLCD+0x72>
	} else if (data < 30) {
 5ca:	8e 31       	cpi	r24, 0x1E	; 30
 5cc:	20 f4       	brcc	.+8      	; 0x5d6 <customWriteLCD+0x20>
		data -= 20;
 5ce:	c4 51       	subi	r28, 0x14	; 20
		LCD_WriteData('2');
 5d0:	82 e3       	ldi	r24, 0x32	; 50
 5d2:	39 df       	rcall	.-398    	; 0x446 <LCD_WriteData>
 5d4:	29 c0       	rjmp	.+82     	; 0x628 <customWriteLCD+0x72>
	} else if (data < 40) {
 5d6:	88 32       	cpi	r24, 0x28	; 40
 5d8:	20 f4       	brcc	.+8      	; 0x5e2 <customWriteLCD+0x2c>
		data -= 30;
 5da:	ce 51       	subi	r28, 0x1E	; 30
		LCD_WriteData('3');
 5dc:	83 e3       	ldi	r24, 0x33	; 51
 5de:	33 df       	rcall	.-410    	; 0x446 <LCD_WriteData>
 5e0:	23 c0       	rjmp	.+70     	; 0x628 <customWriteLCD+0x72>
	} else if (data <  50) {
 5e2:	82 33       	cpi	r24, 0x32	; 50
 5e4:	20 f4       	brcc	.+8      	; 0x5ee <customWriteLCD+0x38>
		data -= 40;
 5e6:	c8 52       	subi	r28, 0x28	; 40
		LCD_WriteData('4');
 5e8:	84 e3       	ldi	r24, 0x34	; 52
 5ea:	2d df       	rcall	.-422    	; 0x446 <LCD_WriteData>
 5ec:	1d c0       	rjmp	.+58     	; 0x628 <customWriteLCD+0x72>
	} else if (data < 60) {
 5ee:	8c 33       	cpi	r24, 0x3C	; 60
 5f0:	20 f4       	brcc	.+8      	; 0x5fa <customWriteLCD+0x44>
		data -= 50;
 5f2:	c2 53       	subi	r28, 0x32	; 50
		LCD_WriteData('5');
 5f4:	85 e3       	ldi	r24, 0x35	; 53
 5f6:	27 df       	rcall	.-434    	; 0x446 <LCD_WriteData>
 5f8:	17 c0       	rjmp	.+46     	; 0x628 <customWriteLCD+0x72>
	} else if (data < 70) {
 5fa:	86 34       	cpi	r24, 0x46	; 70
 5fc:	20 f4       	brcc	.+8      	; 0x606 <customWriteLCD+0x50>
		data -= 60;
 5fe:	cc 53       	subi	r28, 0x3C	; 60
		LCD_WriteData('6');
 600:	86 e3       	ldi	r24, 0x36	; 54
 602:	21 df       	rcall	.-446    	; 0x446 <LCD_WriteData>
 604:	11 c0       	rjmp	.+34     	; 0x628 <customWriteLCD+0x72>
	} else if (data < 80) {
 606:	80 35       	cpi	r24, 0x50	; 80
 608:	20 f4       	brcc	.+8      	; 0x612 <customWriteLCD+0x5c>
		data -= 70;
 60a:	c6 54       	subi	r28, 0x46	; 70
		LCD_WriteData('7');
 60c:	87 e3       	ldi	r24, 0x37	; 55
 60e:	1b df       	rcall	.-458    	; 0x446 <LCD_WriteData>
 610:	0b c0       	rjmp	.+22     	; 0x628 <customWriteLCD+0x72>
	} else if (data < 90) {
 612:	8a 35       	cpi	r24, 0x5A	; 90
 614:	20 f4       	brcc	.+8      	; 0x61e <customWriteLCD+0x68>
		data -= 80;
 616:	c0 55       	subi	r28, 0x50	; 80
		LCD_WriteData('8');
 618:	88 e3       	ldi	r24, 0x38	; 56
 61a:	15 df       	rcall	.-470    	; 0x446 <LCD_WriteData>
 61c:	05 c0       	rjmp	.+10     	; 0x628 <customWriteLCD+0x72>
	} else if (data < 100) {
 61e:	84 36       	cpi	r24, 0x64	; 100
 620:	18 f4       	brcc	.+6      	; 0x628 <customWriteLCD+0x72>
		data -= 90;
 622:	ca 55       	subi	r28, 0x5A	; 90
		LCD_WriteData('9');
 624:	89 e3       	ldi	r24, 0x39	; 57
 626:	0f df       	rcall	.-482    	; 0x446 <LCD_WriteData>
	}
	LCD_WriteData(data + '0');
 628:	80 e3       	ldi	r24, 0x30	; 48
 62a:	8c 0f       	add	r24, r28
 62c:	0c df       	rcall	.-488    	; 0x446 <LCD_WriteData>
} 
 62e:	cf 91       	pop	r28
 630:	08 95       	ret

00000632 <GAME_Tick>:
}

int GAME_Tick(int state) {
	unsigned char USARTReceiver;
	
	switch (state) {
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	91 05       	cpc	r25, r1
 636:	61 f0       	breq	.+24     	; 0x650 <GAME_Tick+0x1e>
 638:	24 f4       	brge	.+8      	; 0x642 <GAME_Tick+0x10>
 63a:	00 97       	sbiw	r24, 0x00	; 0
 63c:	09 f4       	brne	.+2      	; 0x640 <GAME_Tick+0xe>
 63e:	a7 c0       	rjmp	.+334    	; 0x78e <GAME_Tick+0x15c>
 640:	24 c0       	rjmp	.+72     	; 0x68a <GAME_Tick+0x58>
 642:	82 30       	cpi	r24, 0x02	; 2
 644:	91 05       	cpc	r25, r1
 646:	81 f0       	breq	.+32     	; 0x668 <GAME_Tick+0x36>
 648:	83 30       	cpi	r24, 0x03	; 3
 64a:	91 05       	cpc	r25, r1
 64c:	b1 f0       	breq	.+44     	; 0x67a <GAME_Tick+0x48>
 64e:	1d c0       	rjmp	.+58     	; 0x68a <GAME_Tick+0x58>
		case GAME_SMStart:
			state = GAME_Off;
			break;
			
		case GAME_Off:
			if (!isAlive) {
 650:	80 91 8e 01 	lds	r24, 0x018E
 654:	88 23       	and	r24, r24
 656:	09 f4       	brne	.+2      	; 0x65a <GAME_Tick+0x28>
 658:	9a c0       	rjmp	.+308    	; 0x78e <GAME_Tick+0x15c>
				state = GAME_Off;
			} else if (isAlive) {
				state = GAME_On;
				lives = 3;
 65a:	83 e0       	ldi	r24, 0x03	; 3
 65c:	80 93 8b 01 	sts	0x018B, r24
				level = 1;
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	80 93 88 01 	sts	0x0188, r24
 666:	19 c0       	rjmp	.+50     	; 0x69a <GAME_Tick+0x68>
			}
			break;
			
		case GAME_On:
			if (isAlive == 0) {
 668:	80 91 8e 01 	lds	r24, 0x018E
 66c:	88 23       	and	r24, r24
 66e:	09 f4       	brne	.+2      	; 0x672 <GAME_Tick+0x40>
 670:	8e c0       	rjmp	.+284    	; 0x78e <GAME_Tick+0x15c>
				state = GAME_Off;
			} else if (isAlive == 1) {
 672:	82 30       	cpi	r24, 0x02	; 2
 674:	09 f4       	brne	.+2      	; 0x678 <GAME_Tick+0x46>
 676:	77 c0       	rjmp	.+238    	; 0x766 <GAME_Tick+0x134>
 678:	10 c0       	rjmp	.+32     	; 0x69a <GAME_Tick+0x68>
				state = GAME_Done;
			}
			break;
			
		case GAME_Done:
			if (isAlive == 0) {
 67a:	80 91 8e 01 	lds	r24, 0x018E
 67e:	81 11       	cpse	r24, r1
 680:	72 c0       	rjmp	.+228    	; 0x766 <GAME_Tick+0x134>
				state = GAME_Off;
				isIdle = 1;
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	80 93 8c 01 	sts	0x018C, r24
 688:	82 c0       	rjmp	.+260    	; 0x78e <GAME_Tick+0x15c>
			
		default:
			break;
	}
	
	switch (state) {
 68a:	82 30       	cpi	r24, 0x02	; 2
 68c:	91 05       	cpc	r25, r1
 68e:	29 f0       	breq	.+10     	; 0x69a <GAME_Tick+0x68>
 690:	83 30       	cpi	r24, 0x03	; 3
 692:	91 05       	cpc	r25, r1
 694:	09 f0       	breq	.+2      	; 0x698 <GAME_Tick+0x66>
 696:	7d c0       	rjmp	.+250    	; 0x792 <GAME_Tick+0x160>
 698:	66 c0       	rjmp	.+204    	; 0x766 <GAME_Tick+0x134>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 69a:	80 91 c0 00 	lds	r24, 0x00C0
			
		case GAME_Off:
			break;
		
		case GAME_On:
			if (USART_HasReceived(0)) {
 69e:	88 23       	and	r24, r24
 6a0:	0c f0       	brlt	.+2      	; 0x6a4 <GAME_Tick+0x72>
 6a2:	4b c0       	rjmp	.+150    	; 0x73a <GAME_Tick+0x108>
				USARTReceiver = USART_Receive(0);
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	44 dd       	rcall	.-1400   	; 0x130 <USART_Receive>
				if (USARTReceiver == 0 && lives > 0) {
 6a8:	81 11       	cpse	r24, r1
 6aa:	22 c0       	rjmp	.+68     	; 0x6f0 <GAME_Tick+0xbe>
 6ac:	80 91 8b 01 	lds	r24, 0x018B
 6b0:	88 23       	and	r24, r24
 6b2:	09 f4       	brne	.+2      	; 0x6b6 <GAME_Tick+0x84>
 6b4:	42 c0       	rjmp	.+132    	; 0x73a <GAME_Tick+0x108>
					lives--;
 6b6:	81 50       	subi	r24, 0x01	; 1
 6b8:	80 93 8b 01 	sts	0x018B, r24
					LCD_Cursor(16);
 6bc:	80 e1       	ldi	r24, 0x10	; 16
 6be:	ac de       	rcall	.-680    	; 0x418 <LCD_Cursor>
					LCD_WriteData(lives + '0');
 6c0:	80 91 8b 01 	lds	r24, 0x018B
 6c4:	80 5d       	subi	r24, 0xD0	; 208
 6c6:	bf de       	rcall	.-642    	; 0x446 <LCD_WriteData>
					
					if (lives == 0) {
 6c8:	80 91 8b 01 	lds	r24, 0x018B
 6cc:	81 11       	cpse	r24, r1
 6ce:	35 c0       	rjmp	.+106    	; 0x73a <GAME_Tick+0x108>
						isAlive = 2;
 6d0:	82 e0       	ldi	r24, 0x02	; 2
 6d2:	80 93 8e 01 	sts	0x018E, r24
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 6d6:	e0 ec       	ldi	r30, 0xC0	; 192
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
						while (!USART_IsSendReady(0));
 6dc:	85 ff       	sbrs	r24, 5
 6de:	fd cf       	rjmp	.-6      	; 0x6da <GAME_Tick+0xa8>
						USART_Send(0x05, 0);
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	85 e0       	ldi	r24, 0x05	; 5
 6e4:	13 dd       	rcall	.-1498   	; 0x10c <USART_Send>
						LCD_DisplayString(1, "   Game Over!");
 6e6:	60 e2       	ldi	r22, 0x20	; 32
 6e8:	71 e0       	ldi	r23, 0x01	; 1
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	b5 de       	rcall	.-662    	; 0x458 <LCD_DisplayString>
 6ee:	25 c0       	rjmp	.+74     	; 0x73a <GAME_Tick+0x108>
					} 
				} 
				
				if (USARTReceiver == 0x32) {
 6f0:	82 33       	cpi	r24, 0x32	; 50
 6f2:	c1 f4       	brne	.+48     	; 0x724 <GAME_Tick+0xf2>
					level++;
 6f4:	80 91 88 01 	lds	r24, 0x0188
 6f8:	8f 5f       	subi	r24, 0xFF	; 255
 6fa:	80 93 88 01 	sts	0x0188, r24
					if (lives < 9) {
 6fe:	80 91 8b 01 	lds	r24, 0x018B
 702:	89 30       	cpi	r24, 0x09	; 9
 704:	d0 f4       	brcc	.+52     	; 0x73a <GAME_Tick+0x108>
						lives++;
 706:	8f 5f       	subi	r24, 0xFF	; 255
 708:	80 93 8b 01 	sts	0x018B, r24
						LCD_Cursor(7);
 70c:	87 e0       	ldi	r24, 0x07	; 7
 70e:	84 de       	rcall	.-760    	; 0x418 <LCD_Cursor>
						customWriteLCD(level);
 710:	80 91 88 01 	lds	r24, 0x0188
 714:	50 df       	rcall	.-352    	; 0x5b6 <customWriteLCD>
						LCD_Cursor(16);
 716:	80 e1       	ldi	r24, 0x10	; 16
 718:	7f de       	rcall	.-770    	; 0x418 <LCD_Cursor>
						LCD_WriteData(lives + '0');
 71a:	80 91 8b 01 	lds	r24, 0x018B
 71e:	80 5d       	subi	r24, 0xD0	; 208
 720:	92 de       	rcall	.-732    	; 0x446 <LCD_WriteData>
 722:	0b c0       	rjmp	.+22     	; 0x73a <GAME_Tick+0x108>
					}
				}
				
				if (USARTReceiver == 0x69) {
 724:	89 36       	cpi	r24, 0x69	; 105
 726:	49 f4       	brne	.+18     	; 0x73a <GAME_Tick+0x108>
					isAlive = 2;
 728:	82 e0       	ldi	r24, 0x02	; 2
 72a:	80 93 8e 01 	sts	0x018E, r24
					LCD_Cursor(1);
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	73 de       	rcall	.-794    	; 0x418 <LCD_Cursor>
					LCD_DisplayString(1	, "    You Win!");
 732:	6e e2       	ldi	r22, 0x2E	; 46
 734:	71 e0       	ldi	r23, 0x01	; 1
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	8f de       	rcall	.-738    	; 0x458 <LCD_DisplayString>
				}
			}
			
			if (resetPressed) {
 73a:	80 91 89 01 	lds	r24, 0x0189
 73e:	88 23       	and	r24, r24
 740:	01 f1       	breq	.+64     	; 0x782 <GAME_Tick+0x150>
				isAlive = 0;
 742:	10 92 8e 01 	sts	0x018E, r1
				isIdle = 1;
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	80 93 8c 01 	sts	0x018C, r24
 74c:	e0 ec       	ldi	r30, 0xC0	; 192
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
				while (!USART_IsSendReady(0));
 752:	85 ff       	sbrs	r24, 5
 754:	fd cf       	rjmp	.-6      	; 0x750 <GAME_Tick+0x11e>
				USART_Send(0x05, 0);
 756:	60 e0       	ldi	r22, 0x00	; 0
 758:	85 e0       	ldi	r24, 0x05	; 5
 75a:	d8 dc       	rcall	.-1616   	; 0x10c <USART_Send>
				resetPressed = 0;
 75c:	10 92 89 01 	sts	0x0189, r1
 760:	82 e0       	ldi	r24, 0x02	; 2
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	08 95       	ret
			}
			break;
			
		case GAME_Done:
			if (resetPressed) {
 766:	80 91 89 01 	lds	r24, 0x0189
 76a:	88 23       	and	r24, r24
 76c:	69 f0       	breq	.+26     	; 0x788 <GAME_Tick+0x156>
				isAlive = 0;
 76e:	10 92 8e 01 	sts	0x018E, r1
				isIdle = 1;
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	80 93 8c 01 	sts	0x018C, r24
				resetPressed = 0;
 778:	10 92 89 01 	sts	0x0189, r1
 77c:	83 e0       	ldi	r24, 0x03	; 3
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	08 95       	ret
 782:	82 e0       	ldi	r24, 0x02	; 2
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	08 95       	ret
 788:	83 e0       	ldi	r24, 0x03	; 3
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	08 95       	ret
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	90 e0       	ldi	r25, 0x00	; 0
		default:
			break;
	}
	
	return state;
}
 792:	08 95       	ret

00000794 <EDIT_Tick>:

int EDIT_Tick(int state) {
 794:	cf 93       	push	r28
	switch (state) {
 796:	82 30       	cpi	r24, 0x02	; 2
 798:	91 05       	cpc	r25, r1
 79a:	e9 f0       	breq	.+58     	; 0x7d6 <EDIT_Tick+0x42>
 79c:	3c f4       	brge	.+14     	; 0x7ac <EDIT_Tick+0x18>
 79e:	00 97       	sbiw	r24, 0x00	; 0
 7a0:	09 f4       	brne	.+2      	; 0x7a4 <EDIT_Tick+0x10>
 7a2:	17 c1       	rjmp	.+558    	; 0x9d2 <EDIT_Tick+0x23e>
 7a4:	81 30       	cpi	r24, 0x01	; 1
 7a6:	91 05       	cpc	r25, r1
 7a8:	41 f0       	breq	.+16     	; 0x7ba <EDIT_Tick+0x26>
 7aa:	38 c0       	rjmp	.+112    	; 0x81c <EDIT_Tick+0x88>
 7ac:	83 30       	cpi	r24, 0x03	; 3
 7ae:	91 05       	cpc	r25, r1
 7b0:	f9 f0       	breq	.+62     	; 0x7f0 <EDIT_Tick+0x5c>
 7b2:	84 30       	cpi	r24, 0x04	; 4
 7b4:	91 05       	cpc	r25, r1
 7b6:	39 f1       	breq	.+78     	; 0x806 <EDIT_Tick+0x72>
 7b8:	31 c0       	rjmp	.+98     	; 0x81c <EDIT_Tick+0x88>
		case EDIT_SMStart:
			state = EDIT_Off;
			break;
		case EDIT_Off:
			if (isEditing == 0) {
 7ba:	20 91 8d 01 	lds	r18, 0x018D
 7be:	22 23       	and	r18, r18
 7c0:	09 f4       	brne	.+2      	; 0x7c4 <EDIT_Tick+0x30>
 7c2:	27 c1       	rjmp	.+590    	; 0xa12 <EDIT_Tick+0x27e>
				state = EDIT_Off;
			} else if (isEditing == 1) {
 7c4:	21 30       	cpi	r18, 0x01	; 1
 7c6:	b1 f1       	breq	.+108    	; 0x834 <EDIT_Tick+0xa0>
				state = EDIT_On;
			} else if (isEditing == 2) {
 7c8:	22 30       	cpi	r18, 0x02	; 2
 7ca:	09 f4       	brne	.+2      	; 0x7ce <EDIT_Tick+0x3a>
 7cc:	7f c0       	rjmp	.+254    	; 0x8cc <EDIT_Tick+0x138>
				state = EDIT_Pattern;
			} else if (isEditing == 3) {
 7ce:	23 30       	cpi	r18, 0x03	; 3
 7d0:	09 f0       	breq	.+2      	; 0x7d4 <EDIT_Tick+0x40>
 7d2:	1f c1       	rjmp	.+574    	; 0xa12 <EDIT_Tick+0x27e>
 7d4:	e8 c0       	rjmp	.+464    	; 0x9a6 <EDIT_Tick+0x212>
				state = EDIT_ChangePat;
			}
			break;
		case EDIT_On:
			if (isEditing == 0) {
 7d6:	80 91 8d 01 	lds	r24, 0x018D
 7da:	88 23       	and	r24, r24
 7dc:	09 f4       	brne	.+2      	; 0x7e0 <EDIT_Tick+0x4c>
 7de:	fc c0       	rjmp	.+504    	; 0x9d8 <EDIT_Tick+0x244>
				state = EDIT_Off;
			} else if (isEditing == 1) {
 7e0:	81 30       	cpi	r24, 0x01	; 1
 7e2:	41 f1       	breq	.+80     	; 0x834 <EDIT_Tick+0xa0>
				state = EDIT_On;
			} else if (isEditing == 2) {
 7e4:	82 30       	cpi	r24, 0x02	; 2
 7e6:	09 f4       	brne	.+2      	; 0x7ea <EDIT_Tick+0x56>
 7e8:	71 c0       	rjmp	.+226    	; 0x8cc <EDIT_Tick+0x138>
				state = EDIT_Pattern;
			} else if (isEditing == 3) {
 7ea:	83 30       	cpi	r24, 0x03	; 3
 7ec:	19 f5       	brne	.+70     	; 0x834 <EDIT_Tick+0xa0>
 7ee:	db c0       	rjmp	.+438    	; 0x9a6 <EDIT_Tick+0x212>
				state = EDIT_ChangePat;
			}
			break;
		case EDIT_Pattern:
			if (isEditing == 0) {
 7f0:	80 91 8d 01 	lds	r24, 0x018D
 7f4:	88 23       	and	r24, r24
 7f6:	09 f4       	brne	.+2      	; 0x7fa <EDIT_Tick+0x66>
 7f8:	f2 c0       	rjmp	.+484    	; 0x9de <EDIT_Tick+0x24a>
				state = EDIT_Off;
			} else if (isEditing == 1) {
 7fa:	81 30       	cpi	r24, 0x01	; 1
 7fc:	d9 f0       	breq	.+54     	; 0x834 <EDIT_Tick+0xa0>
				state = EDIT_On;
			} else if (isEditing == 2) {
 7fe:	83 30       	cpi	r24, 0x03	; 3
 800:	09 f4       	brne	.+2      	; 0x804 <EDIT_Tick+0x70>
 802:	d1 c0       	rjmp	.+418    	; 0x9a6 <EDIT_Tick+0x212>
 804:	63 c0       	rjmp	.+198    	; 0x8cc <EDIT_Tick+0x138>
				state = EDIT_ChangePat;
			}
			break;
			
		case EDIT_ChangePat:
			if (isEditing == 0) {
 806:	80 91 8d 01 	lds	r24, 0x018D
 80a:	88 23       	and	r24, r24
 80c:	09 f4       	brne	.+2      	; 0x810 <EDIT_Tick+0x7c>
 80e:	ea c0       	rjmp	.+468    	; 0x9e4 <EDIT_Tick+0x250>
				state = EDIT_Off;
			} else if (isEditing == 1) {
 810:	81 30       	cpi	r24, 0x01	; 1
 812:	81 f0       	breq	.+32     	; 0x834 <EDIT_Tick+0xa0>
				state = EDIT_On;
			} else if (isEditing == 2) {
 814:	82 30       	cpi	r24, 0x02	; 2
 816:	09 f0       	breq	.+2      	; 0x81a <EDIT_Tick+0x86>
 818:	c6 c0       	rjmp	.+396    	; 0x9a6 <EDIT_Tick+0x212>
 81a:	58 c0       	rjmp	.+176    	; 0x8cc <EDIT_Tick+0x138>
	
		default:
			break;
	}
	
	switch (state) {
 81c:	83 30       	cpi	r24, 0x03	; 3
 81e:	91 05       	cpc	r25, r1
 820:	09 f4       	brne	.+2      	; 0x824 <EDIT_Tick+0x90>
 822:	54 c0       	rjmp	.+168    	; 0x8cc <EDIT_Tick+0x138>
 824:	84 30       	cpi	r24, 0x04	; 4
 826:	91 05       	cpc	r25, r1
 828:	09 f4       	brne	.+2      	; 0x82c <EDIT_Tick+0x98>
 82a:	bd c0       	rjmp	.+378    	; 0x9a6 <EDIT_Tick+0x212>
 82c:	82 30       	cpi	r24, 0x02	; 2
 82e:	91 05       	cpc	r25, r1
 830:	09 f0       	breq	.+2      	; 0x834 <EDIT_Tick+0xa0>
 832:	ef c0       	rjmp	.+478    	; 0xa12 <EDIT_Tick+0x27e>
			break;
		case EDIT_Off:
			break;
		case EDIT_On:
			// Do stuff
			if (resetPressed) {
 834:	80 91 89 01 	lds	r24, 0x0189
 838:	88 23       	and	r24, r24
 83a:	79 f0       	breq	.+30     	; 0x85a <EDIT_Tick+0xc6>
				isEditing = 0;
 83c:	10 92 8d 01 	sts	0x018D, r1
				isIdle = 1;
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	80 93 8c 01 	sts	0x018C, r24
 846:	e0 ec       	ldi	r30, 0xC0	; 192
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	80 81       	ld	r24, Z
				while (!USART_IsSendReady(0)); 
 84c:	85 ff       	sbrs	r24, 5
 84e:	fd cf       	rjmp	.-6      	; 0x84a <EDIT_Tick+0xb6>
				USART_Send(0x07, 0);
 850:	60 e0       	ldi	r22, 0x00	; 0
 852:	87 e0       	ldi	r24, 0x07	; 7
 854:	5b dc       	rcall	.-1866   	; 0x10c <USART_Send>
				resetPressed = 0;
 856:	10 92 89 01 	sts	0x0189, r1
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 85a:	80 91 c0 00 	lds	r24, 0x00C0
			}  
			
			if (USART_HasReceived(0)) {
 85e:	88 23       	and	r24, r24
 860:	0c f0       	brlt	.+2      	; 0x864 <EDIT_Tick+0xd0>
 862:	c3 c0       	rjmp	.+390    	; 0x9ea <EDIT_Tick+0x256>
				unsigned char tempVal = USART_Receive(0);
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	64 dc       	rcall	.-1848   	; 0x130 <USART_Receive>
 868:	c8 2f       	mov	r28, r24
				if ((tempVal & 0x80) == 0) {
 86a:	88 23       	and	r24, r24
 86c:	44 f0       	brlt	.+16     	; 0x87e <EDIT_Tick+0xea>
					LCD_ClearScreen();
 86e:	d1 dd       	rcall	.-1118   	; 0x412 <LCD_ClearScreen>
					LCD_DisplayString(1, "    Level: ");
 870:	6b e3       	ldi	r22, 0x3B	; 59
 872:	71 e0       	ldi	r23, 0x01	; 1
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	f0 dd       	rcall	.-1056   	; 0x458 <LCD_DisplayString>
					customWriteLCD(tempVal + 1);
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	8c 0f       	add	r24, r28
 87c:	9c de       	rcall	.-712    	; 0x5b6 <customWriteLCD>
 87e:	80 91 c0 00 	lds	r24, 0x00C0
				} 
				
				if (USART_HasReceived(0)) {
 882:	88 23       	and	r24, r24
 884:	0c f0       	brlt	.+2      	; 0x888 <EDIT_Tick+0xf4>
 886:	b4 c0       	rjmp	.+360    	; 0x9f0 <EDIT_Tick+0x25c>
					tempVal = USART_Receive(0);
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	52 dc       	rcall	.-1884   	; 0x130 <USART_Receive>
 88c:	c8 2f       	mov	r28, r24
					if ((tempVal & 0x80) != 0) {
 88e:	88 23       	and	r24, r24
 890:	0c f0       	brlt	.+2      	; 0x894 <EDIT_Tick+0x100>
 892:	b1 c0       	rjmp	.+354    	; 0x9f6 <EDIT_Tick+0x262>
						LCD_Cursor(18);
 894:	82 e1       	ldi	r24, 0x12	; 18
 896:	c0 dd       	rcall	.-1152   	; 0x418 <LCD_Cursor>
						LCD_WriteData('P'); LCD_WriteData('a'); LCD_WriteData('t');
 898:	80 e5       	ldi	r24, 0x50	; 80
 89a:	d5 dd       	rcall	.-1110   	; 0x446 <LCD_WriteData>
 89c:	81 e6       	ldi	r24, 0x61	; 97
 89e:	d3 dd       	rcall	.-1114   	; 0x446 <LCD_WriteData>
 8a0:	84 e7       	ldi	r24, 0x74	; 116
 8a2:	d1 dd       	rcall	.-1118   	; 0x446 <LCD_WriteData>
						LCD_WriteData('t'); LCD_WriteData('e'); LCD_WriteData('r');
 8a4:	84 e7       	ldi	r24, 0x74	; 116
 8a6:	cf dd       	rcall	.-1122   	; 0x446 <LCD_WriteData>
 8a8:	85 e6       	ldi	r24, 0x65	; 101
 8aa:	cd dd       	rcall	.-1126   	; 0x446 <LCD_WriteData>
 8ac:	82 e7       	ldi	r24, 0x72	; 114
 8ae:	cb dd       	rcall	.-1130   	; 0x446 <LCD_WriteData>
						LCD_WriteData('n'); LCD_WriteData('s'); LCD_WriteData(':');
 8b0:	8e e6       	ldi	r24, 0x6E	; 110
 8b2:	c9 dd       	rcall	.-1134   	; 0x446 <LCD_WriteData>
 8b4:	83 e7       	ldi	r24, 0x73	; 115
 8b6:	c7 dd       	rcall	.-1138   	; 0x446 <LCD_WriteData>
 8b8:	8a e3       	ldi	r24, 0x3A	; 58
 8ba:	c5 dd       	rcall	.-1142   	; 0x446 <LCD_WriteData>
						LCD_WriteData(' ');
 8bc:	80 e2       	ldi	r24, 0x20	; 32
 8be:	c3 dd       	rcall	.-1146   	; 0x446 <LCD_WriteData>
						customWriteLCD(tempVal & 0x7F);
 8c0:	8c 2f       	mov	r24, r28
 8c2:	8f 77       	andi	r24, 0x7F	; 127
 8c4:	78 de       	rcall	.-784    	; 0x5b6 <customWriteLCD>
 8c6:	82 e0       	ldi	r24, 0x02	; 2
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	a3 c0       	rjmp	.+326    	; 0xa12 <EDIT_Tick+0x27e>
					}
				}
			}
			break;
		case EDIT_Pattern:
			if (resetPressed) {
 8cc:	80 91 89 01 	lds	r24, 0x0189
 8d0:	88 23       	and	r24, r24
 8d2:	79 f0       	breq	.+30     	; 0x8f2 <EDIT_Tick+0x15e>
				isEditing = 0;
 8d4:	10 92 8d 01 	sts	0x018D, r1
				isIdle = 1;
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	80 93 8c 01 	sts	0x018C, r24
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 8de:	e0 ec       	ldi	r30, 0xC0	; 192
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	80 81       	ld	r24, Z
				while (!USART_IsSendReady(0)); 
 8e4:	85 ff       	sbrs	r24, 5
 8e6:	fd cf       	rjmp	.-6      	; 0x8e2 <EDIT_Tick+0x14e>
				USART_Send(0x07, 0);
 8e8:	60 e0       	ldi	r22, 0x00	; 0
 8ea:	87 e0       	ldi	r24, 0x07	; 7
 8ec:	0f dc       	rcall	.-2018   	; 0x10c <USART_Send>
				resetPressed = 0;
 8ee:	10 92 89 01 	sts	0x0189, r1
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 8f2:	80 91 c0 00 	lds	r24, 0x00C0
			} 
			
			if (USART_HasReceived(0)) {
 8f6:	88 23       	and	r24, r24
 8f8:	0c f0       	brlt	.+2      	; 0x8fc <EDIT_Tick+0x168>
 8fa:	80 c0       	rjmp	.+256    	; 0x9fc <EDIT_Tick+0x268>
				unsigned char tempVal = USART_Receive(0);
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	18 dc       	rcall	.-2000   	; 0x130 <USART_Receive>
 900:	c8 2f       	mov	r28, r24
				if ((tempVal & 0x80) == 0) {
 902:	88 23       	and	r24, r24
 904:	a4 f0       	brlt	.+40     	; 0x92e <EDIT_Tick+0x19a>
					currentLCDVal1 = tempVal;
 906:	80 93 8f 01 	sts	0x018F, r24
					
					LCD_ClearScreen();
 90a:	83 dd       	rcall	.-1274   	; 0x412 <LCD_ClearScreen>
					LCD_DisplayString(1, "Duration: ");
 90c:	67 e4       	ldi	r22, 0x47	; 71
 90e:	71 e0       	ldi	r23, 0x01	; 1
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	a2 dd       	rcall	.-1212   	; 0x458 <LCD_DisplayString>
					customWriteLCD(tempVal);
 914:	8c 2f       	mov	r24, r28
 916:	4f de       	rcall	.-866    	; 0x5b6 <customWriteLCD>
					
					if ((tempVal & 0x7F) == 0) {
 918:	cf 77       	andi	r28, 0x7F	; 127
 91a:	19 f4       	brne	.+6      	; 0x922 <EDIT_Tick+0x18e>
						LCD_WriteData(' ');
 91c:	80 e2       	ldi	r24, 0x20	; 32
 91e:	93 dd       	rcall	.-1242   	; 0x446 <LCD_WriteData>
 920:	02 c0       	rjmp	.+4      	; 0x926 <EDIT_Tick+0x192>
					}
					else {
						LCD_WriteData('0');
 922:	80 e3       	ldi	r24, 0x30	; 48
 924:	90 dd       	rcall	.-1248   	; 0x446 <LCD_WriteData>
					}
					LCD_WriteData('m'); LCD_WriteData('s');
 926:	8d e6       	ldi	r24, 0x6D	; 109
 928:	8e dd       	rcall	.-1252   	; 0x446 <LCD_WriteData>
 92a:	83 e7       	ldi	r24, 0x73	; 115
 92c:	8c dd       	rcall	.-1256   	; 0x446 <LCD_WriteData>
 92e:	80 91 c0 00 	lds	r24, 0x00C0
				} 
				
				if (USART_HasReceived(0)) {
 932:	88 23       	and	r24, r24
 934:	0c f0       	brlt	.+2      	; 0x938 <EDIT_Tick+0x1a4>
 936:	68 c0       	rjmp	.+208    	; 0xa08 <EDIT_Tick+0x274>
					tempVal = USART_Receive(0);
 938:	80 e0       	ldi	r24, 0x00	; 0
 93a:	fa db       	rcall	.-2060   	; 0x130 <USART_Receive>
				
					if ((tempVal & 0x80) != 0) {
 93c:	88 23       	and	r24, r24
 93e:	2c f5       	brge	.+74     	; 0x98a <EDIT_Tick+0x1f6>
						currentLCDVal2 = tempVal & 0x7F;
 940:	c8 2f       	mov	r28, r24
 942:	cf 77       	andi	r28, 0x7F	; 127
 944:	c0 93 8a 01 	sts	0x018A, r28
					
						LCD_Cursor(18);
 948:	82 e1       	ldi	r24, 0x12	; 18
 94a:	66 dd       	rcall	.-1332   	; 0x418 <LCD_Cursor>
						LCD_WriteData('B'); LCD_WriteData('e'); LCD_WriteData('t'); 
 94c:	82 e4       	ldi	r24, 0x42	; 66
 94e:	7b dd       	rcall	.-1290   	; 0x446 <LCD_WriteData>
 950:	85 e6       	ldi	r24, 0x65	; 101
 952:	79 dd       	rcall	.-1294   	; 0x446 <LCD_WriteData>
 954:	84 e7       	ldi	r24, 0x74	; 116
 956:	77 dd       	rcall	.-1298   	; 0x446 <LCD_WriteData>
						LCD_WriteData('w'); LCD_WriteData('e'); LCD_WriteData('e'); 
 958:	87 e7       	ldi	r24, 0x77	; 119
 95a:	75 dd       	rcall	.-1302   	; 0x446 <LCD_WriteData>
 95c:	85 e6       	ldi	r24, 0x65	; 101
 95e:	73 dd       	rcall	.-1306   	; 0x446 <LCD_WriteData>
 960:	85 e6       	ldi	r24, 0x65	; 101
 962:	71 dd       	rcall	.-1310   	; 0x446 <LCD_WriteData>
						LCD_WriteData('n'); LCD_WriteData(':'); LCD_WriteData(' ');
 964:	8e e6       	ldi	r24, 0x6E	; 110
 966:	6f dd       	rcall	.-1314   	; 0x446 <LCD_WriteData>
 968:	8a e3       	ldi	r24, 0x3A	; 58
 96a:	6d dd       	rcall	.-1318   	; 0x446 <LCD_WriteData>
 96c:	80 e2       	ldi	r24, 0x20	; 32
 96e:	6b dd       	rcall	.-1322   	; 0x446 <LCD_WriteData>
						customWriteLCD(tempVal & 0x7F);
 970:	8c 2f       	mov	r24, r28
 972:	21 de       	rcall	.-958    	; 0x5b6 <customWriteLCD>
						if ((tempVal & 0x7F) == 0) {
 974:	c1 11       	cpse	r28, r1
 976:	03 c0       	rjmp	.+6      	; 0x97e <EDIT_Tick+0x1ea>
							LCD_WriteData(' ');
 978:	80 e2       	ldi	r24, 0x20	; 32
 97a:	65 dd       	rcall	.-1334   	; 0x446 <LCD_WriteData>
 97c:	02 c0       	rjmp	.+4      	; 0x982 <EDIT_Tick+0x1ee>
						} 
						else {
							LCD_WriteData('0');
 97e:	80 e3       	ldi	r24, 0x30	; 48
 980:	62 dd       	rcall	.-1340   	; 0x446 <LCD_WriteData>
						}
						LCD_WriteData('m'); LCD_WriteData('s');
 982:	8d e6       	ldi	r24, 0x6D	; 109
 984:	60 dd       	rcall	.-1344   	; 0x446 <LCD_WriteData>
 986:	83 e7       	ldi	r24, 0x73	; 115
 988:	5e dd       	rcall	.-1348   	; 0x446 <LCD_WriteData>
					}
				}
				if (!rowSelected) {
 98a:	80 91 87 01 	lds	r24, 0x0187
 98e:	81 11       	cpse	r24, r1
 990:	05 c0       	rjmp	.+10     	; 0x99c <EDIT_Tick+0x208>
					LCD_Cursor(16);
 992:	80 e1       	ldi	r24, 0x10	; 16
 994:	41 dd       	rcall	.-1406   	; 0x418 <LCD_Cursor>
 996:	83 e0       	ldi	r24, 0x03	; 3
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	3b c0       	rjmp	.+118    	; 0xa12 <EDIT_Tick+0x27e>
				} else if (rowSelected) {
					LCD_Cursor(32);
 99c:	80 e2       	ldi	r24, 0x20	; 32
 99e:	3c dd       	rcall	.-1416   	; 0x418 <LCD_Cursor>
 9a0:	83 e0       	ldi	r24, 0x03	; 3
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	36 c0       	rjmp	.+108    	; 0xa12 <EDIT_Tick+0x27e>
				}
			}
			break;	
			
		case EDIT_ChangePat:
			if (resetPressed) {
 9a6:	80 91 89 01 	lds	r24, 0x0189
 9aa:	88 23       	and	r24, r24
 9ac:	51 f1       	breq	.+84     	; 0xa02 <EDIT_Tick+0x26e>
				isEditing = 0;
 9ae:	10 92 8d 01 	sts	0x018D, r1
				isIdle = 1;
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	80 93 8c 01 	sts	0x018C, r24
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 9b8:	e0 ec       	ldi	r30, 0xC0	; 192
 9ba:	f0 e0       	ldi	r31, 0x00	; 0
 9bc:	80 81       	ld	r24, Z
				while (!USART_IsSendReady(0));
 9be:	85 ff       	sbrs	r24, 5
 9c0:	fd cf       	rjmp	.-6      	; 0x9bc <EDIT_Tick+0x228>
				USART_Send(0x07, 0);
 9c2:	60 e0       	ldi	r22, 0x00	; 0
 9c4:	87 e0       	ldi	r24, 0x07	; 7
 9c6:	a2 db       	rcall	.-2236   	; 0x10c <USART_Send>
				resetPressed = 0;
 9c8:	10 92 89 01 	sts	0x0189, r1
 9cc:	84 e0       	ldi	r24, 0x04	; 4
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	20 c0       	rjmp	.+64     	; 0xa12 <EDIT_Tick+0x27e>
	
	return state;
}

int EDIT_Tick(int state) {
	switch (state) {
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	1d c0       	rjmp	.+58     	; 0xa12 <EDIT_Tick+0x27e>
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	1a c0       	rjmp	.+52     	; 0xa12 <EDIT_Tick+0x27e>
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	17 c0       	rjmp	.+46     	; 0xa12 <EDIT_Tick+0x27e>
 9e4:	81 e0       	ldi	r24, 0x01	; 1
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	14 c0       	rjmp	.+40     	; 0xa12 <EDIT_Tick+0x27e>
 9ea:	82 e0       	ldi	r24, 0x02	; 2
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	11 c0       	rjmp	.+34     	; 0xa12 <EDIT_Tick+0x27e>
 9f0:	82 e0       	ldi	r24, 0x02	; 2
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e c0       	rjmp	.+28     	; 0xa12 <EDIT_Tick+0x27e>
 9f6:	82 e0       	ldi	r24, 0x02	; 2
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	0b c0       	rjmp	.+22     	; 0xa12 <EDIT_Tick+0x27e>
 9fc:	83 e0       	ldi	r24, 0x03	; 3
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	08 c0       	rjmp	.+16     	; 0xa12 <EDIT_Tick+0x27e>
 a02:	84 e0       	ldi	r24, 0x04	; 4
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	05 c0       	rjmp	.+10     	; 0xa12 <EDIT_Tick+0x27e>
							LCD_WriteData('0');
						}
						LCD_WriteData('m'); LCD_WriteData('s');
					}
				}
				if (!rowSelected) {
 a08:	80 91 87 01 	lds	r24, 0x0187
 a0c:	81 11       	cpse	r24, r1
 a0e:	c6 cf       	rjmp	.-116    	; 0x99c <EDIT_Tick+0x208>
 a10:	c0 cf       	rjmp	.-128    	; 0x992 <EDIT_Tick+0x1fe>
		default:
			break;
	}
	
	return state;
}
 a12:	cf 91       	pop	r28
 a14:	08 95       	ret

00000a16 <updateDuration>:

void updateDuration(unsigned char i) {
	if (i && currentLCDVal1 < 99) {
 a16:	88 23       	and	r24, r24
 a18:	a1 f0       	breq	.+40     	; 0xa42 <updateDuration+0x2c>
 a1a:	80 91 8f 01 	lds	r24, 0x018F
 a1e:	83 36       	cpi	r24, 0x63	; 99
 a20:	08 f0       	brcs	.+2      	; 0xa24 <updateDuration+0xe>
 a22:	32 c0       	rjmp	.+100    	; 0xa88 <updateDuration+0x72>
		currentLCDVal1++;
 a24:	8f 5f       	subi	r24, 0xFF	; 255
 a26:	80 93 8f 01 	sts	0x018F, r24
		LCD_Cursor(11);
 a2a:	8b e0       	ldi	r24, 0x0B	; 11
 a2c:	f5 dc       	rcall	.-1558   	; 0x418 <LCD_Cursor>
		customWriteLCD(currentLCDVal1);
 a2e:	80 91 8f 01 	lds	r24, 0x018F
 a32:	c1 dd       	rcall	.-1150   	; 0x5b6 <customWriteLCD>
		
		LCD_WriteData('0');
 a34:	80 e3       	ldi	r24, 0x30	; 48
 a36:	07 dd       	rcall	.-1522   	; 0x446 <LCD_WriteData>
		LCD_WriteData('m');
 a38:	8d e6       	ldi	r24, 0x6D	; 109
 a3a:	05 dd       	rcall	.-1526   	; 0x446 <LCD_WriteData>
		LCD_WriteData('s');
 a3c:	83 e7       	ldi	r24, 0x73	; 115
 a3e:	03 dd       	rcall	.-1530   	; 0x446 <LCD_WriteData>
 a40:	23 c0       	rjmp	.+70     	; 0xa88 <updateDuration+0x72>
	}
	
	else if (!i && currentLCDVal1 > 0) {
 a42:	80 91 8f 01 	lds	r24, 0x018F
 a46:	88 23       	and	r24, r24
 a48:	f9 f0       	breq	.+62     	; 0xa88 <updateDuration+0x72>
		currentLCDVal1--;
 a4a:	81 50       	subi	r24, 0x01	; 1
 a4c:	80 93 8f 01 	sts	0x018F, r24
		LCD_Cursor(11);
 a50:	8b e0       	ldi	r24, 0x0B	; 11
 a52:	e2 dc       	rcall	.-1596   	; 0x418 <LCD_Cursor>
		customWriteLCD(currentLCDVal1);
 a54:	80 91 8f 01 	lds	r24, 0x018F
 a58:	ae dd       	rcall	.-1188   	; 0x5b6 <customWriteLCD>
		
		if (currentLCDVal1 < 1) {
 a5a:	80 91 8f 01 	lds	r24, 0x018F
 a5e:	81 11       	cpse	r24, r1
 a60:	09 c0       	rjmp	.+18     	; 0xa74 <updateDuration+0x5e>
			LCD_WriteData(' ');
 a62:	80 e2       	ldi	r24, 0x20	; 32
 a64:	f0 dc       	rcall	.-1568   	; 0x446 <LCD_WriteData>
			LCD_WriteData('m');
 a66:	8d e6       	ldi	r24, 0x6D	; 109
 a68:	ee dc       	rcall	.-1572   	; 0x446 <LCD_WriteData>
			LCD_WriteData('s');
 a6a:	83 e7       	ldi	r24, 0x73	; 115
 a6c:	ec dc       	rcall	.-1576   	; 0x446 <LCD_WriteData>
			LCD_WriteData(' ');
 a6e:	80 e2       	ldi	r24, 0x20	; 32
 a70:	ea dc       	rcall	.-1580   	; 0x446 <LCD_WriteData>
 a72:	0a c0       	rjmp	.+20     	; 0xa88 <updateDuration+0x72>
		}
		
		else if (currentLCDVal1 <= 9) {
 a74:	8a 30       	cpi	r24, 0x0A	; 10
 a76:	40 f4       	brcc	.+16     	; 0xa88 <updateDuration+0x72>
			LCD_WriteData('0');
 a78:	80 e3       	ldi	r24, 0x30	; 48
 a7a:	e5 dc       	rcall	.-1590   	; 0x446 <LCD_WriteData>
			LCD_WriteData('m');
 a7c:	8d e6       	ldi	r24, 0x6D	; 109
 a7e:	e3 dc       	rcall	.-1594   	; 0x446 <LCD_WriteData>
			LCD_WriteData('s');
 a80:	83 e7       	ldi	r24, 0x73	; 115
 a82:	e1 dc       	rcall	.-1598   	; 0x446 <LCD_WriteData>
			LCD_WriteData(' ');
 a84:	80 e2       	ldi	r24, 0x20	; 32
 a86:	df dc       	rcall	.-1602   	; 0x446 <LCD_WriteData>
		}
	}
	
	if (!rowSelected) {
 a88:	80 91 87 01 	lds	r24, 0x0187
 a8c:	81 11       	cpse	r24, r1
 a8e:	03 c0       	rjmp	.+6      	; 0xa96 <updateDuration+0x80>
		LCD_Cursor(16);
 a90:	80 e1       	ldi	r24, 0x10	; 16
 a92:	c2 cc       	rjmp	.-1660   	; 0x418 <LCD_Cursor>
 a94:	08 95       	ret
		} else if (rowSelected) {
		LCD_Cursor(32);
 a96:	80 e2       	ldi	r24, 0x20	; 32
 a98:	bf cc       	rjmp	.-1666   	; 0x418 <LCD_Cursor>
 a9a:	08 95       	ret

00000a9c <updateBetween>:
	}
}

void updateBetween(unsigned char i) {
	if (i && currentLCDVal2 < 99) {
 a9c:	88 23       	and	r24, r24
 a9e:	a1 f0       	breq	.+40     	; 0xac8 <updateBetween+0x2c>
 aa0:	80 91 8a 01 	lds	r24, 0x018A
 aa4:	83 36       	cpi	r24, 0x63	; 99
 aa6:	08 f0       	brcs	.+2      	; 0xaaa <updateBetween+0xe>
 aa8:	32 c0       	rjmp	.+100    	; 0xb0e <updateBetween+0x72>
		currentLCDVal2++;
 aaa:	8f 5f       	subi	r24, 0xFF	; 255
 aac:	80 93 8a 01 	sts	0x018A, r24
		LCD_Cursor(27);
 ab0:	8b e1       	ldi	r24, 0x1B	; 27
 ab2:	b2 dc       	rcall	.-1692   	; 0x418 <LCD_Cursor>
		customWriteLCD(currentLCDVal2);
 ab4:	80 91 8a 01 	lds	r24, 0x018A
 ab8:	7e dd       	rcall	.-1284   	; 0x5b6 <customWriteLCD>
		
		LCD_WriteData('0');
 aba:	80 e3       	ldi	r24, 0x30	; 48
 abc:	c4 dc       	rcall	.-1656   	; 0x446 <LCD_WriteData>
		LCD_WriteData('m');
 abe:	8d e6       	ldi	r24, 0x6D	; 109
 ac0:	c2 dc       	rcall	.-1660   	; 0x446 <LCD_WriteData>
		LCD_WriteData('s');
 ac2:	83 e7       	ldi	r24, 0x73	; 115
 ac4:	c0 dc       	rcall	.-1664   	; 0x446 <LCD_WriteData>
 ac6:	23 c0       	rjmp	.+70     	; 0xb0e <updateBetween+0x72>
	}
	
	else if (!i && currentLCDVal2 > 0) {
 ac8:	80 91 8a 01 	lds	r24, 0x018A
 acc:	88 23       	and	r24, r24
 ace:	f9 f0       	breq	.+62     	; 0xb0e <updateBetween+0x72>
		currentLCDVal2--;
 ad0:	81 50       	subi	r24, 0x01	; 1
 ad2:	80 93 8a 01 	sts	0x018A, r24
		LCD_Cursor(27);
 ad6:	8b e1       	ldi	r24, 0x1B	; 27
 ad8:	9f dc       	rcall	.-1730   	; 0x418 <LCD_Cursor>
		customWriteLCD(currentLCDVal2);
 ada:	80 91 8a 01 	lds	r24, 0x018A
 ade:	6b dd       	rcall	.-1322   	; 0x5b6 <customWriteLCD>
		
		if (currentLCDVal2 < 1) {
 ae0:	80 91 8a 01 	lds	r24, 0x018A
 ae4:	81 11       	cpse	r24, r1
 ae6:	09 c0       	rjmp	.+18     	; 0xafa <updateBetween+0x5e>
			LCD_WriteData(' ');
 ae8:	80 e2       	ldi	r24, 0x20	; 32
 aea:	ad dc       	rcall	.-1702   	; 0x446 <LCD_WriteData>
			LCD_WriteData('m');
 aec:	8d e6       	ldi	r24, 0x6D	; 109
 aee:	ab dc       	rcall	.-1706   	; 0x446 <LCD_WriteData>
			LCD_WriteData('s');
 af0:	83 e7       	ldi	r24, 0x73	; 115
 af2:	a9 dc       	rcall	.-1710   	; 0x446 <LCD_WriteData>
			LCD_WriteData(' ');
 af4:	80 e2       	ldi	r24, 0x20	; 32
 af6:	a7 dc       	rcall	.-1714   	; 0x446 <LCD_WriteData>
 af8:	0a c0       	rjmp	.+20     	; 0xb0e <updateBetween+0x72>
		}
		
		else if (currentLCDVal2 <= 9) {
 afa:	8a 30       	cpi	r24, 0x0A	; 10
 afc:	40 f4       	brcc	.+16     	; 0xb0e <updateBetween+0x72>
			LCD_WriteData('0');
 afe:	80 e3       	ldi	r24, 0x30	; 48
 b00:	a2 dc       	rcall	.-1724   	; 0x446 <LCD_WriteData>
			LCD_WriteData('m');
 b02:	8d e6       	ldi	r24, 0x6D	; 109
 b04:	a0 dc       	rcall	.-1728   	; 0x446 <LCD_WriteData>
			LCD_WriteData('s');
 b06:	83 e7       	ldi	r24, 0x73	; 115
 b08:	9e dc       	rcall	.-1732   	; 0x446 <LCD_WriteData>
			LCD_WriteData(' ');
 b0a:	80 e2       	ldi	r24, 0x20	; 32
 b0c:	9c dc       	rcall	.-1736   	; 0x446 <LCD_WriteData>
		}
	}
	
	if (!rowSelected) {
 b0e:	80 91 87 01 	lds	r24, 0x0187
 b12:	81 11       	cpse	r24, r1
 b14:	03 c0       	rjmp	.+6      	; 0xb1c <updateBetween+0x80>
		LCD_Cursor(16);
 b16:	80 e1       	ldi	r24, 0x10	; 16
 b18:	7f cc       	rjmp	.-1794   	; 0x418 <LCD_Cursor>
 b1a:	08 95       	ret
		} else if (rowSelected) {
		LCD_Cursor(32);
 b1c:	80 e2       	ldi	r24, 0x20	; 32
 b1e:	7c cc       	rjmp	.-1800   	; 0x418 <LCD_Cursor>
 b20:	08 95       	ret

00000b22 <KP_Tick>:
    while (1) {
		// Do something
    }
}

int KP_Tick(int state) {
 b22:	cf 93       	push	r28
 b24:	df 93       	push	r29
 b26:	ec 01       	movw	r28, r24
 b28:	e0 ec       	ldi	r30, 0xC0	; 192
 b2a:	f0 e0       	ldi	r31, 0x00	; 0
 b2c:	90 81       	ld	r25, Z
	static unsigned char pressedButton;
	
	while(!USART_IsSendReady(0));
 b2e:	95 ff       	sbrs	r25, 5
 b30:	fd cf       	rjmp	.-6      	; 0xb2c <KP_Tick+0xa>
	
	switch (state) {
 b32:	c1 30       	cpi	r28, 0x01	; 1
 b34:	d1 05       	cpc	r29, r1
 b36:	51 f0       	breq	.+20     	; 0xb4c <KP_Tick+0x2a>
 b38:	c2 30       	cpi	r28, 0x02	; 2
 b3a:	d1 05       	cpc	r29, r1
 b3c:	09 f4       	brne	.+2      	; 0xb40 <KP_Tick+0x1e>
 b3e:	4b c1       	rjmp	.+662    	; 0xdd6 <KP_Tick+0x2b4>
 b40:	20 97       	sbiw	r28, 0x00	; 0
 b42:	09 f0       	breq	.+2      	; 0xb46 <KP_Tick+0x24>
 b44:	76 c1       	rjmp	.+748    	; 0xe32 <KP_Tick+0x310>
		case KP_SMStart:
		state = KP_Wait;
 b46:	c1 e0       	ldi	r28, 0x01	; 1
 b48:	d0 e0       	ldi	r29, 0x00	; 0
 b4a:	73 c1       	rjmp	.+742    	; 0xe32 <KP_Tick+0x310>
		break;
		
		case KP_Wait:
		pressedButton = GetKeypadKey();
 b4c:	03 db       	rcall	.-2554   	; 0x154 <GetKeypadKey>
 b4e:	80 93 52 01 	sts	0x0152, r24
		if (pressedButton == '\0') {
 b52:	88 23       	and	r24, r24
 b54:	09 f4       	brne	.+2      	; 0xb58 <KP_Tick+0x36>
 b56:	6d c1       	rjmp	.+730    	; 0xe32 <KP_Tick+0x310>
			state = KP_Wait;
		} 
		
		else if (pressedButton != '\0') {
			if (pressedButton == '4' && (isAlive || isEditing == 3)) { // Game Up
 b58:	84 33       	cpi	r24, 0x34	; 52
 b5a:	41 f5       	brne	.+80     	; 0xbac <KP_Tick+0x8a>
 b5c:	80 91 8e 01 	lds	r24, 0x018E
 b60:	81 11       	cpse	r24, r1
 b62:	04 c0       	rjmp	.+8      	; 0xb6c <KP_Tick+0x4a>
 b64:	80 91 8d 01 	lds	r24, 0x018D
 b68:	83 30       	cpi	r24, 0x03	; 3
 b6a:	31 f4       	brne	.+12     	; 0xb78 <KP_Tick+0x56>
				USART_Send(0x00, 0);
 b6c:	60 e0       	ldi	r22, 0x00	; 0
 b6e:	80 e0       	ldi	r24, 0x00	; 0
 b70:	cd da       	rcall	.-2662   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 b72:	c2 e0       	ldi	r28, 0x02	; 2
 b74:	d0 e0       	ldi	r29, 0x00	; 0
			state = KP_Wait;
		} 
		
		else if (pressedButton != '\0') {
			if (pressedButton == '4' && (isAlive || isEditing == 3)) { // Game Up
				USART_Send(0x00, 0);
 b76:	5d c1       	rjmp	.+698    	; 0xe32 <KP_Tick+0x310>
			}
			
			else if (pressedButton == '4' && isEditing == 2) { //edit up/down the time 
 b78:	82 30       	cpi	r24, 0x02	; 2
 b7a:	09 f0       	breq	.+2      	; 0xb7e <KP_Tick+0x5c>
 b7c:	31 c1       	rjmp	.+610    	; 0xde0 <KP_Tick+0x2be>
					if (rowSelected == 0) {
 b7e:	80 91 87 01 	lds	r24, 0x0187
 b82:	81 11       	cpse	r24, r1
 b84:	08 c0       	rjmp	.+16     	; 0xb96 <KP_Tick+0x74>
						USART_Send(0xF0, 0); 
 b86:	60 e0       	ldi	r22, 0x00	; 0
 b88:	80 ef       	ldi	r24, 0xF0	; 240
 b8a:	c0 da       	rcall	.-2688   	; 0x10c <USART_Send>
						updateDuration(1);
 b8c:	81 e0       	ldi	r24, 0x01	; 1
 b8e:	43 df       	rcall	.-378    	; 0xa16 <updateDuration>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 b90:	c2 e0       	ldi	r28, 0x02	; 2
 b92:	d0 e0       	ldi	r29, 0x00	; 0
 b94:	4e c1       	rjmp	.+668    	; 0xe32 <KP_Tick+0x310>
					if (rowSelected == 0) {
						USART_Send(0xF0, 0); 
						updateDuration(1);
					} 
					
					else if (rowSelected == 1) {
 b96:	81 30       	cpi	r24, 0x01	; 1
 b98:	09 f0       	breq	.+2      	; 0xb9c <KP_Tick+0x7a>
 b9a:	25 c1       	rjmp	.+586    	; 0xde6 <KP_Tick+0x2c4>
						USART_Send(0xE0, 0); 
 b9c:	60 e0       	ldi	r22, 0x00	; 0
 b9e:	80 ee       	ldi	r24, 0xE0	; 224
 ba0:	b5 da       	rcall	.-2710   	; 0x10c <USART_Send>
						
						updateBetween(1);
 ba2:	81 e0       	ldi	r24, 0x01	; 1
 ba4:	7b df       	rcall	.-266    	; 0xa9c <updateBetween>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 ba6:	c2 e0       	ldi	r28, 0x02	; 2
 ba8:	d0 e0       	ldi	r29, 0x00	; 0
 baa:	43 c1       	rjmp	.+646    	; 0xe32 <KP_Tick+0x310>
				
			}
			
				
			 
			else if (pressedButton == '2') { // Right
 bac:	82 33       	cpi	r24, 0x32	; 50
 bae:	b9 f4       	brne	.+46     	; 0xbde <KP_Tick+0xbc>
				if (isAlive || isEditing == 3) {	// Game Right
 bb0:	80 91 8e 01 	lds	r24, 0x018E
 bb4:	81 11       	cpse	r24, r1
 bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <KP_Tick+0x9e>
 bb8:	80 91 8d 01 	lds	r24, 0x018D
 bbc:	83 30       	cpi	r24, 0x03	; 3
 bbe:	31 f4       	brne	.+12     	; 0xbcc <KP_Tick+0xaa>
					USART_Send(0x01, 0);
 bc0:	60 e0       	ldi	r22, 0x00	; 0
 bc2:	81 e0       	ldi	r24, 0x01	; 1
 bc4:	a3 da       	rcall	.-2746   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 bc6:	c2 e0       	ldi	r28, 0x02	; 2
 bc8:	d0 e0       	ldi	r29, 0x00	; 0
			
				
			 
			else if (pressedButton == '2') { // Right
				if (isAlive || isEditing == 3) {	// Game Right
					USART_Send(0x01, 0);
 bca:	33 c1       	rjmp	.+614    	; 0xe32 <KP_Tick+0x310>
				}
				else if (isEditing) {			// Editing Right
 bcc:	88 23       	and	r24, r24
 bce:	09 f4       	brne	.+2      	; 0xbd2 <KP_Tick+0xb0>
 bd0:	0d c1       	rjmp	.+538    	; 0xdec <KP_Tick+0x2ca>
					USART_Send(0x08, 0);
 bd2:	60 e0       	ldi	r22, 0x00	; 0
 bd4:	88 e0       	ldi	r24, 0x08	; 8
 bd6:	9a da       	rcall	.-2764   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 bd8:	c2 e0       	ldi	r28, 0x02	; 2
 bda:	d0 e0       	ldi	r29, 0x00	; 0
 bdc:	2a c1       	rjmp	.+596    	; 0xe32 <KP_Tick+0x310>
				else if (isEditing) {			// Editing Right
					USART_Send(0x08, 0);
				}
			} 
				
			else if (pressedButton == '5' && (isAlive || isEditing == 3)) { // Game Down
 bde:	85 33       	cpi	r24, 0x35	; 53
 be0:	41 f5       	brne	.+80     	; 0xc32 <KP_Tick+0x110>
 be2:	80 91 8e 01 	lds	r24, 0x018E
 be6:	81 11       	cpse	r24, r1
 be8:	04 c0       	rjmp	.+8      	; 0xbf2 <KP_Tick+0xd0>
 bea:	80 91 8d 01 	lds	r24, 0x018D
 bee:	83 30       	cpi	r24, 0x03	; 3
 bf0:	31 f4       	brne	.+12     	; 0xbfe <KP_Tick+0xdc>
				USART_Send(0x02, 0);
 bf2:	60 e0       	ldi	r22, 0x00	; 0
 bf4:	82 e0       	ldi	r24, 0x02	; 2
 bf6:	8a da       	rcall	.-2796   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 bf8:	c2 e0       	ldi	r28, 0x02	; 2
 bfa:	d0 e0       	ldi	r29, 0x00	; 0
					USART_Send(0x08, 0);
				}
			} 
				
			else if (pressedButton == '5' && (isAlive || isEditing == 3)) { // Game Down
				USART_Send(0x02, 0);
 bfc:	1a c1       	rjmp	.+564    	; 0xe32 <KP_Tick+0x310>
			}
				
			else if (pressedButton == '5' && isEditing == 2) { // edit up/down the time
 bfe:	82 30       	cpi	r24, 0x02	; 2
 c00:	09 f0       	breq	.+2      	; 0xc04 <KP_Tick+0xe2>
 c02:	f7 c0       	rjmp	.+494    	; 0xdf2 <KP_Tick+0x2d0>
				if (rowSelected == 0) {
 c04:	80 91 87 01 	lds	r24, 0x0187
 c08:	81 11       	cpse	r24, r1
 c0a:	08 c0       	rjmp	.+16     	; 0xc1c <KP_Tick+0xfa>
					USART_Send(0xD0, 0);
 c0c:	60 e0       	ldi	r22, 0x00	; 0
 c0e:	80 ed       	ldi	r24, 0xD0	; 208
 c10:	7d da       	rcall	.-2822   	; 0x10c <USART_Send>
					updateDuration(0);
 c12:	80 e0       	ldi	r24, 0x00	; 0
 c14:	00 df       	rcall	.-512    	; 0xa16 <updateDuration>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 c16:	c2 e0       	ldi	r28, 0x02	; 2
 c18:	d0 e0       	ldi	r29, 0x00	; 0
 c1a:	0b c1       	rjmp	.+534    	; 0xe32 <KP_Tick+0x310>
				
			else if (pressedButton == '5' && isEditing == 2) { // edit up/down the time
				if (rowSelected == 0) {
					USART_Send(0xD0, 0);
					updateDuration(0);
				} else if (rowSelected == 1) {
 c1c:	81 30       	cpi	r24, 0x01	; 1
 c1e:	09 f0       	breq	.+2      	; 0xc22 <KP_Tick+0x100>
 c20:	eb c0       	rjmp	.+470    	; 0xdf8 <KP_Tick+0x2d6>
					USART_Send(0xC0, 0); 
 c22:	60 e0       	ldi	r22, 0x00	; 0
 c24:	80 ec       	ldi	r24, 0xC0	; 192
 c26:	72 da       	rcall	.-2844   	; 0x10c <USART_Send>
					updateBetween(0);
 c28:	80 e0       	ldi	r24, 0x00	; 0
 c2a:	38 df       	rcall	.-400    	; 0xa9c <updateBetween>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 c2c:	c2 e0       	ldi	r28, 0x02	; 2
 c2e:	d0 e0       	ldi	r29, 0x00	; 0
 c30:	00 c1       	rjmp	.+512    	; 0xe32 <KP_Tick+0x310>
					updateBetween(0);
				}
			}
				
				
			else if (pressedButton == '8') { // Game Left
 c32:	88 33       	cpi	r24, 0x38	; 56
 c34:	b9 f4       	brne	.+46     	; 0xc64 <KP_Tick+0x142>
				if (isAlive || isEditing == 3) {
 c36:	80 91 8e 01 	lds	r24, 0x018E
 c3a:	81 11       	cpse	r24, r1
 c3c:	04 c0       	rjmp	.+8      	; 0xc46 <KP_Tick+0x124>
 c3e:	80 91 8d 01 	lds	r24, 0x018D
 c42:	83 30       	cpi	r24, 0x03	; 3
 c44:	31 f4       	brne	.+12     	; 0xc52 <KP_Tick+0x130>
					USART_Send(0x03, 0);
 c46:	60 e0       	ldi	r22, 0x00	; 0
 c48:	83 e0       	ldi	r24, 0x03	; 3
 c4a:	60 da       	rcall	.-2880   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 c4c:	c2 e0       	ldi	r28, 0x02	; 2
 c4e:	d0 e0       	ldi	r29, 0x00	; 0
			}
				
				
			else if (pressedButton == '8') { // Game Left
				if (isAlive || isEditing == 3) {
					USART_Send(0x03, 0);
 c50:	f0 c0       	rjmp	.+480    	; 0xe32 <KP_Tick+0x310>
				} else if (isEditing) {			// Editing Left
 c52:	88 23       	and	r24, r24
 c54:	09 f4       	brne	.+2      	; 0xc58 <KP_Tick+0x136>
 c56:	d3 c0       	rjmp	.+422    	; 0xdfe <KP_Tick+0x2dc>
					USART_Send(0x09, 0);
 c58:	60 e0       	ldi	r22, 0x00	; 0
 c5a:	89 e0       	ldi	r24, 0x09	; 9
 c5c:	57 da       	rcall	.-2898   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 c5e:	c2 e0       	ldi	r28, 0x02	; 2
 c60:	d0 e0       	ldi	r29, 0x00	; 0
 c62:	e7 c0       	rjmp	.+462    	; 0xe32 <KP_Tick+0x310>
				} else if (isEditing) {			// Editing Left
					USART_Send(0x09, 0);
				}
			} 
			
			else if (pressedButton == 'A' && isIdle) { // Start Playing
 c64:	81 34       	cpi	r24, 0x41	; 65
 c66:	c9 f4       	brne	.+50     	; 0xc9a <KP_Tick+0x178>
 c68:	80 91 8c 01 	lds	r24, 0x018C
 c6c:	88 23       	and	r24, r24
 c6e:	59 f0       	breq	.+22     	; 0xc86 <KP_Tick+0x164>
				isAlive = 1;
 c70:	81 e0       	ldi	r24, 0x01	; 1
 c72:	80 93 8e 01 	sts	0x018E, r24
				isIdle = 0;
 c76:	10 92 8c 01 	sts	0x018C, r1
				USART_Send(0x04, 0);
 c7a:	60 e0       	ldi	r22, 0x00	; 0
 c7c:	84 e0       	ldi	r24, 0x04	; 4
 c7e:	46 da       	rcall	.-2932   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 c80:	c2 e0       	ldi	r28, 0x02	; 2
 c82:	d0 e0       	ldi	r29, 0x00	; 0
			} 
			
			else if (pressedButton == 'A' && isIdle) { // Start Playing
				isAlive = 1;
				isIdle = 0;
				USART_Send(0x04, 0);
 c84:	d6 c0       	rjmp	.+428    	; 0xe32 <KP_Tick+0x310>
			}
			
			else if (pressedButton == 'A' && isAlive == 2) {
 c86:	80 91 8e 01 	lds	r24, 0x018E
 c8a:	82 30       	cpi	r24, 0x02	; 2
 c8c:	09 f0       	breq	.+2      	; 0xc90 <KP_Tick+0x16e>
 c8e:	ba c0       	rjmp	.+372    	; 0xe04 <KP_Tick+0x2e2>
				isAlive = 0;
 c90:	10 92 8e 01 	sts	0x018E, r1
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 c94:	c2 e0       	ldi	r28, 0x02	; 2
 c96:	d0 e0       	ldi	r29, 0x00	; 0
				isIdle = 0;
				USART_Send(0x04, 0);
			}
			
			else if (pressedButton == 'A' && isAlive == 2) {
				isAlive = 0;
 c98:	cc c0       	rjmp	.+408    	; 0xe32 <KP_Tick+0x310>
			}
			
			else if (pressedButton == 'B') {
 c9a:	82 34       	cpi	r24, 0x42	; 66
 c9c:	c1 f5       	brne	.+112    	; 0xd0e <KP_Tick+0x1ec>
				if (isIdle) {		// Start Editing
 c9e:	80 91 8c 01 	lds	r24, 0x018C
 ca2:	88 23       	and	r24, r24
 ca4:	59 f0       	breq	.+22     	; 0xcbc <KP_Tick+0x19a>
					isEditing = 1;
 ca6:	81 e0       	ldi	r24, 0x01	; 1
 ca8:	80 93 8d 01 	sts	0x018D, r24
					isIdle = 0;			
 cac:	10 92 8c 01 	sts	0x018C, r1
					USART_Send(0x06, 0);
 cb0:	60 e0       	ldi	r22, 0x00	; 0
 cb2:	86 e0       	ldi	r24, 0x06	; 6
 cb4:	2b da       	rcall	.-2986   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 cb6:	c2 e0       	ldi	r28, 0x02	; 2
 cb8:	d0 e0       	ldi	r29, 0x00	; 0
 cba:	bb c0       	rjmp	.+374    	; 0xe32 <KP_Tick+0x310>
				if (isIdle) {		// Start Editing
					isEditing = 1;
					isIdle = 0;			
					USART_Send(0x06, 0);
				} 
				else if (isEditing == 1) {	// stop Editing 
 cbc:	80 91 8d 01 	lds	r24, 0x018D
 cc0:	81 30       	cpi	r24, 0x01	; 1
 cc2:	51 f4       	brne	.+20     	; 0xcd8 <KP_Tick+0x1b6>
					isEditing = 0;
 cc4:	10 92 8d 01 	sts	0x018D, r1
					isIdle = 1;	
 cc8:	80 93 8c 01 	sts	0x018C, r24
					USART_Send(0x07, 0);
 ccc:	60 e0       	ldi	r22, 0x00	; 0
 cce:	87 e0       	ldi	r24, 0x07	; 7
 cd0:	1d da       	rcall	.-3014   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 cd2:	c2 e0       	ldi	r28, 0x02	; 2
 cd4:	d0 e0       	ldi	r29, 0x00	; 0
 cd6:	ad c0       	rjmp	.+346    	; 0xe32 <KP_Tick+0x310>
				else if (isEditing == 1) {	// stop Editing 
					isEditing = 0;
					isIdle = 1;	
					USART_Send(0x07, 0);
				} 
				else if (isEditing == 2) {	// go back from pattern screen to regular editing screen
 cd8:	82 30       	cpi	r24, 0x02	; 2
 cda:	59 f4       	brne	.+22     	; 0xcf2 <KP_Tick+0x1d0>
					isEditing = 1;
 cdc:	81 e0       	ldi	r24, 0x01	; 1
 cde:	80 93 8d 01 	sts	0x018D, r24
					isIdle = 0;
 ce2:	10 92 8c 01 	sts	0x018C, r1
					USART_Send(0x0F, 0);
 ce6:	60 e0       	ldi	r22, 0x00	; 0
 ce8:	8f e0       	ldi	r24, 0x0F	; 15
 cea:	10 da       	rcall	.-3040   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 cec:	c2 e0       	ldi	r28, 0x02	; 2
 cee:	d0 e0       	ldi	r29, 0x00	; 0
 cf0:	a0 c0       	rjmp	.+320    	; 0xe32 <KP_Tick+0x310>
				else if (isEditing == 2) {	// go back from pattern screen to regular editing screen
					isEditing = 1;
					isIdle = 0;
					USART_Send(0x0F, 0);
				}
				else if (isEditing == 3) {
 cf2:	83 30       	cpi	r24, 0x03	; 3
 cf4:	09 f0       	breq	.+2      	; 0xcf8 <KP_Tick+0x1d6>
 cf6:	89 c0       	rjmp	.+274    	; 0xe0a <KP_Tick+0x2e8>
					isEditing = 2;
 cf8:	82 e0       	ldi	r24, 0x02	; 2
 cfa:	80 93 8d 01 	sts	0x018D, r24
					isIdle = 0;
 cfe:	10 92 8c 01 	sts	0x018C, r1
					USART_Send(0x30, 0);
 d02:	60 e0       	ldi	r22, 0x00	; 0
 d04:	80 e3       	ldi	r24, 0x30	; 48
 d06:	02 da       	rcall	.-3068   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 d08:	c2 e0       	ldi	r28, 0x02	; 2
 d0a:	d0 e0       	ldi	r29, 0x00	; 0
 d0c:	92 c0       	rjmp	.+292    	; 0xe32 <KP_Tick+0x310>
					isEditing = 2;
					isIdle = 0;
					USART_Send(0x30, 0);
				}
			} 
			else if (pressedButton == 'D') {
 d0e:	84 34       	cpi	r24, 0x44	; 68
 d10:	79 f4       	brne	.+30     	; 0xd30 <KP_Tick+0x20e>
				if (isAlive || isEditing) 
 d12:	80 91 8e 01 	lds	r24, 0x018E
 d16:	81 11       	cpse	r24, r1
 d18:	05 c0       	rjmp	.+10     	; 0xd24 <KP_Tick+0x202>
 d1a:	80 91 8d 01 	lds	r24, 0x018D
 d1e:	88 23       	and	r24, r24
 d20:	09 f4       	brne	.+2      	; 0xd24 <KP_Tick+0x202>
 d22:	76 c0       	rjmp	.+236    	; 0xe10 <KP_Tick+0x2ee>
					resetPressed = 1;
 d24:	81 e0       	ldi	r24, 0x01	; 1
 d26:	80 93 89 01 	sts	0x0189, r24
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 d2a:	c2 e0       	ldi	r28, 0x02	; 2
 d2c:	d0 e0       	ldi	r29, 0x00	; 0
 d2e:	81 c0       	rjmp	.+258    	; 0xe32 <KP_Tick+0x310>
			} 
			else if (pressedButton == 'D') {
				if (isAlive || isEditing) 
					resetPressed = 1;
			} 
			else if (pressedButton == '*') {	// go from regular editing screen to pattern screen
 d30:	8a 32       	cpi	r24, 0x2A	; 42
 d32:	29 f5       	brne	.+74     	; 0xd7e <KP_Tick+0x25c>
				if (isEditing == 1) {
 d34:	80 91 8d 01 	lds	r24, 0x018D
 d38:	81 30       	cpi	r24, 0x01	; 1
 d3a:	59 f4       	brne	.+22     	; 0xd52 <KP_Tick+0x230>
					isEditing = 2;
 d3c:	82 e0       	ldi	r24, 0x02	; 2
 d3e:	80 93 8d 01 	sts	0x018D, r24
					isIdle = 0;
 d42:	10 92 8c 01 	sts	0x018C, r1
					USART_Send(0x0E, 0);
 d46:	60 e0       	ldi	r22, 0x00	; 0
 d48:	8e e0       	ldi	r24, 0x0E	; 14
 d4a:	e0 d9       	rcall	.-3136   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 d4c:	c2 e0       	ldi	r28, 0x02	; 2
 d4e:	d0 e0       	ldi	r29, 0x00	; 0
 d50:	70 c0       	rjmp	.+224    	; 0xe32 <KP_Tick+0x310>
					isEditing = 2;
					isIdle = 0;
					USART_Send(0x0E, 0);
				} 
				
				else if (isEditing == 2) {
 d52:	82 30       	cpi	r24, 0x02	; 2
 d54:	59 f4       	brne	.+22     	; 0xd6c <KP_Tick+0x24a>
					isEditing = 3;
 d56:	83 e0       	ldi	r24, 0x03	; 3
 d58:	80 93 8d 01 	sts	0x018D, r24
					isIdle = 0;
 d5c:	10 92 8c 01 	sts	0x018C, r1
					USART_Send(0x0E, 0);
 d60:	60 e0       	ldi	r22, 0x00	; 0
 d62:	8e e0       	ldi	r24, 0x0E	; 14
 d64:	d3 d9       	rcall	.-3162   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 d66:	c2 e0       	ldi	r28, 0x02	; 2
 d68:	d0 e0       	ldi	r29, 0x00	; 0
 d6a:	63 c0       	rjmp	.+198    	; 0xe32 <KP_Tick+0x310>
					isEditing = 3;
					isIdle = 0;
					USART_Send(0x0E, 0);
				}
				
				else if (isEditing == 3) {
 d6c:	83 30       	cpi	r24, 0x03	; 3
 d6e:	09 f0       	breq	.+2      	; 0xd72 <KP_Tick+0x250>
 d70:	52 c0       	rjmp	.+164    	; 0xe16 <KP_Tick+0x2f4>
					USART_Send(0x40, 0);
 d72:	60 e0       	ldi	r22, 0x00	; 0
 d74:	80 e4       	ldi	r24, 0x40	; 64
 d76:	ca d9       	rcall	.-3180   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 d78:	c2 e0       	ldi	r28, 0x02	; 2
 d7a:	d0 e0       	ldi	r29, 0x00	; 0
 d7c:	5a c0       	rjmp	.+180    	; 0xe32 <KP_Tick+0x310>
				else if (isEditing == 3) {
					USART_Send(0x40, 0);
				}
			}
			
			else if (pressedButton == '0') {
 d7e:	80 33       	cpi	r24, 0x30	; 48
 d80:	d1 f4       	brne	.+52     	; 0xdb6 <KP_Tick+0x294>
				if (isEditing == 2) {
 d82:	80 91 8d 01 	lds	r24, 0x018D
 d86:	82 30       	cpi	r24, 0x02	; 2
 d88:	09 f0       	breq	.+2      	; 0xd8c <KP_Tick+0x26a>
 d8a:	48 c0       	rjmp	.+144    	; 0xe1c <KP_Tick+0x2fa>
					if (rowSelected == 1) {
 d8c:	80 91 87 01 	lds	r24, 0x0187
 d90:	81 30       	cpi	r24, 0x01	; 1
 d92:	39 f4       	brne	.+14     	; 0xda2 <KP_Tick+0x280>
						rowSelected = 0;
 d94:	10 92 87 01 	sts	0x0187, r1
						LCD_Cursor(16);
 d98:	80 e1       	ldi	r24, 0x10	; 16
 d9a:	3e db       	rcall	.-2436   	; 0x418 <LCD_Cursor>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 d9c:	c2 e0       	ldi	r28, 0x02	; 2
 d9e:	d0 e0       	ldi	r29, 0x00	; 0
 da0:	48 c0       	rjmp	.+144    	; 0xe32 <KP_Tick+0x310>
			else if (pressedButton == '0') {
				if (isEditing == 2) {
					if (rowSelected == 1) {
						rowSelected = 0;
						LCD_Cursor(16);
					} else if (rowSelected == 0) {
 da2:	81 11       	cpse	r24, r1
 da4:	3e c0       	rjmp	.+124    	; 0xe22 <KP_Tick+0x300>
						rowSelected = 1;
 da6:	81 e0       	ldi	r24, 0x01	; 1
 da8:	80 93 87 01 	sts	0x0187, r24
						LCD_Cursor(32);
 dac:	80 e2       	ldi	r24, 0x20	; 32
 dae:	34 db       	rcall	.-2456   	; 0x418 <LCD_Cursor>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 db0:	c2 e0       	ldi	r28, 0x02	; 2
 db2:	d0 e0       	ldi	r29, 0x00	; 0
 db4:	3e c0       	rjmp	.+124    	; 0xe32 <KP_Tick+0x310>
						LCD_Cursor(32);
					}
				}
			} 
			
			else if (pressedButton == '7') {
 db6:	87 33       	cpi	r24, 0x37	; 55
 db8:	31 f4       	brne	.+12     	; 0xdc6 <KP_Tick+0x2a4>
				USART_Send(0x50, 0);
 dba:	60 e0       	ldi	r22, 0x00	; 0
 dbc:	80 e5       	ldi	r24, 0x50	; 80
 dbe:	a6 d9       	rcall	.-3252   	; 0x10c <USART_Send>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 dc0:	c2 e0       	ldi	r28, 0x02	; 2
 dc2:	d0 e0       	ldi	r29, 0x00	; 0
 dc4:	36 c0       	rjmp	.+108    	; 0xe32 <KP_Tick+0x310>
			
			else if (pressedButton == '7') {
				USART_Send(0x50, 0);
			}
			
			else if (pressedButton == '#') {
 dc6:	83 32       	cpi	r24, 0x23	; 35
 dc8:	79 f5       	brne	.+94     	; 0xe28 <KP_Tick+0x306>
				USART_Send(0x60, 0);
 dca:	60 e0       	ldi	r22, 0x00	; 0
 dcc:	80 e6       	ldi	r24, 0x60	; 96
 dce:	9e d9       	rcall	.-3268   	; 0x10c <USART_Send>
			}
			
			state = KP_Pressed;
 dd0:	c2 e0       	ldi	r28, 0x02	; 2
 dd2:	d0 e0       	ldi	r29, 0x00	; 0
 dd4:	2e c0       	rjmp	.+92     	; 0xe32 <KP_Tick+0x310>
		}
		break;
		
		case KP_Pressed:
			if (GetKeypadKey() == '\0') {
 dd6:	be d9       	rcall	.-3204   	; 0x154 <GetKeypadKey>
 dd8:	88 23       	and	r24, r24
 dda:	49 f1       	breq	.+82     	; 0xe2e <KP_Tick+0x30c>
				state = KP_Wait;
				} else if (GetKeypadKey() != '\0') {
 ddc:	bb d9       	rcall	.-3210   	; 0x154 <GetKeypadKey>
 dde:	29 c0       	rjmp	.+82     	; 0xe32 <KP_Tick+0x310>
			
			else if (pressedButton == '#') {
				USART_Send(0x60, 0);
			}
			
			state = KP_Pressed;
 de0:	c2 e0       	ldi	r28, 0x02	; 2
 de2:	d0 e0       	ldi	r29, 0x00	; 0
 de4:	26 c0       	rjmp	.+76     	; 0xe32 <KP_Tick+0x310>
 de6:	c2 e0       	ldi	r28, 0x02	; 2
 de8:	d0 e0       	ldi	r29, 0x00	; 0
 dea:	23 c0       	rjmp	.+70     	; 0xe32 <KP_Tick+0x310>
 dec:	c2 e0       	ldi	r28, 0x02	; 2
 dee:	d0 e0       	ldi	r29, 0x00	; 0
 df0:	20 c0       	rjmp	.+64     	; 0xe32 <KP_Tick+0x310>
 df2:	c2 e0       	ldi	r28, 0x02	; 2
 df4:	d0 e0       	ldi	r29, 0x00	; 0
 df6:	1d c0       	rjmp	.+58     	; 0xe32 <KP_Tick+0x310>
 df8:	c2 e0       	ldi	r28, 0x02	; 2
 dfa:	d0 e0       	ldi	r29, 0x00	; 0
 dfc:	1a c0       	rjmp	.+52     	; 0xe32 <KP_Tick+0x310>
 dfe:	c2 e0       	ldi	r28, 0x02	; 2
 e00:	d0 e0       	ldi	r29, 0x00	; 0
 e02:	17 c0       	rjmp	.+46     	; 0xe32 <KP_Tick+0x310>
 e04:	c2 e0       	ldi	r28, 0x02	; 2
 e06:	d0 e0       	ldi	r29, 0x00	; 0
 e08:	14 c0       	rjmp	.+40     	; 0xe32 <KP_Tick+0x310>
 e0a:	c2 e0       	ldi	r28, 0x02	; 2
 e0c:	d0 e0       	ldi	r29, 0x00	; 0
 e0e:	11 c0       	rjmp	.+34     	; 0xe32 <KP_Tick+0x310>
 e10:	c2 e0       	ldi	r28, 0x02	; 2
 e12:	d0 e0       	ldi	r29, 0x00	; 0
 e14:	0e c0       	rjmp	.+28     	; 0xe32 <KP_Tick+0x310>
 e16:	c2 e0       	ldi	r28, 0x02	; 2
 e18:	d0 e0       	ldi	r29, 0x00	; 0
 e1a:	0b c0       	rjmp	.+22     	; 0xe32 <KP_Tick+0x310>
 e1c:	c2 e0       	ldi	r28, 0x02	; 2
 e1e:	d0 e0       	ldi	r29, 0x00	; 0
 e20:	08 c0       	rjmp	.+16     	; 0xe32 <KP_Tick+0x310>
 e22:	c2 e0       	ldi	r28, 0x02	; 2
 e24:	d0 e0       	ldi	r29, 0x00	; 0
 e26:	05 c0       	rjmp	.+10     	; 0xe32 <KP_Tick+0x310>
 e28:	c2 e0       	ldi	r28, 0x02	; 2
 e2a:	d0 e0       	ldi	r29, 0x00	; 0
 e2c:	02 c0       	rjmp	.+4      	; 0xe32 <KP_Tick+0x310>
		}
		break;
		
		case KP_Pressed:
			if (GetKeypadKey() == '\0') {
				state = KP_Wait;
 e2e:	c1 e0       	ldi	r28, 0x01	; 1
 e30:	d0 e0       	ldi	r29, 0x00	; 0
		default:
		break;
	}
	
	return state;
}
 e32:	ce 01       	movw	r24, r28
 e34:	df 91       	pop	r29
 e36:	cf 91       	pop	r28
 e38:	08 95       	ret

00000e3a <_exit>:
 e3a:	f8 94       	cli

00000e3c <__stop_program>:
 e3c:	ff cf       	rjmp	.-2      	; 0xe3c <__stop_program>
